
fft_process.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa3c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008890  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801356c  0801356c  0002356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013570  08013570  00023570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  24000000  08013574  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000dcb4  24000190  08013700  00030190  2**3
                  ALLOC
  7 ._user_heap_stack 00001404  2400de44  08013700  0003de44  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002199c  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000046c9  00000000  00000000  00051b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001540  00000000  00000000  00056220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001400  00000000  00000000  00057760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ad8b  00000000  00000000  00058b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e476  00000000  00000000  000938eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00163791  00000000  00000000  000b1d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c5  00000000  00000000  002154f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005abc  00000000  00000000  002155b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00003245  00000000  00000000  0021b074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000190 	.word	0x24000190
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800acc4 	.word	0x0800acc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000194 	.word	0x24000194
 80002dc:	0800acc4 	.word	0x0800acc4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <MX_GPIO_Init+0xcc>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a2b      	ldr	r2, [pc, #172]	; (800044c <MX_GPIO_Init+0xcc>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xcc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xcc>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xcc>)
 80003bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_GPIO_Init+0xcc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_GPIO_Init+0xcc>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_GPIO_Init+0xcc>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xcc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_Pin|green_Pin|blue_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2107      	movs	r1, #7
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_GPIO_Init+0xd0>)
 80003f6:	f000 fe0f 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000400:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <MX_GPIO_Init+0xd0>)
 8000412:	f000 fc51 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = red_Pin|green_Pin|blue_Pin;
 8000416:	2307      	movs	r3, #7
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <MX_GPIO_Init+0xd0>)
 800042e:	f000 fc43 	bl	8000cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f000 fc09 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f000 fc20 	bl	8000c82 <HAL_NVIC_EnableIRQ>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024400 	.word	0x58024400
 8000450:	58020800 	.word	0x58020800

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fa5c 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f80c 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ff8e 	bl	8000380 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000464:	f008 fb9c 	bl	8008ba0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000468:	f000 f9b6 	bl	80007d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800046c:	4801      	ldr	r0, [pc, #4]	; (8000474 <main+0x20>)
 800046e:	f004 f9b5 	bl	80047dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000472:	e7fe      	b.n	8000472 <main+0x1e>
 8000474:	240001b0 	.word	0x240001b0

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09c      	sub	sp, #112	; 0x70
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	224c      	movs	r2, #76	; 0x4c
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f009 ff78 	bl	800a37c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f009 ff72 	bl	800a37c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000498:	2002      	movs	r0, #2
 800049a:	f002 f8c5 	bl	8002628 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <SystemClock_Config+0xf0>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a30      	ldr	r2, [pc, #192]	; (8000568 <SystemClock_Config+0xf0>)
 80004a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <SystemClock_Config+0xf0>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	4b2c      	ldr	r3, [pc, #176]	; (800056c <SystemClock_Config+0xf4>)
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	4a2b      	ldr	r2, [pc, #172]	; (800056c <SystemClock_Config+0xf4>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c4:	4b29      	ldr	r3, [pc, #164]	; (800056c <SystemClock_Config+0xf4>)
 80004c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004d0:	bf00      	nop
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <SystemClock_Config+0xf0>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004de:	d1f8      	bne.n	80004d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004e0:	2321      	movs	r3, #33	; 0x21
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ea:	2301      	movs	r3, #1
 80004ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f2:	2302      	movs	r3, #2
 80004f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80004fa:	2350      	movs	r3, #80	; 0x50
 80004fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004fe:	2302      	movs	r3, #2
 8000500:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000502:	2302      	movs	r3, #2
 8000504:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000506:	2302      	movs	r3, #2
 8000508:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800050a:	230c      	movs	r3, #12
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800050e:	2300      	movs	r3, #0
 8000510:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051a:	4618      	mov	r0, r3
 800051c:	f002 f8ce 	bl	80026bc <HAL_RCC_OscConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000526:	f000 f823 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052a:	233f      	movs	r3, #63	; 0x3f
 800052c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052e:	2303      	movs	r3, #3
 8000530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000536:	2308      	movs	r3, #8
 8000538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800053a:	2340      	movs	r3, #64	; 0x40
 800053c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800053e:	2340      	movs	r3, #64	; 0x40
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2104      	movs	r1, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fce1 	bl	8002f18 <HAL_RCC_ClockConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800055c:	f000 f808 	bl	8000570 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	3770      	adds	r7, #112	; 0x70
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	58024800 	.word	0x58024800
 800056c:	58000400 	.word	0x58000400

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x30>)
 8000584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_MspInit+0x30>)
 800058a:	f043 0302 	orr.w	r3, r3, #2
 800058e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_MspInit+0x30>)
 8000594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	58024400 	.word	0x58024400

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f9fc 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <TIM2_IRQHandler+0x10>)
 800060a:	f004 f95f 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	240001b0 	.word	0x240001b0

08000618 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 800061c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000620:	f000 fd13 	bl	800104a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <OTG_FS_IRQHandler+0x10>)
 800062e:	f000 fe7d 	bl	800132c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2400d708 	.word	0x2400d708

0800063c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064c:	d101      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0x16>
	{
		//CDC_Transmit_FS((uint8_t *)UserRxBufferFS, 100);
		//int16_t *test = (int16_t *)UserRxBufferFS;
		//usb_debug("%d",*test);
        fft_start();
 800064e:	f006 f9cd 	bl	80069ec <fft_start>
		//usb_debug("\r\n");
	}
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f009 fe3e 	bl	800a30c <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	24080000 	.word	0x24080000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	240001ac 	.word	0x240001ac
 80006c4:	2400de48 	.word	0x2400de48

080006c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <SystemInit+0xe4>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a36      	ldr	r2, [pc, #216]	; (80007ac <SystemInit+0xe4>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <SystemInit+0xe8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <SystemInit+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <SystemInit+0xe8>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <SystemInit+0xec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <SystemInit+0xec>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <SystemInit+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <SystemInit+0xec>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4929      	ldr	r1, [pc, #164]	; (80007b4 <SystemInit+0xec>)
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemInit+0xf0>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <SystemInit+0xe8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemInit+0xe8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0xe8>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SystemInit+0xec>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <SystemInit+0xec>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <SystemInit+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <SystemInit+0xec>)
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <SystemInit+0xf4>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <SystemInit+0xec>)
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <SystemInit+0xf8>)
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <SystemInit+0xec>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <SystemInit+0xfc>)
 8000754:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <SystemInit+0xec>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0xec>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <SystemInit+0xfc>)
 8000760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <SystemInit+0xec>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <SystemInit+0xec>)
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <SystemInit+0xfc>)
 800076c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0xec>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0xec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <SystemInit+0xec>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <SystemInit+0xec>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <SystemInit+0x100>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <SystemInit+0x104>)
 800078c:	4013      	ands	r3, r2
 800078e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000792:	d202      	bcs.n	800079a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SystemInit+0x108>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <SystemInit+0x10c>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	52002000 	.word	0x52002000
 80007b4:	58024400 	.word	0x58024400
 80007b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007bc:	02020200 	.word	0x02020200
 80007c0:	01ff0000 	.word	0x01ff0000
 80007c4:	01010280 	.word	0x01010280
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_TIM2_Init+0x98>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_TIM2_Init+0x98>)
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_TIM2_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM2_Init+0x98>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_TIM2_Init+0x98>)
 8000820:	f003 ff84 	bl	800472c <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800082a:	f7ff fea1 	bl	8000570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0x98>)
 800083c:	f004 f966 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000846:	f7ff fe93 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_TIM2_Init+0x98>)
 8000858:	f004 fbba 	bl	8004fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000862:	f7ff fe85 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	240001b0 	.word	0x240001b0

08000874 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000884:	d116      	bne.n	80008b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_TIM_Base_MspInit+0x48>)
 8000888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_TIM_Base_MspInit+0x48>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_TIM_Base_MspInit+0x48>)
 8000898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	201c      	movs	r0, #28
 80008aa:	f000 f9d0 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ae:	201c      	movs	r0, #28
 80008b0:	f000 f9e7 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58024400 	.word	0x58024400

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f7ff ff00 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f009 fd13 	bl	800a318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdaf 	bl	8000454 <main>
  bx  lr
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000900:	2400018c 	.word	0x2400018c
  ldr r2, =_sidata
 8000904:	08013574 	.word	0x08013574
  ldr r2, =_sbss
 8000908:	24000190 	.word	0x24000190
  ldr r4, =_ebss
 800090c:	2400de44 	.word	0x2400de44

08000910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC3_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f98c 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000920:	f002 fcb0 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8000924:	4602      	mov	r2, r0
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_Init+0x68>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4913      	ldr	r1, [pc, #76]	; (8000980 <HAL_Init+0x6c>)
 8000932:	5ccb      	ldrb	r3, [r1, r3]
 8000934:	f003 031f 	and.w	r3, r3, #31
 8000938:	fa22 f303 	lsr.w	r3, r2, r3
 800093c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_Init+0x68>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_Init+0x6c>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_Init+0x70>)
 8000956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_Init+0x74>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f814 	bl	800098c <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e002      	b.n	8000974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800096e:	f7ff fe05 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58024400 	.word	0x58024400
 8000980:	0800ad28 	.word	0x0800ad28
 8000984:	24000004 	.word	0x24000004
 8000988:	24000000 	.word	0x24000000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e021      	b.n	80009e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_InitTick+0x64>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_InitTick+0x60>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f971 	bl	8000c9e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f93b 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x68>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2400000c 	.word	0x2400000c
 80009f0:	24000000 	.word	0x24000000
 80009f4:	24000008 	.word	0x24000008

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400000c 	.word	0x2400000c
 8000a1c:	240001fc 	.word	0x240001fc

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	240001fc 	.word	0x240001fc

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2400000c 	.word	0x2400000c

08000a80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetREVID+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	0c1b      	lsrs	r3, r3, #16
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	5c001000 	.word	0x5c001000

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0000 	.word	0x05fa0000

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff40 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff90 	bl	8000b8c <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5f 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff33 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa4 	bl	8000bf4 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cc6:	4b89      	ldr	r3, [pc, #548]	; (8000eec <HAL_GPIO_Init+0x234>)
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cca:	e194      	b.n	8000ff6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8186 	beq.w	8000ff0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x44>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	69b9      	ldr	r1, [r7, #24]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80e0 	beq.w	8000ff0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e36:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_GPIO_Init+0x23c>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_GPIO_Init+0x240>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d052      	beq.n	8000f20 <HAL_GPIO_Init+0x268>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x244>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d031      	beq.n	8000ee6 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_GPIO_Init+0x248>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d02b      	beq.n	8000ee2 <HAL_GPIO_Init+0x22a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_GPIO_Init+0x24c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d025      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_GPIO_Init+0x250>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01f      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_GPIO_Init+0x254>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <HAL_GPIO_Init+0x258>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_GPIO_Init+0x25c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x260>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_GPIO_Init+0x264>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000ec2:	2309      	movs	r3, #9
 8000ec4:	e02d      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	e02b      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e029      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e027      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	e025      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e023      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e021      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e01f      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e01d      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e01b      	b.n	8000f22 <HAL_GPIO_Init+0x26a>
 8000eea:	bf00      	nop
 8000eec:	58000080 	.word	0x58000080
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58000400 	.word	0x58000400
 8000ef8:	58020000 	.word	0x58020000
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020800 	.word	0x58020800
 8000f04:	58020c00 	.word	0x58020c00
 8000f08:	58021000 	.word	0x58021000
 8000f0c:	58021400 	.word	0x58021400
 8000f10:	58021800 	.word	0x58021800
 8000f14:	58021c00 	.word	0x58021c00
 8000f18:	58022000 	.word	0x58022000
 8000f1c:	58022400 	.word	0x58022400
 8000f20:	2300      	movs	r3, #0
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f32:	4938      	ldr	r1, [pc, #224]	; (8001014 <HAL_GPIO_Init+0x35c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f ae63 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3724      	adds	r7, #36	; 0x24
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58000400 	.word	0x58000400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fae3 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800107e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001080:	b08f      	sub	sp, #60	; 0x3c
 8001082:	af0a      	add	r7, sp, #40	; 0x28
 8001084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e116      	b.n	80012be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f008 f884 	bl	80091b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f94b 	bl	800536a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	687e      	ldr	r6, [r7, #4]
 80010dc:	466d      	mov	r5, sp
 80010de:	f106 0410 	add.w	r4, r6, #16
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f2:	1d33      	adds	r3, r6, #4
 80010f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f004 f816 	bl	8005128 <USB_CoreInit>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0d7      	b.n	80012be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f004 f939 	bl	800538c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e04a      	b.n	80011b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	333d      	adds	r3, #61	; 0x3d
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	333c      	adds	r3, #60	; 0x3c
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	b298      	uxth	r0, r3
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3344      	adds	r3, #68	; 0x44
 800115c:	4602      	mov	r2, r0
 800115e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	3340      	adds	r3, #64	; 0x40
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	3348      	adds	r3, #72	; 0x48
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	334c      	adds	r3, #76	; 0x4c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	3354      	adds	r3, #84	; 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3af      	bcc.n	8001120 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e044      	b.n	8001250 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3301      	adds	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3b5      	bcc.n	80011c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	687e      	ldr	r6, [r7, #4]
 8001262:	466d      	mov	r5, sp
 8001264:	f106 0410 	add.w	r4, r6, #16
 8001268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001274:	e885 0003 	stmia.w	r5, {r0, r1}
 8001278:	1d33      	adds	r3, r6, #4
 800127a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f004 f8d1 	bl	8005424 <USB_DevInit>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e014      	b.n	80012be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d102      	bne.n	80012b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f98b 	bl	80025c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fa1f 	bl	80066fa <USB_DevDisconnect>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_Start+0x1c>
 80012de:	2302      	movs	r3, #2
 80012e0:	e020      	b.n	8001324 <HAL_PCD_Start+0x5e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d109      	bne.n	8001306 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d005      	beq.n	8001306 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f004 f81c 	bl	8005348 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f005 f9cf 	bl	80066b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b08d      	sub	sp, #52	; 0x34
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fa8d 	bl	8006862 <USB_GetMode>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 84b7 	bne.w	8001cbe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f005 f9f1 	bl	800673c <USB_ReadInterrupts>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 84ad 	beq.w	8001cbc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f005 f9de 	bl	800673c <USB_ReadInterrupts>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f002 0202 	and.w	r2, r2, #2
 8001398:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 f9cc 	bl	800673c <USB_ReadInterrupts>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d161      	bne.n	8001472 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0210 	bic.w	r2, r2, #16
 80013bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f003 020f 	and.w	r2, r3, #15
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	3304      	adds	r3, #4
 80013dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	0c5b      	lsrs	r3, r3, #17
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d124      	bne.n	8001434 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d035      	beq.n	8001462 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001404:	b29b      	uxth	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	6a38      	ldr	r0, [r7, #32]
 800140a:	f005 f803 	bl	8006414 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	441a      	add	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	441a      	add	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	621a      	str	r2, [r3, #32]
 8001432:	e016      	b.n	8001462 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	0c5b      	lsrs	r3, r3, #17
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	2b06      	cmp	r3, #6
 800143e:	d110      	bne.n	8001462 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001446:	2208      	movs	r2, #8
 8001448:	4619      	mov	r1, r3
 800144a:	6a38      	ldr	r0, [r7, #32]
 800144c:	f004 ffe2 	bl	8006414 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145c:	441a      	add	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0210 	orr.w	r2, r2, #16
 8001470:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f005 f960 	bl	800673c <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001482:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001486:	f040 80a7 	bne.w	80015d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f005 f965 	bl	8006762 <USB_ReadDevAllOutEpInterrupt>
 8001498:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800149a:	e099      	b.n	80015d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 808e 	beq.w	80015c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 f989 	bl	80067ca <USB_ReadDevOutEPInterrupt>
 80014b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d0:	461a      	mov	r2, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 feef 	bl	80022bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00c      	beq.n	8001502 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f4:	461a      	mov	r2, r3
 80014f6:	2308      	movs	r3, #8
 80014f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 ffc5 	bl	800248c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001518:	461a      	mov	r2, r3
 800151a:	2310      	movs	r3, #16
 800151c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d030      	beq.n	800158a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001530:	2b80      	cmp	r3, #128	; 0x80
 8001532:	d109      	bne.n	8001548 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001546:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f007 ff44 	bl	8009400 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	015a      	lsls	r2, r3, #5
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001584:	461a      	mov	r2, r3
 8001586:	2302      	movs	r3, #2
 8001588:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a0:	461a      	mov	r2, r3
 80015a2:	2320      	movs	r3, #32
 80015a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015bc:	461a      	mov	r2, r3
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3301      	adds	r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f47f af62 	bne.w	800149c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 f8ad 	bl	800673c <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015ec:	f040 80db 	bne.w	80017a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 f8ce 	bl	8006796 <USB_ReadDevAllInEpInterrupt>
 80015fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001600:	e0cd      	b.n	800179e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80c2 	beq.w	8001792 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f005 f8f4 	bl	8006806 <USB_ReadDevInEPInterrupt>
 800161e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d057      	beq.n	80016da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800164a:	4013      	ands	r3, r2
 800164c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	4413      	add	r3, r2
 8001656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d132      	bne.n	80016ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	334c      	adds	r3, #76	; 0x4c
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4403      	add	r3, r0
 8001688:	3348      	adds	r3, #72	; 0x48
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4419      	add	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d113      	bne.n	80016ce <HAL_PCD_IRQHandler+0x3a2>
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3354      	adds	r3, #84	; 0x54
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016c6:	461a      	mov	r2, r3
 80016c8:	2101      	movs	r1, #1
 80016ca:	f005 f8fd 	bl	80068c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f007 fe0e 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	015a      	lsls	r2, r3, #5
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f0:	461a      	mov	r2, r3
 80016f2:	2308      	movs	r3, #8
 80016f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170c:	461a      	mov	r2, r3
 800170e:	2310      	movs	r3, #16
 8001710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	2340      	movs	r3, #64	; 0x40
 800172c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d023      	beq.n	8001780 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800173a:	6a38      	ldr	r0, [r7, #32]
 800173c:	f003 ffd0 	bl	80056e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	3338      	adds	r3, #56	; 0x38
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	3304      	adds	r3, #4
 8001752:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	78db      	ldrb	r3, [r3, #3]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2200      	movs	r2, #0
 8001760:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f007 fe5b 	bl	8009424 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177a:	461a      	mov	r2, r3
 800177c:	2302      	movs	r3, #2
 800177e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800178a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fd08 	bl	80021a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	3301      	adds	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f af2e 	bne.w	8001602 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 ffc6 	bl	800673c <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ba:	d122      	bne.n	8001802 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 ff13 	bl	8002610 <HAL_PCDEx_LPM_Callback>
 80017ea:	e002      	b.n	80017f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f007 fdf9 	bl	80093e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 ff98 	bl	800673c <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001816:	d112      	bne.n	800183e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f007 fdb5 	bl	8009398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f004 ff7a 	bl	800673c <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800184e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001852:	d121      	bne.n	8001898 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001862:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d111      	bne.n	8001892 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001888:	2101      	movs	r1, #1
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fec0 	bl	8002610 <HAL_PCDEx_LPM_Callback>
 8001890:	e002      	b.n	8001898 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f007 fd80 	bl	8009398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f004 ff4d 	bl	800673c <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ac:	f040 80b7 	bne.w	8001a1e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2110      	movs	r1, #16
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 ff08 	bl	80056e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	e046      	b.n	8001964 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e2:	461a      	mov	r2, r3
 80018e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	0151      	lsls	r1, r2, #5
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	440a      	add	r2, r1
 8001900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001908:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001916:	461a      	mov	r2, r3
 8001918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800191c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	0151      	lsls	r1, r2, #5
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	440a      	add	r2, r1
 8001934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800193c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	0151      	lsls	r1, r2, #5
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	440a      	add	r2, r1
 8001954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001958:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800195c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	3301      	adds	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	429a      	cmp	r2, r3
 800196c:	d3b3      	bcc.n	80018d6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001980:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199a:	f043 030b 	orr.w	r3, r3, #11
 800199e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f043 030b 	orr.w	r3, r3, #11
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	e015      	b.n	80019e4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	4619      	mov	r1, r3
 80019c8:	f242 032b 	movw	r3, #8235	; 0x202b
 80019cc:	4313      	orrs	r3, r2
 80019ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019de:	f043 030b 	orr.w	r3, r3, #11
 80019e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f004 ff5d 	bl	80068c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fe8a 	bl	800673c <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a32:	d124      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 ff21 	bl	8006880 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fec9 	bl	80057da <USB_GetDevSpeed>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	f001 fd90 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8001a58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4620      	mov	r0, r4
 8001a64:	f003 fbce 	bl	8005204 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f007 fc6c 	bl	8009346 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 fe5a 	bl	800673c <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d10a      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f007 fc49 	bl	800932a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f002 0208 	and.w	r2, r2, #8
 8001aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 fe45 	bl	800673c <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab8:	2b80      	cmp	r3, #128	; 0x80
 8001aba:	d122      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	e014      	b.n	8001af8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fb27 	bl	8002140 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3e5      	bcc.n	8001ace <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fe18 	bl	800673c <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b16:	d13b      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e02b      	b.n	8001b76 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3340      	adds	r3, #64	; 0x40
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d115      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da12      	bge.n	8001b70 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	333f      	adds	r3, #63	; 0x3f
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fae8 	bl	8002140 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	3301      	adds	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3ce      	bcc.n	8001b1e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 fdd1 	bl	800673c <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ba4:	d155      	bne.n	8001c52 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8001baa:	e045      	b.n	8001c38 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d12e      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da2b      	bge.n	8001c32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001be6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d121      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6053      	str	r3, [r2, #4]
            break;
 8001c30:	e007      	b.n	8001c42 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3b4      	bcc.n	8001bac <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fd70 	bl	800673c <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c66:	d10a      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f007 fbed 	bl	8009448 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 fd5a 	bl	800673c <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d115      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f007 fbdd 	bl	8009464 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e000      	b.n	8001cbe <HAL_PCD_IRQHandler+0x992>
      return;
 8001cbc:	bf00      	nop
    }
  }
}
 8001cbe:	3734      	adds	r7, #52	; 0x34
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_SetAddress+0x1a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e013      	b.n	8001d06 <HAL_PCD_SetAddress+0x42>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fcb8 	bl	800666c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	4608      	mov	r0, r1
 8001d18:	4611      	mov	r1, r2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	460b      	mov	r3, r1
 8001d22:	803b      	strh	r3, [r7, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da0f      	bge.n	8001d54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 020f 	and.w	r2, r3, #15
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3338      	adds	r3, #56	; 0x38
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
 8001d52:	e00f      	b.n	8001d74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d80:	883a      	ldrh	r2, [r7, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	78ba      	ldrb	r2, [r7, #2]
 8001d8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d102      	bne.n	8001daa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_EP_Open+0xaa>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e00e      	b.n	8001dd6 <HAL_PCD_EP_Open+0xc8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fd2c 	bl	8005824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da0f      	bge.n	8001e12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	3338      	adds	r3, #56	; 0x38
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	705a      	strb	r2, [r3, #1]
 8001e10:	e00f      	b.n	8001e32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_EP_Close+0x6e>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e00e      	b.n	8001e6a <HAL_PCD_EP_Close+0x8c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fd6a 	bl	8005934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	f004 f851 	bl	8005f8c <USB_EP0StartXfer>
 8001eea:	e008      	b.n	8001efe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	f003 fdf7 	bl	8005aec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	460b      	mov	r3, r1
 8001f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3338      	adds	r3, #56	; 0x38
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2201      	movs	r2, #1
 8001f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	f003 ffef 	bl	8005f8c <USB_EP0StartXfer>
 8001fae:	e008      	b.n	8001fc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6979      	ldr	r1, [r7, #20]
 8001fbe:	f003 fd95 	bl	8005aec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d901      	bls.n	8001fea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e050      	b.n	800208c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0f      	bge.n	8002012 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	705a      	strb	r2, [r3, #1]
 8002010:	e00d      	b.n	800202e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_SetStall+0x82>
 800204a:	2302      	movs	r3, #2
 800204c:	e01e      	b.n	800208c <HAL_PCD_EP_SetStall+0xc0>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fa31 	bl	80064c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800207c:	461a      	mov	r2, r3
 800207e:	f004 fc23 	bl	80068c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d901      	bls.n	80020b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e042      	b.n	8002138 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da0f      	bge.n	80020da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3338      	adds	r3, #56	; 0x38
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	705a      	strb	r2, [r3, #1]
 80020d8:	e00f      	b.n	80020fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_PCD_EP_ClrStall+0x86>
 8002116:	2302      	movs	r3, #2
 8002118:	e00e      	b.n	8002138 <HAL_PCD_EP_ClrStall+0xa4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fa39 	bl	80065a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800214c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	da0c      	bge.n	800216e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 020f 	and.w	r2, r3, #15
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	3338      	adds	r3, #56	; 0x38
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e00c      	b.n	8002188 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 f858 	bl	8006244 <USB_EPStopXfer>
 8002194:	4603      	mov	r3, r0
 8002196:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002198:	7afb      	ldrb	r3, [r7, #11]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b08a      	sub	sp, #40	; 0x28
 80021a6:	af02      	add	r7, sp, #8
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	3338      	adds	r3, #56	; 0x38
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06c      	b.n	80022b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d902      	bls.n	80021f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3303      	adds	r3, #3
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021fe:	e02b      	b.n	8002258 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	429a      	cmp	r2, r3
 8002214:	d902      	bls.n	800221c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3303      	adds	r3, #3
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6919      	ldr	r1, [r3, #16]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002234:	b2db      	uxtb	r3, r3
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f004 f8ac 	bl	8006398 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	b29b      	uxth	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	429a      	cmp	r2, r3
 800226c:	d809      	bhi.n	8002282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002276:	429a      	cmp	r2, r3
 8002278:	d203      	bcs.n	8002282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1be      	bne.n	8002200 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	429a      	cmp	r2, r3
 800228c:	d811      	bhi.n	80022b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ae:	4013      	ands	r3, r2
 80022b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	333c      	adds	r3, #60	; 0x3c
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d17b      	bne.n	80023ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a61      	ldr	r2, [pc, #388]	; (8002484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	f240 80b9 	bls.w	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80b3 	beq.w	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	461a      	mov	r2, r3
 8002320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002324:	6093      	str	r3, [r2, #8]
 8002326:	e0a7      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	2320      	movs	r3, #32
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e098      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8093 	bne.w	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d90f      	bls.n	800237a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	e07e      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	3304      	adds	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	0159      	lsls	r1, r3, #5
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	440b      	add	r3, r1
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	1ad2      	subs	r2, r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d114      	bne.n	80023dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	f004 fa7e 	bl	80068c8 <USB_EP0_OutStart>
 80023cc:	e006      	b.n	80023dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 ff6c 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
 80023e8:	e046      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d124      	bne.n	800243c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	e032      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002428:	461a      	mov	r2, r3
 800242a:	2320      	movs	r3, #32
 800242c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f006 ff43 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
 800243a:	e01d      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d114      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002464:	461a      	mov	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	f004 fa2e 	bl	80068c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f006 ff24 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	4f54300a 	.word	0x4f54300a
 8002488:	4f54310a 	.word	0x4f54310a

0800248c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	333c      	adds	r3, #60	; 0x3c
 80024a4:	3304      	adds	r3, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <PCD_EP_OutSetupPacket_int+0x88>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d90e      	bls.n	80024e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f006 fedb 	bl	800929c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d90c      	bls.n	8002508 <PCD_EP_OutSetupPacket_int+0x7c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002500:	461a      	mov	r2, r3
 8002502:	2101      	movs	r1, #1
 8002504:	f004 f9e0 	bl	80068c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	4f54300a 	.word	0x4f54300a

08002518 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
 8002524:	4613      	mov	r3, r2
 8002526:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002536:	883b      	ldrh	r3, [r7, #0]
 8002538:	0419      	lsls	r1, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	430a      	orrs	r2, r1
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
 8002544:	e028      	b.n	8002598 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e00d      	b.n	8002576 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3340      	adds	r3, #64	; 0x40
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	3301      	adds	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	3b01      	subs	r3, #1
 800257c:	429a      	cmp	r2, r3
 800257e:	d3ec      	bcc.n	800255a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002580:	883b      	ldrh	r3, [r7, #0]
 8002582:	0418      	lsls	r0, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6819      	ldr	r1, [r3, #0]
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	3b01      	subs	r3, #1
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4302      	orrs	r2, r0
 8002590:	3340      	adds	r3, #64	; 0x40
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_PCDEx_ActivateLPM+0x44>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	10000003 	.word	0x10000003

08002610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d00a      	beq.n	8002652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01f      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e01d      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	490f      	ldr	r1, [pc, #60]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002662:	f7fe f9dd 	bl	8000a20 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800266a:	f7fe f9d9 	bl	8000a20 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002678:	d901      	bls.n	800267e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d1ee      	bne.n	800266a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58024800 	.word	0x58024800

0800269c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	58024800 	.word	0x58024800

080026bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 bc1d 	b.w	8002f0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8087 	beq.w	80027ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4b99      	ldr	r3, [pc, #612]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026e8:	4b96      	ldr	r3, [pc, #600]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d007      	beq.n	8002704 <HAL_RCC_OscConfig+0x48>
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b18      	cmp	r3, #24
 80026f8:	d110      	bne.n	800271c <HAL_RCC_OscConfig+0x60>
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10b      	bne.n	800271c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4b8f      	ldr	r3, [pc, #572]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d06c      	beq.n	80027ea <HAL_RCC_OscConfig+0x12e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d168      	bne.n	80027ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e3f6      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x78>
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a86      	ldr	r2, [pc, #536]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e02e      	b.n	8002792 <HAL_RCC_OscConfig+0xd6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x9a>
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a80      	ldr	r2, [pc, #512]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7d      	ldr	r2, [pc, #500]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800274e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e01d      	b.n	8002792 <HAL_RCC_OscConfig+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0xbe>
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a77      	ldr	r2, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a74      	ldr	r2, [pc, #464]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0xd6>
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a71      	ldr	r2, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d013      	beq.n	80027c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe f941 	bl	8000a20 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7fe f93d 	bl	8000a20 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e3aa      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0xe6>
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe f92d 	bl	8000a20 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ca:	f7fe f929 	bl	8000a20 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e396      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x10e>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80cb 	beq.w	8002990 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fa:	4b52      	ldr	r3, [pc, #328]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002802:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x164>
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b18      	cmp	r3, #24
 8002814:	d156      	bne.n	80028c4 <HAL_RCC_OscConfig+0x208>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d151      	bne.n	80028c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x17c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e368      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002838:	4b42      	ldr	r3, [pc, #264]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 0219 	bic.w	r2, r3, #25
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	493f      	ldr	r1, [pc, #252]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800284a:	f7fe f8e9 	bl	8000a20 <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe f8e5 	bl	8000a20 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e352      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	f7fe f906 	bl	8000a80 <HAL_GetREVID>
 8002874:	4603      	mov	r3, r0
 8002876:	f241 0203 	movw	r2, #4099	; 0x1003
 800287a:	4293      	cmp	r3, r2
 800287c:	d817      	bhi.n	80028ae <HAL_RCC_OscConfig+0x1f2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x1dc>
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800288e:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002894:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002896:	e07b      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	4927      	ldr	r1, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	e070      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	4921      	ldr	r1, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c2:	e065      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d048      	beq.n	800295e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 0219 	bic.w	r2, r3, #25
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe f89f 	bl	8000a20 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe f89b 	bl	8000a20 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e308      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	f7fe f8bc 	bl	8000a80 <HAL_GetREVID>
 8002908:	4603      	mov	r3, r0
 800290a:	f241 0203 	movw	r2, #4099	; 0x1003
 800290e:	4293      	cmp	r3, r2
 8002910:	d81a      	bhi.n	8002948 <HAL_RCC_OscConfig+0x28c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x270>
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	6053      	str	r3, [r2, #4]
 800292a:	e031      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	031b      	lsls	r3, r3, #12
 800293a:	4902      	ldr	r1, [pc, #8]	; (8002944 <HAL_RCC_OscConfig+0x288>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e026      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
 8002942:	bf00      	nop
 8002944:	58024400 	.word	0x58024400
 8002948:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	4997      	ldr	r1, [pc, #604]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	e018      	b.n	8002990 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a94      	ldr	r2, [pc, #592]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe f859 	bl	8000a20 <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe f855 	bl	8000a20 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e2c2      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002984:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a9 	beq.w	8002af0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a8:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d007      	beq.n	80029c4 <HAL_RCC_OscConfig+0x308>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b18      	cmp	r3, #24
 80029b8:	d13a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x374>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d135      	bne.n	8002a30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029c4:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x320>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e296      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029dc:	f7fe f850 	bl	8000a80 <HAL_GetREVID>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d817      	bhi.n	8002a1a <HAL_RCC_OscConfig+0x35e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x348>
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029fa:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a02:	e075      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	069b      	lsls	r3, r3, #26
 8002a12:	4968      	ldr	r1, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a18:	e06a      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	4962      	ldr	r1, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a2e:	e05f      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d042      	beq.n	8002abe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a38:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fd ffec 	bl	8000a20 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a4c:	f7fd ffe8 	bl	8000a20 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e255      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6a:	f7fe f809 	bl	8000a80 <HAL_GetREVID>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d817      	bhi.n	8002aa8 <HAL_RCC_OscConfig+0x3ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d108      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3d6>
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a8e:	6053      	str	r3, [r2, #4]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
 8002a92:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	4944      	ldr	r1, [pc, #272]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e023      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
 8002aa8:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	493f      	ldr	r1, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60cb      	str	r3, [r1, #12]
 8002abc:	e018      	b.n	8002af0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fd ffa9 	bl	8000a20 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ad2:	f7fd ffa5 	bl	8000a20 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e212      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ae4:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d036      	beq.n	8002b6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d019      	beq.n	8002b38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fd ff86 	bl	8000a20 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fd ff82 	bl	8000a20 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1ef      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x45c>
 8002b36:	e018      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fd ff6c 	bl	8000a20 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fd ff68 	bl	8000a20 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1d5      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d039      	beq.n	8002bea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b8a:	f7fd ff49 	bl	8000a20 <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b92:	f7fd ff45 	bl	8000a20 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1b2      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
 8002bb0:	e01b      	b.n	8002bea <HAL_RCC_OscConfig+0x52e>
 8002bb2:	bf00      	nop
 8002bb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bb8:	4b9b      	ldr	r3, [pc, #620]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a9a      	ldr	r2, [pc, #616]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bc4:	f7fd ff2c 	bl	8000a20 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7fd ff28 	bl	8000a20 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e195      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bde:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8081 	beq.w	8002cfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf8:	4b8c      	ldr	r3, [pc, #560]	; (8002e2c <HAL_RCC_OscConfig+0x770>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a8b      	ldr	r2, [pc, #556]	; (8002e2c <HAL_RCC_OscConfig+0x770>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c04:	f7fd ff0c 	bl	8000a20 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fd ff08 	bl	8000a20 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e175      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1e:	4b83      	ldr	r3, [pc, #524]	; (8002e2c <HAL_RCC_OscConfig+0x770>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x584>
 8002c32:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a7c      	ldr	r2, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e02d      	b.n	8002c9c <HAL_RCC_OscConfig+0x5e0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x5a6>
 8002c48:	4b77      	ldr	r3, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a76      	ldr	r2, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	f023 0304 	bic.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x5e0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c8>
 8002c6a:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x5e0>
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a64      	ldr	r2, [pc, #400]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fd febc 	bl	8000a20 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fd feb8 	bl	8000a20 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e123      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc2:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCC_OscConfig+0x5f0>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fd fea6 	bl	8000a20 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fd fea2 	bl	8000a20 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e10d      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cee:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8102 	beq.w	8002f08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0c:	2b18      	cmp	r3, #24
 8002d0e:	f000 80bd 	beq.w	8002e8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	f040 809e 	bne.w	8002e58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fd fe7a 	bl	8000a20 <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fd fe76 	bl	8000a20 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0e3      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d52:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x774>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4931      	ldr	r1, [pc, #196]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	628b      	str	r3, [r1, #40]	; 0x28
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	3b01      	subs	r3, #1
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	3b01      	subs	r3, #1
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d98:	4923      	ldr	r1, [pc, #140]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x778>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002db6:	00d2      	lsls	r2, r2, #3
 8002db8:	491b      	ldr	r1, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f023 020c 	bic.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4917      	ldr	r1, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f023 0202 	bic.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_RCC_OscConfig+0x76c>)
 8002e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fd fdff 	bl	8000a20 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e24:	e011      	b.n	8002e4a <HAL_RCC_OscConfig+0x78e>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	58024800 	.word	0x58024800
 8002e30:	fffffc0c 	.word	0xfffffc0c
 8002e34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fd fdf2 	bl	8000a20 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e05f      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x77c>
 8002e56:	e057      	b.n	8002f08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd fddc 	bl	8000a20 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fd fdd8 	bl	8000a20 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e045      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x7b0>
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x858>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d031      	beq.n	8002f04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d12a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d122      	bne.n	8002f04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	0a5b      	lsrs	r3, r3, #9
 8002ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d108      	bne.n	8002f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3730      	adds	r7, #48	; 0x30
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	58024400 	.word	0x58024400

08002f18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e19c      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b8a      	ldr	r3, [pc, #552]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b87      	ldr	r3, [pc, #540]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 020f 	bic.w	r2, r3, #15
 8002f42:	4985      	ldr	r1, [pc, #532]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b83      	ldr	r3, [pc, #524]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e184      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d908      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f78:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4975      	ldr	r1, [pc, #468]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	4b70      	ldr	r3, [pc, #448]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d908      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	496a      	ldr	r1, [pc, #424]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	495e      	ldr	r1, [pc, #376]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d908      	bls.n	8003014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4953      	ldr	r1, [pc, #332]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b4d      	ldr	r3, [pc, #308]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f023 020f 	bic.w	r2, r3, #15
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4947      	ldr	r1, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d055      	beq.n	80030fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4940      	ldr	r1, [pc, #256]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 800305c:	4313      	orrs	r3, r2
 800305e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d121      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0f6      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d107      	bne.n	8003090 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d115      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0ea      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0de      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d6      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f023 0207 	bic.w	r2, r3, #7
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4925      	ldr	r1, [pc, #148]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fd fca9 	bl	8000a20 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d2:	f7fd fca5 	bl	8000a20 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0be      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d1eb      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	429a      	cmp	r2, r3
 8003114:	d208      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	490e      	ldr	r1, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d214      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 020f 	bic.w	r2, r3, #15
 800313e:	4906      	ldr	r1, [pc, #24]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e086      	b.n	8003266 <HAL_RCC_ClockConfig+0x34e>
 8003158:	52002000 	.word	0x52002000
 800315c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003178:	429a      	cmp	r2, r3
 800317a:	d208      	bcs.n	800318e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800317c:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	4939      	ldr	r1, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 800318a:	4313      	orrs	r3, r2
 800318c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	4b34      	ldr	r3, [pc, #208]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d208      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	492e      	ldr	r1, [pc, #184]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d208      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	4922      	ldr	r1, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d208      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4917      	ldr	r1, [pc, #92]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 8003214:	4313      	orrs	r3, r2
 8003216:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003218:	f000 f834 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	4912      	ldr	r1, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x35c>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x358>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x35c>)
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x360>)
 800324e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x364>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x368>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fb96 	bl	800098c <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	58024400 	.word	0x58024400
 8003274:	0800ad28 	.word	0x0800ad28
 8003278:	24000004 	.word	0x24000004
 800327c:	24000000 	.word	0x24000000
 8003280:	24000008 	.word	0x24000008

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800328a:	4bb3      	ldr	r3, [pc, #716]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003292:	2b18      	cmp	r3, #24
 8003294:	f200 8155 	bhi.w	8003542 <HAL_RCC_GetSysClockFreq+0x2be>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	08003305 	.word	0x08003305
 80032a4:	08003543 	.word	0x08003543
 80032a8:	08003543 	.word	0x08003543
 80032ac:	08003543 	.word	0x08003543
 80032b0:	08003543 	.word	0x08003543
 80032b4:	08003543 	.word	0x08003543
 80032b8:	08003543 	.word	0x08003543
 80032bc:	08003543 	.word	0x08003543
 80032c0:	0800332b 	.word	0x0800332b
 80032c4:	08003543 	.word	0x08003543
 80032c8:	08003543 	.word	0x08003543
 80032cc:	08003543 	.word	0x08003543
 80032d0:	08003543 	.word	0x08003543
 80032d4:	08003543 	.word	0x08003543
 80032d8:	08003543 	.word	0x08003543
 80032dc:	08003543 	.word	0x08003543
 80032e0:	08003331 	.word	0x08003331
 80032e4:	08003543 	.word	0x08003543
 80032e8:	08003543 	.word	0x08003543
 80032ec:	08003543 	.word	0x08003543
 80032f0:	08003543 	.word	0x08003543
 80032f4:	08003543 	.word	0x08003543
 80032f8:	08003543 	.word	0x08003543
 80032fc:	08003543 	.word	0x08003543
 8003300:	08003337 	.word	0x08003337
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003304:	4b94      	ldr	r3, [pc, #592]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003310:	4b91      	ldr	r3, [pc, #580]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	08db      	lsrs	r3, r3, #3
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	4a90      	ldr	r2, [pc, #576]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003322:	e111      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003326:	61bb      	str	r3, [r7, #24]
    break;
 8003328:	e10e      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800332a:	4b8d      	ldr	r3, [pc, #564]	; (8003560 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800332c:	61bb      	str	r3, [r7, #24]
    break;
 800332e:	e10b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003330:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003332:	61bb      	str	r3, [r7, #24]
    break;
 8003334:	e108      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003340:	4b85      	ldr	r3, [pc, #532]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800334c:	4b82      	ldr	r3, [pc, #520]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003356:	4b80      	ldr	r3, [pc, #512]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	08db      	lsrs	r3, r3, #3
 800335c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80e1 	beq.w	800353c <HAL_RCC_GetSysClockFreq+0x2b8>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b02      	cmp	r3, #2
 800337e:	f000 8083 	beq.w	8003488 <HAL_RCC_GetSysClockFreq+0x204>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b02      	cmp	r3, #2
 8003386:	f200 80a1 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x248>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x114>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d056      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003396:	e099      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003398:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033a4:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	4a6b      	ldr	r2, [pc, #428]	; (800355c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033de:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033fe:	e087      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800356c <HAL_RCC_GetSysClockFreq+0x2e8>
 800340e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003422:	ed97 6a02 	vldr	s12, [r7, #8]
 8003426:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003568 <HAL_RCC_GetSysClockFreq+0x2e4>
 800342a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003442:	e065      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003570 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	4b40      	ldr	r3, [pc, #256]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a02 	vldr	s12, [r7, #8]
 800346a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003568 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003486:	e043      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003574 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ca:	e021      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003570 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80034f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003568 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	0a5b      	lsrs	r3, r3, #9
 8003516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351a:	3301      	adds	r3, #1
 800351c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003528:	edd7 6a07 	vldr	s13, [r7, #28]
 800352c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003534:	ee17 3a90 	vmov	r3, s15
 8003538:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800353a:	e005      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    break;
 8003540:	e002      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003544:	61bb      	str	r3, [r7, #24]
    break;
 8003546:	bf00      	nop
  }

  return sysclockfreq;
 8003548:	69bb      	ldr	r3, [r7, #24]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
 800355c:	03d09000 	.word	0x03d09000
 8003560:	003d0900 	.word	0x003d0900
 8003564:	00b71b00 	.word	0x00b71b00
 8003568:	46000000 	.word	0x46000000
 800356c:	4c742400 	.word	0x4c742400
 8003570:	4a742400 	.word	0x4a742400
 8003574:	4b371b00 	.word	0x4b371b00

08003578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800357e:	f7ff fe81 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003582:	4602      	mov	r2, r0
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	490f      	ldr	r1, [pc, #60]	; (80035cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003590:	5ccb      	ldrb	r3, [r1, r3]
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_GetHCLKFreq+0x54>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	58024400 	.word	0x58024400
 80035cc:	0800ad28 	.word	0x0800ad28
 80035d0:	24000004 	.word	0x24000004
 80035d4:	24000000 	.word	0x24000000

080035d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035e0:	2300      	movs	r3, #0
 80035e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e4:	2300      	movs	r3, #0
 80035e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d03f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035fc:	d02a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003602:	d824      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003608:	d018      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360e:	d81e      	bhi.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003618:	d007      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800361a:	e018      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	4ba3      	ldr	r3, [pc, #652]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4aa2      	ldr	r2, [pc, #648]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003628:	e015      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 ff17 	bl	8004464 <RCCEx_PLL2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800363a:	e00c      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3324      	adds	r3, #36	; 0x24
 8003640:	2102      	movs	r1, #2
 8003642:	4618      	mov	r0, r3
 8003644:	f000 ffc0 	bl	80045c8 <RCCEx_PLL3_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
      break;
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800365c:	4b93      	ldr	r3, [pc, #588]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003668:	4990      	ldr	r1, [pc, #576]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	650b      	str	r3, [r1, #80]	; 0x50
 800366e:	e001      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	2b04      	cmp	r3, #4
 8003686:	d826      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a5 	.word	0x080036a5
 8003694:	080036b3 	.word	0x080036b3
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036dd 	.word	0x080036dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b81      	ldr	r3, [pc, #516]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a80      	ldr	r2, [pc, #512]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036b0:	e015      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fed3 	bl	8004464 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c2:	e00c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3324      	adds	r3, #36	; 0x24
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 ff7c 	bl	80045c8 <RCCEx_PLL3_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d4:	e003      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      break;
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e4:	4b71      	ldr	r3, [pc, #452]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	f023 0207 	bic.w	r2, r3, #7
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	496e      	ldr	r1, [pc, #440]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	650b      	str	r3, [r1, #80]	; 0x50
 80036f6:	e001      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003704:	2b00      	cmp	r3, #0
 8003706:	d042      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d02b      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003716:	d825      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003718:	2bc0      	cmp	r3, #192	; 0xc0
 800371a:	d028      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800371c:	2bc0      	cmp	r3, #192	; 0xc0
 800371e:	d821      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d016      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d81d      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d007      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003730:	e018      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	4a5d      	ldr	r2, [pc, #372]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800373e:	e017      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fe8c 	bl	8004464 <RCCEx_PLL2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003750:	e00e      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f000 ff35 	bl	80045c8 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003762:	e005      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	e002      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800376e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003776:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	494a      	ldr	r1, [pc, #296]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	650b      	str	r3, [r1, #80]	; 0x50
 8003788:	e001      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003796:	2b00      	cmp	r3, #0
 8003798:	d049      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037a4:	d030      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037aa:	d82a      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037b0:	d02c      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037b6:	d824      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d018      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d81e      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037cc:	d007      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037ce:	e018      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	4a35      	ldr	r2, [pc, #212]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037dc:	e017      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fe3d 	bl	8004464 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037ee:	e00e      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fee6 	bl	80045c8 <RCCEx_PLL3_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
      break;
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800380c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003822:	4922      	ldr	r1, [pc, #136]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	658b      	str	r3, [r1, #88]	; 0x58
 8003828:	e001      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04b      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003844:	d030      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384a:	d82a      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800384c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003850:	d02e      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003856:	d824      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800385c:	d018      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800385e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003862:	d81e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386c:	d007      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800386e:	e018      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800387c:	e019      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fded 	bl	8004464 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800388e:	e010      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3324      	adds	r3, #36	; 0x24
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe96 	bl	80045c8 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038a0:	e007      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
      break;
 80038a6:	e004      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80038a8:	bf00      	nop
 80038aa:	e002      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038ac:	58024400 	.word	0x58024400
      break;
 80038b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038c6:	4996      	ldr	r1, [pc, #600]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	658b      	str	r3, [r1, #88]	; 0x58
 80038cc:	e001      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d032      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	2b30      	cmp	r3, #48	; 0x30
 80038e4:	d01c      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d817      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d00c      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d813      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d10f      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fa:	4b89      	ldr	r3, [pc, #548]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4a88      	ldr	r2, [pc, #544]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003906:	e00e      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fda8 	bl	8004464 <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003918:	e005      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800392c:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	4979      	ldr	r1, [pc, #484]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393a:	4313      	orrs	r3, r2
 800393c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d047      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003958:	d030      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800395a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800395e:	d82a      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003964:	d02c      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800396a:	d824      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d018      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	d81e      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d007      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003982:	e018      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003990:	e017      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fd63 	bl	8004464 <RCCEx_PLL2_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039a2:	e00e      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fe0c 	bl	80045c8 <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039b4:	e005      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c8:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	4952      	ldr	r1, [pc, #328]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	650b      	str	r3, [r1, #80]	; 0x50
 80039da:	e001      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d049      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d02e      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fa:	d828      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a00:	d02a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a06:	d822      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0c:	d026      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a12:	d81c      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a18:	d010      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a1e:	d816      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01d      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d111      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd17 	bl	8004464 <RCCEx_PLL2_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a3a:	e012      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fdc0 	bl	80045c8 <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e009      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
      break;
 8003a52:	e006      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a54:	bf00      	nop
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a58:	bf00      	nop
 8003a5a:	e002      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a74:	492a      	ldr	r1, [pc, #168]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	650b      	str	r3, [r1, #80]	; 0x50
 8003a7a:	e001      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d04d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d02e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9c:	d828      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d02a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d822      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aae:	d026      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab4:	d81c      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d010      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac0:	d816      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01d      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aca:	d111      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fcc6 	bl	8004464 <RCCEx_PLL2_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003adc:	e012      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3324      	adds	r3, #36	; 0x24
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fd6f 	bl	80045c8 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003af6:	bf00      	nop
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003afa:	bf00      	nop
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b18:	4901      	ldr	r1, [pc, #4]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3c:	d00e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b42:	d814      	bhi.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b4c:	d10f      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4e:	4baf      	ldr	r3, [pc, #700]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4aae      	ldr	r2, [pc, #696]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b5a:	e00c      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fc7e 	bl	8004464 <RCCEx_PLL2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
      break;
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b7c:	4ba3      	ldr	r3, [pc, #652]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b88:	49a0      	ldr	r1, [pc, #640]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d032      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d81b      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003be7 	.word	0x08003be7
 8003bb4:	08003bc1 	.word	0x08003bc1
 8003bb8:	08003bcf 	.word	0x08003bcf
 8003bbc:	08003be7 	.word	0x08003be7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	4a91      	ldr	r2, [pc, #580]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bcc:	e00c      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc45 	bl	8004464 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
      break;
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bee:	4b87      	ldr	r3, [pc, #540]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4984      	ldr	r1, [pc, #528]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c00:	e001      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8086 	beq.w	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7d      	ldr	r2, [pc, #500]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c20:	f7fc fefe 	bl	8000a20 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c26:	e009      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fc fefa 	bl	8000a20 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d902      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	75fb      	strb	r3, [r7, #23]
        break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3c:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d166      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c58:	4053      	eors	r3, r2
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d013      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a66      	ldr	r2, [pc, #408]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c84:	4a61      	ldr	r2, [pc, #388]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c94:	d115      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fc fec3 	bl	8000a20 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fc febf 	bl	8000a20 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d902      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003cb4:	e005      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cb6:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ed      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d126      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003cd8:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ce6:	0919      	lsrs	r1, r3, #4
 8003ce8:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	4947      	ldr	r1, [pc, #284]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	610b      	str	r3, [r1, #16]
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003cf4:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cfe:	6113      	str	r3, [r2, #16]
 8003d00:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	493f      	ldr	r1, [pc, #252]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	670b      	str	r3, [r1, #112]	; 0x70
 8003d14:	e004      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	75bb      	strb	r3, [r7, #22]
 8003d1a:	e001      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8085 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d32:	2b28      	cmp	r3, #40	; 0x28
 8003d34:	d866      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003e19 	.word	0x08003e19
 8003d40:	08003e05 	.word	0x08003e05
 8003d44:	08003e05 	.word	0x08003e05
 8003d48:	08003e05 	.word	0x08003e05
 8003d4c:	08003e05 	.word	0x08003e05
 8003d50:	08003e05 	.word	0x08003e05
 8003d54:	08003e05 	.word	0x08003e05
 8003d58:	08003e05 	.word	0x08003e05
 8003d5c:	08003de1 	.word	0x08003de1
 8003d60:	08003e05 	.word	0x08003e05
 8003d64:	08003e05 	.word	0x08003e05
 8003d68:	08003e05 	.word	0x08003e05
 8003d6c:	08003e05 	.word	0x08003e05
 8003d70:	08003e05 	.word	0x08003e05
 8003d74:	08003e05 	.word	0x08003e05
 8003d78:	08003e05 	.word	0x08003e05
 8003d7c:	08003df3 	.word	0x08003df3
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e05 	.word	0x08003e05
 8003d88:	08003e05 	.word	0x08003e05
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	08003e05 	.word	0x08003e05
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003e05 	.word	0x08003e05
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003e05 	.word	0x08003e05
 8003da8:	08003e05 	.word	0x08003e05
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003e19 	.word	0x08003e19
 8003dc0:	08003e05 	.word	0x08003e05
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e05 	.word	0x08003e05
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003e19 	.word	0x08003e19
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb3c 	bl	8004464 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003df0:	e013      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	; 0x24
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fbe5 	bl	80045c8 <RCCEx_PLL3_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e02:	e00a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	e007      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	58024800 	.word	0x58024800
 8003e14:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e20:	4b96      	ldr	r3, [pc, #600]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e2c:	4993      	ldr	r1, [pc, #588]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	654b      	str	r3, [r1, #84]	; 0x54
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d038      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d821      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e97 	.word	0x08003e97
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e7f 	.word	0x08003e7f
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 faf6 	bl	8004464 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fb9f 	bl	80045c8 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f023 0207 	bic.w	r2, r3, #7
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	4974      	ldr	r1, [pc, #464]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	654b      	str	r3, [r1, #84]	; 0x54
 8003eb0:	e001      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d821      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f17 	.word	0x08003f17
 8003ed8:	08003eed 	.word	0x08003eed
 8003edc:	08003eff 	.word	0x08003eff
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f17 	.word	0x08003f17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fab6 	bl	8004464 <RCCEx_PLL2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003efc:	e00c      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3324      	adds	r3, #36	; 0x24
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb5f 	bl	80045c8 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
      break;
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1e:	4b57      	ldr	r3, [pc, #348]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	f023 0207 	bic.w	r2, r3, #7
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	4953      	ldr	r1, [pc, #332]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	658b      	str	r3, [r1, #88]	; 0x58
 8003f32:	e001      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d04b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4e:	d02e      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f54:	d828      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d02a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d822      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f66:	d026      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f6c:	d81c      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d010      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f78:	d816      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01d      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa6a 	bl	8004464 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f94:	e012      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3324      	adds	r3, #36	; 0x24
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fb13 	bl	80045c8 <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fa6:	e009      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
      break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e004      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e002      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc2:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd0:	492a      	ldr	r1, [pc, #168]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	654b      	str	r3, [r1, #84]	; 0x54
 8003fd6:	e001      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d04d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ff2:	d02e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ff4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ff8:	d828      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d02a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d822      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800400a:	d026      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800400c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004010:	d81c      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004016:	d010      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401c:	d816      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01d      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d111      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fa18 	bl	8004464 <RCCEx_PLL2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004038:	e012      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3324      	adds	r3, #36	; 0x24
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fac1 	bl	80045c8 <RCCEx_PLL3_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800404a:	e009      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
      break;
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004052:	bf00      	nop
 8004054:	e004      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004056:	bf00      	nop
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004074:	4901      	ldr	r1, [pc, #4]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	658b      	str	r3, [r1, #88]	; 0x58
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800407c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004096:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800409a:	d02e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800409c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040a0:	d828      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a6:	d02a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	d822      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040b2:	d026      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80040b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040b8:	d81c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040be:	d010      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c4:	d816      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	d111      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f9c4 	bl	8004464 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040e0:	e012      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa6d 	bl	80045c8 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040f2:	e009      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800410e:	4b9d      	ldr	r3, [pc, #628]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411c:	4999      	ldr	r1, [pc, #612]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800411e:	4313      	orrs	r3, r2
 8004120:	658b      	str	r3, [r1, #88]	; 0x58
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d10a      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3324      	adds	r3, #36	; 0x24
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa3e 	bl	80045c8 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004156:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004164:	4987      	ldr	r1, [pc, #540]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004166:	4313      	orrs	r3, r2
 8004168:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004180:	d10a      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa1d 	bl	80045c8 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004198:	4b7a      	ldr	r3, [pc, #488]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a6:	4977      	ldr	r1, [pc, #476]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d034      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c2:	d01d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c8:	d817      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041d4:	e011      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f941 	bl	8004464 <RCCEx_PLL2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041e6:	e00c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3324      	adds	r3, #36	; 0x24
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9ea 	bl	80045c8 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004208:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004216:	495b      	ldr	r1, [pc, #364]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004218:	4313      	orrs	r3, r2
 800421a:	658b      	str	r3, [r1, #88]	; 0x58
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d033      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004238:	d01c      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800423a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800423e:	d816      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424a:	d007      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800424c:	e00f      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424e:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	4a4c      	ldr	r2, [pc, #304]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800425a:	e00c      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3324      	adds	r3, #36	; 0x24
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f9b0 	bl	80045c8 <RCCEx_PLL3_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
      break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427c:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	493e      	ldr	r1, [pc, #248]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800428c:	4313      	orrs	r3, r2
 800428e:	654b      	str	r3, [r1, #84]	; 0x54
 8004290:	e001      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d029      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d007      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	4a33      	ldr	r2, [pc, #204]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042be:	e00b      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f8cc 	bl	8004464 <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
      break;
 80042d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042de:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	4926      	ldr	r1, [pc, #152]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042f0:	e001      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f95d 	bl	80045c8 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d033      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432c:	d017      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800432e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004332:	d811      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d013      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	d80b      	bhi.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004348:	d106      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004356:	e007      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
      break;
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004372:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437a:	4902      	ldr	r1, [pc, #8]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800437c:	4313      	orrs	r3, r2
 800437e:	654b      	str	r3, [r1, #84]	; 0x54
 8004380:	e004      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	492e      	ldr	r1, [pc, #184]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043c4:	4926      	ldr	r1, [pc, #152]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e2:	491f      	ldr	r1, [pc, #124]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043fe:	6113      	str	r3, [r2, #16]
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800440a:	4915      	ldr	r1, [pc, #84]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800440c:	4313      	orrs	r3, r2
 800440e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da08      	bge.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	490e      	ldr	r1, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004426:	4313      	orrs	r3, r2
 8004428:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	4906      	ldr	r1, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004446:	4313      	orrs	r3, r2
 8004448:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800444a:	7dbb      	ldrb	r3, [r7, #22]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400

08004464 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004472:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d101      	bne.n	8004482 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e099      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004482:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4e      	ldr	r2, [pc, #312]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800448c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fc fac7 	bl	8000a20 <HAL_GetTick>
 8004492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004494:	e008      	b.n	80044a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004496:	f7fc fac3 	bl	8000a20 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e086      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044b4:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	493f      	ldr	r1, [pc, #252]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	628b      	str	r3, [r1, #40]	; 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	b29b      	uxth	r3, r3
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044f8:	4931      	ldr	r1, [pc, #196]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	492d      	ldr	r1, [pc, #180]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f023 0220 	bic.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4928      	ldr	r1, [pc, #160]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <RCCEx_PLL2_Config+0x160>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	69d2      	ldr	r2, [r2, #28]
 800453a:	00d2      	lsls	r2, r2, #3
 800453c:	4920      	ldr	r1, [pc, #128]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004548:	f043 0310 	orr.w	r3, r3, #16
 800454c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800455a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800455e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004560:	e00f      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004574:	e005      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	4a11      	ldr	r2, [pc, #68]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004580:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004582:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800458c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458e:	f7fc fa47 	bl	8000a20 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004594:	e008      	b.n	80045a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004596:	f7fc fa43 	bl	8000a20 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	58024400 	.word	0x58024400
 80045c4:	ffff0007 	.word	0xffff0007

080045c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d101      	bne.n	80045e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e099      	b.n	800471a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045e6:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fa15 	bl	8000a20 <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045fa:	f7fc fa11 	bl	8000a20 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e086      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	493f      	ldr	r1, [pc, #252]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	628b      	str	r3, [r1, #40]	; 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3b01      	subs	r3, #1
 8004632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	b29b      	uxth	r3, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	3b01      	subs	r3, #1
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800465c:	4931      	ldr	r1, [pc, #196]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	492d      	ldr	r1, [pc, #180]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4928      	ldr	r1, [pc, #160]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	4a26      	ldr	r2, [pc, #152]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <RCCEx_PLL3_Config+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	69d2      	ldr	r2, [r2, #28]
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4920      	ldr	r1, [pc, #128]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c4:	e00f      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046d8:	e005      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a11      	ldr	r2, [pc, #68]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc f995 	bl	8000a20 <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046f8:	e008      	b.n	800470c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046fa:	f7fc f991 	bl	8000a20 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <RCCEx_PLL3_Config+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	ffff0007 	.word	0xffff0007

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e049      	b.n	80047d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc f88e 	bl	8000874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 faf8 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e054      	b.n	800489e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d01d      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d115      	bne.n	8004888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d015      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d011      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	e008      	b.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e000      	b.n	800489c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40010400 	.word	0x40010400
 80048c0:	40001800 	.word	0x40001800
 80048c4:	40014000 	.word	0x40014000
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa08 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9fa 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa0b 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9de 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9d0 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f9e1 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0208 	mvn.w	r2, #8
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2204      	movs	r2, #4
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9b4 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9a6 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9b7 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0210 	mvn.w	r2, #16
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2208      	movs	r2, #8
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f98a 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f97c 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f98d 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0201 	mvn.w	r2, #1
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f956 	bl	8004cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fb42 	bl	8005100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8a:	d10e      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb35 	bl	8005114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f93b 	bl	8004d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0220 	mvn.w	r2, #32
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 faf5 	bl	80050ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_ConfigClockSource+0x1c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0dc      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1d6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4b6a      	ldr	r3, [pc, #424]	; (8004cec <HAL_TIM_ConfigClockSource+0x1e0>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a64      	ldr	r2, [pc, #400]	; (8004cf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f000 80a9 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b64:	4a62      	ldr	r2, [pc, #392]	; (8004cf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f200 80ae 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b6c:	4a61      	ldr	r2, [pc, #388]	; (8004cf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 80a1 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b74:	4a5f      	ldr	r2, [pc, #380]	; (8004cf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f200 80a6 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b7c:	4a5e      	ldr	r2, [pc, #376]	; (8004cf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f000 8099 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b84:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f200 809e 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b90:	f000 8091 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004b94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b98:	f200 8096 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba0:	f000 8089 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba8:	f200 808e 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d03e      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0x124>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	f200 8087 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_TIM_ConfigClockSource+0x1c2>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d87f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d01a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xf6>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d87b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d050      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x16a>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d877      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d03c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x14a>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d873      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d058      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x18a>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d86f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d064      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d86b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d060      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d867      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d05a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c00:	e062      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f000 f9bd 	bl	8004f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
      break;
 8004c2e:	e04f      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f000 f9a6 	bl	8004f90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	609a      	str	r2, [r3, #8]
      break;
 8004c54:	e03c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 f916 	bl	8004e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2150      	movs	r1, #80	; 0x50
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f970 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e02c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 f935 	bl	8004ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2160      	movs	r1, #96	; 0x60
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f960 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e01c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 f8f6 	bl	8004e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f950 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e00c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 f947 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	ffceff88 	.word	0xffceff88
 8004cf0:	00100040 	.word	0x00100040
 8004cf4:	00100030 	.word	0x00100030
 8004cf8:	00100020 	.word	0x00100020

08004cfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3d      	ldr	r2, [pc, #244]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3c      	ldr	r2, [pc, #240]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01f      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d01b      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <TIM_Base_SetConfig+0x118>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d017      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <TIM_Base_SetConfig+0x11c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <TIM_Base_SetConfig+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0x9a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a10      	ldr	r2, [pc, #64]	; (8004e74 <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <TIM_Base_SetConfig+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <TIM_Base_SetConfig+0x128>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0xf8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	615a      	str	r2, [r3, #20]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40010400 	.word	0x40010400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800

08004e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 030a 	bic.w	r3, r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0210 	bic.w	r2, r3, #16
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <TIM_ITRx_SetConfig+0x38>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f043 0307 	orr.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	ffcfff8f 	.word	0xffcfff8f

08004f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	021a      	lsls	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	609a      	str	r2, [r3, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e06d      	b.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a20      	ldr	r2, [pc, #128]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d01d      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10c      	bne.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40001800 	.word	0x40001800
 80050e8:	40014000 	.word	0x40014000

080050ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 001c 	add.w	r0, r7, #28
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2b01      	cmp	r3, #1
 800513e:	d120      	bne.n	8005182 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <USB_CoreInit+0xd4>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fc04 	bl	8006984 <USB_CoreReset>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
 8005180:	e01a      	b.n	80051b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fbf8 	bl	8006984 <USB_CoreReset>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
 80051aa:	e005      	b.n	80051b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d116      	bne.n	80051ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <USB_CoreInit+0xd8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f043 0206 	orr.w	r2, r3, #6
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	ffbdffbf 	.word	0xffbdffbf
 8005200:	03ee0000 	.word	0x03ee0000

08005204 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d165      	bne.n	80052e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a41      	ldr	r2, [pc, #260]	; (8005320 <USB_SetTurnaroundTime+0x11c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0x2a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a40      	ldr	r2, [pc, #256]	; (8005324 <USB_SetTurnaroundTime+0x120>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d202      	bcs.n	800522e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005228:	230f      	movs	r3, #15
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e062      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a3c      	ldr	r2, [pc, #240]	; (8005324 <USB_SetTurnaroundTime+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d306      	bcc.n	8005244 <USB_SetTurnaroundTime+0x40>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a3b      	ldr	r2, [pc, #236]	; (8005328 <USB_SetTurnaroundTime+0x124>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d202      	bcs.n	8005244 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800523e:	230e      	movs	r3, #14
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e057      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <USB_SetTurnaroundTime+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d306      	bcc.n	800525a <USB_SetTurnaroundTime+0x56>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a37      	ldr	r2, [pc, #220]	; (800532c <USB_SetTurnaroundTime+0x128>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005254:	230d      	movs	r3, #13
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e04c      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a33      	ldr	r2, [pc, #204]	; (800532c <USB_SetTurnaroundTime+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d306      	bcc.n	8005270 <USB_SetTurnaroundTime+0x6c>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4a32      	ldr	r2, [pc, #200]	; (8005330 <USB_SetTurnaroundTime+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d802      	bhi.n	8005270 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800526a:	230c      	movs	r3, #12
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e041      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <USB_SetTurnaroundTime+0x12c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d906      	bls.n	8005286 <USB_SetTurnaroundTime+0x82>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <USB_SetTurnaroundTime+0x130>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d802      	bhi.n	8005286 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005280:	230b      	movs	r3, #11
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e036      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <USB_SetTurnaroundTime+0x130>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d906      	bls.n	800529c <USB_SetTurnaroundTime+0x98>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4a29      	ldr	r2, [pc, #164]	; (8005338 <USB_SetTurnaroundTime+0x134>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d802      	bhi.n	800529c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005296:	230a      	movs	r3, #10
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e02b      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a26      	ldr	r2, [pc, #152]	; (8005338 <USB_SetTurnaroundTime+0x134>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d906      	bls.n	80052b2 <USB_SetTurnaroundTime+0xae>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4a25      	ldr	r2, [pc, #148]	; (800533c <USB_SetTurnaroundTime+0x138>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d202      	bcs.n	80052b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052ac:	2309      	movs	r3, #9
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e020      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a21      	ldr	r2, [pc, #132]	; (800533c <USB_SetTurnaroundTime+0x138>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d306      	bcc.n	80052c8 <USB_SetTurnaroundTime+0xc4>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4a20      	ldr	r2, [pc, #128]	; (8005340 <USB_SetTurnaroundTime+0x13c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d802      	bhi.n	80052c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052c2:	2308      	movs	r3, #8
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e015      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <USB_SetTurnaroundTime+0x13c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d906      	bls.n	80052de <USB_SetTurnaroundTime+0xda>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <USB_SetTurnaroundTime+0x140>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d202      	bcs.n	80052de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052d8:	2307      	movs	r3, #7
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e00a      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052de:	2306      	movs	r3, #6
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e007      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052ea:	2309      	movs	r3, #9
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e001      	b.n	80052f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052f0:	2309      	movs	r3, #9
 80052f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800530c:	431a      	orrs	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	00d8acbf 	.word	0x00d8acbf
 8005324:	00e4e1c0 	.word	0x00e4e1c0
 8005328:	00f42400 	.word	0x00f42400
 800532c:	01067380 	.word	0x01067380
 8005330:	011a499f 	.word	0x011a499f
 8005334:	01312cff 	.word	0x01312cff
 8005338:	014ca43f 	.word	0x014ca43f
 800533c:	016e3600 	.word	0x016e3600
 8005340:	01a6ab1f 	.word	0x01a6ab1f
 8005344:	01e84800 	.word	0x01e84800

08005348 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d115      	bne.n	80053da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f7fb fb3c 	bl	8000a38 <HAL_Delay>
      ms++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fa4b 	bl	8006862 <USB_GetMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d01e      	beq.n	8005410 <USB_SetCurrentMode+0x84>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b31      	cmp	r3, #49	; 0x31
 80053d6:	d9f0      	bls.n	80053ba <USB_SetCurrentMode+0x2e>
 80053d8:	e01a      	b.n	8005410 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fb fb23 	bl	8000a38 <HAL_Delay>
      ms++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 fa32 	bl	8006862 <USB_GetMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <USB_SetCurrentMode+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b31      	cmp	r3, #49	; 0x31
 8005408:	d9f0      	bls.n	80053ec <USB_SetCurrentMode+0x60>
 800540a:	e001      	b.n	8005410 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e005      	b.n	800541c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b32      	cmp	r3, #50	; 0x32
 8005414:	d101      	bne.n	800541a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005424:	b084      	sub	sp, #16
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e009      	b.n	8005458 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3340      	adds	r3, #64	; 0x40
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	2200      	movs	r2, #0
 8005450:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3301      	adds	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b0e      	cmp	r3, #14
 800545c:	d9f2      	bls.n	8005444 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11c      	bne.n	800549e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005472:	f043 0302 	orr.w	r3, r3, #2
 8005476:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e005      	b.n	80054aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2300      	movs	r3, #0
 80054b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	4619      	mov	r1, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	461a      	mov	r2, r3
 80054c6:	680b      	ldr	r3, [r1, #0]
 80054c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f965 	bl	80057a8 <USB_SetDevSpeed>
 80054de:	e008      	b.n	80054f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f960 	bl	80057a8 <USB_SetDevSpeed>
 80054e8:	e003      	b.n	80054f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ea:	2103      	movs	r1, #3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f95b 	bl	80057a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054f2:	2110      	movs	r1, #16
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8f3 	bl	80056e0 <USB_FlushTxFifo>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f91f 	bl	8005748 <USB_FlushRxFifo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e043      	b.n	80055c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d118      	bne.n	8005588 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e013      	b.n	800559a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e008      	b.n	800559a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	461a      	mov	r2, r3
 80055ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3301      	adds	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3b7      	bcc.n	800553e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e043      	b.n	800565c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ea:	d118      	bne.n	800561e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e013      	b.n	8005630 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e008      	b.n	8005630 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3b7      	bcc.n	80055d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f043 0210 	orr.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <USB_DevInit+0x2b4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d105      	bne.n	80056c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <USB_DevInit+0x2b8>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d4:	b004      	add	sp, #16
 80056d6:	4770      	bx	lr
 80056d8:	803c3800 	.word	0x803c3800
 80056dc:	40000004 	.word	0x40000004

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <USB_FlushTxFifo+0x64>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01b      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	daf2      	bge.n	80056ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <USB_FlushTxFifo+0x64>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d0f0      	beq.n	8005718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	00030d40 	.word	0x00030d40

08005748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <USB_FlushRxFifo+0x5c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e018      	b.n	8005798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	daf2      	bge.n	8005754 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2210      	movs	r2, #16
 8005776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <USB_FlushRxFifo+0x5c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e006      	b.n	8005798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d0f0      	beq.n	8005778 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	00030d40 	.word	0x00030d40

080057a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0306 	and.w	r3, r3, #6
 80057f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
 80057fe:	e00a      	b.n	8005816 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d002      	beq.n	800580c <USB_GetDevSpeed+0x32>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d102      	bne.n	8005812 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800580c:	2302      	movs	r3, #2
 800580e:	75fb      	strb	r3, [r7, #23]
 8005810:	e001      	b.n	8005816 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005812:	230f      	movs	r3, #15
 8005814:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d139      	bne.n	80058b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	b29b      	uxth	r3, r3
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585e:	4313      	orrs	r3, r2
 8005860:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d153      	bne.n	8005920 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	791b      	ldrb	r3, [r3, #4]
 8005892:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005894:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	059b      	lsls	r3, r3, #22
 800589a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800589c:	431a      	orrs	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0159      	lsls	r1, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	440b      	add	r3, r1
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	4619      	mov	r1, r3
 80058ac:	4b20      	ldr	r3, [pc, #128]	; (8005930 <USB_ActivateEndpoint+0x10c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
 80058b2:	e035      	b.n	8005920 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d119      	bne.n	8005920 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	791b      	ldrb	r3, [r3, #4]
 8005906:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005908:	430b      	orrs	r3, r1
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	0159      	lsls	r1, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	440b      	add	r3, r1
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	4619      	mov	r1, r3
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <USB_ActivateEndpoint+0x10c>)
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	10008000 	.word	0x10008000

08005934 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d161      	bne.n	8005a14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005966:	d11f      	bne.n	80059a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	440a      	add	r2, r1
 800597e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005986:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2101      	movs	r1, #1
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	b29b      	uxth	r3, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c8:	4013      	ands	r3, r2
 80059ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f303 	lsl.w	r3, r1, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4013      	ands	r3, r2
 80059ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	0159      	lsls	r1, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	440b      	add	r3, r1
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <USB_DeactivateEndpoint+0x1b0>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
 8005a12:	e060      	b.n	8005ad6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a2a:	d11f      	bne.n	8005a6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	43db      	mvns	r3, r3
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0159      	lsls	r1, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	440b      	add	r3, r1
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <USB_DeactivateEndpoint+0x1b4>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	ec337800 	.word	0xec337800
 8005ae8:	eff37800 	.word	0xeff37800

08005aec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 8163 	bne.w	8005dd4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d132      	bne.n	8005b7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	0159      	lsls	r1, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	4619      	mov	r1, r3
 8005b32:	4ba5      	ldr	r3, [pc, #660]	; (8005dc8 <USB_EPStartXfer+0x2dc>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	0159      	lsls	r1, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	4619      	mov	r1, r3
 8005b74:	4b95      	ldr	r3, [pc, #596]	; (8005dcc <USB_EPStartXfer+0x2e0>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	610b      	str	r3, [r1, #16]
 8005b7a:	e074      	b.n	8005c66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	0159      	lsls	r1, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	440b      	add	r3, r1
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	4619      	mov	r1, r3
 8005b98:	4b8c      	ldr	r3, [pc, #560]	; (8005dcc <USB_EPStartXfer+0x2e0>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	0159      	lsls	r1, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	440b      	add	r3, r1
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4b83      	ldr	r3, [pc, #524]	; (8005dc8 <USB_EPStartXfer+0x2dc>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	440b      	add	r3, r1
 8005bd8:	1e59      	subs	r1, r3, #1
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005be4:	4b7a      	ldr	r3, [pc, #488]	; (8005dd0 <USB_EPStartXfer+0x2e4>)
 8005be6:	400b      	ands	r3, r1
 8005be8:	69b9      	ldr	r1, [r7, #24]
 8005bea:	0148      	lsls	r0, r1, #5
 8005bec:	69f9      	ldr	r1, [r7, #28]
 8005bee:	4401      	add	r1, r0
 8005bf0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	69b9      	ldr	r1, [r7, #24]
 8005c10:	0148      	lsls	r0, r1, #5
 8005c12:	69f9      	ldr	r1, [r7, #28]
 8005c14:	4401      	add	r1, r0
 8005c16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	791b      	ldrb	r3, [r3, #4]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11f      	bne.n	8005c66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d14b      	bne.n	8005d04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d128      	bne.n	8005ce2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d110      	bne.n	8005cc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	e00f      	b.n	8005ce2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e137      	b.n	8005f74 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	791b      	ldrb	r3, [r3, #4]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d015      	beq.n	8005d58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 811f 	beq.w	8005f74 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	2101      	movs	r1, #1
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	69f9      	ldr	r1, [r7, #28]
 8005d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d52:	4313      	orrs	r3, r2
 8005d54:	634b      	str	r3, [r1, #52]	; 0x34
 8005d56:	e10d      	b.n	8005f74 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d110      	bne.n	8005d8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e00f      	b.n	8005daa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6919      	ldr	r1, [r3, #16]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	b298      	uxth	r0, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 faea 	bl	8006398 <USB_WritePacket>
 8005dc4:	e0d6      	b.n	8005f74 <USB_EPStartXfer+0x488>
 8005dc6:	bf00      	nop
 8005dc8:	e007ffff 	.word	0xe007ffff
 8005dcc:	fff80000 	.word	0xfff80000
 8005dd0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	0159      	lsls	r1, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	440b      	add	r3, r1
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	4619      	mov	r1, r3
 8005df0:	4b63      	ldr	r3, [pc, #396]	; (8005f80 <USB_EPStartXfer+0x494>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	0159      	lsls	r1, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	4619      	mov	r1, r3
 8005e12:	4b5c      	ldr	r3, [pc, #368]	; (8005f84 <USB_EPStartXfer+0x498>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d123      	bne.n	8005e68 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	0148      	lsls	r0, r1, #5
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	4401      	add	r1, r0
 8005e3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e64:	6113      	str	r3, [r2, #16]
 8005e66:	e037      	b.n	8005ed8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	1e5a      	subs	r2, r3, #1
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	8afa      	ldrh	r2, [r7, #22]
 8005e84:	fb03 f202 	mul.w	r2, r3, r2
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	8afb      	ldrh	r3, [r7, #22]
 8005e9c:	04d9      	lsls	r1, r3, #19
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <USB_EPStartXfer+0x49c>)
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	0148      	lsls	r0, r1, #5
 8005ea6:	69f9      	ldr	r1, [r7, #28]
 8005ea8:	4401      	add	r1, r0
 8005eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec8:	69b9      	ldr	r1, [r7, #24]
 8005eca:	0148      	lsls	r0, r1, #5
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	4401      	add	r1, r0
 8005ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d10d      	bne.n	8005efa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6919      	ldr	r1, [r3, #16]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d128      	bne.n	8005f54 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d110      	bne.n	8005f34 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00f      	b.n	8005f54 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	fff80000 	.word	0xfff80000
 8005f84:	e007ffff 	.word	0xe007ffff
 8005f88:	1ff80000 	.word	0x1ff80000

08005f8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f040 80ce 	bne.w	800614a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d132      	bne.n	800601c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	0159      	lsls	r1, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4b9a      	ldr	r3, [pc, #616]	; (800623c <USB_EP0StartXfer+0x2b0>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	0159      	lsls	r1, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	440b      	add	r3, r1
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	4619      	mov	r1, r3
 8006014:	4b8a      	ldr	r3, [pc, #552]	; (8006240 <USB_EP0StartXfer+0x2b4>)
 8006016:	4013      	ands	r3, r2
 8006018:	610b      	str	r3, [r1, #16]
 800601a:	e04e      	b.n	80060ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	0159      	lsls	r1, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	440b      	add	r3, r1
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	4619      	mov	r1, r3
 8006038:	4b81      	ldr	r3, [pc, #516]	; (8006240 <USB_EP0StartXfer+0x2b4>)
 800603a:	4013      	ands	r3, r2
 800603c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	440b      	add	r3, r1
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	4619      	mov	r1, r3
 800605a:	4b78      	ldr	r3, [pc, #480]	; (800623c <USB_EP0StartXfer+0x2b0>)
 800605c:	4013      	ands	r3, r2
 800605e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	429a      	cmp	r2, r3
 800606a:	d903      	bls.n	8006074 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060aa:	6939      	ldr	r1, [r7, #16]
 80060ac:	0148      	lsls	r0, r1, #5
 80060ae:	6979      	ldr	r1, [r7, #20]
 80060b0:	4401      	add	r1, r0
 80060b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d11e      	bne.n	80060fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e097      	b.n	800622e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006118:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800611c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8083 	beq.w	800622e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	2101      	movs	r1, #1
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006144:	4313      	orrs	r3, r2
 8006146:	634b      	str	r3, [r1, #52]	; 0x34
 8006148:	e071      	b.n	800622e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	0159      	lsls	r1, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	440b      	add	r3, r1
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	4619      	mov	r1, r3
 8006166:	4b36      	ldr	r3, [pc, #216]	; (8006240 <USB_EP0StartXfer+0x2b4>)
 8006168:	4013      	ands	r3, r2
 800616a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	0159      	lsls	r1, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	440b      	add	r3, r1
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	4619      	mov	r1, r3
 8006188:	4b2c      	ldr	r3, [pc, #176]	; (800623c <USB_EP0StartXfer+0x2b0>)
 800618a:	4013      	ands	r3, r2
 800618c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061dc:	6939      	ldr	r1, [r7, #16]
 80061de:	0148      	lsls	r0, r1, #5
 80061e0:	6979      	ldr	r1, [r7, #20]
 80061e2:	4401      	add	r1, r0
 80061e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061e8:	4313      	orrs	r3, r2
 80061ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10d      	bne.n	800620e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6919      	ldr	r1, [r3, #16]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	460a      	mov	r2, r1
 800620c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006228:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800622c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e007ffff 	.word	0xe007ffff
 8006240:	fff80000 	.word	0xfff80000

08006244 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d14a      	bne.n	80062f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627a:	f040 8086 	bne.w	800638a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d902      	bls.n	80062dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
          break;
 80062da:	e056      	b.n	800638a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f4:	d0e7      	beq.n	80062c6 <USB_EPStopXfer+0x82>
 80062f6:	e048      	b.n	800638a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006310:	d13b      	bne.n	800638a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006334:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006358:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f242 7210 	movw	r2, #10000	; 0x2710
 8006366:	4293      	cmp	r3, r2
 8006368:	d902      	bls.n	8006370 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
          break;
 800636e:	e00c      	b.n	800638a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006388:	d0e7      	beq.n	800635a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	460b      	mov	r3, r1
 80063a8:	71fb      	strb	r3, [r7, #7]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d123      	bne.n	8006406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	3303      	adds	r3, #3
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e018      	b.n	80063fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	031a      	lsls	r2, r3, #12
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	d3e2      	bcc.n	80063cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3724      	adds	r7, #36	; 0x24
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006414:	b480      	push	{r7}
 8006416:	b08b      	sub	sp, #44	; 0x2c
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	089b      	lsrs	r3, r3, #2
 800642e:	b29b      	uxth	r3, r3
 8006430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e014      	b.n	800646a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	601a      	str	r2, [r3, #0]
    pDest++;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	3301      	adds	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	3301      	adds	r3, #1
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	3301      	adds	r3, #1
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	3301      	adds	r3, #1
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3e6      	bcc.n	8006440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006472:	8bfb      	ldrh	r3, [r7, #30]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01e      	beq.n	80064b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	461a      	mov	r2, r3
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	701a      	strb	r2, [r3, #0]
      i++;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	3301      	adds	r3, #1
 80064a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ea      	bne.n	800648c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	372c      	adds	r7, #44	; 0x2c
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d12c      	bne.n	800653a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	db12      	blt.n	8006518 <USB_EPSetStall+0x54>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00f      	beq.n	8006518 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006516:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	e02b      	b.n	8006592 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db12      	blt.n	8006572 <USB_EPSetStall+0xae>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006570:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006590:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d128      	bne.n	800660e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d003      	beq.n	80065ec <USB_EPClearStall+0x4c>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	791b      	ldrb	r3, [r3, #4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d138      	bne.n	800665e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	440a      	add	r2, r1
 8006602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e027      	b.n	800665e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800662c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	791b      	ldrb	r3, [r3, #4]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d003      	beq.n	800663e <USB_EPClearStall+0x9e>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	791b      	ldrb	r3, [r3, #4]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d10f      	bne.n	800665e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800668e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a6:	4313      	orrs	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f023 0302 	bic.w	r3, r3, #2
 80066ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006714:	f023 0303 	bic.w	r3, r3, #3
 8006718:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006754:	68fb      	ldr	r3, [r7, #12]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	0c1b      	lsrs	r3, r3, #16
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	b29b      	uxth	r3, r3
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067f8:	68bb      	ldr	r3, [r7, #8]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	01db      	lsls	r3, r3, #7
 8006838:	b2db      	uxtb	r3, r3
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4013      	ands	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006854:	68bb      	ldr	r3, [r7, #8]
}
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0301 	and.w	r3, r3, #1
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	4619      	mov	r1, r3
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <USB_ActivateSetup+0x44>)
 800689e:	4013      	ands	r3, r2
 80068a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	fffff800 	.word	0xfffff800

080068c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	460b      	mov	r3, r1
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	333c      	adds	r3, #60	; 0x3c
 80068de:	3304      	adds	r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4a26      	ldr	r2, [pc, #152]	; (8006980 <USB_EP0_OutStart+0xb8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d90a      	bls.n	8006902 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fc:	d101      	bne.n	8006902 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e037      	b.n	8006972 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f043 0318 	orr.w	r3, r3, #24
 8006934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006944:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006948:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800696e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	4f54300a 	.word	0x4f54300a

08006984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <USB_CoreReset+0x64>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e01b      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	daf2      	bge.n	8006990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <USB_CoreReset+0x64>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d0f0      	beq.n	80069ba <USB_CoreReset+0x36>

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	00030d40 	.word	0x00030d40

080069ec <fft_start>:
static uint32_t time_test2;
static uint32_t time_test3;
static uint32_t time_test4;

void fft_start()
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
	arm_cfft_radix4_instance_f32 scfft;
	arm_cfft_radix4_init_f32(&scfft, FFT_LENGTH, 0, 1);
 80069f2:	1d38      	adds	r0, r7, #4
 80069f4:	2301      	movs	r3, #1
 80069f6:	2200      	movs	r2, #0
 80069f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069fc:	f002 ff12 	bl	8009824 <arm_cfft_radix4_init_f32>

	int16_t temp_buf;
    for (int32_t i = 0; i < FFT_LENGTH; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e03c      	b.n	8006a80 <fft_start+0x94>
    {
        if(i < 600)
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006a0c:	da24      	bge.n	8006a58 <fft_start+0x6c>
        {
        	temp_buf = UserRxBufferFS[2 * i]|(UserRxBufferFS[2 * i + 1] << 8);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4a2f      	ldr	r2, [pc, #188]	; (8006ad0 <fft_start+0xe4>)
 8006a14:	5cd3      	ldrb	r3, [r2, r3]
 8006a16:	b21a      	sxth	r2, r3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	492c      	ldr	r1, [pc, #176]	; (8006ad0 <fft_start+0xe4>)
 8006a20:	5ccb      	ldrb	r3, [r1, r3]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	b21b      	sxth	r3, r3
 8006a26:	4313      	orrs	r3, r2
 8006a28:	837b      	strh	r3, [r7, #26]
            fft_inputbuf[2 * i]     = (float32_t)(temp_buf);
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006a32:	ee07 2a90 	vmov	s15, r2
 8006a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a3a:	4a26      	ldr	r2, [pc, #152]	; (8006ad4 <fft_start+0xe8>)
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	edc3 7a00 	vstr	s15, [r3]
            fft_inputbuf[2 * i + 1] = 0;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a22      	ldr	r2, [pc, #136]	; (8006ad4 <fft_start+0xe8>)
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e010      	b.n	8006a7a <fft_start+0x8e>
        }
        else
        {
            fft_inputbuf[2 * i]     = 0;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <fft_start+0xe8>)
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
            fft_inputbuf[2 * i + 1] = 0;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <fft_start+0xe8>)
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
    for (int32_t i = 0; i < FFT_LENGTH; i++)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	dbbe      	blt.n	8006a06 <fft_start+0x1a>
        }
    }
    TIM2->CNT = 0;
 8006a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24
    arm_cfft_radix4_f32(&scfft, fft_inputbuf);
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	4910      	ldr	r1, [pc, #64]	; (8006ad4 <fft_start+0xe8>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f003 fa85 	bl	8009fa4 <arm_cfft_radix4_f32>
    time_test1 =  TIM2->CNT;
 8006a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <fft_start+0xec>)
 8006aa2:	6013      	str	r3, [r2, #0]
    arm_cmplx_mag_f32(fft_inputbuf, fft_outputbuf, FFT_LENGTH);
 8006aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aa8:	490c      	ldr	r1, [pc, #48]	; (8006adc <fft_start+0xf0>)
 8006aaa:	480a      	ldr	r0, [pc, #40]	; (8006ad4 <fft_start+0xe8>)
 8006aac:	f003 fb0a 	bl	800a0c4 <arm_cmplx_mag_f32>
    time_test2 =  TIM2->CNT;
 8006ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <fft_start+0xf4>)
 8006ab8:	6013      	str	r3, [r2, #0]
    caculate_range();
 8006aba:	f000 f843 	bl	8006b44 <caculate_range>
    time_test3 =  TIM2->CNT;
 8006abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <fft_start+0xf8>)
 8006ac6:	6013      	str	r3, [r2, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	2400c504 	.word	0x2400c504
 8006ad4:	24000200 	.word	0x24000200
 8006ad8:	2400c218 	.word	0x2400c218
 8006adc:	24008200 	.word	0x24008200
 8006ae0:	2400c21c 	.word	0x2400c21c
 8006ae4:	2400c220 	.word	0x2400c220

08006ae8 <find_fft_max>:

uint32_t find_fft_max()
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
	float32_t max = 0;
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
	uint32_t  max_x;
	for (int32_t i = 0; i < FFT_LENGTH/2; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	e017      	b.n	8006b2a <find_fft_max+0x42>
	{
		if(max < fft_outputbuf[i])
 8006afa:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <find_fft_max+0x58>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	edd3 7a00 	vldr	s15, [r3]
 8006b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b12:	d507      	bpl.n	8006b24 <find_fft_max+0x3c>
		{
			max = fft_outputbuf[i];
 8006b14:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <find_fft_max+0x58>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
			max_x = i;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60bb      	str	r3, [r7, #8]
	for (int32_t i = 0; i < FFT_LENGTH/2; i++)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3301      	adds	r3, #1
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	dbe3      	blt.n	8006afa <find_fft_max+0x12>
		}
	}
	return max_x;
 8006b32:	68bb      	ldr	r3, [r7, #8]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	24008200 	.word	0x24008200

08006b44 <caculate_range>:

double caculate_range()
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
	uint32_t max_x = find_fft_max();
 8006b4a:	f7ff ffcd 	bl	8006ae8 <find_fft_max>
 8006b4e:	60f8      	str	r0, [r7, #12]
	max_x_test = max_x;
 8006b50:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <caculate_range+0xac>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6013      	str	r3, [r2, #0]
	gap_test = gap;
 8006b56:	4b27      	ldr	r3, [pc, #156]	; (8006bf4 <caculate_range+0xb0>)
 8006b58:	ed93 5b00 	vldr	d5, [r3]
 8006b5c:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <caculate_range+0xb4>)
 8006b5e:	ed93 7b00 	vldr	d7, [r3]
 8006b62:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006b66:	4b25      	ldr	r3, [pc, #148]	; (8006bfc <caculate_range+0xb8>)
 8006b68:	ed93 7b00 	vldr	d7, [r3]
 8006b6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006b70:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <caculate_range+0xbc>)
 8006b72:	ed93 7b00 	vldr	d7, [r3]
 8006b76:	ee26 5b07 	vmul.f64	d5, d6, d7
 8006b7a:	4b22      	ldr	r3, [pc, #136]	; (8006c04 <caculate_range+0xc0>)
 8006b7c:	ed93 7b00 	vldr	d7, [r3]
 8006b80:	ee37 6b07 	vadd.f64	d6, d7, d7
 8006b84:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006b88:	4b1f      	ldr	r3, [pc, #124]	; (8006c08 <caculate_range+0xc4>)
 8006b8a:	ed83 7b00 	vstr	d7, [r3]
	double range = (max_x * gap);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006b98:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <caculate_range+0xb0>)
 8006b9a:	ed93 4b00 	vldr	d4, [r3]
 8006b9e:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <caculate_range+0xb4>)
 8006ba0:	ed93 7b00 	vldr	d7, [r3]
 8006ba4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8006ba8:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <caculate_range+0xb8>)
 8006baa:	ed93 7b00 	vldr	d7, [r3]
 8006bae:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <caculate_range+0xbc>)
 8006bb4:	ed93 7b00 	vldr	d7, [r3]
 8006bb8:	ee25 4b07 	vmul.f64	d4, d5, d7
 8006bbc:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <caculate_range+0xc0>)
 8006bbe:	ed93 7b00 	vldr	d7, [r3]
 8006bc2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8006bc6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8006bca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006bce:	ed87 7b00 	vstr	d7, [r7]
	range_test = range;
 8006bd2:	490e      	ldr	r1, [pc, #56]	; (8006c0c <caculate_range+0xc8>)
 8006bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd8:	e9c1 2300 	strd	r2, r3, [r1]
	return range;
 8006bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be0:	ec43 2b17 	vmov	d7, r2, r3
}
 8006be4:	eeb0 0b47 	vmov.f64	d0, d7
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	2400c208 	.word	0x2400c208
 8006bf4:	24000010 	.word	0x24000010
 8006bf8:	24000018 	.word	0x24000018
 8006bfc:	24000020 	.word	0x24000020
 8006c00:	24000030 	.word	0x24000030
 8006c04:	24000028 	.word	0x24000028
 8006c08:	2400c210 	.word	0x2400c210
 8006c0c:	2400c200 	.word	0x2400c200

08006c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c20:	f002 fdbc 	bl	800979c <USBD_static_malloc>
 8006c24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32b0      	adds	r2, #176	; 0xb0
 8006c36:	2100      	movs	r1, #0
 8006c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0d4      	b.n	8006dea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c44:	2100      	movs	r1, #0
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f003 fb98 	bl	800a37c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	32b0      	adds	r2, #176	; 0xb0
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32b0      	adds	r2, #176	; 0xb0
 8006c66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7c1b      	ldrb	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d138      	bne.n	8006cea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c78:	4b5e      	ldr	r3, [pc, #376]	; (8006df4 <USBD_CDC_Init+0x1e4>)
 8006c7a:	7819      	ldrb	r1, [r3, #0]
 8006c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c80:	2202      	movs	r2, #2
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f002 fc67 	bl	8009556 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c88:	4b5a      	ldr	r3, [pc, #360]	; (8006df4 <USBD_CDC_Init+0x1e4>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ca2:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006caa:	2202      	movs	r2, #2
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 fc52 	bl	8009556 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cb2:	4b51      	ldr	r3, [pc, #324]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cca:	2201      	movs	r2, #1
 8006ccc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006cce:	4b4b      	ldr	r3, [pc, #300]	; (8006dfc <USBD_CDC_Init+0x1ec>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	f003 020f 	and.w	r2, r3, #15
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3326      	adds	r3, #38	; 0x26
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e035      	b.n	8006d56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cea:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <USBD_CDC_Init+0x1e4>)
 8006cec:	7819      	ldrb	r1, [r3, #0]
 8006cee:	2340      	movs	r3, #64	; 0x40
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f002 fc2f 	bl	8009556 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cf8:	4b3e      	ldr	r3, [pc, #248]	; (8006df4 <USBD_CDC_Init+0x1e4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	2201      	movs	r2, #1
 8006d10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d12:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006d14:	7819      	ldrb	r1, [r3, #0]
 8006d16:	2340      	movs	r3, #64	; 0x40
 8006d18:	2202      	movs	r2, #2
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f002 fc1b 	bl	8009556 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d20:	4b35      	ldr	r3, [pc, #212]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d38:	2201      	movs	r2, #1
 8006d3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d3c:	4b2f      	ldr	r3, [pc, #188]	; (8006dfc <USBD_CDC_Init+0x1ec>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3326      	adds	r3, #38	; 0x26
 8006d52:	2210      	movs	r2, #16
 8006d54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <USBD_CDC_Init+0x1ec>)
 8006d58:	7819      	ldrb	r1, [r3, #0]
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 fbf9 	bl	8009556 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <USBD_CDC_Init+0x1ec>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3324      	adds	r3, #36	; 0x24
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	33b0      	adds	r3, #176	; 0xb0
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006db4:	2302      	movs	r3, #2
 8006db6:	e018      	b.n	8006dea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7c1b      	ldrb	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006dc2:	7819      	ldrb	r1, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fcb0 	bl	8009734 <USBD_LL_PrepareReceive>
 8006dd4:	e008      	b.n	8006de8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <USBD_CDC_Init+0x1e8>)
 8006dd8:	7819      	ldrb	r1, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fca6 	bl	8009734 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	240000bf 	.word	0x240000bf
 8006df8:	240000c0 	.word	0x240000c0
 8006dfc:	240000c1 	.word	0x240000c1

08006e00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <USBD_CDC_DeInit+0xf8>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 fbc5 	bl	80095a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e18:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <USBD_CDC_DeInit+0xf8>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3324      	adds	r3, #36	; 0x24
 8006e2e:	2200      	movs	r2, #0
 8006e30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e32:	4b32      	ldr	r3, [pc, #200]	; (8006efc <USBD_CDC_DeInit+0xfc>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fbb2 	bl	80095a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e3e:	4b2f      	ldr	r3, [pc, #188]	; (8006efc <USBD_CDC_DeInit+0xfc>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f003 020f 	and.w	r2, r3, #15
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e56:	2200      	movs	r2, #0
 8006e58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <USBD_CDC_DeInit+0x100>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fb9e 	bl	80095a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e66:	4b26      	ldr	r3, [pc, #152]	; (8006f00 <USBD_CDC_DeInit+0x100>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e80:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <USBD_CDC_DeInit+0x100>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3326      	adds	r3, #38	; 0x26
 8006e96:	2200      	movs	r2, #0
 8006e98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	32b0      	adds	r2, #176	; 0xb0
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01f      	beq.n	8006eec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	33b0      	adds	r3, #176	; 0xb0
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	; 0xb0
 8006eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 fc72 	bl	80097b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32b0      	adds	r2, #176	; 0xb0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	240000bf 	.word	0x240000bf
 8006efc:	240000c0 	.word	0x240000c0
 8006f00:	240000c1 	.word	0x240000c1

08006f04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	32b0      	adds	r2, #176	; 0xb0
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e0bf      	b.n	80070b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d050      	beq.n	8006fe2 <USBD_CDC_Setup+0xde>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	f040 80af 	bne.w	80070a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d03a      	beq.n	8006fc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da1b      	bge.n	8006f90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	33b0      	adds	r3, #176	; 0xb0
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	88d2      	ldrh	r2, [r2, #6]
 8006f74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	88db      	ldrh	r3, [r3, #6]
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	bf28      	it	cs
 8006f7e:	2307      	movcs	r3, #7
 8006f80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	89fa      	ldrh	r2, [r7, #14]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fd89 	bl	8008aa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f8e:	e090      	b.n	80070b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785a      	ldrb	r2, [r3, #1]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b3f      	cmp	r3, #63	; 0x3f
 8006fa0:	d803      	bhi.n	8006faa <USBD_CDC_Setup+0xa6>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	e000      	b.n	8006fac <USBD_CDC_Setup+0xa8>
 8006faa:	2240      	movs	r2, #64	; 0x40
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006fb2:	6939      	ldr	r1, [r7, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd9b 	bl	8008af8 <USBD_CtlPrepareRx>
      break;
 8006fc2:	e076      	b.n	80070b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	33b0      	adds	r3, #176	; 0xb0
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	7850      	ldrb	r0, [r2, #1]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	4798      	blx	r3
      break;
 8006fe0:	e067      	b.n	80070b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b0b      	cmp	r3, #11
 8006fe8:	d851      	bhi.n	800708e <USBD_CDC_Setup+0x18a>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <USBD_CDC_Setup+0xec>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	0800709d 	.word	0x0800709d
 8006ff8:	0800708f 	.word	0x0800708f
 8006ffc:	0800708f 	.word	0x0800708f
 8007000:	0800708f 	.word	0x0800708f
 8007004:	0800708f 	.word	0x0800708f
 8007008:	0800708f 	.word	0x0800708f
 800700c:	0800708f 	.word	0x0800708f
 8007010:	0800708f 	.word	0x0800708f
 8007014:	0800708f 	.word	0x0800708f
 8007018:	0800704b 	.word	0x0800704b
 800701c:	08007075 	.word	0x08007075
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d107      	bne.n	800703c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800702c:	f107 030a 	add.w	r3, r7, #10
 8007030:	2202      	movs	r2, #2
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fd33 	bl	8008aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800703a:	e032      	b.n	80070a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fcbd 	bl	80089be <USBD_CtlError>
            ret = USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	75fb      	strb	r3, [r7, #23]
          break;
 8007048:	e02b      	b.n	80070a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d107      	bne.n	8007066 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007056:	f107 030d 	add.w	r3, r7, #13
 800705a:	2201      	movs	r2, #1
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fd1e 	bl	8008aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007064:	e01d      	b.n	80070a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fca8 	bl	80089be <USBD_CtlError>
            ret = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	75fb      	strb	r3, [r7, #23]
          break;
 8007072:	e016      	b.n	80070a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b03      	cmp	r3, #3
 800707e:	d00f      	beq.n	80070a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fc9b 	bl	80089be <USBD_CtlError>
            ret = USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800708c:	e008      	b.n	80070a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 fc94 	bl	80089be <USBD_CtlError>
          ret = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	75fb      	strb	r3, [r7, #23]
          break;
 800709a:	e002      	b.n	80070a2 <USBD_CDC_Setup+0x19e>
          break;
 800709c:	bf00      	nop
 800709e:	e008      	b.n	80070b2 <USBD_CDC_Setup+0x1ae>
          break;
 80070a0:	bf00      	nop
      }
      break;
 80070a2:	e006      	b.n	80070b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fc89 	bl	80089be <USBD_CtlError>
      ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	75fb      	strb	r3, [r7, #23]
      break;
 80070b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32b0      	adds	r2, #176	; 0xb0
 80070da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e065      	b.n	80071b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32b0      	adds	r2, #176	; 0xb0
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	3318      	adds	r3, #24
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d02f      	beq.n	8007170 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 020f 	and.w	r2, r3, #15
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	3318      	adds	r3, #24
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	f003 010f 	and.w	r1, r3, #15
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	460b      	mov	r3, r1
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	440b      	add	r3, r1
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4403      	add	r3, r0
 8007138:	3348      	adds	r3, #72	; 0x48
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007146:	2b00      	cmp	r3, #0
 8007148:	d112      	bne.n	8007170 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3318      	adds	r3, #24
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007162:	78f9      	ldrb	r1, [r7, #3]
 8007164:	2300      	movs	r3, #0
 8007166:	2200      	movs	r2, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f002 fac2 	bl	80096f2 <USBD_LL_Transmit>
 800716e:	e01f      	b.n	80071b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	33b0      	adds	r3, #176	; 0xb0
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	33b0      	adds	r3, #176	; 0xb0
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	32b0      	adds	r2, #176	; 0xb0
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32b0      	adds	r2, #176	; 0xb0
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e01a      	b.n	8007222 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 fac0 	bl	8009776 <USBD_LL_GetRxDataSize>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	33b0      	adds	r3, #176	; 0xb0
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800721c:	4611      	mov	r1, r2
 800721e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	32b0      	adds	r2, #176	; 0xb0
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	e025      	b.n	8007298 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	; 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01a      	beq.n	8007296 <USBD_CDC_EP0_RxReady+0x6c>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007266:	2bff      	cmp	r3, #255	; 0xff
 8007268:	d015      	beq.n	8007296 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	33b0      	adds	r3, #176	; 0xb0
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007282:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800728a:	b292      	uxth	r2, r2
 800728c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	22ff      	movs	r2, #255	; 0xff
 8007292:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072a8:	2182      	movs	r1, #130	; 0x82
 80072aa:	4818      	ldr	r0, [pc, #96]	; (800730c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072ac:	f000 fd4f 	bl	8007d4e <USBD_GetEpDesc>
 80072b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072b2:	2101      	movs	r1, #1
 80072b4:	4815      	ldr	r0, [pc, #84]	; (800730c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072b6:	f000 fd4a 	bl	8007d4e <USBD_GetEpDesc>
 80072ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072bc:	2181      	movs	r1, #129	; 0x81
 80072be:	4813      	ldr	r0, [pc, #76]	; (800730c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072c0:	f000 fd45 	bl	8007d4e <USBD_GetEpDesc>
 80072c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2210      	movs	r2, #16
 80072d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2200      	movs	r2, #0
 80072dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e0:	711a      	strb	r2, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f4:	711a      	strb	r2, [r3, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2243      	movs	r2, #67	; 0x43
 80072fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007300:	4b02      	ldr	r3, [pc, #8]	; (800730c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2400007c 	.word	0x2400007c

08007310 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007318:	2182      	movs	r1, #130	; 0x82
 800731a:	4818      	ldr	r0, [pc, #96]	; (800737c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800731c:	f000 fd17 	bl	8007d4e <USBD_GetEpDesc>
 8007320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007322:	2101      	movs	r1, #1
 8007324:	4815      	ldr	r0, [pc, #84]	; (800737c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007326:	f000 fd12 	bl	8007d4e <USBD_GetEpDesc>
 800732a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800732c:	2181      	movs	r1, #129	; 0x81
 800732e:	4813      	ldr	r0, [pc, #76]	; (800737c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007330:	f000 fd0d 	bl	8007d4e <USBD_GetEpDesc>
 8007334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2210      	movs	r2, #16
 8007340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2200      	movs	r2, #0
 800734c:	711a      	strb	r2, [r3, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f042 0202 	orr.w	r2, r2, #2
 8007354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	711a      	strb	r2, [r3, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f042 0202 	orr.w	r2, r2, #2
 8007368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2243      	movs	r2, #67	; 0x43
 800736e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	2400007c 	.word	0x2400007c

08007380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007388:	2182      	movs	r1, #130	; 0x82
 800738a:	4818      	ldr	r0, [pc, #96]	; (80073ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800738c:	f000 fcdf 	bl	8007d4e <USBD_GetEpDesc>
 8007390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007392:	2101      	movs	r1, #1
 8007394:	4815      	ldr	r0, [pc, #84]	; (80073ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007396:	f000 fcda 	bl	8007d4e <USBD_GetEpDesc>
 800739a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800739c:	2181      	movs	r1, #129	; 0x81
 800739e:	4813      	ldr	r0, [pc, #76]	; (80073ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073a0:	f000 fcd5 	bl	8007d4e <USBD_GetEpDesc>
 80073a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2210      	movs	r2, #16
 80073b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c0:	711a      	strb	r2, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d4:	711a      	strb	r2, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2243      	movs	r2, #67	; 0x43
 80073de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2400007c 	.word	0x2400007c

080073f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	220a      	movs	r2, #10
 80073fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073fe:	4b03      	ldr	r3, [pc, #12]	; (800740c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	24000038 	.word	0x24000038

08007410 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007420:	2303      	movs	r3, #3
 8007422:	e009      	b.n	8007438 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	33b0      	adds	r3, #176	; 0xb0
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	32b0      	adds	r2, #176	; 0xb0
 800745a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	e008      	b.n	800747c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	32b0      	adds	r2, #176	; 0xb0
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e004      	b.n	80074b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	32b0      	adds	r2, #176	; 0xb0
 80074d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	32b0      	adds	r2, #176	; 0xb0
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e025      	b.n	8007542 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11f      	bne.n	8007540 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2201      	movs	r2, #1
 8007504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007508:	4b10      	ldr	r3, [pc, #64]	; (800754c <USBD_CDC_TransmitPacket+0x88>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4403      	add	r3, r0
 8007522:	3318      	adds	r3, #24
 8007524:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <USBD_CDC_TransmitPacket+0x88>)
 8007528:	7819      	ldrb	r1, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f002 f8db 	bl	80096f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	240000bf 	.word	0x240000bf

08007550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32b0      	adds	r2, #176	; 0xb0
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32b0      	adds	r2, #176	; 0xb0
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800757a:	2303      	movs	r3, #3
 800757c:	e018      	b.n	80075b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7c1b      	ldrb	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <USBD_CDC_ReceivePacket+0x68>)
 8007588:	7819      	ldrb	r1, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 f8cd 	bl	8009734 <USBD_LL_PrepareReceive>
 800759a:	e008      	b.n	80075ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <USBD_CDC_ReceivePacket+0x68>)
 800759e:	7819      	ldrb	r1, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f002 f8c3 	bl	8009734 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	240000c0 	.word	0x240000c0

080075bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e01f      	b.n	8007614 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	79fa      	ldrb	r2, [r7, #7]
 8007606:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f001 ff39 	bl	8009480 <USBD_LL_Init>
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e025      	b.n	8007680 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32ae      	adds	r2, #174	; 0xae
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00f      	beq.n	8007670 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32ae      	adds	r2, #174	; 0xae
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	f107 020e 	add.w	r2, r7, #14
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	4602      	mov	r2, r0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 ff45 	bl	8009520 <USBD_LL_Start>
 8007696:	4603      	mov	r3, r0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	4611      	mov	r1, r2
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	4611      	mov	r1, r2
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f001 f908 	bl	800894a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	2b02      	cmp	r3, #2
 800775c:	d01a      	beq.n	8007794 <USBD_LL_SetupStage+0x72>
 800775e:	2b02      	cmp	r3, #2
 8007760:	d822      	bhi.n	80077a8 <USBD_LL_SetupStage+0x86>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <USBD_LL_SetupStage+0x4a>
 8007766:	2b01      	cmp	r3, #1
 8007768:	d00a      	beq.n	8007780 <USBD_LL_SetupStage+0x5e>
 800776a:	e01d      	b.n	80077a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb5f 	bl	8007e38 <USBD_StdDevReq>
 800777a:	4603      	mov	r3, r0
 800777c:	73fb      	strb	r3, [r7, #15]
      break;
 800777e:	e020      	b.n	80077c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fbc7 	bl	8007f1c <USBD_StdItfReq>
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]
      break;
 8007792:	e016      	b.n	80077c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc29 	bl	8007ff4 <USBD_StdEPReq>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e00c      	b.n	80077c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 ff12 	bl	80095e0 <USBD_LL_StallEP>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	bf00      	nop
  }

  return ret;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	460b      	mov	r3, r1
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80077de:	7afb      	ldrb	r3, [r7, #11]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d16e      	bne.n	80078c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	f040 8098 	bne.w	8007928 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	429a      	cmp	r2, r3
 8007802:	d913      	bls.n	800782c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	4293      	cmp	r3, r2
 800781c:	bf28      	it	cs
 800781e:	4613      	movcs	r3, r2
 8007820:	461a      	mov	r2, r3
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f001 f984 	bl	8008b32 <USBD_CtlContinueRx>
 800782a:	e07d      	b.n	8007928 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b02      	cmp	r3, #2
 8007838:	d014      	beq.n	8007864 <USBD_LL_DataOutStage+0x98>
 800783a:	2b02      	cmp	r3, #2
 800783c:	d81d      	bhi.n	800787a <USBD_LL_DataOutStage+0xae>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <USBD_LL_DataOutStage+0x7c>
 8007842:	2b01      	cmp	r3, #1
 8007844:	d003      	beq.n	800784e <USBD_LL_DataOutStage+0x82>
 8007846:	e018      	b.n	800787a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	75bb      	strb	r3, [r7, #22]
            break;
 800784c:	e018      	b.n	8007880 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007854:	b2db      	uxtb	r3, r3
 8007856:	4619      	mov	r1, r3
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fa5e 	bl	8007d1a <USBD_CoreFindIF>
 800785e:	4603      	mov	r3, r0
 8007860:	75bb      	strb	r3, [r7, #22]
            break;
 8007862:	e00d      	b.n	8007880 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fa60 	bl	8007d34 <USBD_CoreFindEP>
 8007874:	4603      	mov	r3, r0
 8007876:	75bb      	strb	r3, [r7, #22]
            break;
 8007878:	e002      	b.n	8007880 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	75bb      	strb	r3, [r7, #22]
            break;
 800787e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007880:	7dbb      	ldrb	r3, [r7, #22]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d113      	bne.n	80078ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007892:	7dba      	ldrb	r2, [r7, #22]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	32ae      	adds	r2, #174	; 0xae
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80078a2:	7dba      	ldrb	r2, [r7, #22]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80078aa:	7dba      	ldrb	r2, [r7, #22]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	32ae      	adds	r2, #174	; 0xae
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f001 f94a 	bl	8008b54 <USBD_CtlSendStatus>
 80078c0:	e032      	b.n	8007928 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fa31 	bl	8007d34 <USBD_CoreFindEP>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d6:	7dbb      	ldrb	r3, [r7, #22]
 80078d8:	2bff      	cmp	r3, #255	; 0xff
 80078da:	d025      	beq.n	8007928 <USBD_LL_DataOutStage+0x15c>
 80078dc:	7dbb      	ldrb	r3, [r7, #22]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d122      	bne.n	8007928 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d117      	bne.n	800791e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80078ee:	7dba      	ldrb	r2, [r7, #22]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	32ae      	adds	r2, #174	; 0xae
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078fe:	7dba      	ldrb	r2, [r7, #22]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007906:	7dba      	ldrb	r2, [r7, #22]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	32ae      	adds	r2, #174	; 0xae
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	7afa      	ldrb	r2, [r7, #11]
 8007914:	4611      	mov	r1, r2
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	e000      	b.n	800792a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	460b      	mov	r3, r1
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d16f      	bne.n	8007a26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3314      	adds	r3, #20
 800794a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007952:	2b02      	cmp	r3, #2
 8007954:	d15a      	bne.n	8007a0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	429a      	cmp	r2, r3
 8007960:	d914      	bls.n	800798c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	461a      	mov	r2, r3
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f001 f8ac 	bl	8008ad6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 fed5 	bl	8009734 <USBD_LL_PrepareReceive>
 800798a:	e03f      	b.n	8007a0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	429a      	cmp	r2, r3
 8007996:	d11c      	bne.n	80079d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d316      	bcc.n	80079d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d20f      	bcs.n	80079d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 f88d 	bl	8008ad6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079c4:	2300      	movs	r3, #0
 80079c6:	2200      	movs	r2, #0
 80079c8:	2100      	movs	r1, #0
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f001 feb2 	bl	8009734 <USBD_LL_PrepareReceive>
 80079d0:	e01c      	b.n	8007a0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d10f      	bne.n	80079fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	; 0x80
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f001 fded 	bl	80095e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f001 f8b7 	bl	8008b7a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d03a      	beq.n	8007a8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7ff fe42 	bl	80076a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a24:	e032      	b.n	8007a8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a26:	7afb      	ldrb	r3, [r7, #11]
 8007a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f97f 	bl	8007d34 <USBD_CoreFindEP>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2bff      	cmp	r3, #255	; 0xff
 8007a3e:	d025      	beq.n	8007a8c <USBD_LL_DataInStage+0x15a>
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d122      	bne.n	8007a8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d11c      	bne.n	8007a8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a52:	7dfa      	ldrb	r2, [r7, #23]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	32ae      	adds	r2, #174	; 0xae
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d014      	beq.n	8007a8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a62:	7dfa      	ldrb	r2, [r7, #23]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a6a:	7dfa      	ldrb	r2, [r7, #23]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	32ae      	adds	r2, #174	; 0xae
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	7afa      	ldrb	r2, [r7, #11]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	4798      	blx	r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a82:	7dbb      	ldrb	r3, [r7, #22]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a88:	7dbb      	ldrb	r3, [r7, #22]
 8007a8a:	e000      	b.n	8007a8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d014      	beq.n	8007afc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00e      	beq.n	8007afc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6852      	ldr	r2, [r2, #4]
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	4611      	mov	r1, r2
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fd27 	bl	8009556 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2240      	movs	r2, #64	; 0x40
 8007b14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fd19 	bl	8009556 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	621a      	str	r2, [r3, #32]

  return ret;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d106      	bne.n	8007ba8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d110      	bne.n	8007bec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	32ae      	adds	r2, #174	; 0xae
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e01c      	b.n	8007c52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d115      	bne.n	8007c50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	; 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	32ae      	adds	r2, #174	; 0xae
 8007c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	32ae      	adds	r2, #174	; 0xae
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e01c      	b.n	8007cb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d115      	bne.n	8007cb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	32ae      	adds	r2, #174	; 0xae
 8007c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32ae      	adds	r2, #174	; 0xae
 8007ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6852      	ldr	r2, [r2, #4]
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	4611      	mov	r1, r2
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	885b      	ldrh	r3, [r3, #2]
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d920      	bls.n	8007db8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d7e:	e013      	b.n	8007da8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d80:	f107 030a 	add.w	r3, r7, #10
 8007d84:	4619      	mov	r1, r3
 8007d86:	6978      	ldr	r0, [r7, #20]
 8007d88:	f000 f81b 	bl	8007dc2 <USBD_GetNextDesc>
 8007d8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	785b      	ldrb	r3, [r3, #1]
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d108      	bne.n	8007da8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	789b      	ldrb	r3, [r3, #2]
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d008      	beq.n	8007db6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	885b      	ldrh	r3, [r3, #2]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	897b      	ldrh	r3, [r7, #10]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d8e5      	bhi.n	8007d80 <USBD_GetEpDesc+0x32>
 8007db4:	e000      	b.n	8007db8 <USBD_GetEpDesc+0x6a>
          break;
 8007db6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007db8:	693b      	ldr	r3, [r7, #16]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	881a      	ldrh	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	3301      	adds	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e1a:	8a3b      	ldrh	r3, [r7, #16]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	b21a      	sxth	r2, r3
 8007e20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e4e:	2b40      	cmp	r3, #64	; 0x40
 8007e50:	d005      	beq.n	8007e5e <USBD_StdDevReq+0x26>
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d857      	bhi.n	8007f06 <USBD_StdDevReq+0xce>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00f      	beq.n	8007e7a <USBD_StdDevReq+0x42>
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d153      	bne.n	8007f06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32ae      	adds	r2, #174	; 0xae
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	4798      	blx	r3
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
      break;
 8007e78:	e04a      	b.n	8007f10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d83b      	bhi.n	8007efa <USBD_StdDevReq+0xc2>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <USBD_StdDevReq+0x50>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	08007efb 	.word	0x08007efb
 8007e94:	08007ee7 	.word	0x08007ee7
 8007e98:	08007efb 	.word	0x08007efb
 8007e9c:	08007ebb 	.word	0x08007ebb
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007efb 	.word	0x08007efb
 8007ea8:	08007ed3 	.word	0x08007ed3
 8007eac:	08007ec5 	.word	0x08007ec5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa3c 	bl	8008330 <USBD_GetDescriptor>
          break;
 8007eb8:	e024      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fba1 	bl	8008604 <USBD_SetAddress>
          break;
 8007ec2:	e01f      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fbe0 	bl	800868c <USBD_SetConfig>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
          break;
 8007ed0:	e018      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc83 	bl	80087e0 <USBD_GetConfig>
          break;
 8007eda:	e013      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fcb4 	bl	800884c <USBD_GetStatus>
          break;
 8007ee4:	e00e      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fce3 	bl	80088b4 <USBD_SetFeature>
          break;
 8007eee:	e009      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fd07 	bl	8008906 <USBD_ClrFeature>
          break;
 8007ef8:	e004      	b.n	8007f04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fd5e 	bl	80089be <USBD_CtlError>
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fd58 	bl	80089be <USBD_CtlError>
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop

08007f1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	d005      	beq.n	8007f42 <USBD_StdItfReq+0x26>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d852      	bhi.n	8007fe0 <USBD_StdItfReq+0xc4>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <USBD_StdItfReq+0x26>
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d14e      	bne.n	8007fe0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d840      	bhi.n	8007fd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	889b      	ldrh	r3, [r3, #4]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d836      	bhi.n	8007fc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fed9 	bl	8007d1a <USBD_CoreFindIF>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2bff      	cmp	r3, #255	; 0xff
 8007f70:	d01d      	beq.n	8007fae <USBD_StdItfReq+0x92>
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11a      	bne.n	8007fae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f78:	7bba      	ldrb	r2, [r7, #14]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	32ae      	adds	r2, #174	; 0xae
 8007f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00f      	beq.n	8007fa8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f88:	7bba      	ldrb	r2, [r7, #14]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f90:	7bba      	ldrb	r2, [r7, #14]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32ae      	adds	r2, #174	; 0xae
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007fa6:	e004      	b.n	8007fb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007fac:	e001      	b.n	8007fb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d110      	bne.n	8007fdc <USBD_StdItfReq+0xc0>
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10d      	bne.n	8007fdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fdc7 	bl	8008b54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fc6:	e009      	b.n	8007fdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fcf7 	bl	80089be <USBD_CtlError>
          break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fcf2 	bl	80089be <USBD_CtlError>
          break;
 8007fda:	e000      	b.n	8007fde <USBD_StdItfReq+0xc2>
          break;
 8007fdc:	bf00      	nop
      }
      break;
 8007fde:	e004      	b.n	8007fea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fceb 	bl	80089be <USBD_CtlError>
      break;
 8007fe8:	bf00      	nop
  }

  return ret;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d007      	beq.n	8008024 <USBD_StdEPReq+0x30>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	f200 817f 	bhi.w	8008318 <USBD_StdEPReq+0x324>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02a      	beq.n	8008074 <USBD_StdEPReq+0x80>
 800801e:	2b20      	cmp	r3, #32
 8008020:	f040 817a 	bne.w	8008318 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fe83 	bl	8007d34 <USBD_CoreFindEP>
 800802e:	4603      	mov	r3, r0
 8008030:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008032:	7b7b      	ldrb	r3, [r7, #13]
 8008034:	2bff      	cmp	r3, #255	; 0xff
 8008036:	f000 8174 	beq.w	8008322 <USBD_StdEPReq+0x32e>
 800803a:	7b7b      	ldrb	r3, [r7, #13]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 8170 	bne.w	8008322 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008042:	7b7a      	ldrb	r2, [r7, #13]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800804a:	7b7a      	ldrb	r2, [r7, #13]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	32ae      	adds	r2, #174	; 0xae
 8008050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8163 	beq.w	8008322 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800805c:	7b7a      	ldrb	r2, [r7, #13]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32ae      	adds	r2, #174	; 0xae
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008072:	e156      	b.n	8008322 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d008      	beq.n	800808e <USBD_StdEPReq+0x9a>
 800807c:	2b03      	cmp	r3, #3
 800807e:	f300 8145 	bgt.w	800830c <USBD_StdEPReq+0x318>
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 809b 	beq.w	80081be <USBD_StdEPReq+0x1ca>
 8008088:	2b01      	cmp	r3, #1
 800808a:	d03c      	beq.n	8008106 <USBD_StdEPReq+0x112>
 800808c:	e13e      	b.n	800830c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d002      	beq.n	80080a0 <USBD_StdEPReq+0xac>
 800809a:	2b03      	cmp	r3, #3
 800809c:	d016      	beq.n	80080cc <USBD_StdEPReq+0xd8>
 800809e:	e02c      	b.n	80080fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <USBD_StdEPReq+0xce>
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d00a      	beq.n	80080c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fa95 	bl	80095e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 fa91 	bl	80095e0 <USBD_LL_StallEP>
 80080be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c0:	e020      	b.n	8008104 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fc7a 	bl	80089be <USBD_CtlError>
              break;
 80080ca:	e01b      	b.n	8008104 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	885b      	ldrh	r3, [r3, #2]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10e      	bne.n	80080f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <USBD_StdEPReq+0xfe>
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b80      	cmp	r3, #128	; 0x80
 80080de:	d008      	beq.n	80080f2 <USBD_StdEPReq+0xfe>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fa77 	bl	80095e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fd2e 	bl	8008b54 <USBD_CtlSendStatus>

              break;
 80080f8:	e004      	b.n	8008104 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fc5e 	bl	80089be <USBD_CtlError>
              break;
 8008102:	bf00      	nop
          }
          break;
 8008104:	e107      	b.n	8008316 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d002      	beq.n	8008118 <USBD_StdEPReq+0x124>
 8008112:	2b03      	cmp	r3, #3
 8008114:	d016      	beq.n	8008144 <USBD_StdEPReq+0x150>
 8008116:	e04b      	b.n	80081b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <USBD_StdEPReq+0x146>
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b80      	cmp	r3, #128	; 0x80
 8008122:	d00a      	beq.n	800813a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 fa59 	bl	80095e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800812e:	2180      	movs	r1, #128	; 0x80
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 fa55 	bl	80095e0 <USBD_LL_StallEP>
 8008136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008138:	e040      	b.n	80081bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fc3e 	bl	80089be <USBD_CtlError>
              break;
 8008142:	e03b      	b.n	80081bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	885b      	ldrh	r3, [r3, #2]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d136      	bne.n	80081ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fa5f 	bl	800961e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fcf7 	bl	8008b54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fde2 	bl	8007d34 <USBD_CoreFindEP>
 8008170:	4603      	mov	r3, r0
 8008172:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008174:	7b7b      	ldrb	r3, [r7, #13]
 8008176:	2bff      	cmp	r3, #255	; 0xff
 8008178:	d01f      	beq.n	80081ba <USBD_StdEPReq+0x1c6>
 800817a:	7b7b      	ldrb	r3, [r7, #13]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11c      	bne.n	80081ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008180:	7b7a      	ldrb	r2, [r7, #13]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008188:	7b7a      	ldrb	r2, [r7, #13]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32ae      	adds	r2, #174	; 0xae
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008198:	7b7a      	ldrb	r2, [r7, #13]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	32ae      	adds	r2, #174	; 0xae
 800819e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80081ae:	e004      	b.n	80081ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc03 	bl	80089be <USBD_CtlError>
              break;
 80081b8:	e000      	b.n	80081bc <USBD_StdEPReq+0x1c8>
              break;
 80081ba:	bf00      	nop
          }
          break;
 80081bc:	e0ab      	b.n	8008316 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d002      	beq.n	80081d0 <USBD_StdEPReq+0x1dc>
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d032      	beq.n	8008234 <USBD_StdEPReq+0x240>
 80081ce:	e097      	b.n	8008300 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <USBD_StdEPReq+0x1f2>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b80      	cmp	r3, #128	; 0x80
 80081da:	d004      	beq.n	80081e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fbed 	bl	80089be <USBD_CtlError>
                break;
 80081e4:	e091      	b.n	800830a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da0b      	bge.n	8008206 <USBD_StdEPReq+0x212>
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	3310      	adds	r3, #16
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	3304      	adds	r3, #4
 8008204:	e00b      	b.n	800821e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	4413      	add	r3, r2
 800821c:	3304      	adds	r3, #4
 800821e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2202      	movs	r2, #2
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fc37 	bl	8008aa0 <USBD_CtlSendData>
              break;
 8008232:	e06a      	b.n	800830a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	da11      	bge.n	8008260 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	f003 020f 	and.w	r2, r3, #15
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d117      	bne.n	8008286 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fbb0 	bl	80089be <USBD_CtlError>
                  break;
 800825e:	e054      	b.n	800830a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	f003 020f 	and.w	r2, r3, #15
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb9d 	bl	80089be <USBD_CtlError>
                  break;
 8008284:	e041      	b.n	800830a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	da0b      	bge.n	80082a6 <USBD_StdEPReq+0x2b2>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	3310      	adds	r3, #16
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	3304      	adds	r3, #4
 80082a4:	e00b      	b.n	80082be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <USBD_StdEPReq+0x2d8>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d103      	bne.n	80082d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e00e      	b.n	80082f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f9bf 	bl	800965c <USBD_LL_IsStallEP>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	e002      	b.n	80082f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2202      	movs	r2, #2
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fbd1 	bl	8008aa0 <USBD_CtlSendData>
              break;
 80082fe:	e004      	b.n	800830a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fb5b 	bl	80089be <USBD_CtlError>
              break;
 8008308:	bf00      	nop
          }
          break;
 800830a:	e004      	b.n	8008316 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb55 	bl	80089be <USBD_CtlError>
          break;
 8008314:	bf00      	nop
      }
      break;
 8008316:	e005      	b.n	8008324 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fb4f 	bl	80089be <USBD_CtlError>
      break;
 8008320:	e000      	b.n	8008324 <USBD_StdEPReq+0x330>
      break;
 8008322:	bf00      	nop
  }

  return ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	885b      	ldrh	r3, [r3, #2]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	2b06      	cmp	r3, #6
 8008352:	f200 8128 	bhi.w	80085a6 <USBD_GetDescriptor+0x276>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <USBD_GetDescriptor+0x2c>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008379 	.word	0x08008379
 8008360:	08008391 	.word	0x08008391
 8008364:	080083d1 	.word	0x080083d1
 8008368:	080085a7 	.word	0x080085a7
 800836c:	080085a7 	.word	0x080085a7
 8008370:	08008547 	.word	0x08008547
 8008374:	08008573 	.word	0x08008573
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
      break;
 800838e:	e112      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7c1b      	ldrb	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10d      	bne.n	80083b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f107 0208 	add.w	r2, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	2202      	movs	r2, #2
 80083b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083b2:	e100      	b.n	80085b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	f107 0208 	add.w	r2, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	2202      	movs	r2, #2
 80083cc:	701a      	strb	r2, [r3, #0]
      break;
 80083ce:	e0f2      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	885b      	ldrh	r3, [r3, #2]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	f200 80ac 	bhi.w	8008534 <USBD_GetDescriptor+0x204>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBD_GetDescriptor+0xb4>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008499 	.word	0x08008499
 80083f4:	080084cd 	.word	0x080084cd
 80083f8:	08008501 	.word	0x08008501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	7c12      	ldrb	r2, [r2, #16]
 8008414:	f107 0108 	add.w	r1, r7, #8
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841e:	e091      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 facb 	bl	80089be <USBD_CtlError>
            err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
          break;
 800842e:	e089      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008452:	e077      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fab1 	bl	80089be <USBD_CtlError>
            err++;
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	3301      	adds	r3, #1
 8008460:	72fb      	strb	r3, [r7, #11]
          break;
 8008462:	e06f      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008486:	e05d      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa97 	bl	80089be <USBD_CtlError>
            err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
          break;
 8008496:	e055      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e043      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa7d 	bl	80089be <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e03b      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e029      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa63 	bl	80089be <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e021      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e00f      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa49 	bl	80089be <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e007      	b.n	8008544 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa41 	bl	80089be <USBD_CtlError>
          err++;
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	3301      	adds	r3, #1
 8008540:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008542:	bf00      	nop
      }
      break;
 8008544:	e037      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7c1b      	ldrb	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008556:	f107 0208 	add.w	r2, r7, #8
 800855a:	4610      	mov	r0, r2
 800855c:	4798      	blx	r3
 800855e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008560:	e029      	b.n	80085b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fa2a 	bl	80089be <USBD_CtlError>
        err++;
 800856a:	7afb      	ldrb	r3, [r7, #11]
 800856c:	3301      	adds	r3, #1
 800856e:	72fb      	strb	r3, [r7, #11]
      break;
 8008570:	e021      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7c1b      	ldrb	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10d      	bne.n	8008596 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f107 0208 	add.w	r2, r7, #8
 8008586:	4610      	mov	r0, r2
 8008588:	4798      	blx	r3
 800858a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	2207      	movs	r2, #7
 8008592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008594:	e00f      	b.n	80085b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa10 	bl	80089be <USBD_CtlError>
        err++;
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	3301      	adds	r3, #1
 80085a2:	72fb      	strb	r3, [r7, #11]
      break;
 80085a4:	e007      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa08 	bl	80089be <USBD_CtlError>
      err++;
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	3301      	adds	r3, #1
 80085b2:	72fb      	strb	r3, [r7, #11]
      break;
 80085b4:	bf00      	nop
  }

  if (err != 0U)
 80085b6:	7afb      	ldrb	r3, [r7, #11]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d11e      	bne.n	80085fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	88db      	ldrh	r3, [r3, #6]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d016      	beq.n	80085f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80085c4:	893b      	ldrh	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00e      	beq.n	80085e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88da      	ldrh	r2, [r3, #6]
 80085ce:	893b      	ldrh	r3, [r7, #8]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bf28      	it	cs
 80085d4:	4613      	movcs	r3, r2
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085da:	893b      	ldrh	r3, [r7, #8]
 80085dc:	461a      	mov	r2, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa5d 	bl	8008aa0 <USBD_CtlSendData>
 80085e6:	e009      	b.n	80085fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9e7 	bl	80089be <USBD_CtlError>
 80085f0:	e004      	b.n	80085fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 faae 	bl	8008b54 <USBD_CtlSendStatus>
 80085f8:	e000      	b.n	80085fc <USBD_GetDescriptor+0x2cc>
    return;
 80085fa:	bf00      	nop
  }
}
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop

08008604 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	889b      	ldrh	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d131      	bne.n	800867a <USBD_SetAddress+0x76>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	88db      	ldrh	r3, [r3, #6]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d12d      	bne.n	800867a <USBD_SetAddress+0x76>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b7f      	cmp	r3, #127	; 0x7f
 8008624:	d829      	bhi.n	800867a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	885b      	ldrh	r3, [r3, #2]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008630:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b03      	cmp	r3, #3
 800863c:	d104      	bne.n	8008648 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9bc 	bl	80089be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008646:	e01d      	b.n	8008684 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f82d 	bl	80096b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa7a 	bl	8008b54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2202      	movs	r2, #2
 800866a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866e:	e009      	b.n	8008684 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008678:	e004      	b.n	8008684 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f99e 	bl	80089be <USBD_CtlError>
  }
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	4b4e      	ldr	r3, [pc, #312]	; (80087dc <USBD_SetConfig+0x150>)
 80086a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086a4:	4b4d      	ldr	r3, [pc, #308]	; (80087dc <USBD_SetConfig+0x150>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d905      	bls.n	80086b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f985 	bl	80089be <USBD_CtlError>
    return USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e08c      	b.n	80087d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d002      	beq.n	80086ca <USBD_SetConfig+0x3e>
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d029      	beq.n	800871c <USBD_SetConfig+0x90>
 80086c8:	e075      	b.n	80087b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086ca:	4b44      	ldr	r3, [pc, #272]	; (80087dc <USBD_SetConfig+0x150>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d020      	beq.n	8008714 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086d2:	4b42      	ldr	r3, [pc, #264]	; (80087dc <USBD_SetConfig+0x150>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086dc:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <USBD_SetConfig+0x150>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fe ffe7 	bl	80076b6 <USBD_SetClassConfig>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f962 	bl	80089be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2202      	movs	r2, #2
 80086fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008702:	e065      	b.n	80087d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fa25 	bl	8008b54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2203      	movs	r2, #3
 800870e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008712:	e05d      	b.n	80087d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fa1d 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 800871a:	e059      	b.n	80087d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800871c:	4b2f      	ldr	r3, [pc, #188]	; (80087dc <USBD_SetConfig+0x150>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d112      	bne.n	800874a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800872c:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <USBD_SetConfig+0x150>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008736:	4b29      	ldr	r3, [pc, #164]	; (80087dc <USBD_SetConfig+0x150>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fe ffd6 	bl	80076ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa06 	bl	8008b54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008748:	e042      	b.n	80087d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800874a:	4b24      	ldr	r3, [pc, #144]	; (80087dc <USBD_SetConfig+0x150>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d02a      	beq.n	80087ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fe ffc4 	bl	80076ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008766:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <USBD_SetConfig+0x150>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008770:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <USBD_SetConfig+0x150>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fe ff9d 	bl	80076b6 <USBD_SetClassConfig>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00f      	beq.n	80087a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f918 	bl	80089be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fe ffa9 	bl	80076ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087a4:	e014      	b.n	80087d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9d4 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 80087ac:	e010      	b.n	80087d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9d0 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 80087b4:	e00c      	b.n	80087d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f900 	bl	80089be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087be:	4b07      	ldr	r3, [pc, #28]	; (80087dc <USBD_SetConfig+0x150>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fe ff92 	bl	80076ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087ca:	2303      	movs	r3, #3
 80087cc:	73fb      	strb	r3, [r7, #15]
      break;
 80087ce:	bf00      	nop
  }

  return ret;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	2400c224 	.word	0x2400c224

080087e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d004      	beq.n	80087fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f8e2 	bl	80089be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087fa:	e023      	b.n	8008844 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	dc02      	bgt.n	800880e <USBD_GetConfig+0x2e>
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc03      	bgt.n	8008814 <USBD_GetConfig+0x34>
 800880c:	e015      	b.n	800883a <USBD_GetConfig+0x5a>
 800880e:	2b03      	cmp	r3, #3
 8008810:	d00b      	beq.n	800882a <USBD_GetConfig+0x4a>
 8008812:	e012      	b.n	800883a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3308      	adds	r3, #8
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f93c 	bl	8008aa0 <USBD_CtlSendData>
        break;
 8008828:	e00c      	b.n	8008844 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3304      	adds	r3, #4
 800882e:	2201      	movs	r2, #1
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f934 	bl	8008aa0 <USBD_CtlSendData>
        break;
 8008838:	e004      	b.n	8008844 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f8be 	bl	80089be <USBD_CtlError>
        break;
 8008842:	bf00      	nop
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885c:	b2db      	uxtb	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	2b02      	cmp	r3, #2
 8008862:	d81e      	bhi.n	80088a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	88db      	ldrh	r3, [r3, #6]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d004      	beq.n	8008876 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8a5 	bl	80089be <USBD_CtlError>
        break;
 8008874:	e01a      	b.n	80088ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f043 0202 	orr.w	r2, r3, #2
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	330c      	adds	r3, #12
 8008896:	2202      	movs	r2, #2
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f900 	bl	8008aa0 <USBD_CtlSendData>
      break;
 80088a0:	e004      	b.n	80088ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f88a 	bl	80089be <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
  }
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d107      	bne.n	80088d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f940 	bl	8008b54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088d4:	e013      	b.n	80088fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d10b      	bne.n	80088f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	889b      	ldrh	r3, [r3, #4]
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f930 	bl	8008b54 <USBD_CtlSendStatus>
}
 80088f4:	e003      	b.n	80088fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f860 	bl	80089be <USBD_CtlError>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008916:	b2db      	uxtb	r3, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	2b02      	cmp	r3, #2
 800891c:	d80b      	bhi.n	8008936 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	885b      	ldrh	r3, [r3, #2]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d10c      	bne.n	8008940 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f910 	bl	8008b54 <USBD_CtlSendStatus>
      }
      break;
 8008934:	e004      	b.n	8008940 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f840 	bl	80089be <USBD_CtlError>
      break;
 800893e:	e000      	b.n	8008942 <USBD_ClrFeature+0x3c>
      break;
 8008940:	bf00      	nop
  }
}
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3301      	adds	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff fa41 	bl	8007dfc <SWAPBYTE>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3301      	adds	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f7ff fa34 	bl	8007dfc <SWAPBYTE>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3301      	adds	r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7ff fa27 	bl	8007dfc <SWAPBYTE>
 80089ae:	4603      	mov	r3, r0
 80089b0:	461a      	mov	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	80da      	strh	r2, [r3, #6]
}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c8:	2180      	movs	r1, #128	; 0x80
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fe08 	bl	80095e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089d0:	2100      	movs	r1, #0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fe04 	bl	80095e0 <USBD_LL_StallEP>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d036      	beq.n	8008a64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f000 f836 	bl	8008a6c <USBD_GetLen>
 8008a00:	4603      	mov	r3, r0
 8008a02:	3301      	adds	r3, #1
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4413      	add	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4413      	add	r3, r2
 8008a26:	2203      	movs	r2, #3
 8008a28:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a30:	e013      	b.n	8008a5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4413      	add	r3, r2
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
    idx++;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	3301      	adds	r3, #1
 8008a48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	4413      	add	r3, r2
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	3301      	adds	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e7      	bne.n	8008a32 <USBD_GetString+0x52>
 8008a62:	e000      	b.n	8008a66 <USBD_GetString+0x86>
    return;
 8008a64:	bf00      	nop
  }
}
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a7c:	e005      	b.n	8008a8a <USBD_GetLen+0x1e>
  {
    len++;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	3301      	adds	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f5      	bne.n	8008a7e <USBD_GetLen+0x12>
  }

  return len;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fe13 	bl	80096f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fe02 	bl	80096f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2203      	movs	r2, #3
 8008b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	2100      	movs	r1, #0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fe06 	bl	8009734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	2100      	movs	r1, #0
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fdf5 	bl	8009734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	2100      	movs	r1, #0
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fdc1 	bl	80096f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2205      	movs	r2, #5
 8008b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fdcf 	bl	8009734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4913      	ldr	r1, [pc, #76]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008ba8:	4813      	ldr	r0, [pc, #76]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008baa:	f7fe fd07 	bl	80075bc <USBD_Init>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bb4:	f7f7 fcdc 	bl	8000570 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bb8:	4910      	ldr	r1, [pc, #64]	; (8008bfc <MX_USB_DEVICE_Init+0x5c>)
 8008bba:	480f      	ldr	r0, [pc, #60]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bbc:	f7fe fd2e 	bl	800761c <USBD_RegisterClass>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bc6:	f7f7 fcd3 	bl	8000570 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bca:	490d      	ldr	r1, [pc, #52]	; (8008c00 <MX_USB_DEVICE_Init+0x60>)
 8008bcc:	480a      	ldr	r0, [pc, #40]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bce:	f7fe fc1f 	bl	8007410 <USBD_CDC_RegisterInterface>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd8:	f7f7 fcca 	bl	8000570 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bdc:	4806      	ldr	r0, [pc, #24]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bde:	f7fe fd53 	bl	8007688 <USBD_Start>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be8:	f7f7 fcc2 	bl	8000570 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008bec:	f7f9 fd56 	bl	800269c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bf0:	bf00      	nop
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	240000d8 	.word	0x240000d8
 8008bf8:	2400c228 	.word	0x2400c228
 8008bfc:	24000044 	.word	0x24000044
 8008c00:	240000c4 	.word	0x240000c4

08008c04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4905      	ldr	r1, [pc, #20]	; (8008c20 <CDC_Init_FS+0x1c>)
 8008c0c:	4805      	ldr	r0, [pc, #20]	; (8008c24 <CDC_Init_FS+0x20>)
 8008c0e:	f7fe fc19 	bl	8007444 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c12:	4905      	ldr	r1, [pc, #20]	; (8008c28 <CDC_Init_FS+0x24>)
 8008c14:	4803      	ldr	r0, [pc, #12]	; (8008c24 <CDC_Init_FS+0x20>)
 8008c16:	f7fe fc37 	bl	8007488 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	2400cd04 	.word	0x2400cd04
 8008c24:	2400c228 	.word	0x2400c228
 8008c28:	2400c504 	.word	0x2400c504

08008c2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	2b23      	cmp	r3, #35	; 0x23
 8008c50:	d84a      	bhi.n	8008ce8 <CDC_Control_FS+0xac>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <CDC_Control_FS+0x1c>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008ce9 	.word	0x08008ce9
 8008c5c:	08008ce9 	.word	0x08008ce9
 8008c60:	08008ce9 	.word	0x08008ce9
 8008c64:	08008ce9 	.word	0x08008ce9
 8008c68:	08008ce9 	.word	0x08008ce9
 8008c6c:	08008ce9 	.word	0x08008ce9
 8008c70:	08008ce9 	.word	0x08008ce9
 8008c74:	08008ce9 	.word	0x08008ce9
 8008c78:	08008ce9 	.word	0x08008ce9
 8008c7c:	08008ce9 	.word	0x08008ce9
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008ce9 	.word	0x08008ce9
 8008c88:	08008ce9 	.word	0x08008ce9
 8008c8c:	08008ce9 	.word	0x08008ce9
 8008c90:	08008ce9 	.word	0x08008ce9
 8008c94:	08008ce9 	.word	0x08008ce9
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008ce9 	.word	0x08008ce9
 8008ca0:	08008ce9 	.word	0x08008ce9
 8008ca4:	08008ce9 	.word	0x08008ce9
 8008ca8:	08008ce9 	.word	0x08008ce9
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008ce9 	.word	0x08008ce9
 8008cb4:	08008ce9 	.word	0x08008ce9
 8008cb8:	08008ce9 	.word	0x08008ce9
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	08008ce9 	.word	0x08008ce9
 8008cc4:	08008ce9 	.word	0x08008ce9
 8008cc8:	08008ce9 	.word	0x08008ce9
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	08008ce9 	.word	0x08008ce9
 8008cd4:	08008ce9 	.word	0x08008ce9
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008ce9 	.word	0x08008ce9
 8008ce0:	08008ce9 	.word	0x08008ce9
 8008ce4:	08008ce9 	.word	0x08008ce9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ce8:	bf00      	nop
  }

  return (USBD_OK);
 8008cea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    static uint8_t rx_status = 0;
    uint8_t *buf_p = (Buf + *Len);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
    uint32_t buf_len = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]
    if ((Buf - UserRxBufferFS) >= (APP_RX_DATA_SIZE - USB_ONCE_RX_MAX_LEN))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <CDC_Receive_FS+0x98>)
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8008d1e:	db01      	blt.n	8008d24 <CDC_Receive_FS+0x2c>
    {
        buf_p = &UserRxBufferFS[0];
 8008d20:	4b1b      	ldr	r3, [pc, #108]	; (8008d90 <CDC_Receive_FS+0x98>)
 8008d22:	617b      	str	r3, [r7, #20]
    }

    if(!rx_status)
 8008d24:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <CDC_Receive_FS+0x9c>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d107      	bne.n	8008d3c <CDC_Receive_FS+0x44>
    {
        ptr = find_head(Buf, *Len);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f88c 	bl	8008e50 <find_head>
 8008d38:	6138      	str	r0, [r7, #16]
 8008d3a:	e006      	b.n	8008d4a <CDC_Receive_FS+0x52>
    }
    else
    {
        buf_len = find_tail(Buf, *Len);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f8da 	bl	8008efc <find_tail>
 8008d48:	60f8      	str	r0, [r7, #12]
    }

    if (ptr != NULL)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <CDC_Receive_FS+0x62>
    {
        buf_p = ptr;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	617b      	str	r3, [r7, #20]
        rx_status = 1;
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <CDC_Receive_FS+0x9c>)
 8008d56:	2201      	movs	r2, #1
 8008d58:	701a      	strb	r2, [r3, #0]
    }
    if(buf_len != 0)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <CDC_Receive_FS+0x7e>
    {
        usb_debug("%d", buf_len);
 8008d60:	68f9      	ldr	r1, [r7, #12]
 8008d62:	480d      	ldr	r0, [pc, #52]	; (8008d98 <CDC_Receive_FS+0xa0>)
 8008d64:	f000 f854 	bl	8008e10 <usb_debug>
        buf_len = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
        buf_p = &UserRxBufferFS[0];
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <CDC_Receive_FS+0x98>)
 8008d6e:	617b      	str	r3, [r7, #20]
        rx_status = 0;
 8008d70:	4b08      	ldr	r3, [pc, #32]	; (8008d94 <CDC_Receive_FS+0x9c>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
    }
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, buf_p);
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	4808      	ldr	r0, [pc, #32]	; (8008d9c <CDC_Receive_FS+0xa4>)
 8008d7a:	f7fe fb85 	bl	8007488 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d7e:	4807      	ldr	r0, [pc, #28]	; (8008d9c <CDC_Receive_FS+0xa4>)
 8008d80:	f7fe fbe6 	bl	8007550 <USBD_CDC_ReceivePacket>

    return (USBD_OK);
 8008d84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2400c504 	.word	0x2400c504
 8008d94:	2400d504 	.word	0x2400d504
 8008d98:	0800acdc 	.word	0x0800acdc
 8008d9c:	2400c228 	.word	0x2400c228

08008da0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e00b      	b.n	8008dde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4806      	ldr	r0, [pc, #24]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008dce:	f7fe fb39 	bl	8007444 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dd2:	4805      	ldr	r0, [pc, #20]	; (8008de8 <CDC_Transmit_FS+0x48>)
 8008dd4:	f7fe fb76 	bl	80074c4 <USBD_CDC_TransmitPacket>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2400c228 	.word	0x2400c228

08008dec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
	...

08008e10 <usb_debug>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t usb_debug(const char *format, ...)
{
 8008e10:	b40f      	push	{r0, r1, r2, r3}
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    va_start(args, format);
 8008e18:	f107 0314 	add.w	r3, r7, #20
 8008e1c:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e26:	4809      	ldr	r0, [pc, #36]	; (8008e4c <usb_debug+0x3c>)
 8008e28:	f001 fadc 	bl	800a3e4 <vsniprintf>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4619      	mov	r1, r3
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <usb_debug+0x3c>)
 8008e38:	f7ff ffb2 	bl	8008da0 <CDC_Transmit_FS>

    return 0;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e48:	b004      	add	sp, #16
 8008e4a:	4770      	bx	lr
 8008e4c:	2400cd04 	.word	0x2400cd04

08008e50 <find_head>:

uint8_t *find_head(uint8_t *Buf, uint32_t len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
    uint8_t *next_ptr = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
    if (Buf > UserRxBufferFS)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a22      	ldr	r2, [pc, #136]	; (8008ef8 <find_head+0xa8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d937      	bls.n	8008ee2 <find_head+0x92>
    {
        if (*(Buf - 1) == head_1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b5a      	cmp	r3, #90	; 0x5a
 8008e7a:	d132      	bne.n	8008ee2 <find_head+0x92>
        {
            status = 1;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 8008e80:	e02f      	b.n	8008ee2 <find_head+0x92>
    {
        now_buf = *(Buf + num);
 8008e82:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d11b      	bne.n	8008ecc <find_head+0x7c>
        {
            if (now_buf == head_2)
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	2b52      	cmp	r3, #82	; 0x52
 8008e98:	d116      	bne.n	8008ec8 <find_head+0x78>
            {
                status = 2;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 8008e9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
                memcpy(UserRxBufferFS, head_ptr, (Buf + len - head_ptr));
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	441a      	add	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	480f      	ldr	r0, [pc, #60]	; (8008ef8 <find_head+0xa8>)
 8008eba:	f001 fa51 	bl	800a360 <memcpy>
                next_ptr = Buf + len;
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
                break;
 8008ec6:	e011      	b.n	8008eec <find_head+0x9c>
            }
            status = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == head_1)
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	2b5a      	cmp	r3, #90	; 0x5a
 8008ed0:	d101      	bne.n	8008ed6 <find_head+0x86>
        {
            status = 1;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 8008ed6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	3301      	adds	r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	75bb      	strb	r3, [r7, #22]
 8008ee2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d8ca      	bhi.n	8008e82 <find_head+0x32>
        }
    }

    return next_ptr;
 8008eec:	693b      	ldr	r3, [r7, #16]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	2400c504 	.word	0x2400c504

08008efc <find_tail>:

uint32_t find_tail(uint8_t *Buf, uint32_t len)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
    uint32_t buf_len = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]

    if (Buf > UserRxBufferFS)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <find_tail+0x98>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d92d      	bls.n	8008f7a <find_tail+0x7e>
    {
        if (*(Buf - 1) == tail_1)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2bff      	cmp	r3, #255	; 0xff
 8008f26:	d128      	bne.n	8008f7a <find_tail+0x7e>
        {
            status = 1;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 8008f2c:	e025      	b.n	8008f7a <find_tail+0x7e>
    {
        now_buf = *(Buf + num);
 8008f2e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d111      	bne.n	8008f64 <find_tail+0x68>
        {
            if (now_buf == tail_2)
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <find_tail+0x64>
            {
                status = 2;
 8008f46:	2302      	movs	r3, #2
 8008f48:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 8008f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
                buf_len = head_ptr - UserRxBufferFS;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4a0e      	ldr	r2, [pc, #56]	; (8008f94 <find_tail+0x98>)
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
                break;
 8008f5e:	e011      	b.n	8008f84 <find_tail+0x88>
            }
            status = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == tail_1)
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d101      	bne.n	8008f6e <find_tail+0x72>
        {
            status = 1;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 8008f6e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	3301      	adds	r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	75bb      	strb	r3, [r7, #22]
 8008f7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d8d4      	bhi.n	8008f2e <find_tail+0x32>
        }
    }

    return buf_len;
 8008f84:	693b      	ldr	r3, [r7, #16]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	2400c504 	.word	0x2400c504

08008f98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2212      	movs	r2, #18
 8008fa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008faa:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	240000f4 	.word	0x240000f4

08008fbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	24000108 	.word	0x24000108

08008fe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d105      	bne.n	8008ffe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4907      	ldr	r1, [pc, #28]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ff6:	4808      	ldr	r0, [pc, #32]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ff8:	f7ff fcf2 	bl	80089e0 <USBD_GetString>
 8008ffc:	e004      	b.n	8009008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4904      	ldr	r1, [pc, #16]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8009002:	4805      	ldr	r0, [pc, #20]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8009004:	f7ff fcec 	bl	80089e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	2400d508 	.word	0x2400d508
 8009018:	0800ace0 	.word	0x0800ace0

0800901c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4904      	ldr	r1, [pc, #16]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800902c:	4804      	ldr	r0, [pc, #16]	; (8009040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800902e:	f7ff fcd7 	bl	80089e0 <USBD_GetString>
  return USBD_StrDesc;
 8009032:	4b02      	ldr	r3, [pc, #8]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	2400d508 	.word	0x2400d508
 8009040:	0800acf8 	.word	0x0800acf8

08009044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	221a      	movs	r2, #26
 8009054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009056:	f000 f843 	bl	80090e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800905a:	4b02      	ldr	r3, [pc, #8]	; (8009064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	2400010c 	.word	0x2400010c

08009068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4907      	ldr	r1, [pc, #28]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009080:	f7ff fcae 	bl	80089e0 <USBD_GetString>
 8009084:	e004      	b.n	8009090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800908c:	f7ff fca8 	bl	80089e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2400d508 	.word	0x2400d508
 80090a0:	0800ad0c 	.word	0x0800ad0c

080090a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4907      	ldr	r1, [pc, #28]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ba:	4808      	ldr	r0, [pc, #32]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090bc:	f7ff fc90 	bl	80089e0 <USBD_GetString>
 80090c0:	e004      	b.n	80090cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090c6:	4805      	ldr	r0, [pc, #20]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090c8:	f7ff fc8a 	bl	80089e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2400d508 	.word	0x2400d508
 80090dc:	0800ad18 	.word	0x0800ad18

080090e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <Get_SerialNum+0x44>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <Get_SerialNum+0x48>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090f2:	4b0e      	ldr	r3, [pc, #56]	; (800912c <Get_SerialNum+0x4c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009106:	2208      	movs	r2, #8
 8009108:	4909      	ldr	r1, [pc, #36]	; (8009130 <Get_SerialNum+0x50>)
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f814 	bl	8009138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009110:	2204      	movs	r2, #4
 8009112:	4908      	ldr	r1, [pc, #32]	; (8009134 <Get_SerialNum+0x54>)
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f000 f80f 	bl	8009138 <IntToUnicode>
  }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	1ff1e800 	.word	0x1ff1e800
 8009128:	1ff1e804 	.word	0x1ff1e804
 800912c:	1ff1e808 	.word	0x1ff1e808
 8009130:	2400010e 	.word	0x2400010e
 8009134:	2400011e 	.word	0x2400011e

08009138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800914a:	2300      	movs	r3, #0
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e027      	b.n	80091a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	2b09      	cmp	r3, #9
 8009156:	d80b      	bhi.n	8009170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	b2da      	uxtb	r2, r3
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4619      	mov	r1, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	440b      	add	r3, r1
 8009168:	3230      	adds	r2, #48	; 0x30
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e00a      	b.n	8009186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	0f1b      	lsrs	r3, r3, #28
 8009174:	b2da      	uxtb	r2, r3
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4619      	mov	r1, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	440b      	add	r3, r1
 8009180:	3237      	adds	r2, #55	; 0x37
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	3301      	adds	r3, #1
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	4413      	add	r3, r2
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	3301      	adds	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
 80091a0:	7dfa      	ldrb	r2, [r7, #23]
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d3d3      	bcc.n	8009150 <IntToUnicode+0x18>
  }
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b0b8      	sub	sp, #224	; 0xe0
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	609a      	str	r2, [r3, #8]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80091d0:	f107 0310 	add.w	r3, r7, #16
 80091d4:	22bc      	movs	r2, #188	; 0xbc
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 f8cf 	bl	800a37c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2b      	ldr	r2, [pc, #172]	; (8009290 <HAL_PCD_MspInit+0xd8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d14e      	bne.n	8009286 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80091e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80091ee:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80091f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80091f6:	f107 0310 	add.w	r3, r7, #16
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fa f9ec 	bl	80035d8 <HAL_RCCEx_PeriphCLKConfig>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8009206:	f7f7 f9b3 	bl	8000570 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800920a:	f7f9 fa47 	bl	800269c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 8009210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009214:	4a1f      	ldr	r2, [pc, #124]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 8009220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800922c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009234:	2302      	movs	r3, #2
 8009236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800923a:	2300      	movs	r3, #0
 800923c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009240:	2303      	movs	r3, #3
 8009242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009246:	230a      	movs	r3, #10
 8009248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800924c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009250:	4619      	mov	r1, r3
 8009252:	4811      	ldr	r0, [pc, #68]	; (8009298 <HAL_PCD_MspInit+0xe0>)
 8009254:	f7f7 fd30 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009258:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 800925a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800925e:	4a0d      	ldr	r2, [pc, #52]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 8009260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009264:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <HAL_PCD_MspInit+0xdc>)
 800926a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800926e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009272:	60bb      	str	r3, [r7, #8]
 8009274:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	2065      	movs	r0, #101	; 0x65
 800927c:	f7f7 fce7 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009280:	2065      	movs	r0, #101	; 0x65
 8009282:	f7f7 fcfe 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009286:	bf00      	nop
 8009288:	37e0      	adds	r7, #224	; 0xe0
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40080000 	.word	0x40080000
 8009294:	58024400 	.word	0x58024400
 8009298:	58020000 	.word	0x58020000

0800929c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fe fa35 	bl	8007722 <USBD_LL_SetupStage>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7fe fa6f 	bl	80077cc <USBD_LL_DataOutStage>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	334c      	adds	r3, #76	; 0x4c
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	4619      	mov	r1, r3
 800931e:	f7fe fb08 	bl	8007932 <USBD_LL_DataInStage>
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fc3c 	bl	8007bb6 <USBD_LL_SOF>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934e:	2301      	movs	r3, #1
 8009350:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
 800935e:	e008      	b.n	8009372 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d102      	bne.n	800936e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
 800936c:	e001      	b.n	8009372 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800936e:	f7f7 f8ff 	bl	8000570 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009378:	7bfa      	ldrb	r2, [r7, #15]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fbdc 	bl	8007b3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fb84 	bl	8007a96 <USBD_LL_Reset>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fbd7 	bl	8007b5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093cc:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <HAL_PCD_SuspendCallback+0x48>)
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	4a03      	ldr	r2, [pc, #12]	; (80093e0 <HAL_PCD_SuspendCallback+0x48>)
 80093d2:	f043 0306 	orr.w	r3, r3, #6
 80093d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	e000ed00 	.word	0xe000ed00

080093e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fbc7 	bl	8007b86 <USBD_LL_Resume>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009412:	78fa      	ldrb	r2, [r7, #3]
 8009414:	4611      	mov	r1, r2
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fc1f 	bl	8007c5a <USBD_LL_IsoOUTIncomplete>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fbdb 	bl	8007bf6 <USBD_LL_IsoINIncomplete>
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fc31 	bl	8007cbe <USBD_LL_DevConnected>
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fc2e 	bl	8007cd4 <USBD_LL_DevDisconnected>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d13e      	bne.n	800950e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009490:	4a21      	ldr	r2, [pc, #132]	; (8009518 <USBD_LL_Init+0x98>)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1f      	ldr	r2, [pc, #124]	; (8009518 <USBD_LL_Init+0x98>)
 800949c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <USBD_LL_Init+0x98>)
 80094a2:	4a1e      	ldr	r2, [pc, #120]	; (800951c <USBD_LL_Init+0x9c>)
 80094a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80094a6:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <USBD_LL_Init+0x98>)
 80094a8:	2209      	movs	r2, #9
 80094aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <USBD_LL_Init+0x98>)
 80094ae:	2202      	movs	r2, #2
 80094b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094b2:	4b19      	ldr	r3, [pc, #100]	; (8009518 <USBD_LL_Init+0x98>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094b8:	4b17      	ldr	r3, [pc, #92]	; (8009518 <USBD_LL_Init+0x98>)
 80094ba:	2202      	movs	r2, #2
 80094bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094be:	4b16      	ldr	r3, [pc, #88]	; (8009518 <USBD_LL_Init+0x98>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094c4:	4b14      	ldr	r3, [pc, #80]	; (8009518 <USBD_LL_Init+0x98>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094ca:	4b13      	ldr	r3, [pc, #76]	; (8009518 <USBD_LL_Init+0x98>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80094d0:	4b11      	ldr	r3, [pc, #68]	; (8009518 <USBD_LL_Init+0x98>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094d6:	4b10      	ldr	r3, [pc, #64]	; (8009518 <USBD_LL_Init+0x98>)
 80094d8:	2200      	movs	r2, #0
 80094da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <USBD_LL_Init+0x98>)
 80094de:	2200      	movs	r2, #0
 80094e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094e2:	480d      	ldr	r0, [pc, #52]	; (8009518 <USBD_LL_Init+0x98>)
 80094e4:	f7f7 fdcb 	bl	800107e <HAL_PCD_Init>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80094ee:	f7f7 f83f 	bl	8000570 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094f2:	2180      	movs	r1, #128	; 0x80
 80094f4:	4808      	ldr	r0, [pc, #32]	; (8009518 <USBD_LL_Init+0x98>)
 80094f6:	f7f9 f856 	bl	80025a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094fa:	2240      	movs	r2, #64	; 0x40
 80094fc:	2100      	movs	r1, #0
 80094fe:	4806      	ldr	r0, [pc, #24]	; (8009518 <USBD_LL_Init+0x98>)
 8009500:	f7f9 f80a 	bl	8002518 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009504:	2280      	movs	r2, #128	; 0x80
 8009506:	2101      	movs	r1, #1
 8009508:	4803      	ldr	r0, [pc, #12]	; (8009518 <USBD_LL_Init+0x98>)
 800950a:	f7f9 f805 	bl	8002518 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	2400d708 	.word	0x2400d708
 800951c:	40080000 	.word	0x40080000

08009520 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009536:	4618      	mov	r0, r3
 8009538:	f7f7 fec5 	bl	80012c6 <HAL_PCD_Start>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f942 	bl	80097cc <USBD_Get_USB_Status>
 8009548:	4603      	mov	r3, r0
 800954a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954c:	7bbb      	ldrb	r3, [r7, #14]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	461a      	mov	r2, r3
 8009564:	4603      	mov	r3, r0
 8009566:	70fb      	strb	r3, [r7, #3]
 8009568:	460b      	mov	r3, r1
 800956a:	70bb      	strb	r3, [r7, #2]
 800956c:	4613      	mov	r3, r2
 800956e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800957e:	78bb      	ldrb	r3, [r7, #2]
 8009580:	883a      	ldrh	r2, [r7, #0]
 8009582:	78f9      	ldrb	r1, [r7, #3]
 8009584:	f7f8 fbc3 	bl	8001d0e <HAL_PCD_EP_Open>
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f91c 	bl	80097cc <USBD_Get_USB_Status>
 8009594:	4603      	mov	r3, r0
 8009596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009598:	7bbb      	ldrb	r3, [r7, #14]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f8 fc0c 	bl	8001dde <HAL_PCD_EP_Close>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 f8fd 	bl	80097cc <USBD_Get_USB_Status>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f8 fce4 	bl	8001fcc <HAL_PCD_EP_SetStall>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 f8de 	bl	80097cc <USBD_Get_USB_Status>
 8009610:	4603      	mov	r3, r0
 8009612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009614:	7bbb      	ldrb	r3, [r7, #14]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009638:	78fa      	ldrb	r2, [r7, #3]
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7f8 fd29 	bl	8002094 <HAL_PCD_EP_ClrStall>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	4618      	mov	r0, r3
 800964a:	f000 f8bf 	bl	80097cc <USBD_Get_USB_Status>
 800964e:	4603      	mov	r3, r0
 8009650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009652:	7bbb      	ldrb	r3, [r7, #14]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009674:	2b00      	cmp	r3, #0
 8009676:	da0b      	bge.n	8009690 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	4613      	mov	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	333e      	adds	r3, #62	; 0x3e
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	e00b      	b.n	80096a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	4613      	mov	r3, r2
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	440b      	add	r3, r1
 80096a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80096a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f8 faf6 	bl	8001cc4 <HAL_PCD_SetAddress>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f874 	bl	80097cc <USBD_Get_USB_Status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	460b      	mov	r3, r1
 8009700:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009710:	7af9      	ldrb	r1, [r7, #11]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	f7f8 fc0f 	bl	8001f38 <HAL_PCD_EP_Transmit>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f853 	bl	80097cc <USBD_Get_USB_Status>
 8009726:	4603      	mov	r3, r0
 8009728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800972a:	7dbb      	ldrb	r3, [r7, #22]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	460b      	mov	r3, r1
 8009742:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009752:	7af9      	ldrb	r1, [r7, #11]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	f7f8 fb8b 	bl	8001e72 <HAL_PCD_EP_Receive>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f832 	bl	80097cc <USBD_Get_USB_Status>
 8009768:	4603      	mov	r3, r0
 800976a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800976c:	7dbb      	ldrb	r3, [r7, #22]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7f8 fbbb 	bl	8001f08 <HAL_PCD_EP_GetRxCount>
 8009792:	4603      	mov	r3, r0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097a4:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <USBD_static_malloc+0x18>)
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	2400dc14 	.word	0x2400dc14

080097b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d817      	bhi.n	8009810 <USBD_Get_USB_Status+0x44>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <USBD_Get_USB_Status+0x1c>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	080097ff 	.word	0x080097ff
 80097f0:	08009805 	.word	0x08009805
 80097f4:	0800980b 	.word	0x0800980b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
    break;
 80097fc:	e00b      	b.n	8009816 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097fe:	2303      	movs	r3, #3
 8009800:	73fb      	strb	r3, [r7, #15]
    break;
 8009802:	e008      	b.n	8009816 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009804:	2301      	movs	r3, #1
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e005      	b.n	8009816 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e002      	b.n	8009816 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	bf00      	nop
  }
  return usb_status;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <arm_cfft_radix4_init_f32>:
 8009824:	b410      	push	{r4}
 8009826:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800982a:	4604      	mov	r4, r0
 800982c:	4826      	ldr	r0, [pc, #152]	; (80098c8 <arm_cfft_radix4_init_f32+0xa4>)
 800982e:	70a2      	strb	r2, [r4, #2]
 8009830:	70e3      	strb	r3, [r4, #3]
 8009832:	8021      	strh	r1, [r4, #0]
 8009834:	6060      	str	r0, [r4, #4]
 8009836:	d027      	beq.n	8009888 <arm_cfft_radix4_init_f32+0x64>
 8009838:	d911      	bls.n	800985e <arm_cfft_radix4_init_f32+0x3a>
 800983a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800983e:	d02f      	beq.n	80098a0 <arm_cfft_radix4_init_f32+0x7c>
 8009840:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009844:	d11b      	bne.n	800987e <arm_cfft_radix4_init_f32+0x5a>
 8009846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800984a:	4a20      	ldr	r2, [pc, #128]	; (80098cc <arm_cfft_radix4_init_f32+0xa8>)
 800984c:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8009850:	2000      	movs	r0, #0
 8009852:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	2910      	cmp	r1, #16
 8009860:	d028      	beq.n	80098b4 <arm_cfft_radix4_init_f32+0x90>
 8009862:	2940      	cmp	r1, #64	; 0x40
 8009864:	d10b      	bne.n	800987e <arm_cfft_radix4_init_f32+0x5a>
 8009866:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 800986a:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 800986e:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <arm_cfft_radix4_init_f32+0xac>)
 8009870:	2000      	movs	r0, #0
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8009878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800988c:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 8009890:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <arm_cfft_radix4_init_f32+0xb0>)
 8009892:	2000      	movs	r0, #0
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800989a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 80098a4:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <arm_cfft_radix4_init_f32+0xb4>)
 80098a6:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 80098aa:	2000      	movs	r0, #0
 80098ac:	e9c4 2102 	strd	r2, r1, [r4, #8]
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	e7d1      	b.n	8009858 <arm_cfft_radix4_init_f32+0x34>
 80098b4:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 80098b8:	4a08      	ldr	r2, [pc, #32]	; (80098dc <arm_cfft_radix4_init_f32+0xb8>)
 80098ba:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80098be:	2000      	movs	r0, #0
 80098c0:	e9c4 2102 	strd	r2, r1, [r4, #8]
 80098c4:	6123      	str	r3, [r4, #16]
 80098c6:	e7c7      	b.n	8009858 <arm_cfft_radix4_init_f32+0x34>
 80098c8:	0800b538 	.word	0x0800b538
 80098cc:	0800ad38 	.word	0x0800ad38
 80098d0:	0800adb6 	.word	0x0800adb6
 80098d4:	0800ad56 	.word	0x0800ad56
 80098d8:	0800ad3e 	.word	0x0800ad3e
 80098dc:	0800af36 	.word	0x0800af36

080098e0 <arm_radix4_butterfly_f32>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	4684      	mov	ip, r0
 80098e6:	1d14      	adds	r4, r2, #4
 80098e8:	088a      	lsrs	r2, r1, #2
 80098ea:	468a      	mov	sl, r1
 80098ec:	4626      	mov	r6, r4
 80098ee:	4625      	mov	r5, r4
 80098f0:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80098f4:	4693      	mov	fp, r2
 80098f6:	ed2d 8b06 	vpush	{d8-d10}
 80098fa:	b08d      	sub	sp, #52	; 0x34
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	4662      	mov	r2, ip
 8009900:	9009      	str	r0, [sp, #36]	; 0x24
 8009902:	4618      	mov	r0, r3
 8009904:	444a      	add	r2, r9
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 800990c:	4663      	mov	r3, ip
 800990e:	eb02 0109 	add.w	r1, r2, r9
 8009912:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8009916:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800991a:	4690      	mov	r8, r2
 800991c:	00ff      	lsls	r7, r7, #3
 800991e:	eb01 0009 	add.w	r0, r1, r9
 8009922:	940a      	str	r4, [sp, #40]	; 0x28
 8009924:	ed93 7a00 	vldr	s14, [r3]
 8009928:	3308      	adds	r3, #8
 800992a:	ed91 6a00 	vldr	s12, [r1]
 800992e:	3208      	adds	r2, #8
 8009930:	edd0 6a00 	vldr	s13, [r0]
 8009934:	3108      	adds	r1, #8
 8009936:	ed11 2a01 	vldr	s4, [r1, #-4]
 800993a:	ee37 4a06 	vadd.f32	s8, s14, s12
 800993e:	edd0 2a01 	vldr	s5, [r0, #4]
 8009942:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009946:	ed52 7a02 	vldr	s15, [r2, #-8]
 800994a:	3008      	adds	r0, #8
 800994c:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009950:	ed52 5a01 	vldr	s11, [r2, #-4]
 8009954:	ee37 3aa6 	vadd.f32	s6, s15, s13
 8009958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800995c:	edd4 3a00 	vldr	s7, [r4]
 8009960:	ee35 5aa2 	vadd.f32	s10, s11, s5
 8009964:	ed54 4a01 	vldr	s9, [r4, #-4]
 8009968:	ee76 6a02 	vadd.f32	s13, s12, s4
 800996c:	4474      	add	r4, lr
 800996e:	ee36 6a42 	vsub.f32	s12, s12, s4
 8009972:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8009976:	ee34 2a03 	vadd.f32	s4, s8, s6
 800997a:	ee76 2a85 	vadd.f32	s5, s13, s10
 800997e:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009982:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009986:	ed03 2a02 	vstr	s4, [r3, #-8]
 800998a:	ee37 3a25 	vadd.f32	s6, s14, s11
 800998e:	ed43 2a01 	vstr	s5, [r3, #-4]
 8009992:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009996:	ed15 2a01 	vldr	s4, [r5, #-4]
 800999a:	ee76 5a67 	vsub.f32	s11, s12, s15
 800999e:	ed95 5a00 	vldr	s10, [r5]
 80099a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099a6:	edd6 2a00 	vldr	s5, [r6]
 80099aa:	ed16 6a01 	vldr	s12, [r6, #-4]
 80099ae:	ee63 1a02 	vmul.f32	s3, s6, s4
 80099b2:	ee23 3a05 	vmul.f32	s6, s6, s10
 80099b6:	4598      	cmp	r8, r3
 80099b8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80099bc:	4465      	add	r5, ip
 80099be:	ee65 5a82 	vmul.f32	s11, s11, s4
 80099c2:	443e      	add	r6, r7
 80099c4:	ee24 2a84 	vmul.f32	s4, s9, s8
 80099c8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80099cc:	ee23 4a84 	vmul.f32	s8, s7, s8
 80099d0:	ee63 6aa6 	vmul.f32	s13, s7, s13
 80099d4:	ee67 3a06 	vmul.f32	s7, s14, s12
 80099d8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80099dc:	ee27 7a22 	vmul.f32	s14, s14, s5
 80099e0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80099e4:	ee35 5a21 	vadd.f32	s10, s10, s3
 80099e8:	ee75 5ac3 	vsub.f32	s11, s11, s6
 80099ec:	ee76 6a82 	vadd.f32	s13, s13, s4
 80099f0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80099f4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80099f8:	ee36 7a47 	vsub.f32	s14, s12, s14
 80099fc:	ed42 6a02 	vstr	s13, [r2, #-8]
 8009a00:	ed42 4a01 	vstr	s9, [r2, #-4]
 8009a04:	ed01 5a02 	vstr	s10, [r1, #-8]
 8009a08:	ed41 5a01 	vstr	s11, [r1, #-4]
 8009a0c:	ed40 7a02 	vstr	s15, [r0, #-8]
 8009a10:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009a14:	d186      	bne.n	8009924 <arm_radix4_butterfly_f32+0x44>
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	2a04      	cmp	r2, #4
 8009a20:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	9307      	str	r3, [sp, #28]
 8009a26:	f240 80b5 	bls.w	8009b94 <arm_radix4_butterfly_f32+0x2b4>
 8009a2a:	9807      	ldr	r0, [sp, #28]
 8009a2c:	9208      	str	r2, [sp, #32]
 8009a2e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009a32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a34:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8009a38:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	46a0      	mov	r8, r4
 8009a3e:	9202      	str	r2, [sp, #8]
 8009a40:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 8009a44:	9306      	str	r3, [sp, #24]
 8009a46:	00c3      	lsls	r3, r0, #3
 8009a48:	00d2      	lsls	r2, r2, #3
 8009a4a:	46a6      	mov	lr, r4
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	2700      	movs	r7, #0
 8009a50:	0103      	lsls	r3, r0, #4
 8009a52:	9401      	str	r4, [sp, #4]
 8009a54:	9203      	str	r2, [sp, #12]
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	1d34      	adds	r4, r6, #4
 8009a5c:	9a03      	ldr	r2, [sp, #12]
 8009a5e:	4630      	mov	r0, r6
 8009a60:	ed13 0a01 	vldr	s0, [r3, #-4]
 8009a64:	463d      	mov	r5, r7
 8009a66:	1991      	adds	r1, r2, r6
 8009a68:	edd3 0a00 	vldr	s1, [r3]
 8009a6c:	4462      	add	r2, ip
 8009a6e:	ed1e 1a01 	vldr	s2, [lr, #-4]
 8009a72:	edde 1a00 	vldr	s3, [lr]
 8009a76:	4663      	mov	r3, ip
 8009a78:	ed18 2a01 	vldr	s4, [r8, #-4]
 8009a7c:	edd8 2a00 	vldr	s5, [r8]
 8009a80:	ed14 7a01 	vldr	s14, [r4, #-4]
 8009a84:	445d      	add	r5, fp
 8009a86:	ed93 6a00 	vldr	s12, [r3]
 8009a8a:	edd2 6a00 	vldr	s13, [r2]
 8009a8e:	45aa      	cmp	sl, r5
 8009a90:	edd1 7a00 	vldr	s15, [r1]
 8009a94:	ee77 3a06 	vadd.f32	s7, s14, s12
 8009a98:	edd0 5a01 	vldr	s11, [r0, #4]
 8009a9c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009aa0:	ed91 5a01 	vldr	s10, [r1, #4]
 8009aa4:	ee37 9aa6 	vadd.f32	s18, s15, s13
 8009aa8:	ed93 6a01 	vldr	s12, [r3, #4]
 8009aac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ab0:	edd2 6a01 	vldr	s13, [r2, #4]
 8009ab4:	ee75 4a86 	vadd.f32	s9, s11, s12
 8009ab8:	ee75 8a26 	vadd.f32	s17, s10, s13
 8009abc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009ac0:	ee35 5a66 	vsub.f32	s10, s10, s13
 8009ac4:	ee33 3ac9 	vsub.f32	s6, s7, s18
 8009ac8:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8009acc:	ee37 4a05 	vadd.f32	s8, s14, s10
 8009ad0:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8009ad4:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009ad8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009adc:	ee61 aa03 	vmul.f32	s21, s2, s6
 8009ae0:	ee21 8a86 	vmul.f32	s16, s3, s12
 8009ae4:	ee20 aa04 	vmul.f32	s20, s0, s8
 8009ae8:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8009aec:	ee62 9a07 	vmul.f32	s19, s4, s14
 8009af0:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8009af4:	ee21 3a83 	vmul.f32	s6, s3, s6
 8009af8:	ee21 6a06 	vmul.f32	s12, s2, s12
 8009afc:	ee20 4a84 	vmul.f32	s8, s1, s8
 8009b00:	ee60 6a26 	vmul.f32	s13, s0, s13
 8009b04:	ee22 7a87 	vmul.f32	s14, s5, s14
 8009b08:	ee62 7a27 	vmul.f32	s15, s4, s15
 8009b0c:	ee73 3a89 	vadd.f32	s7, s7, s18
 8009b10:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8009b14:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8009b18:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009b1c:	ed44 3a01 	vstr	s7, [r4, #-4]
 8009b20:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8009b24:	edc0 4a01 	vstr	s9, [r0, #4]
 8009b28:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009b2c:	ed81 8a00 	vstr	s16, [r1]
 8009b30:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8009b34:	ed81 6a01 	vstr	s12, [r1, #4]
 8009b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b3c:	ed83 5a00 	vstr	s10, [r3]
 8009b40:	edc3 6a01 	vstr	s13, [r3, #4]
 8009b44:	444c      	add	r4, r9
 8009b46:	edc2 5a00 	vstr	s11, [r2]
 8009b4a:	4448      	add	r0, r9
 8009b4c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009b50:	4449      	add	r1, r9
 8009b52:	444b      	add	r3, r9
 8009b54:	444a      	add	r2, r9
 8009b56:	d893      	bhi.n	8009a80 <arm_radix4_butterfly_f32+0x1a0>
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	3701      	adds	r7, #1
 8009b5c:	9a05      	ldr	r2, [sp, #20]
 8009b5e:	3608      	adds	r6, #8
 8009b60:	f10c 0c08 	add.w	ip, ip, #8
 8009b64:	4413      	add	r3, r2
 8009b66:	9301      	str	r3, [sp, #4]
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	449e      	add	lr, r3
 8009b6c:	9b06      	ldr	r3, [sp, #24]
 8009b6e:	4498      	add	r8, r3
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	42bb      	cmp	r3, r7
 8009b74:	f47f af70 	bne.w	8009a58 <arm_radix4_butterfly_f32+0x178>
 8009b78:	9a08      	ldr	r2, [sp, #32]
 8009b7a:	469b      	mov	fp, r3
 8009b7c:	9b07      	ldr	r3, [sp, #28]
 8009b7e:	0892      	lsrs	r2, r2, #2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	2a04      	cmp	r2, #4
 8009b84:	9208      	str	r2, [sp, #32]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	9307      	str	r3, [sp, #28]
 8009b8a:	d903      	bls.n	8009b94 <arm_radix4_butterfly_f32+0x2b4>
 8009b8c:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8009b90:	4618      	mov	r0, r3
 8009b92:	e74c      	b.n	8009a2e <arm_radix4_butterfly_f32+0x14e>
 8009b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b98:	3320      	adds	r3, #32
 8009b9a:	ed53 7a04 	vldr	s15, [r3, #-16]
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8009ba4:	f103 0320 	add.w	r3, r3, #32
 8009ba8:	ed53 4a0a 	vldr	s9, [r3, #-40]	; 0xffffffd8
 8009bac:	ed53 5a09 	vldr	s11, [r3, #-36]	; 0xffffffdc
 8009bb0:	ee37 5a27 	vadd.f32	s10, s14, s15
 8009bb4:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 8009bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bbc:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8009bc0:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8009bc4:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009bc8:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8009bcc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8009bd0:	ee76 4a65 	vsub.f32	s9, s12, s11
 8009bd4:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009bd8:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8009bdc:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8009be0:	ee75 3a04 	vadd.f32	s7, s10, s8
 8009be4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009be8:	ee37 4a24 	vadd.f32	s8, s14, s9
 8009bec:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009bf0:	ed43 3a10 	vstr	s7, [r3, #-64]	; 0xffffffc0
 8009bf4:	ee75 4a86 	vadd.f32	s9, s11, s12
 8009bf8:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8009bfc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009c00:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 8009c04:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8009c08:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 8009c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c10:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8009c14:	ed03 6a0d 	vstr	s12, [r3, #-52]	; 0xffffffcc
 8009c18:	ed43 5a0b 	vstr	s11, [r3, #-44]	; 0xffffffd4
 8009c1c:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8009c20:	d1bb      	bne.n	8009b9a <arm_radix4_butterfly_f32+0x2ba>
 8009c22:	b00d      	add	sp, #52	; 0x34
 8009c24:	ecbd 8b06 	vpop	{d8-d10}
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c2c <arm_radix4_butterfly_inverse_f32>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	468a      	mov	sl, r1
 8009c32:	1d11      	adds	r1, r2, #4
 8009c34:	461f      	mov	r7, r3
 8009c36:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8009c3a:	ea4f 029a 	mov.w	r2, sl, lsr #2
 8009c3e:	468c      	mov	ip, r1
 8009c40:	460e      	mov	r6, r1
 8009c42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009c46:	4614      	mov	r4, r2
 8009c48:	4665      	mov	r5, ip
 8009c4a:	ed2d 8b08 	vpush	{d8-d11}
 8009c4e:	b08d      	sub	sp, #52	; 0x34
 8009c50:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8009c54:	46a3      	mov	fp, r4
 8009c56:	9202      	str	r2, [sp, #8]
 8009c58:	0112      	lsls	r2, r2, #4
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	910a      	str	r1, [sp, #40]	; 0x28
 8009c60:	4410      	add	r0, r2
 8009c62:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 8009c66:	9309      	str	r3, [sp, #36]	; 0x24
 8009c68:	4664      	mov	r4, ip
 8009c6a:	eb03 0809 	add.w	r8, r3, r9
 8009c6e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8009c78:	440a      	add	r2, r1
 8009c7a:	00ff      	lsls	r7, r7, #3
 8009c7c:	ed91 7a00 	vldr	s14, [r1]
 8009c80:	3308      	adds	r3, #8
 8009c82:	edd2 4a00 	vldr	s9, [r2]
 8009c86:	3108      	adds	r1, #8
 8009c88:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009c8c:	3008      	adds	r0, #8
 8009c8e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009c92:	ee37 3a24 	vadd.f32	s6, s14, s9
 8009c96:	ed10 2a01 	vldr	s4, [r0, #-4]
 8009c9a:	ee77 4a64 	vsub.f32	s9, s14, s9
 8009c9e:	edd2 2a01 	vldr	s5, [r2, #4]
 8009ca2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009ca6:	ed13 7a01 	vldr	s14, [r3, #-4]
 8009caa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009cae:	ed11 4a01 	vldr	s8, [r1, #-4]
 8009cb2:	3208      	adds	r2, #8
 8009cb4:	ee77 6a02 	vadd.f32	s13, s14, s4
 8009cb8:	ed54 3a01 	vldr	s7, [r4, #-4]
 8009cbc:	ee34 6a22 	vadd.f32	s12, s8, s5
 8009cc0:	edd4 5a00 	vldr	s11, [r4]
 8009cc4:	ee34 4a62 	vsub.f32	s8, s8, s5
 8009cc8:	4464      	add	r4, ip
 8009cca:	ee37 7a42 	vsub.f32	s14, s14, s4
 8009cce:	ee76 2a86 	vadd.f32	s5, s13, s12
 8009cd2:	ee35 2a03 	vadd.f32	s4, s10, s6
 8009cd6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009cda:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009cde:	ed43 2a01 	vstr	s5, [r3, #-4]
 8009ce2:	ee37 6ac4 	vsub.f32	s12, s15, s8
 8009ce6:	ed03 2a02 	vstr	s4, [r3, #-8]
 8009cea:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009cee:	ed15 2a01 	vldr	s4, [r5, #-4]
 8009cf2:	ee34 4a87 	vadd.f32	s8, s9, s14
 8009cf6:	ed95 3a00 	vldr	s6, [r5]
 8009cfa:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009cfe:	edd6 1a00 	vldr	s3, [r6]
 8009d02:	ed56 4a01 	vldr	s9, [r6, #-4]
 8009d06:	ee66 2a02 	vmul.f32	s5, s12, s4
 8009d0a:	ee26 6a03 	vmul.f32	s12, s12, s6
 8009d0e:	4598      	cmp	r8, r3
 8009d10:	ee24 3a03 	vmul.f32	s6, s8, s6
 8009d14:	443d      	add	r5, r7
 8009d16:	ee24 4a02 	vmul.f32	s8, s8, s4
 8009d1a:	4476      	add	r6, lr
 8009d1c:	ee23 2a85 	vmul.f32	s4, s7, s10
 8009d20:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009d24:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8009d28:	ee65 5a85 	vmul.f32	s11, s11, s10
 8009d2c:	ee27 5aa4 	vmul.f32	s10, s15, s9
 8009d30:	ee67 4a24 	vmul.f32	s9, s14, s9
 8009d34:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8009d38:	ee27 7a21 	vmul.f32	s14, s14, s3
 8009d3c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009d40:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009d44:	ee32 4a66 	vsub.f32	s8, s4, s13
 8009d48:	ee35 7a47 	vsub.f32	s14, s10, s14
 8009d4c:	ee75 6aa3 	vadd.f32	s13, s11, s7
 8009d50:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8009d54:	ed01 4a02 	vstr	s8, [r1, #-8]
 8009d58:	ed41 6a01 	vstr	s13, [r1, #-4]
 8009d5c:	ed00 3a02 	vstr	s6, [r0, #-8]
 8009d60:	ed00 6a01 	vstr	s12, [r0, #-4]
 8009d64:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009d68:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009d6c:	d186      	bne.n	8009c7c <arm_radix4_butterfly_inverse_f32+0x50>
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	2a04      	cmp	r2, #4
 8009d78:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f240 80b5 	bls.w	8009eec <arm_radix4_butterfly_inverse_f32+0x2c0>
 8009d82:	9807      	ldr	r0, [sp, #28]
 8009d84:	9208      	str	r2, [sp, #32]
 8009d86:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009d8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d8c:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8009d90:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	46a0      	mov	r8, r4
 8009d96:	9202      	str	r2, [sp, #8]
 8009d98:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 8009d9c:	9306      	str	r3, [sp, #24]
 8009d9e:	00c3      	lsls	r3, r0, #3
 8009da0:	00d2      	lsls	r2, r2, #3
 8009da2:	46a6      	mov	lr, r4
 8009da4:	9305      	str	r3, [sp, #20]
 8009da6:	2700      	movs	r7, #0
 8009da8:	0103      	lsls	r3, r0, #4
 8009daa:	9401      	str	r4, [sp, #4]
 8009dac:	9203      	str	r2, [sp, #12]
 8009dae:	9304      	str	r3, [sp, #16]
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	1d34      	adds	r4, r6, #4
 8009db4:	9a03      	ldr	r2, [sp, #12]
 8009db6:	4630      	mov	r0, r6
 8009db8:	ed13 1a01 	vldr	s2, [r3, #-4]
 8009dbc:	463d      	mov	r5, r7
 8009dbe:	1991      	adds	r1, r2, r6
 8009dc0:	edd3 1a00 	vldr	s3, [r3]
 8009dc4:	4462      	add	r2, ip
 8009dc6:	ed1e 2a01 	vldr	s4, [lr, #-4]
 8009dca:	edde 2a00 	vldr	s5, [lr]
 8009dce:	4663      	mov	r3, ip
 8009dd0:	ed18 3a01 	vldr	s6, [r8, #-4]
 8009dd4:	edd8 3a00 	vldr	s7, [r8]
 8009dd8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009ddc:	445d      	add	r5, fp
 8009dde:	ed93 6a00 	vldr	s12, [r3]
 8009de2:	edd2 6a00 	vldr	s13, [r2]
 8009de6:	45aa      	cmp	sl, r5
 8009de8:	edd1 5a00 	vldr	s11, [r1]
 8009dec:	ee37 4a86 	vadd.f32	s8, s15, s12
 8009df0:	ed90 7a01 	vldr	s14, [r0, #4]
 8009df4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009df8:	ed91 5a01 	vldr	s10, [r1, #4]
 8009dfc:	ee35 9aa6 	vadd.f32	s18, s11, s13
 8009e00:	ed93 6a01 	vldr	s12, [r3, #4]
 8009e04:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8009e08:	edd2 6a01 	vldr	s13, [r2, #4]
 8009e0c:	ee77 4a06 	vadd.f32	s9, s14, s12
 8009e10:	ee75 9a26 	vadd.f32	s19, s10, s13
 8009e14:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009e18:	ee35 5a66 	vsub.f32	s10, s10, s13
 8009e1c:	ee34 6a49 	vsub.f32	s12, s8, s18
 8009e20:	ee74 0ae9 	vsub.f32	s1, s9, s19
 8009e24:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8009e28:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009e2c:	ee35 5a87 	vadd.f32	s10, s11, s14
 8009e30:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009e34:	ee62 8a06 	vmul.f32	s17, s4, s12
 8009e38:	ee22 baa0 	vmul.f32	s22, s5, s1
 8009e3c:	ee21 8a26 	vmul.f32	s16, s2, s13
 8009e40:	ee61 aa85 	vmul.f32	s21, s3, s10
 8009e44:	ee63 5a27 	vmul.f32	s11, s6, s15
 8009e48:	ee23 aa87 	vmul.f32	s20, s7, s14
 8009e4c:	ee34 4a09 	vadd.f32	s8, s8, s18
 8009e50:	ee22 6a86 	vmul.f32	s12, s5, s12
 8009e54:	ee62 0a20 	vmul.f32	s1, s4, s1
 8009e58:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8009e5c:	ed04 4a01 	vstr	s8, [r4, #-4]
 8009e60:	ee21 5a05 	vmul.f32	s10, s2, s10
 8009e64:	444c      	add	r4, r9
 8009e66:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8009e6a:	ee23 7a07 	vmul.f32	s14, s6, s14
 8009e6e:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8009e72:	ee78 8acb 	vsub.f32	s17, s17, s22
 8009e76:	ee36 6a20 	vadd.f32	s12, s12, s1
 8009e7a:	ee38 4a6a 	vsub.f32	s8, s16, s21
 8009e7e:	edc0 4a01 	vstr	s9, [r0, #4]
 8009e82:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009e86:	edc1 8a00 	vstr	s17, [r1]
 8009e8a:	ee75 5aca 	vsub.f32	s11, s11, s20
 8009e8e:	ed81 6a01 	vstr	s12, [r1, #4]
 8009e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e96:	ed83 4a00 	vstr	s8, [r3]
 8009e9a:	edc3 6a01 	vstr	s13, [r3, #4]
 8009e9e:	4448      	add	r0, r9
 8009ea0:	edc2 5a00 	vstr	s11, [r2]
 8009ea4:	4449      	add	r1, r9
 8009ea6:	edc2 7a01 	vstr	s15, [r2, #4]
 8009eaa:	444b      	add	r3, r9
 8009eac:	444a      	add	r2, r9
 8009eae:	d893      	bhi.n	8009dd8 <arm_radix4_butterfly_inverse_f32+0x1ac>
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	3701      	adds	r7, #1
 8009eb4:	9a05      	ldr	r2, [sp, #20]
 8009eb6:	3608      	adds	r6, #8
 8009eb8:	f10c 0c08 	add.w	ip, ip, #8
 8009ebc:	4413      	add	r3, r2
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	449e      	add	lr, r3
 8009ec4:	9b06      	ldr	r3, [sp, #24]
 8009ec6:	4498      	add	r8, r3
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	f47f af70 	bne.w	8009db0 <arm_radix4_butterfly_inverse_f32+0x184>
 8009ed0:	9a08      	ldr	r2, [sp, #32]
 8009ed2:	469b      	mov	fp, r3
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	0892      	lsrs	r2, r2, #2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	2a04      	cmp	r2, #4
 8009edc:	9208      	str	r2, [sp, #32]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	9307      	str	r3, [sp, #28]
 8009ee2:	d903      	bls.n	8009eec <arm_radix4_butterfly_inverse_f32+0x2c0>
 8009ee4:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8009ee8:	4618      	mov	r0, r3
 8009eea:	e74c      	b.n	8009d86 <arm_radix4_butterfly_inverse_f32+0x15a>
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ef0:	3320      	adds	r3, #32
 8009ef2:	ed53 7a04 	vldr	s15, [r3, #-16]
 8009ef6:	3a01      	subs	r2, #1
 8009ef8:	ed53 4a02 	vldr	s9, [r3, #-8]
 8009efc:	f103 0320 	add.w	r3, r3, #32
 8009f00:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
 8009f04:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8009f08:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009f0c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8009f10:	ee35 4aa4 	vadd.f32	s8, s11, s9
 8009f14:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 8009f18:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 8009f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f20:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009f24:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009f28:	ee76 4ac5 	vsub.f32	s9, s13, s10
 8009f2c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8009f30:	ee77 6aa3 	vadd.f32	s13, s15, s7
 8009f34:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8009f38:	ee76 3a04 	vadd.f32	s7, s12, s8
 8009f3c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009f40:	ee37 4a64 	vsub.f32	s8, s14, s9
 8009f44:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009f48:	ee26 6a00 	vmul.f32	s12, s12, s0
 8009f4c:	ee76 4a85 	vadd.f32	s9, s13, s10
 8009f50:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009f54:	ee37 5aa5 	vadd.f32	s10, s15, s11
 8009f58:	ed03 6a0e 	vstr	s12, [r3, #-56]	; 0xffffffc8
 8009f5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009f60:	ee63 5a80 	vmul.f32	s11, s7, s0
 8009f64:	ee24 4a00 	vmul.f32	s8, s8, s0
 8009f68:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009f6c:	ed43 5a10 	vstr	s11, [r3, #-64]	; 0xffffffc0
 8009f70:	ee66 6a80 	vmul.f32	s13, s13, s0
 8009f74:	ee64 5a80 	vmul.f32	s11, s9, s0
 8009f78:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 8009f7c:	ee25 6a00 	vmul.f32	s12, s10, s0
 8009f80:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 8009f84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009f88:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 8009f8c:	ed43 5a0f 	vstr	s11, [r3, #-60]	; 0xffffffc4
 8009f90:	ed03 6a0b 	vstr	s12, [r3, #-44]	; 0xffffffd4
 8009f94:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8009f98:	d1ab      	bne.n	8009ef2 <arm_radix4_butterfly_inverse_f32+0x2c6>
 8009f9a:	b00d      	add	sp, #52	; 0x34
 8009f9c:	ecbd 8b08 	vpop	{d8-d11}
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fa4 <arm_cfft_radix4_f32>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	7880      	ldrb	r0, [r0, #2]
 8009faa:	460d      	mov	r5, r1
 8009fac:	2801      	cmp	r0, #1
 8009fae:	8821      	ldrh	r1, [r4, #0]
 8009fb0:	6862      	ldr	r2, [r4, #4]
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	d006      	beq.n	8009fc4 <arm_cfft_radix4_f32+0x20>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7ff fc92 	bl	80098e0 <arm_radix4_butterfly_f32>
 8009fbc:	78e3      	ldrb	r3, [r4, #3]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d008      	beq.n	8009fd4 <arm_cfft_radix4_f32+0x30>
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	ed94 0a04 	vldr	s0, [r4, #16]
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f7ff fe2f 	bl	8009c2c <arm_radix4_butterfly_inverse_f32>
 8009fce:	78e3      	ldrb	r3, [r4, #3]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d1f6      	bne.n	8009fc2 <arm_cfft_radix4_f32+0x1e>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	89e2      	ldrh	r2, [r4, #14]
 8009fda:	8821      	ldrh	r1, [r4, #0]
 8009fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fe0:	f000 b800 	b.w	8009fe4 <arm_bitreversal_f32>

08009fe4 <arm_bitreversal_f32>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	0052      	lsls	r2, r2, #1
 8009fea:	b085      	sub	sp, #20
 8009fec:	084c      	lsrs	r4, r1, #1
 8009fee:	2100      	movs	r1, #0
 8009ff0:	9201      	str	r2, [sp, #4]
 8009ff2:	1ea2      	subs	r2, r4, #2
 8009ff4:	9402      	str	r4, [sp, #8]
 8009ff6:	f104 0e01 	add.w	lr, r4, #1
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	9203      	str	r2, [sp, #12]
 8009ffe:	460a      	mov	r2, r1
 800a000:	1c4e      	adds	r6, r1, #1
 800a002:	9902      	ldr	r1, [sp, #8]
 800a004:	3402      	adds	r4, #2
 800a006:	440a      	add	r2, r1
 800a008:	00f6      	lsls	r6, r6, #3
 800a00a:	b2a4      	uxth	r4, r4
 800a00c:	00d2      	lsls	r2, r2, #3
 800a00e:	1985      	adds	r5, r0, r6
 800a010:	3604      	adds	r6, #4
 800a012:	1881      	adds	r1, r0, r2
 800a014:	f8d5 c000 	ldr.w	ip, [r5]
 800a018:	3204      	adds	r2, #4
 800a01a:	4406      	add	r6, r0
 800a01c:	680f      	ldr	r7, [r1, #0]
 800a01e:	4402      	add	r2, r0
 800a020:	602f      	str	r7, [r5, #0]
 800a022:	eb04 050e 	add.w	r5, r4, lr
 800a026:	f8c1 c000 	str.w	ip, [r1]
 800a02a:	00e7      	lsls	r7, r4, #3
 800a02c:	00ed      	lsls	r5, r5, #3
 800a02e:	f8d2 a000 	ldr.w	sl, [r2]
 800a032:	f8d6 9000 	ldr.w	r9, [r6]
 800a036:	eb00 0c07 	add.w	ip, r0, r7
 800a03a:	eb00 0805 	add.w	r8, r0, r5
 800a03e:	3504      	adds	r5, #4
 800a040:	f8c6 a000 	str.w	sl, [r6]
 800a044:	3704      	adds	r7, #4
 800a046:	1946      	adds	r6, r0, r5
 800a048:	9d01      	ldr	r5, [sp, #4]
 800a04a:	f8c2 9000 	str.w	r9, [r2]
 800a04e:	4621      	mov	r1, r4
 800a050:	881a      	ldrh	r2, [r3, #0]
 800a052:	442b      	add	r3, r5
 800a054:	9d03      	ldr	r5, [sp, #12]
 800a056:	4407      	add	r7, r0
 800a058:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800a05c:	42ac      	cmp	r4, r5
 800a05e:	eb02 050e 	add.w	r5, r2, lr
 800a062:	d82b      	bhi.n	800a0bc <arm_bitreversal_f32+0xd8>
 800a064:	00ed      	lsls	r5, r5, #3
 800a066:	eb00 0a09 	add.w	sl, r0, r9
 800a06a:	42a2      	cmp	r2, r4
 800a06c:	f109 0904 	add.w	r9, r9, #4
 800a070:	eb00 0b05 	add.w	fp, r0, r5
 800a074:	f105 0504 	add.w	r5, r5, #4
 800a078:	4481      	add	r9, r0
 800a07a:	d9c1      	bls.n	800a000 <arm_bitreversal_f32+0x1c>
 800a07c:	eddc 7a00 	vldr	s15, [ip]
 800a080:	4405      	add	r5, r0
 800a082:	ed9a 7a00 	vldr	s14, [sl]
 800a086:	ed8c 7a00 	vstr	s14, [ip]
 800a08a:	edca 7a00 	vstr	s15, [sl]
 800a08e:	f8d7 c000 	ldr.w	ip, [r7]
 800a092:	f8d9 a000 	ldr.w	sl, [r9]
 800a096:	f8c7 a000 	str.w	sl, [r7]
 800a09a:	f8c9 c000 	str.w	ip, [r9]
 800a09e:	f8d8 7000 	ldr.w	r7, [r8]
 800a0a2:	f8db c000 	ldr.w	ip, [fp]
 800a0a6:	f8c8 c000 	str.w	ip, [r8]
 800a0aa:	f8cb 7000 	str.w	r7, [fp]
 800a0ae:	6837      	ldr	r7, [r6, #0]
 800a0b0:	f8d5 c000 	ldr.w	ip, [r5]
 800a0b4:	f8c6 c000 	str.w	ip, [r6]
 800a0b8:	602f      	str	r7, [r5, #0]
 800a0ba:	e7a1      	b.n	800a000 <arm_bitreversal_f32+0x1c>
 800a0bc:	b005      	add	sp, #20
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	bf00      	nop

0800a0c4 <arm_cmplx_mag_f32>:
 800a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c8:	0897      	lsrs	r7, r2, #2
 800a0ca:	ed2d 8b02 	vpush	{d8}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	d077      	beq.n	800a1c2 <arm_cmplx_mag_f32+0xfe>
 800a0d2:	f100 0420 	add.w	r4, r0, #32
 800a0d6:	f101 0510 	add.w	r5, r1, #16
 800a0da:	463e      	mov	r6, r7
 800a0dc:	f04f 0800 	mov.w	r8, #0
 800a0e0:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800a0e4:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800a0e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a0ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a0f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	f2c0 80c1 	blt.w	800a282 <arm_cmplx_mag_f32+0x1be>
 800a100:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a104:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	f100 80d4 	bmi.w	800a2b8 <arm_cmplx_mag_f32+0x1f4>
 800a110:	ed05 8a04 	vstr	s16, [r5, #-16]
 800a114:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800a118:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800a11c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a120:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a124:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a128:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a130:	f2c0 80a4 	blt.w	800a27c <arm_cmplx_mag_f32+0x1b8>
 800a134:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a138:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a140:	f100 80a8 	bmi.w	800a294 <arm_cmplx_mag_f32+0x1d0>
 800a144:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a148:	ed14 0a04 	vldr	s0, [r4, #-16]
 800a14c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a150:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a158:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a15c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	f2c0 8087 	blt.w	800a276 <arm_cmplx_mag_f32+0x1b2>
 800a168:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a16c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a174:	f100 8097 	bmi.w	800a2a6 <arm_cmplx_mag_f32+0x1e2>
 800a178:	ed05 8a02 	vstr	s16, [r5, #-8]
 800a17c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a180:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a184:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a188:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a18c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a190:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a198:	db6a      	blt.n	800a270 <arm_cmplx_mag_f32+0x1ac>
 800a19a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a19e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	f100 8090 	bmi.w	800a2ca <arm_cmplx_mag_f32+0x206>
 800a1aa:	ed05 8a01 	vstr	s16, [r5, #-4]
 800a1ae:	3e01      	subs	r6, #1
 800a1b0:	f104 0420 	add.w	r4, r4, #32
 800a1b4:	f105 0510 	add.w	r5, r5, #16
 800a1b8:	d192      	bne.n	800a0e0 <arm_cmplx_mag_f32+0x1c>
 800a1ba:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800a1be:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a1c2:	f012 0203 	ands.w	r2, r2, #3
 800a1c6:	d04e      	beq.n	800a266 <arm_cmplx_mag_f32+0x1a2>
 800a1c8:	ed90 0a00 	vldr	s0, [r0]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	edd0 7a01 	vldr	s15, [r0, #4]
 800a1d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1da:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a1de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e6:	db4f      	blt.n	800a288 <arm_cmplx_mag_f32+0x1c4>
 800a1e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a1ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f4:	d472      	bmi.n	800a2dc <arm_cmplx_mag_f32+0x218>
 800a1f6:	ed81 8a00 	vstr	s16, [r1]
 800a1fa:	3a01      	subs	r2, #1
 800a1fc:	d033      	beq.n	800a266 <arm_cmplx_mag_f32+0x1a2>
 800a1fe:	ed90 0a02 	vldr	s0, [r0, #8]
 800a202:	2300      	movs	r3, #0
 800a204:	edd0 7a03 	vldr	s15, [r0, #12]
 800a208:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a20c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a210:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a214:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21c:	db36      	blt.n	800a28c <arm_cmplx_mag_f32+0x1c8>
 800a21e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a222:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22a:	d460      	bmi.n	800a2ee <arm_cmplx_mag_f32+0x22a>
 800a22c:	ed81 8a01 	vstr	s16, [r1, #4]
 800a230:	2a01      	cmp	r2, #1
 800a232:	d018      	beq.n	800a266 <arm_cmplx_mag_f32+0x1a2>
 800a234:	ed90 0a04 	vldr	s0, [r0, #16]
 800a238:	2300      	movs	r3, #0
 800a23a:	edd0 7a05 	vldr	s15, [r0, #20]
 800a23e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a242:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a246:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a24a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a252:	db1d      	blt.n	800a290 <arm_cmplx_mag_f32+0x1cc>
 800a254:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a258:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a260:	d44e      	bmi.n	800a300 <arm_cmplx_mag_f32+0x23c>
 800a262:	ed81 8a02 	vstr	s16, [r1, #8]
 800a266:	b004      	add	sp, #16
 800a268:	ecbd 8b02 	vpop	{d8}
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	f845 8c04 	str.w	r8, [r5, #-4]
 800a274:	e79b      	b.n	800a1ae <arm_cmplx_mag_f32+0xea>
 800a276:	f845 8c08 	str.w	r8, [r5, #-8]
 800a27a:	e77f      	b.n	800a17c <arm_cmplx_mag_f32+0xb8>
 800a27c:	f845 8c0c 	str.w	r8, [r5, #-12]
 800a280:	e762      	b.n	800a148 <arm_cmplx_mag_f32+0x84>
 800a282:	f845 8c10 	str.w	r8, [r5, #-16]
 800a286:	e745      	b.n	800a114 <arm_cmplx_mag_f32+0x50>
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	e7b6      	b.n	800a1fa <arm_cmplx_mag_f32+0x136>
 800a28c:	604b      	str	r3, [r1, #4]
 800a28e:	e7cf      	b.n	800a230 <arm_cmplx_mag_f32+0x16c>
 800a290:	608b      	str	r3, [r1, #8]
 800a292:	e7e8      	b.n	800a266 <arm_cmplx_mag_f32+0x1a2>
 800a294:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a298:	9001      	str	r0, [sp, #4]
 800a29a:	f000 fcf1 	bl	800ac80 <sqrtf>
 800a29e:	9801      	ldr	r0, [sp, #4]
 800a2a0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a2a4:	e74e      	b.n	800a144 <arm_cmplx_mag_f32+0x80>
 800a2a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a2aa:	9001      	str	r0, [sp, #4]
 800a2ac:	f000 fce8 	bl	800ac80 <sqrtf>
 800a2b0:	9801      	ldr	r0, [sp, #4]
 800a2b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a2b6:	e75f      	b.n	800a178 <arm_cmplx_mag_f32+0xb4>
 800a2b8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a2bc:	9001      	str	r0, [sp, #4]
 800a2be:	f000 fcdf 	bl	800ac80 <sqrtf>
 800a2c2:	9801      	ldr	r0, [sp, #4]
 800a2c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a2c8:	e722      	b.n	800a110 <arm_cmplx_mag_f32+0x4c>
 800a2ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a2ce:	9001      	str	r0, [sp, #4]
 800a2d0:	f000 fcd6 	bl	800ac80 <sqrtf>
 800a2d4:	9801      	ldr	r0, [sp, #4]
 800a2d6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a2da:	e766      	b.n	800a1aa <arm_cmplx_mag_f32+0xe6>
 800a2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e0:	9201      	str	r2, [sp, #4]
 800a2e2:	f000 fccd 	bl	800ac80 <sqrtf>
 800a2e6:	9903      	ldr	r1, [sp, #12]
 800a2e8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a2ec:	e783      	b.n	800a1f6 <arm_cmplx_mag_f32+0x132>
 800a2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f2:	9201      	str	r2, [sp, #4]
 800a2f4:	f000 fcc4 	bl	800ac80 <sqrtf>
 800a2f8:	9903      	ldr	r1, [sp, #12]
 800a2fa:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a2fe:	e795      	b.n	800a22c <arm_cmplx_mag_f32+0x168>
 800a300:	9101      	str	r1, [sp, #4]
 800a302:	f000 fcbd 	bl	800ac80 <sqrtf>
 800a306:	9901      	ldr	r1, [sp, #4]
 800a308:	e7ab      	b.n	800a262 <arm_cmplx_mag_f32+0x19e>
 800a30a:	bf00      	nop

0800a30c <__errno>:
 800a30c:	4b01      	ldr	r3, [pc, #4]	; (800a314 <__errno+0x8>)
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	24000128 	.word	0x24000128

0800a318 <__libc_init_array>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	4d0d      	ldr	r5, [pc, #52]	; (800a350 <__libc_init_array+0x38>)
 800a31c:	4c0d      	ldr	r4, [pc, #52]	; (800a354 <__libc_init_array+0x3c>)
 800a31e:	1b64      	subs	r4, r4, r5
 800a320:	10a4      	asrs	r4, r4, #2
 800a322:	2600      	movs	r6, #0
 800a324:	42a6      	cmp	r6, r4
 800a326:	d109      	bne.n	800a33c <__libc_init_array+0x24>
 800a328:	4d0b      	ldr	r5, [pc, #44]	; (800a358 <__libc_init_array+0x40>)
 800a32a:	4c0c      	ldr	r4, [pc, #48]	; (800a35c <__libc_init_array+0x44>)
 800a32c:	f000 fcca 	bl	800acc4 <_init>
 800a330:	1b64      	subs	r4, r4, r5
 800a332:	10a4      	asrs	r4, r4, #2
 800a334:	2600      	movs	r6, #0
 800a336:	42a6      	cmp	r6, r4
 800a338:	d105      	bne.n	800a346 <__libc_init_array+0x2e>
 800a33a:	bd70      	pop	{r4, r5, r6, pc}
 800a33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a340:	4798      	blx	r3
 800a342:	3601      	adds	r6, #1
 800a344:	e7ee      	b.n	800a324 <__libc_init_array+0xc>
 800a346:	f855 3b04 	ldr.w	r3, [r5], #4
 800a34a:	4798      	blx	r3
 800a34c:	3601      	adds	r6, #1
 800a34e:	e7f2      	b.n	800a336 <__libc_init_array+0x1e>
 800a350:	0801356c 	.word	0x0801356c
 800a354:	0801356c 	.word	0x0801356c
 800a358:	0801356c 	.word	0x0801356c
 800a35c:	08013570 	.word	0x08013570

0800a360 <memcpy>:
 800a360:	440a      	add	r2, r1
 800a362:	4291      	cmp	r1, r2
 800a364:	f100 33ff 	add.w	r3, r0, #4294967295
 800a368:	d100      	bne.n	800a36c <memcpy+0xc>
 800a36a:	4770      	bx	lr
 800a36c:	b510      	push	{r4, lr}
 800a36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a376:	4291      	cmp	r1, r2
 800a378:	d1f9      	bne.n	800a36e <memcpy+0xe>
 800a37a:	bd10      	pop	{r4, pc}

0800a37c <memset>:
 800a37c:	4402      	add	r2, r0
 800a37e:	4603      	mov	r3, r0
 800a380:	4293      	cmp	r3, r2
 800a382:	d100      	bne.n	800a386 <memset+0xa>
 800a384:	4770      	bx	lr
 800a386:	f803 1b01 	strb.w	r1, [r3], #1
 800a38a:	e7f9      	b.n	800a380 <memset+0x4>

0800a38c <_vsniprintf_r>:
 800a38c:	b530      	push	{r4, r5, lr}
 800a38e:	4614      	mov	r4, r2
 800a390:	2c00      	cmp	r4, #0
 800a392:	b09b      	sub	sp, #108	; 0x6c
 800a394:	4605      	mov	r5, r0
 800a396:	461a      	mov	r2, r3
 800a398:	da05      	bge.n	800a3a6 <_vsniprintf_r+0x1a>
 800a39a:	238b      	movs	r3, #139	; 0x8b
 800a39c:	6003      	str	r3, [r0, #0]
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	b01b      	add	sp, #108	; 0x6c
 800a3a4:	bd30      	pop	{r4, r5, pc}
 800a3a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a3ae:	bf14      	ite	ne
 800a3b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a3b4:	4623      	moveq	r3, r4
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	9305      	str	r3, [sp, #20]
 800a3ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3be:	9100      	str	r1, [sp, #0]
 800a3c0:	9104      	str	r1, [sp, #16]
 800a3c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3c6:	4669      	mov	r1, sp
 800a3c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3ca:	f000 f875 	bl	800a4b8 <_svfiprintf_r>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	bfbc      	itt	lt
 800a3d2:	238b      	movlt	r3, #139	; 0x8b
 800a3d4:	602b      	strlt	r3, [r5, #0]
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	d0e3      	beq.n	800a3a2 <_vsniprintf_r+0x16>
 800a3da:	9b00      	ldr	r3, [sp, #0]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e7df      	b.n	800a3a2 <_vsniprintf_r+0x16>
	...

0800a3e4 <vsniprintf>:
 800a3e4:	b507      	push	{r0, r1, r2, lr}
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	460a      	mov	r2, r1
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	4803      	ldr	r0, [pc, #12]	; (800a3fc <vsniprintf+0x18>)
 800a3f0:	6800      	ldr	r0, [r0, #0]
 800a3f2:	f7ff ffcb 	bl	800a38c <_vsniprintf_r>
 800a3f6:	b003      	add	sp, #12
 800a3f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3fc:	24000128 	.word	0x24000128

0800a400 <__ssputs_r>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	688e      	ldr	r6, [r1, #8]
 800a406:	429e      	cmp	r6, r3
 800a408:	4682      	mov	sl, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	4690      	mov	r8, r2
 800a40e:	461f      	mov	r7, r3
 800a410:	d838      	bhi.n	800a484 <__ssputs_r+0x84>
 800a412:	898a      	ldrh	r2, [r1, #12]
 800a414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a418:	d032      	beq.n	800a480 <__ssputs_r+0x80>
 800a41a:	6825      	ldr	r5, [r4, #0]
 800a41c:	6909      	ldr	r1, [r1, #16]
 800a41e:	eba5 0901 	sub.w	r9, r5, r1
 800a422:	6965      	ldr	r5, [r4, #20]
 800a424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a42c:	3301      	adds	r3, #1
 800a42e:	444b      	add	r3, r9
 800a430:	106d      	asrs	r5, r5, #1
 800a432:	429d      	cmp	r5, r3
 800a434:	bf38      	it	cc
 800a436:	461d      	movcc	r5, r3
 800a438:	0553      	lsls	r3, r2, #21
 800a43a:	d531      	bpl.n	800a4a0 <__ssputs_r+0xa0>
 800a43c:	4629      	mov	r1, r5
 800a43e:	f000 fb55 	bl	800aaec <_malloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	b950      	cbnz	r0, 800a45c <__ssputs_r+0x5c>
 800a446:	230c      	movs	r3, #12
 800a448:	f8ca 3000 	str.w	r3, [sl]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	6921      	ldr	r1, [r4, #16]
 800a45e:	464a      	mov	r2, r9
 800a460:	f7ff ff7e 	bl	800a360 <memcpy>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	6126      	str	r6, [r4, #16]
 800a472:	6165      	str	r5, [r4, #20]
 800a474:	444e      	add	r6, r9
 800a476:	eba5 0509 	sub.w	r5, r5, r9
 800a47a:	6026      	str	r6, [r4, #0]
 800a47c:	60a5      	str	r5, [r4, #8]
 800a47e:	463e      	mov	r6, r7
 800a480:	42be      	cmp	r6, r7
 800a482:	d900      	bls.n	800a486 <__ssputs_r+0x86>
 800a484:	463e      	mov	r6, r7
 800a486:	6820      	ldr	r0, [r4, #0]
 800a488:	4632      	mov	r2, r6
 800a48a:	4641      	mov	r1, r8
 800a48c:	f000 faa8 	bl	800a9e0 <memmove>
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	1b9b      	subs	r3, r3, r6
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	4433      	add	r3, r6
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	2000      	movs	r0, #0
 800a49e:	e7db      	b.n	800a458 <__ssputs_r+0x58>
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	f000 fb97 	bl	800abd4 <_realloc_r>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d1e1      	bne.n	800a470 <__ssputs_r+0x70>
 800a4ac:	6921      	ldr	r1, [r4, #16]
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	f000 fab0 	bl	800aa14 <_free_r>
 800a4b4:	e7c7      	b.n	800a446 <__ssputs_r+0x46>
	...

0800a4b8 <_svfiprintf_r>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4698      	mov	r8, r3
 800a4be:	898b      	ldrh	r3, [r1, #12]
 800a4c0:	061b      	lsls	r3, r3, #24
 800a4c2:	b09d      	sub	sp, #116	; 0x74
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	d50e      	bpl.n	800a4ea <_svfiprintf_r+0x32>
 800a4cc:	690b      	ldr	r3, [r1, #16]
 800a4ce:	b963      	cbnz	r3, 800a4ea <_svfiprintf_r+0x32>
 800a4d0:	2140      	movs	r1, #64	; 0x40
 800a4d2:	f000 fb0b 	bl	800aaec <_malloc_r>
 800a4d6:	6028      	str	r0, [r5, #0]
 800a4d8:	6128      	str	r0, [r5, #16]
 800a4da:	b920      	cbnz	r0, 800a4e6 <_svfiprintf_r+0x2e>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	e0d1      	b.n	800a68a <_svfiprintf_r+0x1d2>
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	616b      	str	r3, [r5, #20]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ee:	2320      	movs	r3, #32
 800a4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f8:	2330      	movs	r3, #48	; 0x30
 800a4fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6a4 <_svfiprintf_r+0x1ec>
 800a4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a502:	f04f 0901 	mov.w	r9, #1
 800a506:	4623      	mov	r3, r4
 800a508:	469a      	mov	sl, r3
 800a50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50e:	b10a      	cbz	r2, 800a514 <_svfiprintf_r+0x5c>
 800a510:	2a25      	cmp	r2, #37	; 0x25
 800a512:	d1f9      	bne.n	800a508 <_svfiprintf_r+0x50>
 800a514:	ebba 0b04 	subs.w	fp, sl, r4
 800a518:	d00b      	beq.n	800a532 <_svfiprintf_r+0x7a>
 800a51a:	465b      	mov	r3, fp
 800a51c:	4622      	mov	r2, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ff6d 	bl	800a400 <__ssputs_r>
 800a526:	3001      	adds	r0, #1
 800a528:	f000 80aa 	beq.w	800a680 <_svfiprintf_r+0x1c8>
 800a52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a52e:	445a      	add	r2, fp
 800a530:	9209      	str	r2, [sp, #36]	; 0x24
 800a532:	f89a 3000 	ldrb.w	r3, [sl]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80a2 	beq.w	800a680 <_svfiprintf_r+0x1c8>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a546:	f10a 0a01 	add.w	sl, sl, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a552:	931a      	str	r3, [sp, #104]	; 0x68
 800a554:	4654      	mov	r4, sl
 800a556:	2205      	movs	r2, #5
 800a558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55c:	4851      	ldr	r0, [pc, #324]	; (800a6a4 <_svfiprintf_r+0x1ec>)
 800a55e:	f7f5 febf 	bl	80002e0 <memchr>
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	b9d8      	cbnz	r0, 800a59e <_svfiprintf_r+0xe6>
 800a566:	06d0      	lsls	r0, r2, #27
 800a568:	bf44      	itt	mi
 800a56a:	2320      	movmi	r3, #32
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a570:	0711      	lsls	r1, r2, #28
 800a572:	bf44      	itt	mi
 800a574:	232b      	movmi	r3, #43	; 0x2b
 800a576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57a:	f89a 3000 	ldrb.w	r3, [sl]
 800a57e:	2b2a      	cmp	r3, #42	; 0x2a
 800a580:	d015      	beq.n	800a5ae <_svfiprintf_r+0xf6>
 800a582:	9a07      	ldr	r2, [sp, #28]
 800a584:	4654      	mov	r4, sl
 800a586:	2000      	movs	r0, #0
 800a588:	f04f 0c0a 	mov.w	ip, #10
 800a58c:	4621      	mov	r1, r4
 800a58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a592:	3b30      	subs	r3, #48	; 0x30
 800a594:	2b09      	cmp	r3, #9
 800a596:	d94e      	bls.n	800a636 <_svfiprintf_r+0x17e>
 800a598:	b1b0      	cbz	r0, 800a5c8 <_svfiprintf_r+0x110>
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	e014      	b.n	800a5c8 <_svfiprintf_r+0x110>
 800a59e:	eba0 0308 	sub.w	r3, r0, r8
 800a5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	46a2      	mov	sl, r4
 800a5ac:	e7d2      	b.n	800a554 <_svfiprintf_r+0x9c>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	9103      	str	r1, [sp, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	425b      	neglt	r3, r3
 800a5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c0:	9307      	strge	r3, [sp, #28]
 800a5c2:	9307      	strlt	r3, [sp, #28]
 800a5c4:	bfb8      	it	lt
 800a5c6:	9204      	strlt	r2, [sp, #16]
 800a5c8:	7823      	ldrb	r3, [r4, #0]
 800a5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a5cc:	d10c      	bne.n	800a5e8 <_svfiprintf_r+0x130>
 800a5ce:	7863      	ldrb	r3, [r4, #1]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d135      	bne.n	800a640 <_svfiprintf_r+0x188>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	9203      	str	r2, [sp, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	bfb8      	it	lt
 800a5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e4:	3402      	adds	r4, #2
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6b4 <_svfiprintf_r+0x1fc>
 800a5ec:	7821      	ldrb	r1, [r4, #0]
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f7f5 fe75 	bl	80002e0 <memchr>
 800a5f6:	b140      	cbz	r0, 800a60a <_svfiprintf_r+0x152>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	eba0 000a 	sub.w	r0, r0, sl
 800a5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	4303      	orrs	r3, r0
 800a606:	3401      	adds	r4, #1
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60e:	4826      	ldr	r0, [pc, #152]	; (800a6a8 <_svfiprintf_r+0x1f0>)
 800a610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a614:	2206      	movs	r2, #6
 800a616:	f7f5 fe63 	bl	80002e0 <memchr>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d038      	beq.n	800a690 <_svfiprintf_r+0x1d8>
 800a61e:	4b23      	ldr	r3, [pc, #140]	; (800a6ac <_svfiprintf_r+0x1f4>)
 800a620:	bb1b      	cbnz	r3, 800a66a <_svfiprintf_r+0x1b2>
 800a622:	9b03      	ldr	r3, [sp, #12]
 800a624:	3307      	adds	r3, #7
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	3308      	adds	r3, #8
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a630:	4433      	add	r3, r6
 800a632:	9309      	str	r3, [sp, #36]	; 0x24
 800a634:	e767      	b.n	800a506 <_svfiprintf_r+0x4e>
 800a636:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63a:	460c      	mov	r4, r1
 800a63c:	2001      	movs	r0, #1
 800a63e:	e7a5      	b.n	800a58c <_svfiprintf_r+0xd4>
 800a640:	2300      	movs	r3, #0
 800a642:	3401      	adds	r4, #1
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	4619      	mov	r1, r3
 800a648:	f04f 0c0a 	mov.w	ip, #10
 800a64c:	4620      	mov	r0, r4
 800a64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a652:	3a30      	subs	r2, #48	; 0x30
 800a654:	2a09      	cmp	r2, #9
 800a656:	d903      	bls.n	800a660 <_svfiprintf_r+0x1a8>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0c5      	beq.n	800a5e8 <_svfiprintf_r+0x130>
 800a65c:	9105      	str	r1, [sp, #20]
 800a65e:	e7c3      	b.n	800a5e8 <_svfiprintf_r+0x130>
 800a660:	fb0c 2101 	mla	r1, ip, r1, r2
 800a664:	4604      	mov	r4, r0
 800a666:	2301      	movs	r3, #1
 800a668:	e7f0      	b.n	800a64c <_svfiprintf_r+0x194>
 800a66a:	ab03      	add	r3, sp, #12
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	462a      	mov	r2, r5
 800a670:	4b0f      	ldr	r3, [pc, #60]	; (800a6b0 <_svfiprintf_r+0x1f8>)
 800a672:	a904      	add	r1, sp, #16
 800a674:	4638      	mov	r0, r7
 800a676:	f3af 8000 	nop.w
 800a67a:	1c42      	adds	r2, r0, #1
 800a67c:	4606      	mov	r6, r0
 800a67e:	d1d6      	bne.n	800a62e <_svfiprintf_r+0x176>
 800a680:	89ab      	ldrh	r3, [r5, #12]
 800a682:	065b      	lsls	r3, r3, #25
 800a684:	f53f af2c 	bmi.w	800a4e0 <_svfiprintf_r+0x28>
 800a688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a68a:	b01d      	add	sp, #116	; 0x74
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	ab03      	add	r3, sp, #12
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	462a      	mov	r2, r5
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <_svfiprintf_r+0x1f8>)
 800a698:	a904      	add	r1, sp, #16
 800a69a:	4638      	mov	r0, r7
 800a69c:	f000 f87a 	bl	800a794 <_printf_i>
 800a6a0:	e7eb      	b.n	800a67a <_svfiprintf_r+0x1c2>
 800a6a2:	bf00      	nop
 800a6a4:	08013538 	.word	0x08013538
 800a6a8:	08013542 	.word	0x08013542
 800a6ac:	00000000 	.word	0x00000000
 800a6b0:	0800a401 	.word	0x0800a401
 800a6b4:	0801353e 	.word	0x0801353e

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	68e5      	ldr	r5, [r4, #12]
 800a722:	6832      	ldr	r2, [r6, #0]
 800a724:	f003 0306 	and.w	r3, r3, #6
 800a728:	2b04      	cmp	r3, #4
 800a72a:	bf08      	it	eq
 800a72c:	1aad      	subeq	r5, r5, r2
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	6922      	ldr	r2, [r4, #16]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4649      	mov	r1, r9
 800a754:	4638      	mov	r0, r7
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	; 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4649      	mov	r1, r9
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	7e0f      	ldrb	r7, [r1, #24]
 800a79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a79c:	2f78      	cmp	r7, #120	; 0x78
 800a79e:	4691      	mov	r9, r2
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	; 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d8 	beq.w	800a966 <_printf_i+0x1d2>
 800a7b6:	2f58      	cmp	r7, #88	; 0x58
 800a7b8:	f000 80a3 	beq.w	800a902 <_printf_i+0x16e>
 800a7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a101      	add	r1, pc, #4	; (adr r1, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a94d 	.word	0x0800a94d
 800a804:	0800a871 	.word	0x0800a871
 800a808:	0800a92f 	.word	0x0800a92f
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a96f 	.word	0x0800a96f
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a871 	.word	0x0800a871
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a937 	.word	0x0800a937
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	602a      	str	r2, [r5, #0]
 800a834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a3      	b.n	800a988 <_printf_i+0x1f4>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	6829      	ldr	r1, [r5, #0]
 800a844:	0606      	lsls	r6, r0, #24
 800a846:	f101 0304 	add.w	r3, r1, #4
 800a84a:	d50a      	bpl.n	800a862 <_printf_i+0xce>
 800a84c:	680e      	ldr	r6, [r1, #0]
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	2e00      	cmp	r6, #0
 800a852:	da03      	bge.n	800a85c <_printf_i+0xc8>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	4276      	negs	r6, r6
 800a858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85c:	485e      	ldr	r0, [pc, #376]	; (800a9d8 <_printf_i+0x244>)
 800a85e:	230a      	movs	r3, #10
 800a860:	e019      	b.n	800a896 <_printf_i+0x102>
 800a862:	680e      	ldr	r6, [r1, #0]
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a86a:	bf18      	it	ne
 800a86c:	b236      	sxthne	r6, r6
 800a86e:	e7ef      	b.n	800a850 <_printf_i+0xbc>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	0601      	lsls	r1, r0, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xec>
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xf2>
 800a880:	0646      	lsls	r6, r0, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe8>
 800a884:	881e      	ldrh	r6, [r3, #0]
 800a886:	4854      	ldr	r0, [pc, #336]	; (800a9d8 <_printf_i+0x244>)
 800a888:	2f6f      	cmp	r7, #111	; 0x6f
 800a88a:	bf0c      	ite	eq
 800a88c:	2308      	moveq	r3, #8
 800a88e:	230a      	movne	r3, #10
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6865      	ldr	r5, [r4, #4]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	bfa2      	ittt	ge
 800a89e:	6821      	ldrge	r1, [r4, #0]
 800a8a0:	f021 0104 	bicge.w	r1, r1, #4
 800a8a4:	6021      	strge	r1, [r4, #0]
 800a8a6:	b90e      	cbnz	r6, 800a8ac <_printf_i+0x118>
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	d04d      	beq.n	800a948 <_printf_i+0x1b4>
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b6:	5dc7      	ldrb	r7, [r0, r7]
 800a8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8bc:	4637      	mov	r7, r6
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	d9f4      	bls.n	800a8ae <_printf_i+0x11a>
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10b      	bne.n	800a8e0 <_printf_i+0x14c>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07de      	lsls	r6, r3, #31
 800a8cc:	d508      	bpl.n	800a8e0 <_printf_i+0x14c>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	2330      	movle	r3, #48	; 0x30
 800a8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8e0:	1b52      	subs	r2, r2, r5
 800a8e2:	6122      	str	r2, [r4, #16]
 800a8e4:	f8cd a000 	str.w	sl, [sp]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fee2 	bl	800a6b8 <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d14c      	bne.n	800a992 <_printf_i+0x1fe>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	b004      	add	sp, #16
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	4835      	ldr	r0, [pc, #212]	; (800a9d8 <_printf_i+0x244>)
 800a904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a908:	6829      	ldr	r1, [r5, #0]
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a910:	6029      	str	r1, [r5, #0]
 800a912:	061d      	lsls	r5, r3, #24
 800a914:	d514      	bpl.n	800a940 <_printf_i+0x1ac>
 800a916:	07df      	lsls	r7, r3, #31
 800a918:	bf44      	itt	mi
 800a91a:	f043 0320 	orrmi.w	r3, r3, #32
 800a91e:	6023      	strmi	r3, [r4, #0]
 800a920:	b91e      	cbnz	r6, 800a92a <_printf_i+0x196>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f023 0320 	bic.w	r3, r3, #32
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	2310      	movs	r3, #16
 800a92c:	e7b0      	b.n	800a890 <_printf_i+0xfc>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	2378      	movs	r3, #120	; 0x78
 800a938:	4828      	ldr	r0, [pc, #160]	; (800a9dc <_printf_i+0x248>)
 800a93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a93e:	e7e3      	b.n	800a908 <_printf_i+0x174>
 800a940:	0659      	lsls	r1, r3, #25
 800a942:	bf48      	it	mi
 800a944:	b2b6      	uxthmi	r6, r6
 800a946:	e7e6      	b.n	800a916 <_printf_i+0x182>
 800a948:	4615      	mov	r5, r2
 800a94a:	e7bb      	b.n	800a8c4 <_printf_i+0x130>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	6826      	ldr	r6, [r4, #0]
 800a950:	6961      	ldr	r1, [r4, #20]
 800a952:	1d18      	adds	r0, r3, #4
 800a954:	6028      	str	r0, [r5, #0]
 800a956:	0635      	lsls	r5, r6, #24
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	d501      	bpl.n	800a960 <_printf_i+0x1cc>
 800a95c:	6019      	str	r1, [r3, #0]
 800a95e:	e002      	b.n	800a966 <_printf_i+0x1d2>
 800a960:	0670      	lsls	r0, r6, #25
 800a962:	d5fb      	bpl.n	800a95c <_printf_i+0x1c8>
 800a964:	8019      	strh	r1, [r3, #0]
 800a966:	2300      	movs	r3, #0
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	4615      	mov	r5, r2
 800a96c:	e7ba      	b.n	800a8e4 <_printf_i+0x150>
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	2100      	movs	r1, #0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7f5 fcb0 	bl	80002e0 <memchr>
 800a980:	b108      	cbz	r0, 800a986 <_printf_i+0x1f2>
 800a982:	1b40      	subs	r0, r0, r5
 800a984:	6060      	str	r0, [r4, #4]
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	6123      	str	r3, [r4, #16]
 800a98a:	2300      	movs	r3, #0
 800a98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a990:	e7a8      	b.n	800a8e4 <_printf_i+0x150>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	462a      	mov	r2, r5
 800a996:	4649      	mov	r1, r9
 800a998:	4640      	mov	r0, r8
 800a99a:	47d0      	blx	sl
 800a99c:	3001      	adds	r0, #1
 800a99e:	d0ab      	beq.n	800a8f8 <_printf_i+0x164>
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	079b      	lsls	r3, r3, #30
 800a9a4:	d413      	bmi.n	800a9ce <_printf_i+0x23a>
 800a9a6:	68e0      	ldr	r0, [r4, #12]
 800a9a8:	9b03      	ldr	r3, [sp, #12]
 800a9aa:	4298      	cmp	r0, r3
 800a9ac:	bfb8      	it	lt
 800a9ae:	4618      	movlt	r0, r3
 800a9b0:	e7a4      	b.n	800a8fc <_printf_i+0x168>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	47d0      	blx	sl
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d09b      	beq.n	800a8f8 <_printf_i+0x164>
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	9903      	ldr	r1, [sp, #12]
 800a9c6:	1a5b      	subs	r3, r3, r1
 800a9c8:	42ab      	cmp	r3, r5
 800a9ca:	dcf2      	bgt.n	800a9b2 <_printf_i+0x21e>
 800a9cc:	e7eb      	b.n	800a9a6 <_printf_i+0x212>
 800a9ce:	2500      	movs	r5, #0
 800a9d0:	f104 0619 	add.w	r6, r4, #25
 800a9d4:	e7f5      	b.n	800a9c2 <_printf_i+0x22e>
 800a9d6:	bf00      	nop
 800a9d8:	08013549 	.word	0x08013549
 800a9dc:	0801355a 	.word	0x0801355a

0800a9e0 <memmove>:
 800a9e0:	4288      	cmp	r0, r1
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	eb01 0402 	add.w	r4, r1, r2
 800a9e8:	d902      	bls.n	800a9f0 <memmove+0x10>
 800a9ea:	4284      	cmp	r4, r0
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	d807      	bhi.n	800aa00 <memmove+0x20>
 800a9f0:	1e43      	subs	r3, r0, #1
 800a9f2:	42a1      	cmp	r1, r4
 800a9f4:	d008      	beq.n	800aa08 <memmove+0x28>
 800a9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9fe:	e7f8      	b.n	800a9f2 <memmove+0x12>
 800aa00:	4402      	add	r2, r0
 800aa02:	4601      	mov	r1, r0
 800aa04:	428a      	cmp	r2, r1
 800aa06:	d100      	bne.n	800aa0a <memmove+0x2a>
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa12:	e7f7      	b.n	800aa04 <memmove+0x24>

0800aa14 <_free_r>:
 800aa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa16:	2900      	cmp	r1, #0
 800aa18:	d044      	beq.n	800aaa4 <_free_r+0x90>
 800aa1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1e:	9001      	str	r0, [sp, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f1a1 0404 	sub.w	r4, r1, #4
 800aa26:	bfb8      	it	lt
 800aa28:	18e4      	addlt	r4, r4, r3
 800aa2a:	f000 f913 	bl	800ac54 <__malloc_lock>
 800aa2e:	4a1e      	ldr	r2, [pc, #120]	; (800aaa8 <_free_r+0x94>)
 800aa30:	9801      	ldr	r0, [sp, #4]
 800aa32:	6813      	ldr	r3, [r2, #0]
 800aa34:	b933      	cbnz	r3, 800aa44 <_free_r+0x30>
 800aa36:	6063      	str	r3, [r4, #4]
 800aa38:	6014      	str	r4, [r2, #0]
 800aa3a:	b003      	add	sp, #12
 800aa3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa40:	f000 b90e 	b.w	800ac60 <__malloc_unlock>
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	d908      	bls.n	800aa5a <_free_r+0x46>
 800aa48:	6825      	ldr	r5, [r4, #0]
 800aa4a:	1961      	adds	r1, r4, r5
 800aa4c:	428b      	cmp	r3, r1
 800aa4e:	bf01      	itttt	eq
 800aa50:	6819      	ldreq	r1, [r3, #0]
 800aa52:	685b      	ldreq	r3, [r3, #4]
 800aa54:	1949      	addeq	r1, r1, r5
 800aa56:	6021      	streq	r1, [r4, #0]
 800aa58:	e7ed      	b.n	800aa36 <_free_r+0x22>
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	b10b      	cbz	r3, 800aa64 <_free_r+0x50>
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d9fa      	bls.n	800aa5a <_free_r+0x46>
 800aa64:	6811      	ldr	r1, [r2, #0]
 800aa66:	1855      	adds	r5, r2, r1
 800aa68:	42a5      	cmp	r5, r4
 800aa6a:	d10b      	bne.n	800aa84 <_free_r+0x70>
 800aa6c:	6824      	ldr	r4, [r4, #0]
 800aa6e:	4421      	add	r1, r4
 800aa70:	1854      	adds	r4, r2, r1
 800aa72:	42a3      	cmp	r3, r4
 800aa74:	6011      	str	r1, [r2, #0]
 800aa76:	d1e0      	bne.n	800aa3a <_free_r+0x26>
 800aa78:	681c      	ldr	r4, [r3, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	6053      	str	r3, [r2, #4]
 800aa7e:	4421      	add	r1, r4
 800aa80:	6011      	str	r1, [r2, #0]
 800aa82:	e7da      	b.n	800aa3a <_free_r+0x26>
 800aa84:	d902      	bls.n	800aa8c <_free_r+0x78>
 800aa86:	230c      	movs	r3, #12
 800aa88:	6003      	str	r3, [r0, #0]
 800aa8a:	e7d6      	b.n	800aa3a <_free_r+0x26>
 800aa8c:	6825      	ldr	r5, [r4, #0]
 800aa8e:	1961      	adds	r1, r4, r5
 800aa90:	428b      	cmp	r3, r1
 800aa92:	bf04      	itt	eq
 800aa94:	6819      	ldreq	r1, [r3, #0]
 800aa96:	685b      	ldreq	r3, [r3, #4]
 800aa98:	6063      	str	r3, [r4, #4]
 800aa9a:	bf04      	itt	eq
 800aa9c:	1949      	addeq	r1, r1, r5
 800aa9e:	6021      	streq	r1, [r4, #0]
 800aaa0:	6054      	str	r4, [r2, #4]
 800aaa2:	e7ca      	b.n	800aa3a <_free_r+0x26>
 800aaa4:	b003      	add	sp, #12
 800aaa6:	bd30      	pop	{r4, r5, pc}
 800aaa8:	2400de34 	.word	0x2400de34

0800aaac <sbrk_aligned>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4e0e      	ldr	r6, [pc, #56]	; (800aae8 <sbrk_aligned+0x3c>)
 800aab0:	460c      	mov	r4, r1
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	4605      	mov	r5, r0
 800aab6:	b911      	cbnz	r1, 800aabe <sbrk_aligned+0x12>
 800aab8:	f000 f8bc 	bl	800ac34 <_sbrk_r>
 800aabc:	6030      	str	r0, [r6, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 f8b7 	bl	800ac34 <_sbrk_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d00a      	beq.n	800aae0 <sbrk_aligned+0x34>
 800aaca:	1cc4      	adds	r4, r0, #3
 800aacc:	f024 0403 	bic.w	r4, r4, #3
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	d007      	beq.n	800aae4 <sbrk_aligned+0x38>
 800aad4:	1a21      	subs	r1, r4, r0
 800aad6:	4628      	mov	r0, r5
 800aad8:	f000 f8ac 	bl	800ac34 <_sbrk_r>
 800aadc:	3001      	adds	r0, #1
 800aade:	d101      	bne.n	800aae4 <sbrk_aligned+0x38>
 800aae0:	f04f 34ff 	mov.w	r4, #4294967295
 800aae4:	4620      	mov	r0, r4
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	2400de38 	.word	0x2400de38

0800aaec <_malloc_r>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	1ccd      	adds	r5, r1, #3
 800aaf2:	f025 0503 	bic.w	r5, r5, #3
 800aaf6:	3508      	adds	r5, #8
 800aaf8:	2d0c      	cmp	r5, #12
 800aafa:	bf38      	it	cc
 800aafc:	250c      	movcc	r5, #12
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	4607      	mov	r7, r0
 800ab02:	db01      	blt.n	800ab08 <_malloc_r+0x1c>
 800ab04:	42a9      	cmp	r1, r5
 800ab06:	d905      	bls.n	800ab14 <_malloc_r+0x28>
 800ab08:	230c      	movs	r3, #12
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	4e2e      	ldr	r6, [pc, #184]	; (800abd0 <_malloc_r+0xe4>)
 800ab16:	f000 f89d 	bl	800ac54 <__malloc_lock>
 800ab1a:	6833      	ldr	r3, [r6, #0]
 800ab1c:	461c      	mov	r4, r3
 800ab1e:	bb34      	cbnz	r4, 800ab6e <_malloc_r+0x82>
 800ab20:	4629      	mov	r1, r5
 800ab22:	4638      	mov	r0, r7
 800ab24:	f7ff ffc2 	bl	800aaac <sbrk_aligned>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	d14d      	bne.n	800abca <_malloc_r+0xde>
 800ab2e:	6834      	ldr	r4, [r6, #0]
 800ab30:	4626      	mov	r6, r4
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d140      	bne.n	800abb8 <_malloc_r+0xcc>
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	4631      	mov	r1, r6
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	eb04 0803 	add.w	r8, r4, r3
 800ab40:	f000 f878 	bl	800ac34 <_sbrk_r>
 800ab44:	4580      	cmp	r8, r0
 800ab46:	d13a      	bne.n	800abbe <_malloc_r+0xd2>
 800ab48:	6821      	ldr	r1, [r4, #0]
 800ab4a:	3503      	adds	r5, #3
 800ab4c:	1a6d      	subs	r5, r5, r1
 800ab4e:	f025 0503 	bic.w	r5, r5, #3
 800ab52:	3508      	adds	r5, #8
 800ab54:	2d0c      	cmp	r5, #12
 800ab56:	bf38      	it	cc
 800ab58:	250c      	movcc	r5, #12
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7ff ffa5 	bl	800aaac <sbrk_aligned>
 800ab62:	3001      	adds	r0, #1
 800ab64:	d02b      	beq.n	800abbe <_malloc_r+0xd2>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	442b      	add	r3, r5
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	e00e      	b.n	800ab8c <_malloc_r+0xa0>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	1b52      	subs	r2, r2, r5
 800ab72:	d41e      	bmi.n	800abb2 <_malloc_r+0xc6>
 800ab74:	2a0b      	cmp	r2, #11
 800ab76:	d916      	bls.n	800aba6 <_malloc_r+0xba>
 800ab78:	1961      	adds	r1, r4, r5
 800ab7a:	42a3      	cmp	r3, r4
 800ab7c:	6025      	str	r5, [r4, #0]
 800ab7e:	bf18      	it	ne
 800ab80:	6059      	strne	r1, [r3, #4]
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	bf08      	it	eq
 800ab86:	6031      	streq	r1, [r6, #0]
 800ab88:	5162      	str	r2, [r4, r5]
 800ab8a:	604b      	str	r3, [r1, #4]
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f104 060b 	add.w	r6, r4, #11
 800ab92:	f000 f865 	bl	800ac60 <__malloc_unlock>
 800ab96:	f026 0607 	bic.w	r6, r6, #7
 800ab9a:	1d23      	adds	r3, r4, #4
 800ab9c:	1af2      	subs	r2, r6, r3
 800ab9e:	d0b6      	beq.n	800ab0e <_malloc_r+0x22>
 800aba0:	1b9b      	subs	r3, r3, r6
 800aba2:	50a3      	str	r3, [r4, r2]
 800aba4:	e7b3      	b.n	800ab0e <_malloc_r+0x22>
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	bf0c      	ite	eq
 800abac:	6032      	streq	r2, [r6, #0]
 800abae:	605a      	strne	r2, [r3, #4]
 800abb0:	e7ec      	b.n	800ab8c <_malloc_r+0xa0>
 800abb2:	4623      	mov	r3, r4
 800abb4:	6864      	ldr	r4, [r4, #4]
 800abb6:	e7b2      	b.n	800ab1e <_malloc_r+0x32>
 800abb8:	4634      	mov	r4, r6
 800abba:	6876      	ldr	r6, [r6, #4]
 800abbc:	e7b9      	b.n	800ab32 <_malloc_r+0x46>
 800abbe:	230c      	movs	r3, #12
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	4638      	mov	r0, r7
 800abc4:	f000 f84c 	bl	800ac60 <__malloc_unlock>
 800abc8:	e7a1      	b.n	800ab0e <_malloc_r+0x22>
 800abca:	6025      	str	r5, [r4, #0]
 800abcc:	e7de      	b.n	800ab8c <_malloc_r+0xa0>
 800abce:	bf00      	nop
 800abd0:	2400de34 	.word	0x2400de34

0800abd4 <_realloc_r>:
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd8:	4680      	mov	r8, r0
 800abda:	4614      	mov	r4, r2
 800abdc:	460e      	mov	r6, r1
 800abde:	b921      	cbnz	r1, 800abea <_realloc_r+0x16>
 800abe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	4611      	mov	r1, r2
 800abe6:	f7ff bf81 	b.w	800aaec <_malloc_r>
 800abea:	b92a      	cbnz	r2, 800abf8 <_realloc_r+0x24>
 800abec:	f7ff ff12 	bl	800aa14 <_free_r>
 800abf0:	4625      	mov	r5, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	f000 f838 	bl	800ac6c <_malloc_usable_size_r>
 800abfc:	4284      	cmp	r4, r0
 800abfe:	4607      	mov	r7, r0
 800ac00:	d802      	bhi.n	800ac08 <_realloc_r+0x34>
 800ac02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac06:	d812      	bhi.n	800ac2e <_realloc_r+0x5a>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	f7ff ff6e 	bl	800aaec <_malloc_r>
 800ac10:	4605      	mov	r5, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0ed      	beq.n	800abf2 <_realloc_r+0x1e>
 800ac16:	42bc      	cmp	r4, r7
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	bf28      	it	cs
 800ac1e:	463a      	movcs	r2, r7
 800ac20:	f7ff fb9e 	bl	800a360 <memcpy>
 800ac24:	4631      	mov	r1, r6
 800ac26:	4640      	mov	r0, r8
 800ac28:	f7ff fef4 	bl	800aa14 <_free_r>
 800ac2c:	e7e1      	b.n	800abf2 <_realloc_r+0x1e>
 800ac2e:	4635      	mov	r5, r6
 800ac30:	e7df      	b.n	800abf2 <_realloc_r+0x1e>
	...

0800ac34 <_sbrk_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	; (800ac50 <_sbrk_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f5 fd0c 	bl	800065c <_sbrk>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_sbrk_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_sbrk_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	2400de3c 	.word	0x2400de3c

0800ac54 <__malloc_lock>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__malloc_lock+0x8>)
 800ac56:	f000 b811 	b.w	800ac7c <__retarget_lock_acquire_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	2400de40 	.word	0x2400de40

0800ac60 <__malloc_unlock>:
 800ac60:	4801      	ldr	r0, [pc, #4]	; (800ac68 <__malloc_unlock+0x8>)
 800ac62:	f000 b80c 	b.w	800ac7e <__retarget_lock_release_recursive>
 800ac66:	bf00      	nop
 800ac68:	2400de40 	.word	0x2400de40

0800ac6c <_malloc_usable_size_r>:
 800ac6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac70:	1f18      	subs	r0, r3, #4
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfbc      	itt	lt
 800ac76:	580b      	ldrlt	r3, [r1, r0]
 800ac78:	18c0      	addlt	r0, r0, r3
 800ac7a:	4770      	bx	lr

0800ac7c <__retarget_lock_acquire_recursive>:
 800ac7c:	4770      	bx	lr

0800ac7e <__retarget_lock_release_recursive>:
 800ac7e:	4770      	bx	lr

0800ac80 <sqrtf>:
 800ac80:	b508      	push	{r3, lr}
 800ac82:	ed2d 8b02 	vpush	{d8}
 800ac86:	eeb0 8a40 	vmov.f32	s16, s0
 800ac8a:	f000 f817 	bl	800acbc <__ieee754_sqrtf>
 800ac8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac96:	d60c      	bvs.n	800acb2 <sqrtf+0x32>
 800ac98:	eddf 8a07 	vldr	s17, [pc, #28]	; 800acb8 <sqrtf+0x38>
 800ac9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca4:	d505      	bpl.n	800acb2 <sqrtf+0x32>
 800aca6:	f7ff fb31 	bl	800a30c <__errno>
 800acaa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800acae:	2321      	movs	r3, #33	; 0x21
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	ecbd 8b02 	vpop	{d8}
 800acb6:	bd08      	pop	{r3, pc}
 800acb8:	00000000 	.word	0x00000000

0800acbc <__ieee754_sqrtf>:
 800acbc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800acc0:	4770      	bx	lr
	...

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
