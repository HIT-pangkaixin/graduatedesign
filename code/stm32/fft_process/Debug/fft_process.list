
fft_process.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000164  24000000  08009528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000027cc  24000164  0800968c  00020164  2**2
                  ALLOC
  7 ._user_heap_stack 00001400  24002930  0800968c  00022930  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014115  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000322b  00000000  00000000  000342a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000eb8  00000000  00000000  000374d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d40  00000000  00000000  00038390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038e65  00000000  00000000  000390d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00014554  00000000  00000000  00071f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015578e  00000000  00000000  00086489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001dbc17  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003e54  00000000  00000000  001dbc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009478 	.word	0x08009478

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	08009478 	.word	0x08009478

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <MX_GPIO_Init+0xcc>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a2b      	ldr	r2, [pc, #172]	; (800044c <MX_GPIO_Init+0xcc>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xcc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xcc>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xcc>)
 80003bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_GPIO_Init+0xcc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_GPIO_Init+0xcc>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_GPIO_Init+0xcc>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xcc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_Pin|green_Pin|blue_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2107      	movs	r1, #7
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_GPIO_Init+0xd0>)
 80003f6:	f000 fd8f 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000400:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <MX_GPIO_Init+0xd0>)
 8000412:	f000 fbd1 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = red_Pin|green_Pin|blue_Pin;
 8000416:	2307      	movs	r3, #7
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <MX_GPIO_Init+0xd0>)
 800042e:	f000 fbc3 	bl	8000bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f000 fb89 	bl	8000b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f000 fba0 	bl	8000b82 <HAL_NVIC_EnableIRQ>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024400 	.word	0x58024400
 8000450:	58020800 	.word	0x58020800

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 f9dc 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f806 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ff8e 	bl	8000380 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000464:	f007 fd0c 	bl	8007e80 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	e7fe      	b.n	8000468 <main+0x14>
	...

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09c      	sub	sp, #112	; 0x70
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	224c      	movs	r2, #76	; 0x4c
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f008 fb7a 	bl	8008b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2220      	movs	r2, #32
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f008 fb74 	bl	8008b74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800048c:	2002      	movs	r0, #2
 800048e:	f002 f84b 	bl	8002528 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <SystemClock_Config+0xf0>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a30      	ldr	r2, [pc, #192]	; (800055c <SystemClock_Config+0xf0>)
 800049c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <SystemClock_Config+0xf0>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <SystemClock_Config+0xf4>)
 80004ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <SystemClock_Config+0xf4>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <SystemClock_Config+0xf4>)
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c4:	bf00      	nop
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <SystemClock_Config+0xf0>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d2:	d1f8      	bne.n	80004c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004d4:	2321      	movs	r3, #33	; 0x21
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	2302      	movs	r3, #2
 80004e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80004ee:	2350      	movs	r3, #80	; 0x50
 80004f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004fe:	230c      	movs	r3, #12
 8000500:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000502:	2300      	movs	r3, #0
 8000504:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f854 	bl	80025bc <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800051a:	f000 f823 	bl	8000564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	233f      	movs	r3, #63	; 0x3f
 8000520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800052a:	2308      	movs	r3, #8
 800052c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000532:	2340      	movs	r3, #64	; 0x40
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2104      	movs	r1, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fc67 	bl	8002e18 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000550:	f000 f808 	bl	8000564 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3770      	adds	r7, #112	; 0x70
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	58024800 	.word	0x58024800
 8000560:	58000400 	.word	0x58000400

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>
	...

08000570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_MspInit+0x30>)
 8000578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x30>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x30>)
 8000588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	58024400 	.word	0x58024400

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 f982 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80005fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000600:	f000 fca3 	bl	8000f4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <OTG_FS_IRQHandler+0x10>)
 800060e:	f000 fe0d 	bl	800122c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	240021f4 	.word	0x240021f4

0800061c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin)
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d103      	bne.n	8000636 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		CDC_Transmit_FS((uint8_t *)UserRxBufferFS, 100);
 800062e:	2164      	movs	r1, #100	; 0x64
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <HAL_GPIO_EXTI_Callback+0x24>)
 8000632:	f007 fd25 	bl	8008080 <CDC_Transmit_FS>
		//usb_debug("\r\n");
	}
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	24000468 	.word	0x24000468

08000644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <_sbrk+0x5c>)
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <_sbrk+0x60>)
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <_sbrk+0x64>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <_sbrk+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	429a      	cmp	r2, r3
 8000672:	d207      	bcs.n	8000684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000674:	f008 fa46 	bl	8008b04 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	220c      	movs	r2, #12
 800067c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e009      	b.n	8000698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <_sbrk+0x64>)
 8000694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	24080000 	.word	0x24080000
 80006a4:	00000400 	.word	0x00000400
 80006a8:	24000180 	.word	0x24000180
 80006ac:	24002930 	.word	0x24002930

080006b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0xe4>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a36      	ldr	r2, [pc, #216]	; (8000794 <SystemInit+0xe4>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <SystemInit+0xe8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d807      	bhi.n	80006e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0xe8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 030f 	bic.w	r3, r3, #15
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <SystemInit+0xe8>)
 80006da:	f043 0307 	orr.w	r3, r3, #7
 80006de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <SystemInit+0xec>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <SystemInit+0xec>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0xec>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <SystemInit+0xec>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4929      	ldr	r1, [pc, #164]	; (800079c <SystemInit+0xec>)
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemInit+0xf0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemInit+0xe8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0xe8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f023 030f 	bic.w	r3, r3, #15
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0xe8>)
 8000714:	f043 0307 	orr.w	r3, r3, #7
 8000718:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <SystemInit+0xec>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <SystemInit+0xec>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemInit+0xec>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <SystemInit+0xec>)
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <SystemInit+0xf4>)
 8000730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemInit+0xec>)
 8000734:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0xf8>)
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <SystemInit+0xec>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <SystemInit+0xfc>)
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <SystemInit+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <SystemInit+0xec>)
 8000746:	4a19      	ldr	r2, [pc, #100]	; (80007ac <SystemInit+0xfc>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0xec>)
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <SystemInit+0xec>)
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <SystemInit+0xfc>)
 8000754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0xec>)
 8000758:	2200      	movs	r2, #0
 800075a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <SystemInit+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <SystemInit+0xec>)
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <SystemInit+0xec>)
 800076a:	2200      	movs	r2, #0
 800076c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <SystemInit+0x100>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <SystemInit+0x104>)
 8000774:	4013      	ands	r3, r2
 8000776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800077a:	d202      	bcs.n	8000782 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <SystemInit+0x108>)
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <SystemInit+0x10c>)
 8000784:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000788:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	52002000 	.word	0x52002000
 800079c:	58024400 	.word	0x58024400
 80007a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a4:	02020200 	.word	0x02020200
 80007a8:	01ff0000 	.word	0x01ff0000
 80007ac:	01010280 	.word	0x01010280
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f7ff ff74 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ee:	f008 f98f 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f2:	f7ff fe2f 	bl	8000454 <main>
  bx  lr
 80007f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000800:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8000804:	08009528 	.word	0x08009528
  ldr r2, =_sbss
 8000808:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 800080c:	24002930 	.word	0x24002930

08000810 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC3_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081a:	2003      	movs	r0, #3
 800081c:	f000 f98c 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000820:	f002 fcb0 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8000824:	4602      	mov	r2, r0
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_Init+0x68>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <HAL_Init+0x6c>)
 8000832:	5ccb      	ldrb	r3, [r1, r3]
 8000834:	f003 031f 	and.w	r3, r3, #31
 8000838:	fa22 f303 	lsr.w	r3, r2, r3
 800083c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_Init+0x68>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_Init+0x6c>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	f003 031f 	and.w	r3, r3, #31
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	fa22 f303 	lsr.w	r3, r2, r3
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <HAL_Init+0x70>)
 8000856:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_Init+0x74>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f814 	bl	800088c <HAL_InitTick>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e002      	b.n	8000874 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800086e:	f7ff fe7f 	bl	8000570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58024400 	.word	0x58024400
 8000880:	080094dc 	.word	0x080094dc
 8000884:	24000004 	.word	0x24000004
 8000888:	24000000 	.word	0x24000000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_InitTick+0x60>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e021      	b.n	80008e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <HAL_InitTick+0x64>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f971 	bl	8000b9e <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 f93b 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x68>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2400000c 	.word	0x2400000c
 80008f0:	24000000 	.word	0x24000000
 80008f4:	24000008 	.word	0x24000008

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x20>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_IncTick+0x24>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2400000c 	.word	0x2400000c
 800091c:	24000184 	.word	0x24000184

08000920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_GetTick+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	24000184 	.word	0x24000184

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff ffee 	bl	8000920 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffde 	bl	8000920 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2400000c 	.word	0x2400000c

08000980 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetREVID+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	0c1b      	lsrs	r3, r3, #16
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	5c001000 	.word	0x5c001000

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <__NVIC_SetPriorityGrouping+0x40>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	4313      	orrs	r3, r2
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x40>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00
 80009dc:	05fa0000 	.word	0x05fa0000

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff40 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff33 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffa4 	bl	8000af4 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bc6:	4b89      	ldr	r3, [pc, #548]	; (8000dec <HAL_GPIO_Init+0x234>)
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bca:	e194      	b.n	8000ef6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8186 	beq.w	8000ef0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x44>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	69b9      	ldr	r1, [r7, #24]
 8000cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0203 	and.w	r2, r3, #3
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80e0 	beq.w	8000ef0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <HAL_GPIO_Init+0x238>)
 8000d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <HAL_GPIO_Init+0x238>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <HAL_GPIO_Init+0x238>)
 8000d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <HAL_GPIO_Init+0x23c>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <HAL_GPIO_Init+0x240>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d052      	beq.n	8000e20 <HAL_GPIO_Init+0x268>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <HAL_GPIO_Init+0x244>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d031      	beq.n	8000de6 <HAL_GPIO_Init+0x22e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_GPIO_Init+0x248>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d02b      	beq.n	8000de2 <HAL_GPIO_Init+0x22a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_GPIO_Init+0x24c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d025      	beq.n	8000dde <HAL_GPIO_Init+0x226>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_GPIO_Init+0x250>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01f      	beq.n	8000dda <HAL_GPIO_Init+0x222>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_GPIO_Init+0x254>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x21e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_GPIO_Init+0x258>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x21a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_GPIO_Init+0x25c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x216>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_GPIO_Init+0x260>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x212>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_GPIO_Init+0x264>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x20e>
 8000dc2:	2309      	movs	r3, #9
 8000dc4:	e02d      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	e02b      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dca:	2308      	movs	r3, #8
 8000dcc:	e029      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e027      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	e025      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	e023      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e021      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dde:	2303      	movs	r3, #3
 8000de0:	e01f      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e01d      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e01b      	b.n	8000e22 <HAL_GPIO_Init+0x26a>
 8000dea:	bf00      	nop
 8000dec:	58000080 	.word	0x58000080
 8000df0:	58024400 	.word	0x58024400
 8000df4:	58000400 	.word	0x58000400
 8000df8:	58020000 	.word	0x58020000
 8000dfc:	58020400 	.word	0x58020400
 8000e00:	58020800 	.word	0x58020800
 8000e04:	58020c00 	.word	0x58020c00
 8000e08:	58021000 	.word	0x58021000
 8000e0c:	58021400 	.word	0x58021400
 8000e10:	58021800 	.word	0x58021800
 8000e14:	58021c00 	.word	0x58021c00
 8000e18:	58022000 	.word	0x58022000
 8000e1c:	58022400 	.word	0x58022400
 8000e20:	2300      	movs	r3, #0
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e32:	4938      	ldr	r1, [pc, #224]	; (8000f14 <HAL_GPIO_Init+0x35c>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f ae63 	bne.w	8000bcc <HAL_GPIO_Init+0x14>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3724      	adds	r7, #36	; 0x24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	58000400 	.word	0x58000400

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb53 	bl	800061c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f80:	b08f      	sub	sp, #60	; 0x3c
 8000f82:	af0a      	add	r7, sp, #40	; 0x28
 8000f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e116      	b.n	80011be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f007 fa74 	bl	8008498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fc4d 	bl	800486e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	687e      	ldr	r6, [r7, #4]
 8000fdc:	466d      	mov	r5, sp
 8000fde:	f106 0410 	add.w	r4, r6, #16
 8000fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ff2:	1d33      	adds	r3, r6, #4
 8000ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f003 fb18 	bl	800462c <USB_CoreInit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2202      	movs	r2, #2
 8001006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0d7      	b.n	80011be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fc3b 	bl	8004890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e04a      	b.n	80010b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	333d      	adds	r3, #61	; 0x3d
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	333c      	adds	r3, #60	; 0x3c
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	b298      	uxth	r0, r3
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	3344      	adds	r3, #68	; 0x44
 800105c:	4602      	mov	r2, r0
 800105e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3340      	adds	r3, #64	; 0x40
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3348      	adds	r3, #72	; 0x48
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	334c      	adds	r3, #76	; 0x4c
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	3354      	adds	r3, #84	; 0x54
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d3af      	bcc.n	8001020 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e044      	b.n	8001150 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d3b5      	bcc.n	80010c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	687e      	ldr	r6, [r7, #4]
 8001162:	466d      	mov	r5, sp
 8001164:	f106 0410 	add.w	r4, r6, #16
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001174:	e885 0003 	stmia.w	r5, {r0, r1}
 8001178:	1d33      	adds	r3, r6, #4
 800117a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f003 fbd3 	bl	8004928 <USB_DevInit>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2202      	movs	r2, #2
 800118c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e014      	b.n	80011be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f001 f98b 	bl	80024c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fd21 	bl	8005bfe <USB_DevDisconnect>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_PCD_Start+0x1c>
 80011de:	2302      	movs	r3, #2
 80011e0:	e020      	b.n	8001224 <HAL_PCD_Start+0x5e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fb1e 	bl	800484c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fcd1 	bl	8005bbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08d      	sub	sp, #52	; 0x34
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fd8f 	bl	8005d66 <USB_GetMode>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 84b7 	bne.w	8001bbe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fcf3 	bl	8005c40 <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 84ad 	beq.w	8001bbc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fce0 	bl	8005c40 <USB_ReadInterrupts>
 8001280:	4603      	mov	r3, r0
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f002 0202 	and.w	r2, r2, #2
 8001298:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fcce 	bl	8005c40 <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d161      	bne.n	8001372 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0210 	bic.w	r2, r2, #16
 80012bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f003 020f 	and.w	r2, r3, #15
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	3304      	adds	r3, #4
 80012dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	0c5b      	lsrs	r3, r3, #17
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d124      	bne.n	8001334 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d035      	beq.n	8001362 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001304:	b29b      	uxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	6a38      	ldr	r0, [r7, #32]
 800130a:	f004 fb05 	bl	8005918 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800131a:	441a      	add	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132c:	441a      	add	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	621a      	str	r2, [r3, #32]
 8001332:	e016      	b.n	8001362 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	0c5b      	lsrs	r3, r3, #17
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b06      	cmp	r3, #6
 800133e:	d110      	bne.n	8001362 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001346:	2208      	movs	r2, #8
 8001348:	4619      	mov	r1, r3
 800134a:	6a38      	ldr	r0, [r7, #32]
 800134c:	f004 fae4 	bl	8005918 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	441a      	add	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0210 	orr.w	r2, r2, #16
 8001370:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fc62 	bl	8005c40 <USB_ReadInterrupts>
 800137c:	4603      	mov	r3, r0
 800137e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001382:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001386:	f040 80a7 	bne.w	80014d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fc67 	bl	8005c66 <USB_ReadDevAllOutEpInterrupt>
 8001398:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800139a:	e099      	b.n	80014d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 808e 	beq.w	80014c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fc8b 	bl	8005cce <USB_ReadDevOutEPInterrupt>
 80013b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2301      	movs	r3, #1
 80013d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 feef 	bl	80021bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00c      	beq.n	8001402 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	015a      	lsls	r2, r3, #5
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f4:	461a      	mov	r2, r3
 80013f6:	2308      	movs	r3, #8
 80013f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 ffc5 	bl	800238c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	015a      	lsls	r2, r3, #5
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001418:	461a      	mov	r2, r3
 800141a:	2310      	movs	r3, #16
 800141c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d030      	beq.n	800148a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001430:	2b80      	cmp	r3, #128	; 0x80
 8001432:	d109      	bne.n	8001448 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	78db      	ldrb	r3, [r3, #3]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f007 f934 	bl	80086e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001484:	461a      	mov	r2, r3
 8001486:	2302      	movs	r3, #2
 8001488:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a0:	461a      	mov	r2, r3
 80014a2:	2320      	movs	r3, #32
 80014a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014bc:	461a      	mov	r2, r3
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3301      	adds	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f47f af62 	bne.w	800139c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fbaf 	bl	8005c40 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014ec:	f040 80db 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 fbd0 	bl	8005c9a <USB_ReadDevAllInEpInterrupt>
 80014fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001500:	e0cd      	b.n	800169e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80c2 	beq.w	8001692 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fbf6 	bl	8005d0a <USB_ReadDevInEPInterrupt>
 800151e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d057      	beq.n	80015da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	2201      	movs	r2, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	69f9      	ldr	r1, [r7, #28]
 8001546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800154a:	4013      	ands	r3, r2
 800154c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d132      	bne.n	80015ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	334c      	adds	r3, #76	; 0x4c
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4403      	add	r3, r0
 8001588:	3348      	adds	r3, #72	; 0x48
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4419      	add	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4403      	add	r3, r0
 800159c:	334c      	adds	r3, #76	; 0x4c
 800159e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d113      	bne.n	80015ce <HAL_PCD_IRQHandler+0x3a2>
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3354      	adds	r3, #84	; 0x54
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d108      	bne.n	80015ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015c6:	461a      	mov	r2, r3
 80015c8:	2101      	movs	r1, #1
 80015ca:	f004 fbff 	bl	8005dcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f006 fffe 	bl	80085d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f0:	461a      	mov	r2, r3
 80015f2:	2308      	movs	r3, #8
 80015f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	461a      	mov	r2, r3
 800160e:	2310      	movs	r3, #16
 8001610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001628:	461a      	mov	r2, r3
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163a:	6a38      	ldr	r0, [r7, #32]
 800163c:	f003 fad2 	bl	8004be4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	3338      	adds	r3, #56	; 0x38
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	78db      	ldrb	r3, [r3, #3]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2200      	movs	r2, #0
 8001660:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f007 f84b 	bl	8008704 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2302      	movs	r3, #2
 800167e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800168a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fd08 	bl	80020a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f af2e 	bne.w	8001502 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fac8 	bl	8005c40 <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ba:	d122      	bne.n	8001702 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 ff13 	bl	8002510 <HAL_PCDEx_LPM_Callback>
 80016ea:	e002      	b.n	80016f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f006 ffe9 	bl	80086c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fa9a 	bl	8005c40 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001716:	d112      	bne.n	800173e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f006 ffa5 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fa7c 	bl	8005c40 <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800174e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001752:	d121      	bne.n	8001798 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001762:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d111      	bne.n	8001792 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	f003 020f 	and.w	r2, r3, #15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001788:	2101      	movs	r1, #1
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fec0 	bl	8002510 <HAL_PCDEx_LPM_Callback>
 8001790:	e002      	b.n	8001798 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f006 ff70 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fa4f 	bl	8005c40 <USB_ReadInterrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ac:	f040 80b7 	bne.w	800191e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2110      	movs	r1, #16
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fa0a 	bl	8004be4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d4:	e046      	b.n	8001864 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e2:	461a      	mov	r2, r3
 80017e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	0151      	lsls	r1, r2, #5
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	440a      	add	r2, r1
 8001800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001808:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	461a      	mov	r2, r3
 8001818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800181c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	0151      	lsls	r1, r2, #5
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	440a      	add	r2, r1
 8001834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800183c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	0151      	lsls	r1, r2, #5
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	440a      	add	r2, r1
 8001854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800185c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	3301      	adds	r3, #1
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	429a      	cmp	r2, r3
 800186c:	d3b3      	bcc.n	80017d6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001880:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189a:	f043 030b 	orr.w	r3, r3, #11
 800189e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b0:	f043 030b 	orr.w	r3, r3, #11
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	e015      	b.n	80018e4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	4619      	mov	r1, r3
 80018c8:	f242 032b 	movw	r3, #8235	; 0x202b
 80018cc:	4313      	orrs	r3, r2
 80018ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018de:	f043 030b 	orr.w	r3, r3, #11
 80018e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001908:	461a      	mov	r2, r3
 800190a:	f004 fa5f 	bl	8005dcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800191c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f004 f98c 	bl	8005c40 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d124      	bne.n	800197e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fa23 	bl	8005d84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f9cb 	bl	8004cde <USB_GetDevSpeed>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681c      	ldr	r4, [r3, #0]
 8001954:	f001 fd90 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8001958:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4620      	mov	r0, r4
 8001964:	f002 fed0 	bl	8004708 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f006 fe5c 	bl	8008626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800197c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f95c 	bl	8005c40 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b08      	cmp	r3, #8
 8001990:	d10a      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f006 fe39 	bl	800860a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f002 0208 	and.w	r2, r2, #8
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 f947 	bl	8005c40 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d122      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	e014      	b.n	80019f8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fb27 	bl	8002040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	3301      	adds	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3e5      	bcc.n	80019ce <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 f91a 	bl	8005c40 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a16:	d13b      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a18:	2301      	movs	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e02b      	b.n	8001a76 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d115      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da12      	bge.n	8001a70 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	333f      	adds	r3, #63	; 0x3f
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fae8 	bl	8002040 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	3301      	adds	r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d3ce      	bcc.n	8001a1e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 f8d3 	bl	8005c40 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa4:	d155      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	e045      	b.n	8001b38 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d12e      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da2b      	bge.n	8001b32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ae6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d121      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6053      	str	r3, [r2, #4]
            break;
 8001b30:	e007      	b.n	8001b42 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3b4      	bcc.n	8001aac <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 f872 	bl	8005c40 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b66:	d10a      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f006 fddd 	bl	8008728 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f85c 	bl	8005c40 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d115      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fdcd 	bl	8008744 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e000      	b.n	8001bbe <HAL_PCD_IRQHandler+0x992>
      return;
 8001bbc:	bf00      	nop
    }
  }
}
 8001bbe:	3734      	adds	r7, #52	; 0x34
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}

08001bc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_PCD_SetAddress+0x1a>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e013      	b.n	8001c06 <HAL_PCD_SetAddress+0x42>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 ffba 	bl	8005b70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	4608      	mov	r0, r1
 8001c18:	4611      	mov	r1, r2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	460b      	mov	r3, r1
 8001c22:	803b      	strh	r3, [r7, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da0f      	bge.n	8001c54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	705a      	strb	r2, [r3, #1]
 8001c52:	e00f      	b.n	8001c74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 020f 	and.w	r2, r3, #15
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c80:	883a      	ldrh	r2, [r7, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	78ba      	ldrb	r2, [r7, #2]
 8001c8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c9e:	78bb      	ldrb	r3, [r7, #2]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d102      	bne.n	8001caa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_EP_Open+0xaa>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e00e      	b.n	8001cd6 <HAL_PCD_EP_Open+0xc8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f82e 	bl	8004d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da0f      	bge.n	8001d12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	3338      	adds	r3, #56	; 0x38
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	705a      	strb	r2, [r3, #1]
 8001d10:	e00f      	b.n	8001d32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 020f 	and.w	r2, r3, #15
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_PCD_EP_Close+0x6e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e00e      	b.n	8001d6a <HAL_PCD_EP_Close+0x8c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 f86c 	bl	8004e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	f003 fb53 	bl	8005490 <USB_EP0StartXfer>
 8001dea:	e008      	b.n	8001dfe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	f003 f8f9 	bl	8004ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	7afb      	ldrb	r3, [r7, #11]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3338      	adds	r3, #56	; 0x38
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2201      	movs	r2, #1
 8001e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	f003 faf1 	bl	8005490 <USB_EP0StartXfer>
 8001eae:	e008      	b.n	8001ec2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f003 f897 	bl	8004ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e050      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00d      	b.n	8001f2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_SetStall+0x82>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01e      	b.n	8001f8c <HAL_PCD_EP_SetStall+0xc0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fd33 	bl	80059c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	b2d9      	uxtb	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f003 ff25 	bl	8005dcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d901      	bls.n	8001fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e042      	b.n	8002038 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da0f      	bge.n	8001fda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3338      	adds	r3, #56	; 0x38
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	705a      	strb	r2, [r3, #1]
 8001fd8:	e00f      	b.n	8001ffa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_EP_ClrStall+0x86>
 8002016:	2302      	movs	r3, #2
 8002018:	e00e      	b.n	8002038 <HAL_PCD_EP_ClrStall+0xa4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	f003 fd3b 	bl	8005aa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800204c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0c      	bge.n	800206e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3338      	adds	r3, #56	; 0x38
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e00c      	b.n	8002088 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fb5a 	bl	8005748 <USB_EPStopXfer>
 8002094:	4603      	mov	r3, r0
 8002096:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002098:	7afb      	ldrb	r3, [r7, #11]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b08a      	sub	sp, #40	; 0x28
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3338      	adds	r3, #56	; 0x38
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d901      	bls.n	80020da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06c      	b.n	80021b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d902      	bls.n	80020f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3303      	adds	r3, #3
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fe:	e02b      	b.n	8002158 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	429a      	cmp	r2, r3
 8002114:	d902      	bls.n	800211c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	3303      	adds	r3, #3
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002134:	b2db      	uxtb	r3, r3
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4603      	mov	r3, r0
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f003 fbae 	bl	800589c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	441a      	add	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	b29b      	uxth	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	429a      	cmp	r2, r3
 800216c:	d809      	bhi.n	8002182 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002176:	429a      	cmp	r2, r3
 8002178:	d203      	bcs.n	8002182 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1be      	bne.n	8002100 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	429a      	cmp	r2, r3
 800218c:	d811      	bhi.n	80021b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	2201      	movs	r2, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	6939      	ldr	r1, [r7, #16]
 80021aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ae:	4013      	ands	r3, r2
 80021b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	333c      	adds	r3, #60	; 0x3c
 80021d4:	3304      	adds	r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d17b      	bne.n	80022ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f240 80b9 	bls.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b3 	beq.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	461a      	mov	r2, r3
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	6093      	str	r3, [r2, #8]
 8002226:	e0a7      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	2320      	movs	r3, #32
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	e098      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8093 	bne.w	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d90f      	bls.n	800227a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e07e      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	440b      	add	r3, r1
 800229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d114      	bne.n	80022dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	f003 fd80 	bl	8005dcc <USB_EP0_OutStart>
 80022cc:	e006      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	441a      	add	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f006 f95c 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 80022e8:	e046      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d124      	bne.n	800233c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002308:	461a      	mov	r2, r3
 800230a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230e:	6093      	str	r3, [r2, #8]
 8002310:	e032      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	2320      	movs	r3, #32
 800232c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f006 f933 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 800233a:	e01d      	b.n	8002378 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002364:	461a      	mov	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f003 fd30 	bl	8005dcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f006 f914 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	4f54300a 	.word	0x4f54300a
 8002388:	4f54310a 	.word	0x4f54310a

0800238c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	333c      	adds	r3, #60	; 0x3c
 80023a4:	3304      	adds	r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <PCD_EP_OutSetupPacket_int+0x88>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90e      	bls.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f006 f8cb 	bl	800857c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d90c      	bls.n	8002408 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f003 fce2 	bl	8005dcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	4f54300a 	.word	0x4f54300a

08002418 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
 8002424:	4613      	mov	r3, r2
 8002426:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002436:	883b      	ldrh	r3, [r7, #0]
 8002438:	0419      	lsls	r1, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	430a      	orrs	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
 8002444:	e028      	b.n	8002498 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e00d      	b.n	8002476 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3340      	adds	r3, #64	; 0x40
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3301      	adds	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	3b01      	subs	r3, #1
 800247c:	429a      	cmp	r2, r3
 800247e:	d3ec      	bcc.n	800245a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002480:	883b      	ldrh	r3, [r7, #0]
 8002482:	0418      	lsls	r0, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	3b01      	subs	r3, #1
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4302      	orrs	r2, r0
 8002490:	3340      	adds	r3, #64	; 0x40
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PCDEx_ActivateLPM+0x44>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	10000003 	.word	0x10000003

08002510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00a      	beq.n	8002552 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01f      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e01d      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	490f      	ldr	r1, [pc, #60]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002562:	f7fe f9dd 	bl	8000920 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002568:	e009      	b.n	800257e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800256a:	f7fe f9d9 	bl	8000920 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002578:	d901      	bls.n	800257e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e007      	b.n	800258e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_PWREx_ConfigSupply+0x70>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	d1ee      	bne.n	800256a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	58024800 	.word	0x58024800

0800259c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	58024800 	.word	0x58024800

080025bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f000 bc1d 	b.w	8002e0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8087 	beq.w	80026ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	4b99      	ldr	r3, [pc, #612]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e8:	4b96      	ldr	r3, [pc, #600]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d007      	beq.n	8002604 <HAL_RCC_OscConfig+0x48>
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d110      	bne.n	800261c <HAL_RCC_OscConfig+0x60>
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d10b      	bne.n	800261c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d06c      	beq.n	80026ea <HAL_RCC_OscConfig+0x12e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d168      	bne.n	80026ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e3f6      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x78>
 8002626:	4b87      	ldr	r3, [pc, #540]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a86      	ldr	r2, [pc, #536]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e02e      	b.n	8002692 <HAL_RCC_OscConfig+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x9a>
 800263c:	4b81      	ldr	r3, [pc, #516]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a80      	ldr	r2, [pc, #512]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a7d      	ldr	r2, [pc, #500]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e01d      	b.n	8002692 <HAL_RCC_OscConfig+0xd6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265e:	d10c      	bne.n	800267a <HAL_RCC_OscConfig+0xbe>
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a77      	ldr	r2, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a74      	ldr	r2, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e00b      	b.n	8002692 <HAL_RCC_OscConfig+0xd6>
 800267a:	4b72      	ldr	r3, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a71      	ldr	r2, [pc, #452]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800268c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d013      	beq.n	80026c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe f941 	bl	8000920 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7fe f93d 	bl	8000920 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e3aa      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b4:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0xe6>
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe f92d 	bl	8000920 <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ca:	f7fe f929 	bl	8000920 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e396      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x10e>
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80cb 	beq.w	8002890 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002702:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_RCC_OscConfig+0x164>
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	2b18      	cmp	r3, #24
 8002714:	d156      	bne.n	80027c4 <HAL_RCC_OscConfig+0x208>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d151      	bne.n	80027c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	4b48      	ldr	r3, [pc, #288]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x17c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e368      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002738:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 0219 	bic.w	r2, r3, #25
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	493f      	ldr	r1, [pc, #252]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800274a:	f7fe f8e9 	bl	8000920 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe f8e5 	bl	8000920 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e352      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	f7fe f906 	bl	8000980 <HAL_GetREVID>
 8002774:	4603      	mov	r3, r0
 8002776:	f241 0203 	movw	r2, #4099	; 0x1003
 800277a:	4293      	cmp	r3, r2
 800277c:	d817      	bhi.n	80027ae <HAL_RCC_OscConfig+0x1f2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x1dc>
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800278e:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002796:	e07b      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	031b      	lsls	r3, r3, #12
 80027a6:	4927      	ldr	r1, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	e070      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	4921      	ldr	r1, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c2:	e065      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d048      	beq.n	800285e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 0219 	bic.w	r2, r3, #25
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	491a      	ldr	r1, [pc, #104]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe f89f 	bl	8000920 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe f89b 	bl	8000920 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e308      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	f7fe f8bc 	bl	8000980 <HAL_GetREVID>
 8002808:	4603      	mov	r3, r0
 800280a:	f241 0203 	movw	r2, #4099	; 0x1003
 800280e:	4293      	cmp	r3, r2
 8002810:	d81a      	bhi.n	8002848 <HAL_RCC_OscConfig+0x28c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d108      	bne.n	800282c <HAL_RCC_OscConfig+0x270>
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	6053      	str	r3, [r2, #4]
 800282a:	e031      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	4902      	ldr	r1, [pc, #8]	; (8002844 <HAL_RCC_OscConfig+0x288>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e026      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400
 8002848:	4b9a      	ldr	r3, [pc, #616]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	4997      	ldr	r1, [pc, #604]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	e018      	b.n	8002890 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b95      	ldr	r3, [pc, #596]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe f859 	bl	8000920 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe f855 	bl	8000920 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e2c2      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002884:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a9 	beq.w	80029f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a8:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_OscConfig+0x308>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b18      	cmp	r3, #24
 80028b8:	d13a      	bne.n	8002930 <HAL_RCC_OscConfig+0x374>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d135      	bne.n	8002930 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x320>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e296      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028dc:	f7fe f850 	bl	8000980 <HAL_GetREVID>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d817      	bhi.n	800291a <HAL_RCC_OscConfig+0x35e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d108      	bne.n	8002904 <HAL_RCC_OscConfig+0x348>
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028fa:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002900:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002902:	e075      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002904:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	069b      	lsls	r3, r3, #26
 8002912:	4968      	ldr	r1, [pc, #416]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002918:	e06a      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800291a:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	4962      	ldr	r1, [pc, #392]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292e:	e05f      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d042      	beq.n	80029be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002938:	4b5e      	ldr	r3, [pc, #376]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5d      	ldr	r2, [pc, #372]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fd ffec 	bl	8000920 <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800294c:	f7fd ffe8 	bl	8000920 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e255      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800295e:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296a:	f7fe f809 	bl	8000980 <HAL_GetREVID>
 800296e:	4603      	mov	r3, r0
 8002970:	f241 0203 	movw	r2, #4099	; 0x1003
 8002974:	4293      	cmp	r3, r2
 8002976:	d817      	bhi.n	80029a8 <HAL_RCC_OscConfig+0x3ec>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	2b20      	cmp	r3, #32
 800297e:	d108      	bne.n	8002992 <HAL_RCC_OscConfig+0x3d6>
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002988:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e02e      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	4944      	ldr	r1, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
 80029a6:	e023      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	493f      	ldr	r1, [pc, #252]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
 80029bc:	e018      	b.n	80029f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a3c      	ldr	r2, [pc, #240]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fd ffa9 	bl	8000920 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029d2:	f7fd ffa5 	bl	8000920 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e212      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029e4:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d036      	beq.n	8002a6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d019      	beq.n	8002a38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a08:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fd ff86 	bl	8000920 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fd ff82 	bl	8000920 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1ef      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x45c>
 8002a36:	e018      	b.n	8002a6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fd ff6c 	bl	8000920 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fd ff68 	bl	8000920 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1d5      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d039      	beq.n	8002aea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a8a:	f7fd ff49 	bl	8000920 <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fd ff45 	bl	8000920 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1b2      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4d6>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x52e>
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab8:	4b9b      	ldr	r3, [pc, #620]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a9a      	ldr	r2, [pc, #616]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ac4:	f7fd ff2c 	bl	8000920 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002acc:	f7fd ff28 	bl	8000920 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e195      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ade:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8081 	beq.w	8002bfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <HAL_RCC_OscConfig+0x770>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a8b      	ldr	r2, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x770>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b04:	f7fd ff0c 	bl	8000920 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fd ff08 	bl	8000920 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e175      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x770>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x584>
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e02d      	b.n	8002b9c <HAL_RCC_OscConfig+0x5e0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5a6>
 8002b48:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a76      	ldr	r2, [pc, #472]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a73      	ldr	r2, [pc, #460]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x5e0>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c8>
 8002b6a:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a6b      	ldr	r2, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x5e0>
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a64      	ldr	r2, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fd febc 	bl	8000920 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fd feb8 	bl	8000920 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e123      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc2:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x5f0>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fd fea6 	bl	8000920 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fd fea2 	bl	8000920 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e10d      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8102 	beq.w	8002e08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c04:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0c:	2b18      	cmp	r3, #24
 8002c0e:	f000 80bd 	beq.w	8002d8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 809e 	bne.w	8002d58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fd fe7a 	bl	8000920 <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fd fe76 	bl	8000920 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0e3      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_RCC_OscConfig+0x774>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4931      	ldr	r1, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	628b      	str	r3, [r1, #40]	; 0x28
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	3b01      	subs	r3, #1
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	3b01      	subs	r3, #1
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c98:	4923      	ldr	r1, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x778>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f023 020c 	bic.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4917      	ldr	r1, [pc, #92]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f023 0202 	bic.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	4912      	ldr	r1, [pc, #72]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fdff 	bl	8000920 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d24:	e011      	b.n	8002d4a <HAL_RCC_OscConfig+0x78e>
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58024800 	.word	0x58024800
 8002d30:	fffffc0c 	.word	0xfffffc0c
 8002d34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fd fdf2 	bl	8000920 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e05f      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x77c>
 8002d56:	e057      	b.n	8002e08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fd fddc 	bl	8000920 <HAL_GetTick>
 8002d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fd fdd8 	bl	8000920 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e045      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x7b0>
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_OscConfig+0x858>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d031      	beq.n	8002e04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0203 	and.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d12a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d122      	bne.n	8002e04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d111      	bne.n	8002e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	0e1b      	lsrs	r3, r3, #24
 8002df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3730      	adds	r7, #48	; 0x30
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400

08002e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e19c      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b87      	ldr	r3, [pc, #540]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4985      	ldr	r1, [pc, #532]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e184      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e78:	4b78      	ldr	r3, [pc, #480]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4975      	ldr	r1, [pc, #468]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	496a      	ldr	r1, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	495e      	ldr	r1, [pc, #376]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4953      	ldr	r1, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4947      	ldr	r1, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d055      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4940      	ldr	r1, [pc, #256]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f68:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0f6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0ea      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0de      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 0207 	bic.w	r2, r3, #7
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fd fca9 	bl	8000920 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fd fca5 	bl	8000920 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0be      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1eb      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	429a      	cmp	r2, r3
 8003014:	d208      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d214      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e086      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
 8003058:	52002000 	.word	0x52002000
 800305c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d208      	bcs.n	800308e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d208      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	492e      	ldr	r1, [pc, #184]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d208      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4922      	ldr	r1, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003118:	f000 f834 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x35c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x360>)
 800314e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x364>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_ClockConfig+0x368>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fb96 	bl	800088c <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
 8003174:	080094dc 	.word	0x080094dc
 8003178:	24000004 	.word	0x24000004
 800317c:	24000000 	.word	0x24000000
 8003180:	24000008 	.word	0x24000008

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318a:	4bb3      	ldr	r3, [pc, #716]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003192:	2b18      	cmp	r3, #24
 8003194:	f200 8155 	bhi.w	8003442 <HAL_RCC_GetSysClockFreq+0x2be>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003443 	.word	0x08003443
 80031a8:	08003443 	.word	0x08003443
 80031ac:	08003443 	.word	0x08003443
 80031b0:	08003443 	.word	0x08003443
 80031b4:	08003443 	.word	0x08003443
 80031b8:	08003443 	.word	0x08003443
 80031bc:	08003443 	.word	0x08003443
 80031c0:	0800322b 	.word	0x0800322b
 80031c4:	08003443 	.word	0x08003443
 80031c8:	08003443 	.word	0x08003443
 80031cc:	08003443 	.word	0x08003443
 80031d0:	08003443 	.word	0x08003443
 80031d4:	08003443 	.word	0x08003443
 80031d8:	08003443 	.word	0x08003443
 80031dc:	08003443 	.word	0x08003443
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003443 	.word	0x08003443
 80031e8:	08003443 	.word	0x08003443
 80031ec:	08003443 	.word	0x08003443
 80031f0:	08003443 	.word	0x08003443
 80031f4:	08003443 	.word	0x08003443
 80031f8:	08003443 	.word	0x08003443
 80031fc:	08003443 	.word	0x08003443
 8003200:	08003237 	.word	0x08003237
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003204:	4b94      	ldr	r3, [pc, #592]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003210:	4b91      	ldr	r3, [pc, #580]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	4a90      	ldr	r2, [pc, #576]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003222:	e111      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003224:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003226:	61bb      	str	r3, [r7, #24]
    break;
 8003228:	e10e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800322a:	4b8d      	ldr	r3, [pc, #564]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800322c:	61bb      	str	r3, [r7, #24]
    break;
 800322e:	e10b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003230:	4b8c      	ldr	r3, [pc, #560]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003232:	61bb      	str	r3, [r7, #24]
    break;
 8003234:	e108      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003240:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800324c:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003256:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80e1 	beq.w	800343c <HAL_RCC_GetSysClockFreq+0x2b8>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f000 8083 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x204>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x248>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x114>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d056      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003296:	e099      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003298:	4b6f      	ldr	r3, [pc, #444]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d02d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	4a6b      	ldr	r2, [pc, #428]	; (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032fe:	e087      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800346c <HAL_RCC_GetSysClockFreq+0x2e8>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003342:	e065      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003386:	e043      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ca:	e021      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800340e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	0a5b      	lsrs	r3, r3, #9
 8003416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003428:	edd7 6a07 	vldr	s13, [r7, #28]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
    break;
 8003440:	e002      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003444:	61bb      	str	r3, [r7, #24]
    break;
 8003446:	bf00      	nop
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	58024400 	.word	0x58024400
 800345c:	03d09000 	.word	0x03d09000
 8003460:	003d0900 	.word	0x003d0900
 8003464:	00b71b00 	.word	0x00b71b00
 8003468:	46000000 	.word	0x46000000
 800346c:	4c742400 	.word	0x4c742400
 8003470:	4a742400 	.word	0x4a742400
 8003474:	4b371b00 	.word	0x4b371b00

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800347e:	f7ff fe81 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490f      	ldr	r1, [pc, #60]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	080094dc 	.word	0x080094dc
 80034d0:	24000004 	.word	0x24000004
 80034d4:	24000000 	.word	0x24000000

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034fc:	d02a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003502:	d824      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003508:	d018      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800350a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350e:	d81e      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003518:	d007      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800351a:	e018      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351c:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	4aa2      	ldr	r2, [pc, #648]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003528:	e015      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 ff17 	bl	8004364 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800353a:	e00c      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3324      	adds	r3, #36	; 0x24
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 ffc0 	bl	80044c8 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
      break;
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800355c:	4b93      	ldr	r3, [pc, #588]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003568:	4990      	ldr	r1, [pc, #576]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	650b      	str	r3, [r1, #80]	; 0x50
 800356e:	e001      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	2b04      	cmp	r3, #4
 8003586:	d826      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035a5 	.word	0x080035a5
 8003594:	080035b3 	.word	0x080035b3
 8003598:	080035c5 	.word	0x080035c5
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035dd 	.word	0x080035dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035b0:	e015      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fed3 	bl	8004364 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035c2:	e00c      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3324      	adds	r3, #36	; 0x24
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ff7c 	bl	80044c8 <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
      break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e4:	4b71      	ldr	r3, [pc, #452]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	f023 0207 	bic.w	r2, r3, #7
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	496e      	ldr	r1, [pc, #440]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	650b      	str	r3, [r1, #80]	; 0x50
 80035f6:	e001      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003604:	2b00      	cmp	r3, #0
 8003606:	d042      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d02b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d825      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003618:	2bc0      	cmp	r3, #192	; 0xc0
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800361c:	2bc0      	cmp	r3, #192	; 0xc0
 800361e:	d821      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d016      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d81d      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d007      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003630:	e018      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003632:	4b5e      	ldr	r3, [pc, #376]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	4a5d      	ldr	r2, [pc, #372]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800363e:	e017      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fe8c 	bl	8004364 <RCCEx_PLL2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003650:	e00e      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3324      	adds	r3, #36	; 0x24
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 ff35 	bl	80044c8 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003662:	e005      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
      break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800366e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	494a      	ldr	r1, [pc, #296]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	650b      	str	r3, [r1, #80]	; 0x50
 8003688:	e001      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d049      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a4:	d030      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036aa:	d82a      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036b0:	d02c      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036bc:	d018      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036cc:	d007      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4a35      	ldr	r2, [pc, #212]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036dc:	e017      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fe3d 	bl	8004364 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036ee:	e00e      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3324      	adds	r3, #36	; 0x24
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fee6 	bl	80044c8 <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
      break;
 8003706:	e002      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800370c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003722:	4922      	ldr	r1, [pc, #136]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	658b      	str	r3, [r1, #88]	; 0x58
 8003728:	e001      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04b      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003744:	d030      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d82a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800374c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003750:	d02e      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003756:	d824      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800375c:	d018      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800375e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003762:	d81e      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800376c:	d007      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800376e:	e018      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800377c:	e019      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fded 	bl	8004364 <RCCEx_PLL2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800378e:	e010      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fe96 	bl	80044c8 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a0:	e007      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
      break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037ac:	58024400 	.word	0x58024400
      break;
 80037b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037b8:	4b99      	ldr	r3, [pc, #612]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037c6:	4996      	ldr	r1, [pc, #600]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	658b      	str	r3, [r1, #88]	; 0x58
 80037cc:	e001      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d032      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	2b30      	cmp	r3, #48	; 0x30
 80037e4:	d01c      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037e6:	2b30      	cmp	r3, #48	; 0x30
 80037e8:	d817      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d00c      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d813      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d10f      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fa:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	4a88      	ldr	r2, [pc, #544]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003806:	e00e      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fda8 	bl	8004364 <RCCEx_PLL2_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003818:	e005      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
      break;
 800381e:	e002      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003820:	bf00      	nop
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800382c:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	4979      	ldr	r1, [pc, #484]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800383a:	4313      	orrs	r3, r2
 800383c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800383e:	e001      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d047      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003858:	d030      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800385a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385e:	d82a      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003864:	d02c      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800386c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003870:	d018      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003890:	e017      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fd63 	bl	8004364 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038a2:	e00e      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fe0c 	bl	80044c8 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038b4:	e005      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c8:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	4952      	ldr	r1, [pc, #328]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	650b      	str	r3, [r1, #80]	; 0x50
 80038da:	e001      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d049      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f4:	d02e      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fa:	d828      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003900:	d02a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003906:	d822      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800390c:	d026      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800390e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003912:	d81c      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003918:	d010      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800391a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800391e:	d816      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01d      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d111      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fd17 	bl	8004364 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800393a:	e012      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fdc0 	bl	80044c8 <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800394c:	e009      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e006      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003954:	bf00      	nop
 8003956:	e004      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003958:	bf00      	nop
 800395a:	e002      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800395c:	bf00      	nop
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003974:	492a      	ldr	r1, [pc, #168]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003976:	4313      	orrs	r3, r2
 8003978:	650b      	str	r3, [r1, #80]	; 0x50
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003996:	d02e      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399c:	d828      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d02a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d822      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ae:	d026      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b4:	d81c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ba:	d010      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c0:	d816      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ca:	d111      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fcc6 	bl	8004364 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039dc:	e012      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fd6f 	bl	80044c8 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039ee:	e009      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e006      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039f6:	bf00      	nop
 80039f8:	e004      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039fa:	bf00      	nop
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a18:	4901      	ldr	r1, [pc, #4]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02f      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3c:	d00e      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a42:	d814      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d015      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4e:	4baf      	ldr	r3, [pc, #700]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	4aae      	ldr	r2, [pc, #696]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fc7e 	bl	8004364 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7c:	4ba3      	ldr	r3, [pc, #652]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a88:	49a0      	ldr	r1, [pc, #640]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d032      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d81b      	bhi.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ac1 	.word	0x08003ac1
 8003ab8:	08003acf 	.word	0x08003acf
 8003abc:	08003ae7 	.word	0x08003ae7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4b92      	ldr	r3, [pc, #584]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4a91      	ldr	r2, [pc, #580]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003acc:	e00c      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fc45 	bl	8004364 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003aee:	4b87      	ldr	r3, [pc, #540]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	4984      	ldr	r1, [pc, #528]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b00:	e001      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8086 	beq.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7d      	ldr	r2, [pc, #500]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fc fefe 	bl	8000920 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fc fefa 	bl	8000920 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	75fb      	strb	r3, [r7, #23]
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d166      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b58:	4053      	eors	r3, r2
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b6c:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a66      	ldr	r2, [pc, #408]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b78:	4b64      	ldr	r3, [pc, #400]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a63      	ldr	r2, [pc, #396]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b84:	4a61      	ldr	r2, [pc, #388]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d115      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fc fec3 	bl	8000920 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9c:	e00b      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fc febf 	bl	8000920 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d902      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb6:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ed      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d126      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bd8:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be6:	0919      	lsrs	r1, r3, #4
 8003be8:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bea:	400b      	ands	r3, r1
 8003bec:	4947      	ldr	r1, [pc, #284]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	610b      	str	r3, [r1, #16]
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bf4:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4a44      	ldr	r2, [pc, #272]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bfe:	6113      	str	r3, [r2, #16]
 8003c00:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	493f      	ldr	r1, [pc, #252]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	670b      	str	r3, [r1, #112]	; 0x70
 8003c14:	e004      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	75bb      	strb	r3, [r7, #22]
 8003c1a:	e001      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8085 	beq.w	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c32:	2b28      	cmp	r3, #40	; 0x28
 8003c34:	d866      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003d19 	.word	0x08003d19
 8003c40:	08003d05 	.word	0x08003d05
 8003c44:	08003d05 	.word	0x08003d05
 8003c48:	08003d05 	.word	0x08003d05
 8003c4c:	08003d05 	.word	0x08003d05
 8003c50:	08003d05 	.word	0x08003d05
 8003c54:	08003d05 	.word	0x08003d05
 8003c58:	08003d05 	.word	0x08003d05
 8003c5c:	08003ce1 	.word	0x08003ce1
 8003c60:	08003d05 	.word	0x08003d05
 8003c64:	08003d05 	.word	0x08003d05
 8003c68:	08003d05 	.word	0x08003d05
 8003c6c:	08003d05 	.word	0x08003d05
 8003c70:	08003d05 	.word	0x08003d05
 8003c74:	08003d05 	.word	0x08003d05
 8003c78:	08003d05 	.word	0x08003d05
 8003c7c:	08003cf3 	.word	0x08003cf3
 8003c80:	08003d05 	.word	0x08003d05
 8003c84:	08003d05 	.word	0x08003d05
 8003c88:	08003d05 	.word	0x08003d05
 8003c8c:	08003d05 	.word	0x08003d05
 8003c90:	08003d05 	.word	0x08003d05
 8003c94:	08003d05 	.word	0x08003d05
 8003c98:	08003d05 	.word	0x08003d05
 8003c9c:	08003d19 	.word	0x08003d19
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003d05 	.word	0x08003d05
 8003ca8:	08003d05 	.word	0x08003d05
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d05 	.word	0x08003d05
 8003cbc:	08003d19 	.word	0x08003d19
 8003cc0:	08003d05 	.word	0x08003d05
 8003cc4:	08003d05 	.word	0x08003d05
 8003cc8:	08003d05 	.word	0x08003d05
 8003ccc:	08003d05 	.word	0x08003d05
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d19 	.word	0x08003d19
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fb3c 	bl	8004364 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cf0:	e013      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fbe5 	bl	80044c8 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d02:	e00a      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
      break;
 8003d08:	e007      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	58024800 	.word	0x58024800
 8003d14:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d20:	4b96      	ldr	r3, [pc, #600]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2c:	4993      	ldr	r1, [pc, #588]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	654b      	str	r3, [r1, #84]	; 0x54
 8003d32:	e001      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d038      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d821      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d97 	.word	0x08003d97
 8003d58:	08003d6d 	.word	0x08003d6d
 8003d5c:	08003d7f 	.word	0x08003d7f
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 faf6 	bl	8004364 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d7c:	e00c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3324      	adds	r3, #36	; 0x24
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fb9f 	bl	80044c8 <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	75fb      	strb	r3, [r7, #23]
      break;
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d9e:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	f023 0207 	bic.w	r2, r3, #7
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	4974      	ldr	r1, [pc, #464]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	654b      	str	r3, [r1, #84]	; 0x54
 8003db0:	e001      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d03a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d821      	bhi.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003ded 	.word	0x08003ded
 8003ddc:	08003dff 	.word	0x08003dff
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fab6 	bl	8004364 <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3324      	adds	r3, #36	; 0x24
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb5f 	bl	80044c8 <RCCEx_PLL3_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
      break;
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e1e:	4b57      	ldr	r3, [pc, #348]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	4953      	ldr	r1, [pc, #332]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	658b      	str	r3, [r1, #88]	; 0x58
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04b      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4e:	d02e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e54:	d828      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d02a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d822      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e66:	d026      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e6c:	d81c      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e72:	d010      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d816      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa6a 	bl	8004364 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e94:	e012      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fb13 	bl	80044c8 <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed0:	492a      	ldr	r1, [pc, #168]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d04d      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ef2:	d02e      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ef4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ef8:	d828      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d02a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d822      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f0a:	d026      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f10:	d81c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d010      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1c:	d816      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d111      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa18 	bl	8004364 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f38:	e012      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fac1 	bl	80044c8 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f4a:	e009      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f74:	4901      	ldr	r1, [pc, #4]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	658b      	str	r3, [r1, #88]	; 0x58
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d04b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fa0:	d828      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d02a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	d822      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fb2:	d026      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fb8:	d81c      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc4:	d816      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01d      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fce:	d111      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f9c4 	bl	8004364 <RCCEx_PLL2_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e012      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa6d 	bl	80044c8 <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff2:	e009      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800400e:	4b9d      	ldr	r3, [pc, #628]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800401c:	4999      	ldr	r1, [pc, #612]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800401e:	4313      	orrs	r3, r2
 8004020:	658b      	str	r3, [r1, #88]	; 0x58
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d10a      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3324      	adds	r3, #36	; 0x24
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fa3e 	bl	80044c8 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004056:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	4987      	ldr	r1, [pc, #540]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004066:	4313      	orrs	r3, r2
 8004068:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004080:	d10a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3324      	adds	r3, #36	; 0x24
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fa1d 	bl	80044c8 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004098:	4b7a      	ldr	r3, [pc, #488]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	4977      	ldr	r1, [pc, #476]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d034      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c2:	d01d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c8:	d817      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d009      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040d4:	e011      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f941 	bl	8004364 <RCCEx_PLL2_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040e6:	e00c      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3324      	adds	r3, #36	; 0x24
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f9ea 	bl	80044c8 <RCCEx_PLL3_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
      break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004108:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004116:	495b      	ldr	r1, [pc, #364]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	658b      	str	r3, [r1, #88]	; 0x58
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d033      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004134:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004138:	d01c      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800413a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800413e:	d816      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004144:	d003      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800414a:	d007      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414e:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4a4c      	ldr	r2, [pc, #304]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800415a:	e00c      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f9b0 	bl	80044c8 <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
      break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418a:	493e      	ldr	r1, [pc, #248]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	4313      	orrs	r3, r2
 800418e:	654b      	str	r3, [r1, #84]	; 0x54
 8004190:	e001      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d029      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d007      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041b0:	e00f      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f8cc 	bl	8004364 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041d0:	e002      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
      break;
 80041d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	4926      	ldr	r1, [pc, #152]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041f0:	e001      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f95d 	bl	80044c8 <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d033      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422c:	d017      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d811      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d013      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d80b      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004248:	d106      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004256:	e007      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e004      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427a:	4902      	ldr	r1, [pc, #8]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	654b      	str	r3, [r1, #84]	; 0x54
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	492e      	ldr	r1, [pc, #184]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042c4:	4926      	ldr	r1, [pc, #152]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e2:	491f      	ldr	r1, [pc, #124]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042fe:	6113      	str	r3, [r2, #16]
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800430a:	4915      	ldr	r1, [pc, #84]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da08      	bge.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004326:	4313      	orrs	r3, r2
 8004328:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	4906      	ldr	r1, [pc, #24]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004346:	4313      	orrs	r3, r2
 8004348:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800434a:	7dbb      	ldrb	r3, [r7, #22]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	58024400 	.word	0x58024400

08004364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004372:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d101      	bne.n	8004382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e099      	b.n	80044b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004382:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4e      	ldr	r2, [pc, #312]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800438c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438e:	f7fc fac7 	bl	8000920 <HAL_GetTick>
 8004392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004394:	e008      	b.n	80043a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004396:	f7fc fac3 	bl	8000920 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e086      	b.n	80044b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043b4:	4b42      	ldr	r3, [pc, #264]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	031b      	lsls	r3, r3, #12
 80043c2:	493f      	ldr	r1, [pc, #252]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	628b      	str	r3, [r1, #40]	; 0x28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	025b      	lsls	r3, r3, #9
 80043da:	b29b      	uxth	r3, r3
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043f8:	4931      	ldr	r1, [pc, #196]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043fe:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	492d      	ldr	r1, [pc, #180]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004410:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	f023 0220 	bic.w	r2, r3, #32
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4928      	ldr	r1, [pc, #160]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <RCCEx_PLL2_Config+0x160>)
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	69d2      	ldr	r2, [r2, #28]
 800443a:	00d2      	lsls	r2, r2, #3
 800443c:	4920      	ldr	r1, [pc, #128]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004442:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004448:	f043 0310 	orr.w	r3, r3, #16
 800444c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800445a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800445e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004460:	e00f      	b.n	8004482 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800446e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004474:	e005      	b.n	8004482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 800447c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800448c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fc fa47 	bl	8000920 <HAL_GetTick>
 8004492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004494:	e008      	b.n	80044a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004496:	f7fc fa43 	bl	8000920 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e006      	b.n	80044b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	58024400 	.word	0x58024400
 80044c4:	ffff0007 	.word	0xffff0007

080044c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d101      	bne.n	80044e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e099      	b.n	800461a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044e6:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80044ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f2:	f7fc fa15 	bl	8000920 <HAL_GetTick>
 80044f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044f8:	e008      	b.n	800450c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044fa:	f7fc fa11 	bl	8000920 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e086      	b.n	800461a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800450c:	4b45      	ldr	r3, [pc, #276]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	051b      	lsls	r3, r3, #20
 8004526:	493f      	ldr	r1, [pc, #252]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	628b      	str	r3, [r1, #40]	; 0x28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	3b01      	subs	r3, #1
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	3b01      	subs	r3, #1
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	b29b      	uxth	r3, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	3b01      	subs	r3, #1
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800455c:	4931      	ldr	r1, [pc, #196]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	492d      	ldr	r1, [pc, #180]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4928      	ldr	r1, [pc, #160]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 800458c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <RCCEx_PLL3_Config+0x160>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	69d2      	ldr	r2, [r2, #28]
 800459e:	00d2      	lsls	r2, r2, #3
 80045a0:	4920      	ldr	r1, [pc, #128]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045c4:	e00f      	b.n	80045e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d106      	bne.n	80045da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045d8:	e005      	b.n	80045e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a11      	ldr	r2, [pc, #68]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc f995 	bl	8000920 <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045fa:	f7fc f991 	bl	8000920 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <RCCEx_PLL3_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
 8004628:	ffff0007 	.word	0xffff0007

0800462c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	f107 001c 	add.w	r0, r7, #28
 800463a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d120      	bne.n	8004686 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <USB_CoreInit+0xd4>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fc04 	bl	8005e88 <USB_CoreReset>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e01a      	b.n	80046bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 fbf8 	bl	8005e88 <USB_CoreReset>
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
 80046ae:	e005      	b.n	80046bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d116      	bne.n	80046f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <USB_CoreInit+0xd8>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f043 0206 	orr.w	r2, r3, #6
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046fc:	b004      	add	sp, #16
 80046fe:	4770      	bx	lr
 8004700:	ffbdffbf 	.word	0xffbdffbf
 8004704:	03ee0000 	.word	0x03ee0000

08004708 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d165      	bne.n	80047e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a41      	ldr	r2, [pc, #260]	; (8004824 <USB_SetTurnaroundTime+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d906      	bls.n	8004732 <USB_SetTurnaroundTime+0x2a>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a40      	ldr	r2, [pc, #256]	; (8004828 <USB_SetTurnaroundTime+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d202      	bcs.n	8004732 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800472c:	230f      	movs	r3, #15
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e062      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a3c      	ldr	r2, [pc, #240]	; (8004828 <USB_SetTurnaroundTime+0x120>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d306      	bcc.n	8004748 <USB_SetTurnaroundTime+0x40>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a3b      	ldr	r2, [pc, #236]	; (800482c <USB_SetTurnaroundTime+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d202      	bcs.n	8004748 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004742:	230e      	movs	r3, #14
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e057      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <USB_SetTurnaroundTime+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d306      	bcc.n	800475e <USB_SetTurnaroundTime+0x56>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a37      	ldr	r2, [pc, #220]	; (8004830 <USB_SetTurnaroundTime+0x128>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d202      	bcs.n	800475e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004758:	230d      	movs	r3, #13
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e04c      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a33      	ldr	r2, [pc, #204]	; (8004830 <USB_SetTurnaroundTime+0x128>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d306      	bcc.n	8004774 <USB_SetTurnaroundTime+0x6c>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a32      	ldr	r2, [pc, #200]	; (8004834 <USB_SetTurnaroundTime+0x12c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d802      	bhi.n	8004774 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800476e:	230c      	movs	r3, #12
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e041      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <USB_SetTurnaroundTime+0x12c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d906      	bls.n	800478a <USB_SetTurnaroundTime+0x82>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a2e      	ldr	r2, [pc, #184]	; (8004838 <USB_SetTurnaroundTime+0x130>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d802      	bhi.n	800478a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004784:	230b      	movs	r3, #11
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e036      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <USB_SetTurnaroundTime+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d906      	bls.n	80047a0 <USB_SetTurnaroundTime+0x98>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a29      	ldr	r2, [pc, #164]	; (800483c <USB_SetTurnaroundTime+0x134>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d802      	bhi.n	80047a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800479a:	230a      	movs	r3, #10
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e02b      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a26      	ldr	r2, [pc, #152]	; (800483c <USB_SetTurnaroundTime+0x134>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d906      	bls.n	80047b6 <USB_SetTurnaroundTime+0xae>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a25      	ldr	r2, [pc, #148]	; (8004840 <USB_SetTurnaroundTime+0x138>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d202      	bcs.n	80047b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047b0:	2309      	movs	r3, #9
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e020      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a21      	ldr	r2, [pc, #132]	; (8004840 <USB_SetTurnaroundTime+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d306      	bcc.n	80047cc <USB_SetTurnaroundTime+0xc4>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a20      	ldr	r2, [pc, #128]	; (8004844 <USB_SetTurnaroundTime+0x13c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d802      	bhi.n	80047cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047c6:	2308      	movs	r3, #8
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e015      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <USB_SetTurnaroundTime+0x13c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d906      	bls.n	80047e2 <USB_SetTurnaroundTime+0xda>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <USB_SetTurnaroundTime+0x140>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d202      	bcs.n	80047e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047dc:	2307      	movs	r3, #7
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e00a      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047e2:	2306      	movs	r3, #6
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e007      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047ee:	2309      	movs	r3, #9
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e001      	b.n	80047f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047f4:	2309      	movs	r3, #9
 80047f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	029b      	lsls	r3, r3, #10
 800480c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	00d8acbf 	.word	0x00d8acbf
 8004828:	00e4e1c0 	.word	0x00e4e1c0
 800482c:	00f42400 	.word	0x00f42400
 8004830:	01067380 	.word	0x01067380
 8004834:	011a499f 	.word	0x011a499f
 8004838:	01312cff 	.word	0x01312cff
 800483c:	014ca43f 	.word	0x014ca43f
 8004840:	016e3600 	.word	0x016e3600
 8004844:	01a6ab1f 	.word	0x01a6ab1f
 8004848:	01e84800 	.word	0x01e84800

0800484c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d115      	bne.n	80048de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048be:	2001      	movs	r0, #1
 80048c0:	f7fc f83a 	bl	8000938 <HAL_Delay>
      ms++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f001 fa4b 	bl	8005d66 <USB_GetMode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d01e      	beq.n	8004914 <USB_SetCurrentMode+0x84>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b31      	cmp	r3, #49	; 0x31
 80048da:	d9f0      	bls.n	80048be <USB_SetCurrentMode+0x2e>
 80048dc:	e01a      	b.n	8004914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d115      	bne.n	8004910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f0:	2001      	movs	r0, #1
 80048f2:	f7fc f821 	bl	8000938 <HAL_Delay>
      ms++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 fa32 	bl	8005d66 <USB_GetMode>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <USB_SetCurrentMode+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b31      	cmp	r3, #49	; 0x31
 800490c:	d9f0      	bls.n	80048f0 <USB_SetCurrentMode+0x60>
 800490e:	e001      	b.n	8004914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e005      	b.n	8004920 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b32      	cmp	r3, #50	; 0x32
 8004918:	d101      	bne.n	800491e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004928:	b084      	sub	sp, #16
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e009      	b.n	800495c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3340      	adds	r3, #64	; 0x40
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	2200      	movs	r2, #0
 8004954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3301      	adds	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0e      	cmp	r3, #14
 8004960:	d9f2      	bls.n	8004948 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11c      	bne.n	80049a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e005      	b.n	80049ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	4619      	mov	r1, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	461a      	mov	r2, r3
 80049ca:	680b      	ldr	r3, [r1, #0]
 80049cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049da:	2100      	movs	r1, #0
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f965 	bl	8004cac <USB_SetDevSpeed>
 80049e2:	e008      	b.n	80049f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f960 	bl	8004cac <USB_SetDevSpeed>
 80049ec:	e003      	b.n	80049f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ee:	2103      	movs	r1, #3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f95b 	bl	8004cac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049f6:	2110      	movs	r1, #16
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8f3 	bl	8004be4 <USB_FlushTxFifo>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f91f 	bl	8004c4c <USB_FlushRxFifo>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e043      	b.n	8004aca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a58:	d118      	bne.n	8004a8c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e013      	b.n	8004a9e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e008      	b.n	8004a9e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3b7      	bcc.n	8004a42 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e043      	b.n	8004b60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aee:	d118      	bne.n	8004b22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e013      	b.n	8004b34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e008      	b.n	8004b34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	461a      	mov	r2, r3
 8004b42:	2300      	movs	r3, #0
 8004b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	461a      	mov	r2, r3
 8004b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3b7      	bcc.n	8004ad8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <USB_DevInit+0x2b4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f043 0208 	orr.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <USB_DevInit+0x2b8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr
 8004bdc:	803c3800 	.word	0x803c3800
 8004be0:	40000004 	.word	0x40000004

08004be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <USB_FlushTxFifo+0x64>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e01b      	b.n	8004c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	daf2      	bge.n	8004bf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	019b      	lsls	r3, r3, #6
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <USB_FlushTxFifo+0x64>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d0f0      	beq.n	8004c1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	00030d40 	.word	0x00030d40

08004c4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <USB_FlushRxFifo+0x5c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e018      	b.n	8004c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	daf2      	bge.n	8004c58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <USB_FlushRxFifo+0x5c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e006      	b.n	8004c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d0f0      	beq.n	8004c7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
 8004d02:	e00a      	b.n	8004d1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d002      	beq.n	8004d10 <USB_GetDevSpeed+0x32>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b06      	cmp	r3, #6
 8004d0e:	d102      	bne.n	8004d16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d10:	2302      	movs	r3, #2
 8004d12:	75fb      	strb	r3, [r7, #23]
 8004d14:	e001      	b.n	8004d1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d16:	230f      	movs	r3, #15
 8004d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d139      	bne.n	8004db8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	68f9      	ldr	r1, [r7, #12]
 8004d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d153      	bne.n	8004e24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	059b      	lsls	r3, r3, #22
 8004d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	0159      	lsls	r1, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	440b      	add	r3, r1
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	4619      	mov	r1, r3
 8004db0:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <USB_ActivateEndpoint+0x10c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
 8004db6:	e035      	b.n	8004e24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	2101      	movs	r1, #1
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	68f9      	ldr	r1, [r7, #12]
 8004dd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d119      	bne.n	8004e24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	791b      	ldrb	r3, [r3, #4]
 8004e0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	0159      	lsls	r1, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	440b      	add	r3, r1
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <USB_ActivateEndpoint+0x10c>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	10008000 	.word	0x10008000

08004e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d161      	bne.n	8004f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6a:	d11f      	bne.n	8004eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ecc:	4013      	ands	r3, r2
 8004ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	0159      	lsls	r1, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	440b      	add	r3, r1
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <USB_DeactivateEndpoint+0x1b0>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	600b      	str	r3, [r1, #0]
 8004f16:	e060      	b.n	8004fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2e:	d11f      	bne.n	8004f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f90:	4013      	ands	r3, r2
 8004f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	43db      	mvns	r3, r3
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	440b      	add	r3, r1
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <USB_DeactivateEndpoint+0x1b4>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	ec337800 	.word	0xec337800
 8004fec:	eff37800 	.word	0xeff37800

08004ff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 8163 	bne.w	80052d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d132      	bne.n	8005080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	0159      	lsls	r1, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	440b      	add	r3, r1
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	4619      	mov	r1, r3
 8005036:	4ba5      	ldr	r3, [pc, #660]	; (80052cc <USB_EPStartXfer+0x2dc>)
 8005038:	4013      	ands	r3, r2
 800503a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	0159      	lsls	r1, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	440b      	add	r3, r1
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	4619      	mov	r1, r3
 8005078:	4b95      	ldr	r3, [pc, #596]	; (80052d0 <USB_EPStartXfer+0x2e0>)
 800507a:	4013      	ands	r3, r2
 800507c:	610b      	str	r3, [r1, #16]
 800507e:	e074      	b.n	800516a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	0159      	lsls	r1, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	440b      	add	r3, r1
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	4619      	mov	r1, r3
 800509c:	4b8c      	ldr	r3, [pc, #560]	; (80052d0 <USB_EPStartXfer+0x2e0>)
 800509e:	4013      	ands	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	0159      	lsls	r1, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	440b      	add	r3, r1
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	4619      	mov	r1, r3
 80050be:	4b83      	ldr	r3, [pc, #524]	; (80052cc <USB_EPStartXfer+0x2dc>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	440b      	add	r3, r1
 80050dc:	1e59      	subs	r1, r3, #1
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050e8:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <USB_EPStartXfer+0x2e4>)
 80050ea:	400b      	ands	r3, r1
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	0148      	lsls	r0, r1, #5
 80050f0:	69f9      	ldr	r1, [r7, #28]
 80050f2:	4401      	add	r1, r0
 80050f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f8:	4313      	orrs	r3, r2
 80050fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	0148      	lsls	r0, r1, #5
 8005116:	69f9      	ldr	r1, [r7, #28]
 8005118:	4401      	add	r1, r0
 800511a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800511e:	4313      	orrs	r3, r2
 8005120:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	791b      	ldrb	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11f      	bne.n	800516a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005148:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005168:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d14b      	bne.n	8005208 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	791b      	ldrb	r3, [r3, #4]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d128      	bne.n	80051e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d110      	bne.n	80051c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e00f      	b.n	80051e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e137      	b.n	8005478 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005226:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	791b      	ldrb	r3, [r3, #4]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d015      	beq.n	800525c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 811f 	beq.w	8005478 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	2101      	movs	r1, #1
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	69f9      	ldr	r1, [r7, #28]
 8005252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005256:	4313      	orrs	r3, r2
 8005258:	634b      	str	r3, [r1, #52]	; 0x34
 800525a:	e10d      	b.n	8005478 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d110      	bne.n	800528e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	440a      	add	r2, r1
 8005282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e00f      	b.n	80052ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	b298      	uxth	r0, r3
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4603      	mov	r3, r0
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 faea 	bl	800589c <USB_WritePacket>
 80052c8:	e0d6      	b.n	8005478 <USB_EPStartXfer+0x488>
 80052ca:	bf00      	nop
 80052cc:	e007ffff 	.word	0xe007ffff
 80052d0:	fff80000 	.word	0xfff80000
 80052d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	0159      	lsls	r1, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	440b      	add	r3, r1
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	4619      	mov	r1, r3
 80052f4:	4b63      	ldr	r3, [pc, #396]	; (8005484 <USB_EPStartXfer+0x494>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	0159      	lsls	r1, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	440b      	add	r3, r1
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	4619      	mov	r1, r3
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <USB_EPStartXfer+0x498>)
 8005318:	4013      	ands	r3, r2
 800531a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d123      	bne.n	800536c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533a:	69b9      	ldr	r1, [r7, #24]
 800533c:	0148      	lsls	r0, r1, #5
 800533e:	69f9      	ldr	r1, [r7, #28]
 8005340:	4401      	add	r1, r0
 8005342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005368:	6113      	str	r3, [r2, #16]
 800536a:	e037      	b.n	80053dc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4413      	add	r3, r2
 8005376:	1e5a      	subs	r2, r3, #1
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	8afa      	ldrh	r2, [r7, #22]
 8005388:	fb03 f202 	mul.w	r2, r3, r2
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	8afb      	ldrh	r3, [r7, #22]
 80053a0:	04d9      	lsls	r1, r3, #19
 80053a2:	4b3a      	ldr	r3, [pc, #232]	; (800548c <USB_EPStartXfer+0x49c>)
 80053a4:	400b      	ands	r3, r1
 80053a6:	69b9      	ldr	r1, [r7, #24]
 80053a8:	0148      	lsls	r0, r1, #5
 80053aa:	69f9      	ldr	r1, [r7, #28]
 80053ac:	4401      	add	r1, r0
 80053ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	0148      	lsls	r0, r1, #5
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	4401      	add	r1, r0
 80053d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053d8:	4313      	orrs	r3, r2
 80053da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10d      	bne.n	80053fe <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6919      	ldr	r1, [r3, #16]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	460a      	mov	r2, r1
 80053fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d128      	bne.n	8005458 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d110      	bne.n	8005438 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e00f      	b.n	8005458 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	fff80000 	.word	0xfff80000
 8005488:	e007ffff 	.word	0xe007ffff
 800548c:	1ff80000 	.word	0x1ff80000

08005490 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 80ce 	bne.w	800564e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d132      	bne.n	8005520 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	0159      	lsls	r1, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	440b      	add	r3, r1
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	4619      	mov	r1, r3
 80054d6:	4b9a      	ldr	r3, [pc, #616]	; (8005740 <USB_EP0StartXfer+0x2b0>)
 80054d8:	4013      	ands	r3, r2
 80054da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	0159      	lsls	r1, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	440b      	add	r3, r1
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	4619      	mov	r1, r3
 8005518:	4b8a      	ldr	r3, [pc, #552]	; (8005744 <USB_EP0StartXfer+0x2b4>)
 800551a:	4013      	ands	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e04e      	b.n	80055be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	0159      	lsls	r1, r3, #5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	440b      	add	r3, r1
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	4619      	mov	r1, r3
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <USB_EP0StartXfer+0x2b4>)
 800553e:	4013      	ands	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	0159      	lsls	r1, r3, #5
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	440b      	add	r3, r1
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	4619      	mov	r1, r3
 800555e:	4b78      	ldr	r3, [pc, #480]	; (8005740 <USB_EP0StartXfer+0x2b0>)
 8005560:	4013      	ands	r3, r2
 8005562:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d903      	bls.n	8005578 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	6939      	ldr	r1, [r7, #16]
 80055b0:	0148      	lsls	r0, r1, #5
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	4401      	add	r1, r0
 80055b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d11e      	bne.n	8005602 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e097      	b.n	8005732 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005620:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8083 	beq.w	8005732 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005648:	4313      	orrs	r3, r2
 800564a:	634b      	str	r3, [r1, #52]	; 0x34
 800564c:	e071      	b.n	8005732 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	0159      	lsls	r1, r3, #5
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	440b      	add	r3, r1
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	4619      	mov	r1, r3
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <USB_EP0StartXfer+0x2b4>)
 800566c:	4013      	ands	r3, r2
 800566e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	0159      	lsls	r1, r3, #5
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	440b      	add	r3, r1
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	4619      	mov	r1, r3
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <USB_EP0StartXfer+0x2b0>)
 800568e:	4013      	ands	r3, r2
 8005690:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	0148      	lsls	r0, r1, #5
 80056e4:	6979      	ldr	r1, [r7, #20]
 80056e6:	4401      	add	r1, r0
 80056e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ec:	4313      	orrs	r3, r2
 80056ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10d      	bne.n	8005712 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6919      	ldr	r1, [r3, #16]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	460a      	mov	r2, r1
 8005710:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e007ffff 	.word	0xe007ffff
 8005744:	fff80000 	.word	0xfff80000

08005748 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d14a      	bne.n	80057fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577e:	f040 8086 	bne.w	800588e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d902      	bls.n	80057e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
          break;
 80057de:	e056      	b.n	800588e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f8:	d0e7      	beq.n	80057ca <USB_EPStopXfer+0x82>
 80057fa:	e048      	b.n	800588e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005814:	d13b      	bne.n	800588e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005838:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f242 7210 	movw	r2, #10000	; 0x2710
 800586a:	4293      	cmp	r3, r2
 800586c:	d902      	bls.n	8005874 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
          break;
 8005872:	e00c      	b.n	800588e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588c:	d0e7      	beq.n	800585e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800588e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005890:	4618      	mov	r0, r3
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	460b      	mov	r3, r1
 80058ac:	71fb      	strb	r3, [r7, #7]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d123      	bne.n	800590a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058c2:	88bb      	ldrh	r3, [r7, #4]
 80058c4:	3303      	adds	r3, #3
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e018      	b.n	8005902 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	031a      	lsls	r2, r3, #12
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058dc:	461a      	mov	r2, r3
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	3301      	adds	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	3301      	adds	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3301      	adds	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d3e2      	bcc.n	80058d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3724      	adds	r7, #36	; 0x24
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005918:	b480      	push	{r7}
 800591a:	b08b      	sub	sp, #44	; 0x2c
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	089b      	lsrs	r3, r3, #2
 8005932:	b29b      	uxth	r3, r3
 8005934:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800593e:	2300      	movs	r3, #0
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	e014      	b.n	800596e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	3301      	adds	r3, #1
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	3301      	adds	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	3301      	adds	r3, #1
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	3301      	adds	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	3301      	adds	r3, #1
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	429a      	cmp	r2, r3
 8005974:	d3e6      	bcc.n	8005944 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005976:	8bfb      	ldrh	r3, [r7, #30]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01e      	beq.n	80059ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	461a      	mov	r2, r3
 8005988:	f107 0310 	add.w	r3, r7, #16
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	b2da      	uxtb	r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	701a      	strb	r2, [r3, #0]
      i++;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	3301      	adds	r3, #1
 80059a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	3301      	adds	r3, #1
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059ae:	8bfb      	ldrh	r3, [r7, #30]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059b4:	8bfb      	ldrh	r3, [r7, #30]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1ea      	bne.n	8005990 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059bc:	4618      	mov	r0, r3
 80059be:	372c      	adds	r7, #44	; 0x2c
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d12c      	bne.n	8005a3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db12      	blt.n	8005a1c <USB_EPSetStall+0x54>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00f      	beq.n	8005a1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e02b      	b.n	8005a96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db12      	blt.n	8005a76 <USB_EPSetStall+0xae>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d128      	bne.n	8005b12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ade:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d003      	beq.n	8005af0 <USB_EPClearStall+0x4c>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d138      	bne.n	8005b62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e027      	b.n	8005b62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d003      	beq.n	8005b42 <USB_EPClearStall+0x9e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	791b      	ldrb	r3, [r3, #4]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d10f      	bne.n	8005b62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bea:	f023 0302 	bic.w	r3, r3, #2
 8005bee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c18:	f023 0303 	bic.w	r3, r3, #3
 8005c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c58:	68fb      	ldr	r3, [r7, #12]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	b29b      	uxth	r3, r3
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	01db      	lsls	r3, r3, #7
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4013      	ands	r3, r2
 8005d56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d58:	68bb      	ldr	r3, [r7, #8]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0301 	and.w	r3, r3, #1
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <USB_ActivateSetup+0x44>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	fffff800 	.word	0xfffff800

08005dcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	333c      	adds	r3, #60	; 0x3c
 8005de2:	3304      	adds	r3, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <USB_EP0_OutStart+0xb8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d90a      	bls.n	8005e06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d101      	bne.n	8005e06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e037      	b.n	8005e76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f043 0318 	orr.w	r3, r3, #24
 8005e38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10f      	bne.n	8005e74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	4f54300a 	.word	0x4f54300a

08005e88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <USB_CoreReset+0x64>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e01b      	b.n	8005ede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	daf2      	bge.n	8005e94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <USB_CoreReset+0x64>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d901      	bls.n	8005ed0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e006      	b.n	8005ede <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d0f0      	beq.n	8005ebe <USB_CoreReset+0x36>

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	00030d40 	.word	0x00030d40

08005ef0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005efc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f00:	f002 fdbc 	bl	8008a7c <USBD_static_malloc>
 8005f04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	32b0      	adds	r2, #176	; 0xb0
 8005f16:	2100      	movs	r1, #0
 8005f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0d4      	b.n	80060ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f24:	2100      	movs	r1, #0
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f002 fe24 	bl	8008b74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32b0      	adds	r2, #176	; 0xb0
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32b0      	adds	r2, #176	; 0xb0
 8005f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7c1b      	ldrb	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d138      	bne.n	8005fca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f58:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <USBD_CDC_Init+0x1e4>)
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f60:	2202      	movs	r2, #2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 fc67 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f68:	4b5a      	ldr	r3, [pc, #360]	; (80060d4 <USBD_CDC_Init+0x1e4>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3324      	adds	r3, #36	; 0x24
 8005f7e:	2201      	movs	r2, #1
 8005f80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f82:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f002 fc52 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f92:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 020f 	and.w	r2, r3, #15
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005faa:	2201      	movs	r2, #1
 8005fac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005fae:	4b4b      	ldr	r3, [pc, #300]	; (80060dc <USBD_CDC_Init+0x1ec>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3326      	adds	r3, #38	; 0x26
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e035      	b.n	8006036 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fca:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <USBD_CDC_Init+0x1e4>)
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f002 fc2f 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fd8:	4b3e      	ldr	r3, [pc, #248]	; (80060d4 <USBD_CDC_Init+0x1e4>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	2201      	movs	r2, #1
 8005ff0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ff2:	4b39      	ldr	r3, [pc, #228]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 8005ff4:	7819      	ldrb	r1, [r3, #0]
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fc1b 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006000:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006018:	2201      	movs	r2, #1
 800601a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <USBD_CDC_Init+0x1ec>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3326      	adds	r3, #38	; 0x26
 8006032:	2210      	movs	r2, #16
 8006034:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006036:	4b29      	ldr	r3, [pc, #164]	; (80060dc <USBD_CDC_Init+0x1ec>)
 8006038:	7819      	ldrb	r1, [r3, #0]
 800603a:	2308      	movs	r3, #8
 800603c:	2203      	movs	r2, #3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 fbf9 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006044:	4b25      	ldr	r3, [pc, #148]	; (80060dc <USBD_CDC_Init+0x1ec>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f003 020f 	and.w	r2, r3, #15
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	2201      	movs	r2, #1
 800605c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	33b0      	adds	r3, #176	; 0xb0
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006094:	2302      	movs	r3, #2
 8006096:	e018      	b.n	80060ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7c1b      	ldrb	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 80060a2:	7819      	ldrb	r1, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f002 fcb0 	bl	8008a14 <USBD_LL_PrepareReceive>
 80060b4:	e008      	b.n	80060c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <USBD_CDC_Init+0x1e8>)
 80060b8:	7819      	ldrb	r1, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f002 fca6 	bl	8008a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	24000097 	.word	0x24000097
 80060d8:	24000098 	.word	0x24000098
 80060dc:	24000099 	.word	0x24000099

080060e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060ec:	4b3a      	ldr	r3, [pc, #232]	; (80061d8 <USBD_CDC_DeInit+0xf8>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f002 fbc5 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060f8:	4b37      	ldr	r3, [pc, #220]	; (80061d8 <USBD_CDC_DeInit+0xf8>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 020f 	and.w	r2, r3, #15
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	3324      	adds	r3, #36	; 0x24
 800610e:	2200      	movs	r2, #0
 8006110:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006112:	4b32      	ldr	r3, [pc, #200]	; (80061dc <USBD_CDC_DeInit+0xfc>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f002 fbb2 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800611e:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <USBD_CDC_DeInit+0xfc>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006136:	2200      	movs	r2, #0
 8006138:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <USBD_CDC_DeInit+0x100>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f002 fb9e 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006146:	4b26      	ldr	r3, [pc, #152]	; (80061e0 <USBD_CDC_DeInit+0x100>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	f003 020f 	and.w	r2, r3, #15
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	3324      	adds	r3, #36	; 0x24
 800615c:	2200      	movs	r2, #0
 800615e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <USBD_CDC_DeInit+0x100>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	3326      	adds	r3, #38	; 0x26
 8006176:	2200      	movs	r2, #0
 8006178:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	32b0      	adds	r2, #176	; 0xb0
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01f      	beq.n	80061cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	33b0      	adds	r3, #176	; 0xb0
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32b0      	adds	r2, #176	; 0xb0
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f002 fc72 	bl	8008a98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	2100      	movs	r1, #0
 80061c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	24000097 	.word	0x24000097
 80061dc:	24000098 	.word	0x24000098
 80061e0:	24000099 	.word	0x24000099

080061e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	32b0      	adds	r2, #176	; 0xb0
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e0bf      	b.n	8006394 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800621c:	2b00      	cmp	r3, #0
 800621e:	d050      	beq.n	80062c2 <USBD_CDC_Setup+0xde>
 8006220:	2b20      	cmp	r3, #32
 8006222:	f040 80af 	bne.w	8006384 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	88db      	ldrh	r3, [r3, #6]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d03a      	beq.n	80062a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	da1b      	bge.n	8006270 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	33b0      	adds	r3, #176	; 0xb0
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800624e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	88d2      	ldrh	r2, [r2, #6]
 8006254:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b07      	cmp	r3, #7
 800625c:	bf28      	it	cs
 800625e:	2307      	movcs	r3, #7
 8006260:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	89fa      	ldrh	r2, [r7, #14]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fd89 	bl	8007d80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800626e:	e090      	b.n	8006392 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	785a      	ldrb	r2, [r3, #1]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	88db      	ldrh	r3, [r3, #6]
 800627e:	2b3f      	cmp	r3, #63	; 0x3f
 8006280:	d803      	bhi.n	800628a <USBD_CDC_Setup+0xa6>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	88db      	ldrh	r3, [r3, #6]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	e000      	b.n	800628c <USBD_CDC_Setup+0xa8>
 800628a:	2240      	movs	r2, #64	; 0x40
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006292:	6939      	ldr	r1, [r7, #16]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800629a:	461a      	mov	r2, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 fd9b 	bl	8007dd8 <USBD_CtlPrepareRx>
      break;
 80062a2:	e076      	b.n	8006392 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	33b0      	adds	r3, #176	; 0xb0
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	7850      	ldrb	r0, [r2, #1]
 80062ba:	2200      	movs	r2, #0
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	4798      	blx	r3
      break;
 80062c0:	e067      	b.n	8006392 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b0b      	cmp	r3, #11
 80062c8:	d851      	bhi.n	800636e <USBD_CDC_Setup+0x18a>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USBD_CDC_Setup+0xec>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006301 	.word	0x08006301
 80062d4:	0800637d 	.word	0x0800637d
 80062d8:	0800636f 	.word	0x0800636f
 80062dc:	0800636f 	.word	0x0800636f
 80062e0:	0800636f 	.word	0x0800636f
 80062e4:	0800636f 	.word	0x0800636f
 80062e8:	0800636f 	.word	0x0800636f
 80062ec:	0800636f 	.word	0x0800636f
 80062f0:	0800636f 	.word	0x0800636f
 80062f4:	0800636f 	.word	0x0800636f
 80062f8:	0800632b 	.word	0x0800632b
 80062fc:	08006355 	.word	0x08006355
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b03      	cmp	r3, #3
 800630a:	d107      	bne.n	800631c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800630c:	f107 030a 	add.w	r3, r7, #10
 8006310:	2202      	movs	r2, #2
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fd33 	bl	8007d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800631a:	e032      	b.n	8006382 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fcbd 	bl	8007c9e <USBD_CtlError>
            ret = USBD_FAIL;
 8006324:	2303      	movs	r3, #3
 8006326:	75fb      	strb	r3, [r7, #23]
          break;
 8006328:	e02b      	b.n	8006382 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d107      	bne.n	8006346 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006336:	f107 030d 	add.w	r3, r7, #13
 800633a:	2201      	movs	r2, #1
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fd1e 	bl	8007d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006344:	e01d      	b.n	8006382 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fca8 	bl	8007c9e <USBD_CtlError>
            ret = USBD_FAIL;
 800634e:	2303      	movs	r3, #3
 8006350:	75fb      	strb	r3, [r7, #23]
          break;
 8006352:	e016      	b.n	8006382 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d00f      	beq.n	8006380 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fc9b 	bl	8007c9e <USBD_CtlError>
            ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800636c:	e008      	b.n	8006380 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fc94 	bl	8007c9e <USBD_CtlError>
          ret = USBD_FAIL;
 8006376:	2303      	movs	r3, #3
 8006378:	75fb      	strb	r3, [r7, #23]
          break;
 800637a:	e002      	b.n	8006382 <USBD_CDC_Setup+0x19e>
          break;
 800637c:	bf00      	nop
 800637e:	e008      	b.n	8006392 <USBD_CDC_Setup+0x1ae>
          break;
 8006380:	bf00      	nop
      }
      break;
 8006382:	e006      	b.n	8006392 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fc89 	bl	8007c9e <USBD_CtlError>
      ret = USBD_FAIL;
 800638c:	2303      	movs	r3, #3
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	bf00      	nop
  }

  return (uint8_t)ret;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32b0      	adds	r2, #176	; 0xb0
 80063ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e065      	b.n	8006492 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	; 0xb0
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	3318      	adds	r3, #24
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02f      	beq.n	8006450 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 020f 	and.w	r2, r3, #15
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3318      	adds	r3, #24
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 010f 	and.w	r1, r3, #15
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	460b      	mov	r3, r1
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4403      	add	r3, r0
 8006418:	3348      	adds	r3, #72	; 0x48
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006426:	2b00      	cmp	r3, #0
 8006428:	d112      	bne.n	8006450 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	f003 020f 	and.w	r2, r3, #15
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	3318      	adds	r3, #24
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006442:	78f9      	ldrb	r1, [r7, #3]
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f002 fac2 	bl	80089d2 <USBD_LL_Transmit>
 800644e:	e01f      	b.n	8006490 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	33b0      	adds	r3, #176	; 0xb0
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d010      	beq.n	8006490 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	33b0      	adds	r3, #176	; 0xb0
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	32b0      	adds	r2, #176	; 0xb0
 80064b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	32b0      	adds	r2, #176	; 0xb0
 80064c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e01a      	b.n	8006502 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f002 fac0 	bl	8008a56 <USBD_LL_GetRxDataSize>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	33b0      	adds	r3, #176	; 0xb0
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064fc:	4611      	mov	r1, r2
 80064fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	32b0      	adds	r2, #176	; 0xb0
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	e025      	b.n	8006578 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	33b0      	adds	r3, #176	; 0xb0
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01a      	beq.n	8006576 <USBD_CDC_EP0_RxReady+0x6c>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006546:	2bff      	cmp	r3, #255	; 0xff
 8006548:	d015      	beq.n	8006576 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	33b0      	adds	r3, #176	; 0xb0
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006562:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800656a:	b292      	uxth	r2, r2
 800656c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	22ff      	movs	r2, #255	; 0xff
 8006572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006588:	2182      	movs	r1, #130	; 0x82
 800658a:	4818      	ldr	r0, [pc, #96]	; (80065ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800658c:	f000 fd4f 	bl	800702e <USBD_GetEpDesc>
 8006590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006592:	2101      	movs	r1, #1
 8006594:	4815      	ldr	r0, [pc, #84]	; (80065ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006596:	f000 fd4a 	bl	800702e <USBD_GetEpDesc>
 800659a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800659c:	2181      	movs	r1, #129	; 0x81
 800659e:	4813      	ldr	r0, [pc, #76]	; (80065ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065a0:	f000 fd45 	bl	800702e <USBD_GetEpDesc>
 80065a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2210      	movs	r2, #16
 80065b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c0:	711a      	strb	r2, [r3, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d4:	711a      	strb	r2, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2243      	movs	r2, #67	; 0x43
 80065de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065e0:	4b02      	ldr	r3, [pc, #8]	; (80065ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	24000054 	.word	0x24000054

080065f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065f8:	2182      	movs	r1, #130	; 0x82
 80065fa:	4818      	ldr	r0, [pc, #96]	; (800665c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065fc:	f000 fd17 	bl	800702e <USBD_GetEpDesc>
 8006600:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006602:	2101      	movs	r1, #1
 8006604:	4815      	ldr	r0, [pc, #84]	; (800665c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006606:	f000 fd12 	bl	800702e <USBD_GetEpDesc>
 800660a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800660c:	2181      	movs	r1, #129	; 0x81
 800660e:	4813      	ldr	r0, [pc, #76]	; (800665c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006610:	f000 fd0d 	bl	800702e <USBD_GetEpDesc>
 8006614:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2210      	movs	r2, #16
 8006620:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d006      	beq.n	8006636 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2200      	movs	r2, #0
 800662c:	711a      	strb	r2, [r3, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f042 0202 	orr.w	r2, r2, #2
 8006634:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	711a      	strb	r2, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f042 0202 	orr.w	r2, r2, #2
 8006648:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2243      	movs	r2, #67	; 0x43
 800664e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	24000054 	.word	0x24000054

08006660 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006668:	2182      	movs	r1, #130	; 0x82
 800666a:	4818      	ldr	r0, [pc, #96]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800666c:	f000 fcdf 	bl	800702e <USBD_GetEpDesc>
 8006670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006672:	2101      	movs	r1, #1
 8006674:	4815      	ldr	r0, [pc, #84]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006676:	f000 fcda 	bl	800702e <USBD_GetEpDesc>
 800667a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800667c:	2181      	movs	r1, #129	; 0x81
 800667e:	4813      	ldr	r0, [pc, #76]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006680:	f000 fcd5 	bl	800702e <USBD_GetEpDesc>
 8006684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2210      	movs	r2, #16
 8006690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2200      	movs	r2, #0
 800669c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a0:	711a      	strb	r2, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b4:	711a      	strb	r2, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2243      	movs	r2, #67	; 0x43
 80066be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	24000054 	.word	0x24000054

080066d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	220a      	movs	r2, #10
 80066dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066de:	4b03      	ldr	r3, [pc, #12]	; (80066ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	24000010 	.word	0x24000010

080066f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	e009      	b.n	8006718 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	33b0      	adds	r3, #176	; 0xb0
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	32b0      	adds	r2, #176	; 0xb0
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006746:	2303      	movs	r3, #3
 8006748:	e008      	b.n	800675c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	32b0      	adds	r2, #176	; 0xb0
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	e004      	b.n	8006796 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32b0      	adds	r2, #176	; 0xb0
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32b0      	adds	r2, #176	; 0xb0
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e025      	b.n	8006822 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11f      	bne.n	8006820 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <USBD_CDC_TransmitPacket+0x88>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4403      	add	r3, r0
 8006802:	3318      	adds	r3, #24
 8006804:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <USBD_CDC_TransmitPacket+0x88>)
 8006808:	7819      	ldrb	r1, [r3, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f002 f8db 	bl	80089d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	24000097 	.word	0x24000097

08006830 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32b0      	adds	r2, #176	; 0xb0
 8006842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006846:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32b0      	adds	r2, #176	; 0xb0
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	e018      	b.n	8006890 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7c1b      	ldrb	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <USBD_CDC_ReceivePacket+0x68>)
 8006868:	7819      	ldrb	r1, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f002 f8cd 	bl	8008a14 <USBD_LL_PrepareReceive>
 800687a:	e008      	b.n	800688e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <USBD_CDC_ReceivePacket+0x68>)
 800687e:	7819      	ldrb	r1, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f002 f8c3 	bl	8008a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	24000098 	.word	0x24000098

0800689c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e01f      	b.n	80068f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	79fa      	ldrb	r2, [r7, #7]
 80068e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f001 ff39 	bl	8008760 <USBD_LL_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	e025      	b.n	8006960 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	; 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00f      	beq.n	8006950 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	32ae      	adds	r2, #174	; 0xae
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f107 020e 	add.w	r2, r7, #14
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	4602      	mov	r2, r0
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 ff45 	bl	8008800 <USBD_LL_Start>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	4611      	mov	r1, r2
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	4611      	mov	r1, r2
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f908 	bl	8007c2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d01a      	beq.n	8006a74 <USBD_LL_SetupStage+0x72>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d822      	bhi.n	8006a88 <USBD_LL_SetupStage+0x86>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <USBD_LL_SetupStage+0x4a>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d00a      	beq.n	8006a60 <USBD_LL_SetupStage+0x5e>
 8006a4a:	e01d      	b.n	8006a88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb5f 	bl	8007118 <USBD_StdDevReq>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5e:	e020      	b.n	8006aa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbc7 	bl	80071fc <USBD_StdItfReq>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
      break;
 8006a72:	e016      	b.n	8006aa2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fc29 	bl	80072d4 <USBD_StdEPReq>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
      break;
 8006a86:	e00c      	b.n	8006aa2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 ff12 	bl	80088c0 <USBD_LL_StallEP>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa0:	bf00      	nop
  }

  return ret;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d16e      	bne.n	8006ba2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006aca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	f040 8098 	bne.w	8006c08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d913      	bls.n	8006b0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	1ad2      	subs	r2, r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bf28      	it	cs
 8006afe:	4613      	movcs	r3, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 f984 	bl	8007e12 <USBD_CtlContinueRx>
 8006b0a:	e07d      	b.n	8006c08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d014      	beq.n	8006b44 <USBD_LL_DataOutStage+0x98>
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d81d      	bhi.n	8006b5a <USBD_LL_DataOutStage+0xae>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <USBD_LL_DataOutStage+0x7c>
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d003      	beq.n	8006b2e <USBD_LL_DataOutStage+0x82>
 8006b26:	e018      	b.n	8006b5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b2c:	e018      	b.n	8006b60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fa5e 	bl	8006ffa <USBD_CoreFindIF>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75bb      	strb	r3, [r7, #22]
            break;
 8006b42:	e00d      	b.n	8006b60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fa60 	bl	8007014 <USBD_CoreFindEP>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75bb      	strb	r3, [r7, #22]
            break;
 8006b58:	e002      	b.n	8006b60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b60:	7dbb      	ldrb	r3, [r7, #22]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d119      	bne.n	8006b9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d113      	bne.n	8006b9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b72:	7dba      	ldrb	r2, [r7, #22]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	32ae      	adds	r2, #174	; 0xae
 8006b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b82:	7dba      	ldrb	r2, [r7, #22]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b8a:	7dba      	ldrb	r2, [r7, #22]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	32ae      	adds	r2, #174	; 0xae
 8006b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f001 f94a 	bl	8007e34 <USBD_CtlSendStatus>
 8006ba0:	e032      	b.n	8006c08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	4619      	mov	r1, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa31 	bl	8007014 <USBD_CoreFindEP>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bb6:	7dbb      	ldrb	r3, [r7, #22]
 8006bb8:	2bff      	cmp	r3, #255	; 0xff
 8006bba:	d025      	beq.n	8006c08 <USBD_LL_DataOutStage+0x15c>
 8006bbc:	7dbb      	ldrb	r3, [r7, #22]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d122      	bne.n	8006c08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d117      	bne.n	8006bfe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bce:	7dba      	ldrb	r2, [r7, #22]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	32ae      	adds	r2, #174	; 0xae
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bde:	7dba      	ldrb	r2, [r7, #22]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006be6:	7dba      	ldrb	r2, [r7, #22]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	32ae      	adds	r2, #174	; 0xae
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	7afa      	ldrb	r2, [r7, #11]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	4798      	blx	r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	e000      	b.n	8006c0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c20:	7afb      	ldrb	r3, [r7, #11]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d16f      	bne.n	8006d06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d15a      	bne.n	8006cec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d914      	bls.n	8006c6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f001 f8ac 	bl	8007db6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f001 fed5 	bl	8008a14 <USBD_LL_PrepareReceive>
 8006c6a:	e03f      	b.n	8006cec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d11c      	bne.n	8006cb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d316      	bcc.n	8006cb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d20f      	bcs.n	8006cb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f001 f88d 	bl	8007db6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f001 feb2 	bl	8008a14 <USBD_LL_PrepareReceive>
 8006cb0:	e01c      	b.n	8006cec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d10f      	bne.n	8006cde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f001 fded 	bl	80088c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f001 f8b7 	bl	8007e5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d03a      	beq.n	8006d6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff fe42 	bl	8006980 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d04:	e032      	b.n	8006d6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f97f 	bl	8007014 <USBD_CoreFindEP>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	2bff      	cmp	r3, #255	; 0xff
 8006d1e:	d025      	beq.n	8006d6c <USBD_LL_DataInStage+0x15a>
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d122      	bne.n	8006d6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d11c      	bne.n	8006d6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d32:	7dfa      	ldrb	r2, [r7, #23]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	32ae      	adds	r2, #174	; 0xae
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d014      	beq.n	8006d6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d42:	7dfa      	ldrb	r2, [r7, #23]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d4a:	7dfa      	ldrb	r2, [r7, #23]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	32ae      	adds	r2, #174	; 0xae
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	7afa      	ldrb	r2, [r7, #11]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	4798      	blx	r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d62:	7dbb      	ldrb	r3, [r7, #22]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d68:	7dbb      	ldrb	r3, [r7, #22]
 8006d6a:	e000      	b.n	8006d6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d014      	beq.n	8006ddc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00e      	beq.n	8006ddc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6852      	ldr	r2, [r2, #4]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	4611      	mov	r1, r2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ddc:	2340      	movs	r3, #64	; 0x40
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fd27 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2240      	movs	r2, #64	; 0x40
 8006df4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2180      	movs	r1, #128	; 0x80
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fd19 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2240      	movs	r2, #64	; 0x40
 8006e0e:	621a      	str	r2, [r3, #32]

  return ret;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d106      	bne.n	8006e88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d110      	bne.n	8006ecc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	32ae      	adds	r2, #174	; 0xae
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e01c      	b.n	8006f32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d115      	bne.n	8006f30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32ae      	adds	r2, #174	; 0xae
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32ae      	adds	r2, #174	; 0xae
 8006f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	32ae      	adds	r2, #174	; 0xae
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e01c      	b.n	8006f96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d115      	bne.n	8006f94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	32ae      	adds	r2, #174	; 0xae
 8006f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	32ae      	adds	r2, #174	; 0xae
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6852      	ldr	r2, [r2, #4]
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007006:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007020:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	429a      	cmp	r2, r3
 8007054:	d920      	bls.n	8007098 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800705e:	e013      	b.n	8007088 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007060:	f107 030a 	add.w	r3, r7, #10
 8007064:	4619      	mov	r1, r3
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f000 f81b 	bl	80070a2 <USBD_GetNextDesc>
 800706c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b05      	cmp	r3, #5
 8007074:	d108      	bne.n	8007088 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	789b      	ldrb	r3, [r3, #2]
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	429a      	cmp	r2, r3
 8007082:	d008      	beq.n	8007096 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	b29a      	uxth	r2, r3
 800708e:	897b      	ldrh	r3, [r7, #10]
 8007090:	429a      	cmp	r2, r3
 8007092:	d8e5      	bhi.n	8007060 <USBD_GetEpDesc+0x32>
 8007094:	e000      	b.n	8007098 <USBD_GetEpDesc+0x6a>
          break;
 8007096:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007098:	693b      	ldr	r3, [r7, #16]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070ce:	68fb      	ldr	r3, [r7, #12]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3301      	adds	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070fa:	8a3b      	ldrh	r3, [r7, #16]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	b21a      	sxth	r2, r3
 8007100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007104:	4313      	orrs	r3, r2
 8007106:	b21b      	sxth	r3, r3
 8007108:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800710a:	89fb      	ldrh	r3, [r7, #14]
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d005      	beq.n	800713e <USBD_StdDevReq+0x26>
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d857      	bhi.n	80071e6 <USBD_StdDevReq+0xce>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <USBD_StdDevReq+0x42>
 800713a:	2b20      	cmp	r3, #32
 800713c:	d153      	bne.n	80071e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	32ae      	adds	r2, #174	; 0xae
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
      break;
 8007158:	e04a      	b.n	80071f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b09      	cmp	r3, #9
 8007160:	d83b      	bhi.n	80071da <USBD_StdDevReq+0xc2>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <USBD_StdDevReq+0x50>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	080071bd 	.word	0x080071bd
 800716c:	080071d1 	.word	0x080071d1
 8007170:	080071db 	.word	0x080071db
 8007174:	080071c7 	.word	0x080071c7
 8007178:	080071db 	.word	0x080071db
 800717c:	0800719b 	.word	0x0800719b
 8007180:	08007191 	.word	0x08007191
 8007184:	080071db 	.word	0x080071db
 8007188:	080071b3 	.word	0x080071b3
 800718c:	080071a5 	.word	0x080071a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa3c 	bl	8007610 <USBD_GetDescriptor>
          break;
 8007198:	e024      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fba1 	bl	80078e4 <USBD_SetAddress>
          break;
 80071a2:	e01f      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fbe0 	bl	800796c <USBD_SetConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
          break;
 80071b0:	e018      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc83 	bl	8007ac0 <USBD_GetConfig>
          break;
 80071ba:	e013      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fcb4 	bl	8007b2c <USBD_GetStatus>
          break;
 80071c4:	e00e      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fce3 	bl	8007b94 <USBD_SetFeature>
          break;
 80071ce:	e009      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd07 	bl	8007be6 <USBD_ClrFeature>
          break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fd5e 	bl	8007c9e <USBD_CtlError>
          break;
 80071e2:	bf00      	nop
      }
      break;
 80071e4:	e004      	b.n	80071f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fd58 	bl	8007c9e <USBD_CtlError>
      break;
 80071ee:	bf00      	nop
  }

  return ret;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop

080071fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007212:	2b40      	cmp	r3, #64	; 0x40
 8007214:	d005      	beq.n	8007222 <USBD_StdItfReq+0x26>
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d852      	bhi.n	80072c0 <USBD_StdItfReq+0xc4>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <USBD_StdItfReq+0x26>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d14e      	bne.n	80072c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	2b02      	cmp	r3, #2
 800722e:	d840      	bhi.n	80072b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	889b      	ldrh	r3, [r3, #4]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d836      	bhi.n	80072a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	889b      	ldrh	r3, [r3, #4]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fed9 	bl	8006ffa <USBD_CoreFindIF>
 8007248:	4603      	mov	r3, r0
 800724a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2bff      	cmp	r3, #255	; 0xff
 8007250:	d01d      	beq.n	800728e <USBD_StdItfReq+0x92>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11a      	bne.n	800728e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007258:	7bba      	ldrb	r2, [r7, #14]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32ae      	adds	r2, #174	; 0xae
 800725e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00f      	beq.n	8007288 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007268:	7bba      	ldrb	r2, [r7, #14]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007270:	7bba      	ldrb	r2, [r7, #14]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32ae      	adds	r2, #174	; 0xae
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007286:	e004      	b.n	8007292 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800728c:	e001      	b.n	8007292 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d110      	bne.n	80072bc <USBD_StdItfReq+0xc0>
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fdc7 	bl	8007e34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072a6:	e009      	b.n	80072bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fcf7 	bl	8007c9e <USBD_CtlError>
          break;
 80072b0:	e004      	b.n	80072bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fcf2 	bl	8007c9e <USBD_CtlError>
          break;
 80072ba:	e000      	b.n	80072be <USBD_StdItfReq+0xc2>
          break;
 80072bc:	bf00      	nop
      }
      break;
 80072be:	e004      	b.n	80072ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fceb 	bl	8007c9e <USBD_CtlError>
      break;
 80072c8:	bf00      	nop
  }

  return ret;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d007      	beq.n	8007304 <USBD_StdEPReq+0x30>
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	f200 817f 	bhi.w	80075f8 <USBD_StdEPReq+0x324>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02a      	beq.n	8007354 <USBD_StdEPReq+0x80>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	f040 817a 	bne.w	80075f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff fe83 	bl	8007014 <USBD_CoreFindEP>
 800730e:	4603      	mov	r3, r0
 8007310:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007312:	7b7b      	ldrb	r3, [r7, #13]
 8007314:	2bff      	cmp	r3, #255	; 0xff
 8007316:	f000 8174 	beq.w	8007602 <USBD_StdEPReq+0x32e>
 800731a:	7b7b      	ldrb	r3, [r7, #13]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 8170 	bne.w	8007602 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007322:	7b7a      	ldrb	r2, [r7, #13]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800732a:	7b7a      	ldrb	r2, [r7, #13]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	32ae      	adds	r2, #174	; 0xae
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8163 	beq.w	8007602 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800733c:	7b7a      	ldrb	r2, [r7, #13]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32ae      	adds	r2, #174	; 0xae
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007352:	e156      	b.n	8007602 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d008      	beq.n	800736e <USBD_StdEPReq+0x9a>
 800735c:	2b03      	cmp	r3, #3
 800735e:	f300 8145 	bgt.w	80075ec <USBD_StdEPReq+0x318>
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 809b 	beq.w	800749e <USBD_StdEPReq+0x1ca>
 8007368:	2b01      	cmp	r3, #1
 800736a:	d03c      	beq.n	80073e6 <USBD_StdEPReq+0x112>
 800736c:	e13e      	b.n	80075ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d002      	beq.n	8007380 <USBD_StdEPReq+0xac>
 800737a:	2b03      	cmp	r3, #3
 800737c:	d016      	beq.n	80073ac <USBD_StdEPReq+0xd8>
 800737e:	e02c      	b.n	80073da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <USBD_StdEPReq+0xce>
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d00a      	beq.n	80073a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fa95 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007396:	2180      	movs	r1, #128	; 0x80
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fa91 	bl	80088c0 <USBD_LL_StallEP>
 800739e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a0:	e020      	b.n	80073e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc7a 	bl	8007c9e <USBD_CtlError>
              break;
 80073aa:	e01b      	b.n	80073e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10e      	bne.n	80073d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <USBD_StdEPReq+0xfe>
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b80      	cmp	r3, #128	; 0x80
 80073be:	d008      	beq.n	80073d2 <USBD_StdEPReq+0xfe>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	88db      	ldrh	r3, [r3, #6]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fa77 	bl	80088c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fd2e 	bl	8007e34 <USBD_CtlSendStatus>

              break;
 80073d8:	e004      	b.n	80073e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc5e 	bl	8007c9e <USBD_CtlError>
              break;
 80073e2:	bf00      	nop
          }
          break;
 80073e4:	e107      	b.n	80075f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d002      	beq.n	80073f8 <USBD_StdEPReq+0x124>
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d016      	beq.n	8007424 <USBD_StdEPReq+0x150>
 80073f6:	e04b      	b.n	8007490 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00d      	beq.n	800741a <USBD_StdEPReq+0x146>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d00a      	beq.n	800741a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fa59 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800740e:	2180      	movs	r1, #128	; 0x80
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fa55 	bl	80088c0 <USBD_LL_StallEP>
 8007416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007418:	e040      	b.n	800749c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc3e 	bl	8007c9e <USBD_CtlError>
              break;
 8007422:	e03b      	b.n	800749c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d136      	bne.n	800749a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fa5f 	bl	80088fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fcf7 	bl	8007e34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff fde2 	bl	8007014 <USBD_CoreFindEP>
 8007450:	4603      	mov	r3, r0
 8007452:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007454:	7b7b      	ldrb	r3, [r7, #13]
 8007456:	2bff      	cmp	r3, #255	; 0xff
 8007458:	d01f      	beq.n	800749a <USBD_StdEPReq+0x1c6>
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d11c      	bne.n	800749a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007460:	7b7a      	ldrb	r2, [r7, #13]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007468:	7b7a      	ldrb	r2, [r7, #13]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32ae      	adds	r2, #174	; 0xae
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d010      	beq.n	800749a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007478:	7b7a      	ldrb	r2, [r7, #13]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	32ae      	adds	r2, #174	; 0xae
 800747e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800748e:	e004      	b.n	800749a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc03 	bl	8007c9e <USBD_CtlError>
              break;
 8007498:	e000      	b.n	800749c <USBD_StdEPReq+0x1c8>
              break;
 800749a:	bf00      	nop
          }
          break;
 800749c:	e0ab      	b.n	80075f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d002      	beq.n	80074b0 <USBD_StdEPReq+0x1dc>
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d032      	beq.n	8007514 <USBD_StdEPReq+0x240>
 80074ae:	e097      	b.n	80075e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <USBD_StdEPReq+0x1f2>
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d004      	beq.n	80074c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fbed 	bl	8007c9e <USBD_CtlError>
                break;
 80074c4:	e091      	b.n	80075ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da0b      	bge.n	80074e6 <USBD_StdEPReq+0x212>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	3310      	adds	r3, #16
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	e00b      	b.n	80074fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	3304      	adds	r3, #4
 80074fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2202      	movs	r2, #2
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc37 	bl	8007d80 <USBD_CtlSendData>
              break;
 8007512:	e06a      	b.n	80075ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da11      	bge.n	8007540 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	f003 020f 	and.w	r2, r3, #15
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d117      	bne.n	8007566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fbb0 	bl	8007c9e <USBD_CtlError>
                  break;
 800753e:	e054      	b.n	80075ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb9d 	bl	8007c9e <USBD_CtlError>
                  break;
 8007564:	e041      	b.n	80075ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800756a:	2b00      	cmp	r3, #0
 800756c:	da0b      	bge.n	8007586 <USBD_StdEPReq+0x2b2>
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	3310      	adds	r3, #16
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	3304      	adds	r3, #4
 8007584:	e00b      	b.n	800759e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <USBD_StdEPReq+0x2d8>
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d103      	bne.n	80075b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e00e      	b.n	80075d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f9bf 	bl	800893c <USBD_LL_IsStallEP>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e002      	b.n	80075d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2202      	movs	r2, #2
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fbd1 	bl	8007d80 <USBD_CtlSendData>
              break;
 80075de:	e004      	b.n	80075ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb5b 	bl	8007c9e <USBD_CtlError>
              break;
 80075e8:	bf00      	nop
          }
          break;
 80075ea:	e004      	b.n	80075f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb55 	bl	8007c9e <USBD_CtlError>
          break;
 80075f4:	bf00      	nop
      }
      break;
 80075f6:	e005      	b.n	8007604 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fb4f 	bl	8007c9e <USBD_CtlError>
      break;
 8007600:	e000      	b.n	8007604 <USBD_StdEPReq+0x330>
      break;
 8007602:	bf00      	nop
  }

  return ret;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	2b06      	cmp	r3, #6
 8007632:	f200 8128 	bhi.w	8007886 <USBD_GetDescriptor+0x276>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <USBD_GetDescriptor+0x2c>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007659 	.word	0x08007659
 8007640:	08007671 	.word	0x08007671
 8007644:	080076b1 	.word	0x080076b1
 8007648:	08007887 	.word	0x08007887
 800764c:	08007887 	.word	0x08007887
 8007650:	08007827 	.word	0x08007827
 8007654:	08007853 	.word	0x08007853
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7c12      	ldrb	r2, [r2, #16]
 8007664:	f107 0108 	add.w	r1, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
      break;
 800766e:	e112      	b.n	8007896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7c1b      	ldrb	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10d      	bne.n	8007694 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f107 0208 	add.w	r2, r7, #8
 8007684:	4610      	mov	r0, r2
 8007686:	4798      	blx	r3
 8007688:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	2202      	movs	r2, #2
 8007690:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007692:	e100      	b.n	8007896 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f107 0208 	add.w	r2, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e0f2      	b.n	8007896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	f200 80ac 	bhi.w	8007814 <USBD_GetDescriptor+0x204>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <USBD_GetDescriptor+0xb4>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007745 	.word	0x08007745
 80076d0:	08007779 	.word	0x08007779
 80076d4:	080077ad 	.word	0x080077ad
 80076d8:	080077e1 	.word	0x080077e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7c12      	ldrb	r2, [r2, #16]
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fe:	e091      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 facb 	bl	8007c9e <USBD_CtlError>
            err++;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	3301      	adds	r3, #1
 800770c:	72fb      	strb	r3, [r7, #11]
          break;
 800770e:	e089      	b.n	8007824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007732:	e077      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fab1 	bl	8007c9e <USBD_CtlError>
            err++;
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	3301      	adds	r3, #1
 8007740:	72fb      	strb	r3, [r7, #11]
          break;
 8007742:	e06f      	b.n	8007824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007766:	e05d      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa97 	bl	8007c9e <USBD_CtlError>
            err++;
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	3301      	adds	r3, #1
 8007774:	72fb      	strb	r3, [r7, #11]
          break;
 8007776:	e055      	b.n	8007824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779a:	e043      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa7d 	bl	8007c9e <USBD_CtlError>
            err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
          break;
 80077aa:	e03b      	b.n	8007824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e029      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa63 	bl	8007c9e <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e021      	b.n	8007824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7c12      	ldrb	r2, [r2, #16]
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007802:	e00f      	b.n	8007824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa49 	bl	8007c9e <USBD_CtlError>
            err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
          break;
 8007812:	e007      	b.n	8007824 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa41 	bl	8007c9e <USBD_CtlError>
          err++;
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	3301      	adds	r3, #1
 8007820:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007822:	bf00      	nop
      }
      break;
 8007824:	e037      	b.n	8007896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7c1b      	ldrb	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d109      	bne.n	8007842 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	f107 0208 	add.w	r2, r7, #8
 800783a:	4610      	mov	r0, r2
 800783c:	4798      	blx	r3
 800783e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007840:	e029      	b.n	8007896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa2a 	bl	8007c9e <USBD_CtlError>
        err++;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	3301      	adds	r3, #1
 800784e:	72fb      	strb	r3, [r7, #11]
      break;
 8007850:	e021      	b.n	8007896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7c1b      	ldrb	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f107 0208 	add.w	r2, r7, #8
 8007866:	4610      	mov	r0, r2
 8007868:	4798      	blx	r3
 800786a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	2207      	movs	r2, #7
 8007872:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007874:	e00f      	b.n	8007896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa10 	bl	8007c9e <USBD_CtlError>
        err++;
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	3301      	adds	r3, #1
 8007882:	72fb      	strb	r3, [r7, #11]
      break;
 8007884:	e007      	b.n	8007896 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa08 	bl	8007c9e <USBD_CtlError>
      err++;
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	3301      	adds	r3, #1
 8007892:	72fb      	strb	r3, [r7, #11]
      break;
 8007894:	bf00      	nop
  }

  if (err != 0U)
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11e      	bne.n	80078da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	88db      	ldrh	r3, [r3, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d016      	beq.n	80078d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078a4:	893b      	ldrh	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88da      	ldrh	r2, [r3, #6]
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	bf28      	it	cs
 80078b4:	4613      	movcs	r3, r2
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078ba:	893b      	ldrh	r3, [r7, #8]
 80078bc:	461a      	mov	r2, r3
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa5d 	bl	8007d80 <USBD_CtlSendData>
 80078c6:	e009      	b.n	80078dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9e7 	bl	8007c9e <USBD_CtlError>
 80078d0:	e004      	b.n	80078dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 faae 	bl	8007e34 <USBD_CtlSendStatus>
 80078d8:	e000      	b.n	80078dc <USBD_GetDescriptor+0x2cc>
    return;
 80078da:	bf00      	nop
  }
}
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop

080078e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	889b      	ldrh	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d131      	bne.n	800795a <USBD_SetAddress+0x76>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	88db      	ldrh	r3, [r3, #6]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d12d      	bne.n	800795a <USBD_SetAddress+0x76>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	885b      	ldrh	r3, [r3, #2]
 8007902:	2b7f      	cmp	r3, #127	; 0x7f
 8007904:	d829      	bhi.n	800795a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007910:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d104      	bne.n	8007928 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f9bc 	bl	8007c9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007926:	e01d      	b.n	8007964 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7bfa      	ldrb	r2, [r7, #15]
 800792c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f82d 	bl	8008994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa7a 	bl	8007e34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794e:	e009      	b.n	8007964 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007958:	e004      	b.n	8007964 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f99e 	bl	8007c9e <USBD_CtlError>
  }
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	4b4e      	ldr	r3, [pc, #312]	; (8007abc <USBD_SetConfig+0x150>)
 8007982:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007984:	4b4d      	ldr	r3, [pc, #308]	; (8007abc <USBD_SetConfig+0x150>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d905      	bls.n	8007998 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f985 	bl	8007c9e <USBD_CtlError>
    return USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	e08c      	b.n	8007ab2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d002      	beq.n	80079aa <USBD_SetConfig+0x3e>
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d029      	beq.n	80079fc <USBD_SetConfig+0x90>
 80079a8:	e075      	b.n	8007a96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079aa:	4b44      	ldr	r3, [pc, #272]	; (8007abc <USBD_SetConfig+0x150>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d020      	beq.n	80079f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079b2:	4b42      	ldr	r3, [pc, #264]	; (8007abc <USBD_SetConfig+0x150>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079bc:	4b3f      	ldr	r3, [pc, #252]	; (8007abc <USBD_SetConfig+0x150>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fe ffe7 	bl	8006996 <USBD_SetClassConfig>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f962 	bl	8007c9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079e2:	e065      	b.n	8007ab0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fa25 	bl	8007e34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079f2:	e05d      	b.n	8007ab0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa1d 	bl	8007e34 <USBD_CtlSendStatus>
      break;
 80079fa:	e059      	b.n	8007ab0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079fc:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <USBD_SetConfig+0x150>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d112      	bne.n	8007a2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	; (8007abc <USBD_SetConfig+0x150>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <USBD_SetConfig+0x150>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fe ffd6 	bl	80069ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa06 	bl	8007e34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a28:	e042      	b.n	8007ab0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <USBD_SetConfig+0x150>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d02a      	beq.n	8007a8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fe ffc4 	bl	80069ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <USBD_SetConfig+0x150>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fe ff9d 	bl	8006996 <USBD_SetClassConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f918 	bl	8007c9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fe ffa9 	bl	80069ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a84:	e014      	b.n	8007ab0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9d4 	bl	8007e34 <USBD_CtlSendStatus>
      break;
 8007a8c:	e010      	b.n	8007ab0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9d0 	bl	8007e34 <USBD_CtlSendStatus>
      break;
 8007a94:	e00c      	b.n	8007ab0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f900 	bl	8007c9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <USBD_SetConfig+0x150>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fe ff92 	bl	80069ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	73fb      	strb	r3, [r7, #15]
      break;
 8007aae:	bf00      	nop
  }

  return ret;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	24000188 	.word	0x24000188

08007ac0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d004      	beq.n	8007adc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8e2 	bl	8007c9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ada:	e023      	b.n	8007b24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	dc02      	bgt.n	8007aee <USBD_GetConfig+0x2e>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	dc03      	bgt.n	8007af4 <USBD_GetConfig+0x34>
 8007aec:	e015      	b.n	8007b1a <USBD_GetConfig+0x5a>
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d00b      	beq.n	8007b0a <USBD_GetConfig+0x4a>
 8007af2:	e012      	b.n	8007b1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3308      	adds	r3, #8
 8007afe:	2201      	movs	r2, #1
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f93c 	bl	8007d80 <USBD_CtlSendData>
        break;
 8007b08:	e00c      	b.n	8007b24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f934 	bl	8007d80 <USBD_CtlSendData>
        break;
 8007b18:	e004      	b.n	8007b24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f8be 	bl	8007c9e <USBD_CtlError>
        break;
 8007b22:	bf00      	nop
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d81e      	bhi.n	8007b82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	88db      	ldrh	r3, [r3, #6]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d004      	beq.n	8007b56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8a5 	bl	8007c9e <USBD_CtlError>
        break;
 8007b54:	e01a      	b.n	8007b8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f043 0202 	orr.w	r2, r3, #2
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	330c      	adds	r3, #12
 8007b76:	2202      	movs	r2, #2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f900 	bl	8007d80 <USBD_CtlSendData>
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f88a 	bl	8007c9e <USBD_CtlError>
      break;
 8007b8a:	bf00      	nop
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d107      	bne.n	8007bb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f940 	bl	8007e34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bb4:	e013      	b.n	8007bde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d10b      	bne.n	8007bd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	889b      	ldrh	r3, [r3, #4]
 8007bc2:	0a1b      	lsrs	r3, r3, #8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f930 	bl	8007e34 <USBD_CtlSendStatus>
}
 8007bd4:	e003      	b.n	8007bde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f860 	bl	8007c9e <USBD_CtlError>
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d80b      	bhi.n	8007c16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d10c      	bne.n	8007c20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f910 	bl	8007e34 <USBD_CtlSendStatus>
      }
      break;
 8007c14:	e004      	b.n	8007c20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f840 	bl	8007c9e <USBD_CtlError>
      break;
 8007c1e:	e000      	b.n	8007c22 <USBD_ClrFeature+0x3c>
      break;
 8007c20:	bf00      	nop
  }
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	781a      	ldrb	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fa41 	bl	80070dc <SWAPBYTE>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff fa34 	bl	80070dc <SWAPBYTE>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fa27 	bl	80070dc <SWAPBYTE>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	461a      	mov	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	80da      	strh	r2, [r3, #6]
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fe08 	bl	80088c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fe04 	bl	80088c0 <USBD_LL_StallEP>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d036      	beq.n	8007d44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cda:	6938      	ldr	r0, [r7, #16]
 8007cdc:	f000 f836 	bl	8007d4c <USBD_GetLen>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7812      	ldrb	r2, [r2, #0]
 8007cf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4413      	add	r3, r2
 8007d06:	2203      	movs	r2, #3
 8007d08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d10:	e013      	b.n	8007d3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	4413      	add	r3, r2
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	3301      	adds	r3, #1
 8007d22:	613b      	str	r3, [r7, #16]
    idx++;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	3301      	adds	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	4413      	add	r3, r2
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	3301      	adds	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e7      	bne.n	8007d12 <USBD_GetString+0x52>
 8007d42:	e000      	b.n	8007d46 <USBD_GetString+0x86>
    return;
 8007d44:	bf00      	nop
  }
}
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d5c:	e005      	b.n	8007d6a <USBD_GetLen+0x1e>
  {
    len++;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	3301      	adds	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f5      	bne.n	8007d5e <USBD_GetLen+0x12>
  }

  return len;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	2100      	movs	r1, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fe13 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fe02 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2203      	movs	r2, #3
 8007de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fe06 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	2100      	movs	r1, #0
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fdf5 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fdc1 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2205      	movs	r2, #5
 8007e66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fdcf 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e84:	2200      	movs	r2, #0
 8007e86:	4913      	ldr	r1, [pc, #76]	; (8007ed4 <MX_USB_DEVICE_Init+0x54>)
 8007e88:	4813      	ldr	r0, [pc, #76]	; (8007ed8 <MX_USB_DEVICE_Init+0x58>)
 8007e8a:	f7fe fd07 	bl	800689c <USBD_Init>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e94:	f7f8 fb66 	bl	8000564 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e98:	4910      	ldr	r1, [pc, #64]	; (8007edc <MX_USB_DEVICE_Init+0x5c>)
 8007e9a:	480f      	ldr	r0, [pc, #60]	; (8007ed8 <MX_USB_DEVICE_Init+0x58>)
 8007e9c:	f7fe fd2e 	bl	80068fc <USBD_RegisterClass>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ea6:	f7f8 fb5d 	bl	8000564 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007eaa:	490d      	ldr	r1, [pc, #52]	; (8007ee0 <MX_USB_DEVICE_Init+0x60>)
 8007eac:	480a      	ldr	r0, [pc, #40]	; (8007ed8 <MX_USB_DEVICE_Init+0x58>)
 8007eae:	f7fe fc1f 	bl	80066f0 <USBD_CDC_RegisterInterface>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007eb8:	f7f8 fb54 	bl	8000564 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ebc:	4806      	ldr	r0, [pc, #24]	; (8007ed8 <MX_USB_DEVICE_Init+0x58>)
 8007ebe:	f7fe fd53 	bl	8006968 <USBD_Start>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ec8:	f7f8 fb4c 	bl	8000564 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007ecc:	f7fa fb66 	bl	800259c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ed0:	bf00      	nop
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	240000b0 	.word	0x240000b0
 8007ed8:	2400018c 	.word	0x2400018c
 8007edc:	2400001c 	.word	0x2400001c
 8007ee0:	2400009c 	.word	0x2400009c

08007ee4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4905      	ldr	r1, [pc, #20]	; (8007f00 <CDC_Init_FS+0x1c>)
 8007eec:	4805      	ldr	r0, [pc, #20]	; (8007f04 <CDC_Init_FS+0x20>)
 8007eee:	f7fe fc19 	bl	8006724 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ef2:	4905      	ldr	r1, [pc, #20]	; (8007f08 <CDC_Init_FS+0x24>)
 8007ef4:	4803      	ldr	r0, [pc, #12]	; (8007f04 <CDC_Init_FS+0x20>)
 8007ef6:	f7fe fc37 	bl	8006768 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007efa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	240017f0 	.word	0x240017f0
 8007f04:	2400018c 	.word	0x2400018c
 8007f08:	24000468 	.word	0x24000468

08007f0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b23      	cmp	r3, #35	; 0x23
 8007f30:	d84a      	bhi.n	8007fc8 <CDC_Control_FS+0xac>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <CDC_Control_FS+0x1c>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007fc9 	.word	0x08007fc9
 8007f3c:	08007fc9 	.word	0x08007fc9
 8007f40:	08007fc9 	.word	0x08007fc9
 8007f44:	08007fc9 	.word	0x08007fc9
 8007f48:	08007fc9 	.word	0x08007fc9
 8007f4c:	08007fc9 	.word	0x08007fc9
 8007f50:	08007fc9 	.word	0x08007fc9
 8007f54:	08007fc9 	.word	0x08007fc9
 8007f58:	08007fc9 	.word	0x08007fc9
 8007f5c:	08007fc9 	.word	0x08007fc9
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	08007fc9 	.word	0x08007fc9
 8007f68:	08007fc9 	.word	0x08007fc9
 8007f6c:	08007fc9 	.word	0x08007fc9
 8007f70:	08007fc9 	.word	0x08007fc9
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007fc9 	.word	0x08007fc9
 8007f7c:	08007fc9 	.word	0x08007fc9
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08007fc9 	.word	0x08007fc9
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	08007fc9 	.word	0x08007fc9
 8007f90:	08007fc9 	.word	0x08007fc9
 8007f94:	08007fc9 	.word	0x08007fc9
 8007f98:	08007fc9 	.word	0x08007fc9
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fc9 	.word	0x08007fc9
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fc9 	.word	0x08007fc9
 8007fbc:	08007fc9 	.word	0x08007fc9
 8007fc0:	08007fc9 	.word	0x08007fc9
 8007fc4:	08007fc9 	.word	0x08007fc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fc8:	bf00      	nop
  }

  return (USBD_OK);
 8007fca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    static uint8_t rx_status = 0;
    uint8_t *buf_p = (Buf + *Len);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
    uint32_t buf_len = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
    if ((Buf - UserRxBufferFS) >= (APP_RX_DATA_SIZE - USB_ONCE_RX_MAX_LEN))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <CDC_Receive_FS+0x98>)
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	f241 3247 	movw	r2, #4935	; 0x1347
 8007ffe:	4293      	cmp	r3, r2
 8008000:	dd01      	ble.n	8008006 <CDC_Receive_FS+0x2e>
    {
        buf_p = &UserRxBufferFS[0];
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <CDC_Receive_FS+0x98>)
 8008004:	617b      	str	r3, [r7, #20]
    }

    if(!rx_status)
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <CDC_Receive_FS+0x9c>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <CDC_Receive_FS+0x46>
    {
        ptr = find_head(Buf, *Len);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f88b 	bl	8008130 <find_head>
 800801a:	6138      	str	r0, [r7, #16]
 800801c:	e006      	b.n	800802c <CDC_Receive_FS+0x54>
    }
    else
    {
        buf_len = find_tail(Buf, *Len);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8d9 	bl	80081dc <find_tail>
 800802a:	60f8      	str	r0, [r7, #12]
    }

    if (ptr != NULL)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <CDC_Receive_FS+0x64>
    {
        buf_p = ptr;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	617b      	str	r3, [r7, #20]
        rx_status = 1;
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <CDC_Receive_FS+0x9c>)
 8008038:	2201      	movs	r2, #1
 800803a:	701a      	strb	r2, [r3, #0]
    }
    if(buf_len != 0)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <CDC_Receive_FS+0x80>
    {
        usb_debug("%d", buf_len);
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	480c      	ldr	r0, [pc, #48]	; (8008078 <CDC_Receive_FS+0xa0>)
 8008046:	f000 f853 	bl	80080f0 <usb_debug>
        buf_len = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
        buf_p = &UserRxBufferFS[0];
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <CDC_Receive_FS+0x98>)
 8008050:	617b      	str	r3, [r7, #20]
        rx_status = 0;
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <CDC_Receive_FS+0x9c>)
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
    }
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, buf_p);
 8008058:	6979      	ldr	r1, [r7, #20]
 800805a:	4808      	ldr	r0, [pc, #32]	; (800807c <CDC_Receive_FS+0xa4>)
 800805c:	f7fe fb84 	bl	8006768 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008060:	4806      	ldr	r0, [pc, #24]	; (800807c <CDC_Receive_FS+0xa4>)
 8008062:	f7fe fbe5 	bl	8006830 <USBD_CDC_ReceivePacket>

    return (USBD_OK);
 8008066:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	24000468 	.word	0x24000468
 8008074:	24001ff0 	.word	0x24001ff0
 8008078:	08009490 	.word	0x08009490
 800807c:	2400018c 	.word	0x2400018c

08008080 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008090:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <CDC_Transmit_FS+0x48>)
 8008092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008096:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e00b      	b.n	80080be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080a6:	887b      	ldrh	r3, [r7, #2]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4806      	ldr	r0, [pc, #24]	; (80080c8 <CDC_Transmit_FS+0x48>)
 80080ae:	f7fe fb39 	bl	8006724 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080b2:	4805      	ldr	r0, [pc, #20]	; (80080c8 <CDC_Transmit_FS+0x48>)
 80080b4:	f7fe fb76 	bl	80067a4 <USBD_CDC_TransmitPacket>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	2400018c 	.word	0x2400018c

080080cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <usb_debug>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t usb_debug(const char *format, ...)
{
 80080f0:	b40f      	push	{r0, r1, r2, r3}
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    va_start(args, format);
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008106:	4809      	ldr	r0, [pc, #36]	; (800812c <usb_debug+0x3c>)
 8008108:	f000 fd68 	bl	8008bdc <vsniprintf>
 800810c:	4603      	mov	r3, r0
 800810e:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	b29b      	uxth	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <usb_debug+0x3c>)
 8008118:	f7ff ffb2 	bl	8008080 <CDC_Transmit_FS>

    return 0;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008128:	b004      	add	sp, #16
 800812a:	4770      	bx	lr
 800812c:	240017f0 	.word	0x240017f0

08008130 <find_head>:

uint8_t *find_head(uint8_t *Buf, uint32_t len)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
    uint8_t *next_ptr = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
    if (Buf > UserRxBufferFS)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a22      	ldr	r2, [pc, #136]	; (80081d8 <find_head+0xa8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d937      	bls.n	80081c2 <find_head+0x92>
    {
        if (*(Buf - 1) == head_1)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3b01      	subs	r3, #1
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b5a      	cmp	r3, #90	; 0x5a
 800815a:	d132      	bne.n	80081c2 <find_head+0x92>
        {
            status = 1;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 8008160:	e02f      	b.n	80081c2 <find_head+0x92>
    {
        now_buf = *(Buf + num);
 8008162:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d11b      	bne.n	80081ac <find_head+0x7c>
        {
            if (now_buf == head_2)
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	2b52      	cmp	r3, #82	; 0x52
 8008178:	d116      	bne.n	80081a8 <find_head+0x78>
            {
                status = 2;
 800817a:	2302      	movs	r3, #2
 800817c:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 800817e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008182:	3b01      	subs	r3, #1
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
                memcpy(UserRxBufferFS, head_ptr, (Buf + len - head_ptr));
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	441a      	add	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	461a      	mov	r2, r3
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	480f      	ldr	r0, [pc, #60]	; (80081d8 <find_head+0xa8>)
 800819a:	f000 fcdd 	bl	8008b58 <memcpy>
                next_ptr = Buf + len;
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	4413      	add	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
                break;
 80081a6:	e011      	b.n	80081cc <find_head+0x9c>
            }
            status = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == head_1)
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	2b5a      	cmp	r3, #90	; 0x5a
 80081b0:	d101      	bne.n	80081b6 <find_head+0x86>
        {
            status = 1;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 80081b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	3301      	adds	r3, #1
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	75bb      	strb	r3, [r7, #22]
 80081c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d8ca      	bhi.n	8008162 <find_head+0x32>
        }
    }

    return next_ptr;
 80081cc:	693b      	ldr	r3, [r7, #16]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	24000468 	.word	0x24000468

080081dc <find_tail>:

uint32_t find_tail(uint8_t *Buf, uint32_t len)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
    uint32_t buf_len = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]

    if (Buf > UserRxBufferFS)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <find_tail+0x98>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d92d      	bls.n	800825a <find_tail+0x7e>
    {
        if (*(Buf - 1) == tail_1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3b01      	subs	r3, #1
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2bff      	cmp	r3, #255	; 0xff
 8008206:	d128      	bne.n	800825a <find_tail+0x7e>
        {
            status = 1;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 800820c:	e025      	b.n	800825a <find_tail+0x7e>
    {
        now_buf = *(Buf + num);
 800820e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d111      	bne.n	8008244 <find_tail+0x68>
        {
            if (now_buf == tail_2)
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <find_tail+0x64>
            {
                status = 2;
 8008226:	2302      	movs	r3, #2
 8008228:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 800822a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800822e:	3b01      	subs	r3, #1
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
                buf_len = head_ptr - UserRxBufferFS;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a0e      	ldr	r2, [pc, #56]	; (8008274 <find_tail+0x98>)
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	613b      	str	r3, [r7, #16]
                break;
 800823e:	e011      	b.n	8008264 <find_tail+0x88>
            }
            status = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == tail_1)
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	2bff      	cmp	r3, #255	; 0xff
 8008248:	d101      	bne.n	800824e <find_tail+0x72>
        {
            status = 1;
 800824a:	2301      	movs	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 800824e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	3301      	adds	r3, #1
 8008256:	b2db      	uxtb	r3, r3
 8008258:	75bb      	strb	r3, [r7, #22]
 800825a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d8d4      	bhi.n	800820e <find_tail+0x32>
        }
    }

    return buf_len;
 8008264:	693b      	ldr	r3, [r7, #16]
}
 8008266:	4618      	mov	r0, r3
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	24000468 	.word	0x24000468

08008278 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2212      	movs	r2, #18
 8008288:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800828a:	4b03      	ldr	r3, [pc, #12]	; (8008298 <USBD_FS_DeviceDescriptor+0x20>)
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	240000cc 	.word	0x240000cc

0800829c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2204      	movs	r2, #4
 80082ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ae:	4b03      	ldr	r3, [pc, #12]	; (80082bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	240000e0 	.word	0x240000e0

080082c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4907      	ldr	r1, [pc, #28]	; (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082d6:	4808      	ldr	r0, [pc, #32]	; (80082f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d8:	f7ff fcf2 	bl	8007cc0 <USBD_GetString>
 80082dc:	e004      	b.n	80082e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4904      	ldr	r1, [pc, #16]	; (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082e2:	4805      	ldr	r0, [pc, #20]	; (80082f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082e4:	f7ff fcec 	bl	8007cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	24001ff4 	.word	0x24001ff4
 80082f8:	08009494 	.word	0x08009494

080082fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	4904      	ldr	r1, [pc, #16]	; (800831c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800830c:	4804      	ldr	r0, [pc, #16]	; (8008320 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800830e:	f7ff fcd7 	bl	8007cc0 <USBD_GetString>
  return USBD_StrDesc;
 8008312:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	24001ff4 	.word	0x24001ff4
 8008320:	080094ac 	.word	0x080094ac

08008324 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	221a      	movs	r2, #26
 8008334:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008336:	f000 f843 	bl	80083c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800833a:	4b02      	ldr	r3, [pc, #8]	; (8008344 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	240000e4 	.word	0x240000e4

08008348 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4907      	ldr	r1, [pc, #28]	; (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
 800835e:	4808      	ldr	r0, [pc, #32]	; (8008380 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008360:	f7ff fcae 	bl	8007cc0 <USBD_GetString>
 8008364:	e004      	b.n	8008370 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4904      	ldr	r1, [pc, #16]	; (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <USBD_FS_ConfigStrDescriptor+0x38>)
 800836c:	f7ff fca8 	bl	8007cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	24001ff4 	.word	0x24001ff4
 8008380:	080094c0 	.word	0x080094c0

08008384 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d105      	bne.n	80083a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4907      	ldr	r1, [pc, #28]	; (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800839a:	4808      	ldr	r0, [pc, #32]	; (80083bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800839c:	f7ff fc90 	bl	8007cc0 <USBD_GetString>
 80083a0:	e004      	b.n	80083ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	4904      	ldr	r1, [pc, #16]	; (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083a6:	4805      	ldr	r0, [pc, #20]	; (80083bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a8:	f7ff fc8a 	bl	8007cc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	24001ff4 	.word	0x24001ff4
 80083bc:	080094cc 	.word	0x080094cc

080083c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <Get_SerialNum+0x44>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083cc:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <Get_SerialNum+0x48>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083d2:	4b0e      	ldr	r3, [pc, #56]	; (800840c <Get_SerialNum+0x4c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083e6:	2208      	movs	r2, #8
 80083e8:	4909      	ldr	r1, [pc, #36]	; (8008410 <Get_SerialNum+0x50>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f814 	bl	8008418 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083f0:	2204      	movs	r2, #4
 80083f2:	4908      	ldr	r1, [pc, #32]	; (8008414 <Get_SerialNum+0x54>)
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f000 f80f 	bl	8008418 <IntToUnicode>
  }
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	1ff1e800 	.word	0x1ff1e800
 8008408:	1ff1e804 	.word	0x1ff1e804
 800840c:	1ff1e808 	.word	0x1ff1e808
 8008410:	240000e6 	.word	0x240000e6
 8008414:	240000f6 	.word	0x240000f6

08008418 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
 800842e:	e027      	b.n	8008480 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	0f1b      	lsrs	r3, r3, #28
 8008434:	2b09      	cmp	r3, #9
 8008436:	d80b      	bhi.n	8008450 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0f1b      	lsrs	r3, r3, #28
 800843c:	b2da      	uxtb	r2, r3
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	4619      	mov	r1, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	440b      	add	r3, r1
 8008448:	3230      	adds	r2, #48	; 0x30
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e00a      	b.n	8008466 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	0f1b      	lsrs	r3, r3, #28
 8008454:	b2da      	uxtb	r2, r3
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4619      	mov	r1, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	440b      	add	r3, r1
 8008460:	3237      	adds	r2, #55	; 0x37
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	3301      	adds	r3, #1
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4413      	add	r3, r2
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
 8008480:	7dfa      	ldrb	r2, [r7, #23]
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d3d3      	bcc.n	8008430 <IntToUnicode+0x18>
  }
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b0b8      	sub	sp, #224	; 0xe0
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084b0:	f107 0310 	add.w	r3, r7, #16
 80084b4:	22bc      	movs	r2, #188	; 0xbc
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fb5b 	bl	8008b74 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2b      	ldr	r2, [pc, #172]	; (8008570 <HAL_PCD_MspInit+0xd8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d14e      	bne.n	8008566 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80084c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80084ce:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80084d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fa fffc 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80084e6:	f7f8 f83d 	bl	8000564 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80084ea:	f7fa f857 	bl	800259c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084ee:	4b21      	ldr	r3, [pc, #132]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 80084f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084f4:	4a1f      	ldr	r2, [pc, #124]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084fe:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 8008500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800850c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008514:	2302      	movs	r3, #2
 8008516:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008520:	2303      	movs	r3, #3
 8008522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008526:	230a      	movs	r3, #10
 8008528:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008530:	4619      	mov	r1, r3
 8008532:	4811      	ldr	r0, [pc, #68]	; (8008578 <HAL_PCD_MspInit+0xe0>)
 8008534:	f7f8 fb40 	bl	8000bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 800853a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800853e:	4a0d      	ldr	r2, [pc, #52]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 8008540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008544:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <HAL_PCD_MspInit+0xdc>)
 800854a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800854e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008552:	60bb      	str	r3, [r7, #8]
 8008554:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008556:	2200      	movs	r2, #0
 8008558:	2100      	movs	r1, #0
 800855a:	2065      	movs	r0, #101	; 0x65
 800855c:	f7f8 faf7 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008560:	2065      	movs	r0, #101	; 0x65
 8008562:	f7f8 fb0e 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008566:	bf00      	nop
 8008568:	37e0      	adds	r7, #224	; 0xe0
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40080000 	.word	0x40080000
 8008574:	58024400 	.word	0x58024400
 8008578:	58020000 	.word	0x58020000

0800857c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fa35 	bl	8006a02 <USBD_LL_SetupStage>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f7fe fa6f 	bl	8006aac <USBD_LL_DataOutStage>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	334c      	adds	r3, #76	; 0x4c
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fb08 	bl	8006c12 <USBD_LL_DataInStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fc3c 	bl	8006e96 <USBD_LL_SOF>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
 800863e:	e008      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d102      	bne.n	800864e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	e001      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800864e:	f7f7 ff89 	bl	8000564 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008658:	7bfa      	ldrb	r2, [r7, #15]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fbdc 	bl	8006e1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fb84 	bl	8006d76 <USBD_LL_Reset>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fbd7 	bl	8006e3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086b2:	f043 0306 	orr.w	r3, r3, #6
 80086b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fbc7 	bl	8006e66 <USBD_LL_Resume>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fc1f 	bl	8006f3a <USBD_LL_IsoOUTIncomplete>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fbdb 	bl	8006ed6 <USBD_LL_IsoINIncomplete>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fc31 	bl	8006f9e <USBD_LL_DevConnected>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fc2e 	bl	8006fb4 <USBD_LL_DevDisconnected>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d13e      	bne.n	80087ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008770:	4a21      	ldr	r2, [pc, #132]	; (80087f8 <USBD_LL_Init+0x98>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <USBD_LL_Init+0x98>)
 800877c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008780:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <USBD_LL_Init+0x98>)
 8008782:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <USBD_LL_Init+0x9c>)
 8008784:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008786:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <USBD_LL_Init+0x98>)
 8008788:	2209      	movs	r2, #9
 800878a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800878c:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <USBD_LL_Init+0x98>)
 800878e:	2202      	movs	r2, #2
 8008790:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <USBD_LL_Init+0x98>)
 8008794:	2200      	movs	r2, #0
 8008796:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008798:	4b17      	ldr	r3, [pc, #92]	; (80087f8 <USBD_LL_Init+0x98>)
 800879a:	2202      	movs	r2, #2
 800879c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800879e:	4b16      	ldr	r3, [pc, #88]	; (80087f8 <USBD_LL_Init+0x98>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087a4:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <USBD_LL_Init+0x98>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <USBD_LL_Init+0x98>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80087b0:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <USBD_LL_Init+0x98>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <USBD_LL_Init+0x98>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087bc:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <USBD_LL_Init+0x98>)
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087c2:	480d      	ldr	r0, [pc, #52]	; (80087f8 <USBD_LL_Init+0x98>)
 80087c4:	f7f8 fbdb 	bl	8000f7e <HAL_PCD_Init>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80087ce:	f7f7 fec9 	bl	8000564 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087d2:	2180      	movs	r1, #128	; 0x80
 80087d4:	4808      	ldr	r0, [pc, #32]	; (80087f8 <USBD_LL_Init+0x98>)
 80087d6:	f7f9 fe66 	bl	80024a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	2100      	movs	r1, #0
 80087de:	4806      	ldr	r0, [pc, #24]	; (80087f8 <USBD_LL_Init+0x98>)
 80087e0:	f7f9 fe1a 	bl	8002418 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087e4:	2280      	movs	r2, #128	; 0x80
 80087e6:	2101      	movs	r1, #1
 80087e8:	4803      	ldr	r0, [pc, #12]	; (80087f8 <USBD_LL_Init+0x98>)
 80087ea:	f7f9 fe15 	bl	8002418 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	240021f4 	.word	0x240021f4
 80087fc:	40080000 	.word	0x40080000

08008800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008816:	4618      	mov	r0, r3
 8008818:	f7f8 fcd5 	bl	80011c6 <HAL_PCD_Start>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f942 	bl	8008aac <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	461a      	mov	r2, r3
 8008844:	4603      	mov	r3, r0
 8008846:	70fb      	strb	r3, [r7, #3]
 8008848:	460b      	mov	r3, r1
 800884a:	70bb      	strb	r3, [r7, #2]
 800884c:	4613      	mov	r3, r2
 800884e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800885e:	78bb      	ldrb	r3, [r7, #2]
 8008860:	883a      	ldrh	r2, [r7, #0]
 8008862:	78f9      	ldrb	r1, [r7, #3]
 8008864:	f7f9 f9d3 	bl	8001c0e <HAL_PCD_EP_Open>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f91c 	bl	8008aac <USBD_Get_USB_Status>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008878:	7bbb      	ldrb	r3, [r7, #14]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f9 fa1c 	bl	8001cde <HAL_PCD_EP_Close>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f8fd 	bl	8008aac <USBD_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 faf4 	bl	8001ecc <HAL_PCD_EP_SetStall>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f8de 	bl	8008aac <USBD_Get_USB_Status>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7f9 fb39 	bl	8001f94 <HAL_PCD_EP_ClrStall>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f8bf 	bl	8008aac <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800894e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0b      	bge.n	8008970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	333e      	adds	r3, #62	; 0x3e
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	e00b      	b.n	8008988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008986:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7f9 f906 	bl	8001bc4 <HAL_PCD_SetAddress>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f874 	bl	8008aac <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089f0:	7af9      	ldrb	r1, [r7, #11]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f7f9 fa1f 	bl	8001e38 <HAL_PCD_EP_Transmit>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f853 	bl	8008aac <USBD_Get_USB_Status>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	460b      	mov	r3, r1
 8008a22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a32:	7af9      	ldrb	r1, [r7, #11]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	f7f9 f99b 	bl	8001d72 <HAL_PCD_EP_Receive>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f832 	bl	8008aac <USBD_Get_USB_Status>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f9 f9cb 	bl	8001e08 <HAL_PCD_EP_GetRxCount>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <USBD_static_malloc+0x18>)
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	24002700 	.word	0x24002700

08008a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]

}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d817      	bhi.n	8008af0 <USBD_Get_USB_Status+0x44>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBD_Get_USB_Status+0x1c>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008adf 	.word	0x08008adf
 8008ad0:	08008ae5 	.word	0x08008ae5
 8008ad4:	08008aeb 	.word	0x08008aeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e00b      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	e008      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	e005      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aea:	2303      	movs	r3, #3
 8008aec:	73fb      	strb	r3, [r7, #15]
    break;
 8008aee:	e002      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008af0:	2303      	movs	r3, #3
 8008af2:	73fb      	strb	r3, [r7, #15]
    break;
 8008af4:	bf00      	nop
  }
  return usb_status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	24000100 	.word	0x24000100

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	; (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 fca8 	bl	8009478 <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08009520 	.word	0x08009520
 8008b4c:	08009520 	.word	0x08009520
 8008b50:	08009520 	.word	0x08009520
 8008b54:	08009524 	.word	0x08009524

08008b58 <memcpy>:
 8008b58:	440a      	add	r2, r1
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b60:	d100      	bne.n	8008b64 <memcpy+0xc>
 8008b62:	4770      	bx	lr
 8008b64:	b510      	push	{r4, lr}
 8008b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	d1f9      	bne.n	8008b66 <memcpy+0xe>
 8008b72:	bd10      	pop	{r4, pc}

08008b74 <memset>:
 8008b74:	4402      	add	r2, r0
 8008b76:	4603      	mov	r3, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <_vsniprintf_r>:
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	4614      	mov	r4, r2
 8008b88:	2c00      	cmp	r4, #0
 8008b8a:	b09b      	sub	sp, #108	; 0x6c
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	da05      	bge.n	8008b9e <_vsniprintf_r+0x1a>
 8008b92:	238b      	movs	r3, #139	; 0x8b
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	b01b      	add	sp, #108	; 0x6c
 8008b9c:	bd30      	pop	{r4, r5, pc}
 8008b9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ba2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ba6:	bf14      	ite	ne
 8008ba8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bac:	4623      	moveq	r3, r4
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bb6:	9100      	str	r1, [sp, #0]
 8008bb8:	9104      	str	r1, [sp, #16]
 8008bba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008bbe:	4669      	mov	r1, sp
 8008bc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008bc2:	f000 f875 	bl	8008cb0 <_svfiprintf_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	bfbc      	itt	lt
 8008bca:	238b      	movlt	r3, #139	; 0x8b
 8008bcc:	602b      	strlt	r3, [r5, #0]
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d0e3      	beq.n	8008b9a <_vsniprintf_r+0x16>
 8008bd2:	9b00      	ldr	r3, [sp, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e7df      	b.n	8008b9a <_vsniprintf_r+0x16>
	...

08008bdc <vsniprintf>:
 8008bdc:	b507      	push	{r0, r1, r2, lr}
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	460a      	mov	r2, r1
 8008be4:	4601      	mov	r1, r0
 8008be6:	4803      	ldr	r0, [pc, #12]	; (8008bf4 <vsniprintf+0x18>)
 8008be8:	6800      	ldr	r0, [r0, #0]
 8008bea:	f7ff ffcb 	bl	8008b84 <_vsniprintf_r>
 8008bee:	b003      	add	sp, #12
 8008bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bf4:	24000100 	.word	0x24000100

08008bf8 <__ssputs_r>:
 8008bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	688e      	ldr	r6, [r1, #8]
 8008bfe:	429e      	cmp	r6, r3
 8008c00:	4682      	mov	sl, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4690      	mov	r8, r2
 8008c06:	461f      	mov	r7, r3
 8008c08:	d838      	bhi.n	8008c7c <__ssputs_r+0x84>
 8008c0a:	898a      	ldrh	r2, [r1, #12]
 8008c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c10:	d032      	beq.n	8008c78 <__ssputs_r+0x80>
 8008c12:	6825      	ldr	r5, [r4, #0]
 8008c14:	6909      	ldr	r1, [r1, #16]
 8008c16:	eba5 0901 	sub.w	r9, r5, r1
 8008c1a:	6965      	ldr	r5, [r4, #20]
 8008c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c24:	3301      	adds	r3, #1
 8008c26:	444b      	add	r3, r9
 8008c28:	106d      	asrs	r5, r5, #1
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	bf38      	it	cc
 8008c2e:	461d      	movcc	r5, r3
 8008c30:	0553      	lsls	r3, r2, #21
 8008c32:	d531      	bpl.n	8008c98 <__ssputs_r+0xa0>
 8008c34:	4629      	mov	r1, r5
 8008c36:	f000 fb55 	bl	80092e4 <_malloc_r>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	b950      	cbnz	r0, 8008c54 <__ssputs_r+0x5c>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	f8ca 3000 	str.w	r3, [sl]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c54:	6921      	ldr	r1, [r4, #16]
 8008c56:	464a      	mov	r2, r9
 8008c58:	f7ff ff7e 	bl	8008b58 <memcpy>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	6126      	str	r6, [r4, #16]
 8008c6a:	6165      	str	r5, [r4, #20]
 8008c6c:	444e      	add	r6, r9
 8008c6e:	eba5 0509 	sub.w	r5, r5, r9
 8008c72:	6026      	str	r6, [r4, #0]
 8008c74:	60a5      	str	r5, [r4, #8]
 8008c76:	463e      	mov	r6, r7
 8008c78:	42be      	cmp	r6, r7
 8008c7a:	d900      	bls.n	8008c7e <__ssputs_r+0x86>
 8008c7c:	463e      	mov	r6, r7
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	4632      	mov	r2, r6
 8008c82:	4641      	mov	r1, r8
 8008c84:	f000 faa8 	bl	80091d8 <memmove>
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	1b9b      	subs	r3, r3, r6
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4433      	add	r3, r6
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7db      	b.n	8008c50 <__ssputs_r+0x58>
 8008c98:	462a      	mov	r2, r5
 8008c9a:	f000 fb97 	bl	80093cc <_realloc_r>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d1e1      	bne.n	8008c68 <__ssputs_r+0x70>
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	f000 fab0 	bl	800920c <_free_r>
 8008cac:	e7c7      	b.n	8008c3e <__ssputs_r+0x46>
	...

08008cb0 <_svfiprintf_r>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	b09d      	sub	sp, #116	; 0x74
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	d50e      	bpl.n	8008ce2 <_svfiprintf_r+0x32>
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	b963      	cbnz	r3, 8008ce2 <_svfiprintf_r+0x32>
 8008cc8:	2140      	movs	r1, #64	; 0x40
 8008cca:	f000 fb0b 	bl	80092e4 <_malloc_r>
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	6128      	str	r0, [r5, #16]
 8008cd2:	b920      	cbnz	r0, 8008cde <_svfiprintf_r+0x2e>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	e0d1      	b.n	8008e82 <_svfiprintf_r+0x1d2>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	616b      	str	r3, [r5, #20]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf0:	2330      	movs	r3, #48	; 0x30
 8008cf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e9c <_svfiprintf_r+0x1ec>
 8008cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cfa:	f04f 0901 	mov.w	r9, #1
 8008cfe:	4623      	mov	r3, r4
 8008d00:	469a      	mov	sl, r3
 8008d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d06:	b10a      	cbz	r2, 8008d0c <_svfiprintf_r+0x5c>
 8008d08:	2a25      	cmp	r2, #37	; 0x25
 8008d0a:	d1f9      	bne.n	8008d00 <_svfiprintf_r+0x50>
 8008d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d10:	d00b      	beq.n	8008d2a <_svfiprintf_r+0x7a>
 8008d12:	465b      	mov	r3, fp
 8008d14:	4622      	mov	r2, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ff6d 	bl	8008bf8 <__ssputs_r>
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f000 80aa 	beq.w	8008e78 <_svfiprintf_r+0x1c8>
 8008d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d26:	445a      	add	r2, fp
 8008d28:	9209      	str	r2, [sp, #36]	; 0x24
 8008d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 80a2 	beq.w	8008e78 <_svfiprintf_r+0x1c8>
 8008d34:	2300      	movs	r3, #0
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3e:	f10a 0a01 	add.w	sl, sl, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	9307      	str	r3, [sp, #28]
 8008d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d4c:	4654      	mov	r4, sl
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	4851      	ldr	r0, [pc, #324]	; (8008e9c <_svfiprintf_r+0x1ec>)
 8008d56:	f7f7 fac3 	bl	80002e0 <memchr>
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	b9d8      	cbnz	r0, 8008d96 <_svfiprintf_r+0xe6>
 8008d5e:	06d0      	lsls	r0, r2, #27
 8008d60:	bf44      	itt	mi
 8008d62:	2320      	movmi	r3, #32
 8008d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d68:	0711      	lsls	r1, r2, #28
 8008d6a:	bf44      	itt	mi
 8008d6c:	232b      	movmi	r3, #43	; 0x2b
 8008d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d72:	f89a 3000 	ldrb.w	r3, [sl]
 8008d76:	2b2a      	cmp	r3, #42	; 0x2a
 8008d78:	d015      	beq.n	8008da6 <_svfiprintf_r+0xf6>
 8008d7a:	9a07      	ldr	r2, [sp, #28]
 8008d7c:	4654      	mov	r4, sl
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f04f 0c0a 	mov.w	ip, #10
 8008d84:	4621      	mov	r1, r4
 8008d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8a:	3b30      	subs	r3, #48	; 0x30
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	d94e      	bls.n	8008e2e <_svfiprintf_r+0x17e>
 8008d90:	b1b0      	cbz	r0, 8008dc0 <_svfiprintf_r+0x110>
 8008d92:	9207      	str	r2, [sp, #28]
 8008d94:	e014      	b.n	8008dc0 <_svfiprintf_r+0x110>
 8008d96:	eba0 0308 	sub.w	r3, r0, r8
 8008d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	46a2      	mov	sl, r4
 8008da4:	e7d2      	b.n	8008d4c <_svfiprintf_r+0x9c>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	1d19      	adds	r1, r3, #4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	9103      	str	r1, [sp, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfbb      	ittet	lt
 8008db2:	425b      	neglt	r3, r3
 8008db4:	f042 0202 	orrlt.w	r2, r2, #2
 8008db8:	9307      	strge	r3, [sp, #28]
 8008dba:	9307      	strlt	r3, [sp, #28]
 8008dbc:	bfb8      	it	lt
 8008dbe:	9204      	strlt	r2, [sp, #16]
 8008dc0:	7823      	ldrb	r3, [r4, #0]
 8008dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008dc4:	d10c      	bne.n	8008de0 <_svfiprintf_r+0x130>
 8008dc6:	7863      	ldrb	r3, [r4, #1]
 8008dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dca:	d135      	bne.n	8008e38 <_svfiprintf_r+0x188>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	9203      	str	r2, [sp, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bfb8      	it	lt
 8008dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ddc:	3402      	adds	r4, #2
 8008dde:	9305      	str	r3, [sp, #20]
 8008de0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008eac <_svfiprintf_r+0x1fc>
 8008de4:	7821      	ldrb	r1, [r4, #0]
 8008de6:	2203      	movs	r2, #3
 8008de8:	4650      	mov	r0, sl
 8008dea:	f7f7 fa79 	bl	80002e0 <memchr>
 8008dee:	b140      	cbz	r0, 8008e02 <_svfiprintf_r+0x152>
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	eba0 000a 	sub.w	r0, r0, sl
 8008df6:	fa03 f000 	lsl.w	r0, r3, r0
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	4303      	orrs	r3, r0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	4826      	ldr	r0, [pc, #152]	; (8008ea0 <_svfiprintf_r+0x1f0>)
 8008e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e0c:	2206      	movs	r2, #6
 8008e0e:	f7f7 fa67 	bl	80002e0 <memchr>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d038      	beq.n	8008e88 <_svfiprintf_r+0x1d8>
 8008e16:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <_svfiprintf_r+0x1f4>)
 8008e18:	bb1b      	cbnz	r3, 8008e62 <_svfiprintf_r+0x1b2>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	3308      	adds	r3, #8
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	4433      	add	r3, r6
 8008e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2c:	e767      	b.n	8008cfe <_svfiprintf_r+0x4e>
 8008e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7a5      	b.n	8008d84 <_svfiprintf_r+0xd4>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f04f 0c0a 	mov.w	ip, #10
 8008e44:	4620      	mov	r0, r4
 8008e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4a:	3a30      	subs	r2, #48	; 0x30
 8008e4c:	2a09      	cmp	r2, #9
 8008e4e:	d903      	bls.n	8008e58 <_svfiprintf_r+0x1a8>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0c5      	beq.n	8008de0 <_svfiprintf_r+0x130>
 8008e54:	9105      	str	r1, [sp, #20]
 8008e56:	e7c3      	b.n	8008de0 <_svfiprintf_r+0x130>
 8008e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7f0      	b.n	8008e44 <_svfiprintf_r+0x194>
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	462a      	mov	r2, r5
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <_svfiprintf_r+0x1f8>)
 8008e6a:	a904      	add	r1, sp, #16
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f3af 8000 	nop.w
 8008e72:	1c42      	adds	r2, r0, #1
 8008e74:	4606      	mov	r6, r0
 8008e76:	d1d6      	bne.n	8008e26 <_svfiprintf_r+0x176>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	065b      	lsls	r3, r3, #25
 8008e7c:	f53f af2c 	bmi.w	8008cd8 <_svfiprintf_r+0x28>
 8008e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e82:	b01d      	add	sp, #116	; 0x74
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	ab03      	add	r3, sp, #12
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_svfiprintf_r+0x1f8>)
 8008e90:	a904      	add	r1, sp, #16
 8008e92:	4638      	mov	r0, r7
 8008e94:	f000 f87a 	bl	8008f8c <_printf_i>
 8008e98:	e7eb      	b.n	8008e72 <_svfiprintf_r+0x1c2>
 8008e9a:	bf00      	nop
 8008e9c:	080094ec 	.word	0x080094ec
 8008ea0:	080094f6 	.word	0x080094f6
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	08008bf9 	.word	0x08008bf9
 8008eac:	080094f2 	.word	0x080094f2

08008eb0 <_printf_common>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	4699      	mov	r9, r3
 8008eb8:	688a      	ldr	r2, [r1, #8]
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	bfb8      	it	lt
 8008ec4:	4613      	movlt	r3, r2
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ecc:	4607      	mov	r7, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	b10a      	cbz	r2, 8008ed6 <_printf_common+0x26>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	0699      	lsls	r1, r3, #26
 8008eda:	bf42      	ittt	mi
 8008edc:	6833      	ldrmi	r3, [r6, #0]
 8008ede:	3302      	addmi	r3, #2
 8008ee0:	6033      	strmi	r3, [r6, #0]
 8008ee2:	6825      	ldr	r5, [r4, #0]
 8008ee4:	f015 0506 	ands.w	r5, r5, #6
 8008ee8:	d106      	bne.n	8008ef8 <_printf_common+0x48>
 8008eea:	f104 0a19 	add.w	sl, r4, #25
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	6832      	ldr	r2, [r6, #0]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc26      	bgt.n	8008f46 <_printf_common+0x96>
 8008ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008efc:	1e13      	subs	r3, r2, #0
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	bf18      	it	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d42b      	bmi.n	8008f60 <_printf_common+0xb0>
 8008f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d01e      	beq.n	8008f54 <_printf_common+0xa4>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	68e5      	ldr	r5, [r4, #12]
 8008f1a:	6832      	ldr	r2, [r6, #0]
 8008f1c:	f003 0306 	and.w	r3, r3, #6
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	bf08      	it	eq
 8008f24:	1aad      	subeq	r5, r5, r2
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	6922      	ldr	r2, [r4, #16]
 8008f2a:	bf0c      	ite	eq
 8008f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f30:	2500      	movne	r5, #0
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bfc4      	itt	gt
 8008f36:	1a9b      	subgt	r3, r3, r2
 8008f38:	18ed      	addgt	r5, r5, r3
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	341a      	adds	r4, #26
 8008f3e:	42b5      	cmp	r5, r6
 8008f40:	d11a      	bne.n	8008f78 <_printf_common+0xc8>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e008      	b.n	8008f58 <_printf_common+0xa8>
 8008f46:	2301      	movs	r3, #1
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	47c0      	blx	r8
 8008f50:	3001      	adds	r0, #1
 8008f52:	d103      	bne.n	8008f5c <_printf_common+0xac>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	e7c6      	b.n	8008eee <_printf_common+0x3e>
 8008f60:	18e1      	adds	r1, r4, r3
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	2030      	movs	r0, #48	; 0x30
 8008f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f6a:	4422      	add	r2, r4
 8008f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f74:	3302      	adds	r3, #2
 8008f76:	e7c7      	b.n	8008f08 <_printf_common+0x58>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c0      	blx	r8
 8008f82:	3001      	adds	r0, #1
 8008f84:	d0e6      	beq.n	8008f54 <_printf_common+0xa4>
 8008f86:	3601      	adds	r6, #1
 8008f88:	e7d9      	b.n	8008f3e <_printf_common+0x8e>
	...

08008f8c <_printf_i>:
 8008f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	7e0f      	ldrb	r7, [r1, #24]
 8008f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f94:	2f78      	cmp	r7, #120	; 0x78
 8008f96:	4691      	mov	r9, r2
 8008f98:	4680      	mov	r8, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	469a      	mov	sl, r3
 8008f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fa2:	d807      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fa4:	2f62      	cmp	r7, #98	; 0x62
 8008fa6:	d80a      	bhi.n	8008fbe <_printf_i+0x32>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	f000 80d8 	beq.w	800915e <_printf_i+0x1d2>
 8008fae:	2f58      	cmp	r7, #88	; 0x58
 8008fb0:	f000 80a3 	beq.w	80090fa <_printf_i+0x16e>
 8008fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fbc:	e03a      	b.n	8009034 <_printf_i+0xa8>
 8008fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fc2:	2b15      	cmp	r3, #21
 8008fc4:	d8f6      	bhi.n	8008fb4 <_printf_i+0x28>
 8008fc6:	a101      	add	r1, pc, #4	; (adr r1, 8008fcc <_printf_i+0x40>)
 8008fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fcc:	08009025 	.word	0x08009025
 8008fd0:	08009039 	.word	0x08009039
 8008fd4:	08008fb5 	.word	0x08008fb5
 8008fd8:	08008fb5 	.word	0x08008fb5
 8008fdc:	08008fb5 	.word	0x08008fb5
 8008fe0:	08008fb5 	.word	0x08008fb5
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08008fb5 	.word	0x08008fb5
 8008fec:	08008fb5 	.word	0x08008fb5
 8008ff0:	08008fb5 	.word	0x08008fb5
 8008ff4:	08008fb5 	.word	0x08008fb5
 8008ff8:	08009145 	.word	0x08009145
 8008ffc:	08009069 	.word	0x08009069
 8009000:	08009127 	.word	0x08009127
 8009004:	08008fb5 	.word	0x08008fb5
 8009008:	08008fb5 	.word	0x08008fb5
 800900c:	08009167 	.word	0x08009167
 8009010:	08008fb5 	.word	0x08008fb5
 8009014:	08009069 	.word	0x08009069
 8009018:	08008fb5 	.word	0x08008fb5
 800901c:	08008fb5 	.word	0x08008fb5
 8009020:	0800912f 	.word	0x0800912f
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009034:	2301      	movs	r3, #1
 8009036:	e0a3      	b.n	8009180 <_printf_i+0x1f4>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	6829      	ldr	r1, [r5, #0]
 800903c:	0606      	lsls	r6, r0, #24
 800903e:	f101 0304 	add.w	r3, r1, #4
 8009042:	d50a      	bpl.n	800905a <_printf_i+0xce>
 8009044:	680e      	ldr	r6, [r1, #0]
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	2e00      	cmp	r6, #0
 800904a:	da03      	bge.n	8009054 <_printf_i+0xc8>
 800904c:	232d      	movs	r3, #45	; 0x2d
 800904e:	4276      	negs	r6, r6
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009054:	485e      	ldr	r0, [pc, #376]	; (80091d0 <_printf_i+0x244>)
 8009056:	230a      	movs	r3, #10
 8009058:	e019      	b.n	800908e <_printf_i+0x102>
 800905a:	680e      	ldr	r6, [r1, #0]
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009062:	bf18      	it	ne
 8009064:	b236      	sxthne	r6, r6
 8009066:	e7ef      	b.n	8009048 <_printf_i+0xbc>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	6029      	str	r1, [r5, #0]
 8009070:	0601      	lsls	r1, r0, #24
 8009072:	d501      	bpl.n	8009078 <_printf_i+0xec>
 8009074:	681e      	ldr	r6, [r3, #0]
 8009076:	e002      	b.n	800907e <_printf_i+0xf2>
 8009078:	0646      	lsls	r6, r0, #25
 800907a:	d5fb      	bpl.n	8009074 <_printf_i+0xe8>
 800907c:	881e      	ldrh	r6, [r3, #0]
 800907e:	4854      	ldr	r0, [pc, #336]	; (80091d0 <_printf_i+0x244>)
 8009080:	2f6f      	cmp	r7, #111	; 0x6f
 8009082:	bf0c      	ite	eq
 8009084:	2308      	moveq	r3, #8
 8009086:	230a      	movne	r3, #10
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800908e:	6865      	ldr	r5, [r4, #4]
 8009090:	60a5      	str	r5, [r4, #8]
 8009092:	2d00      	cmp	r5, #0
 8009094:	bfa2      	ittt	ge
 8009096:	6821      	ldrge	r1, [r4, #0]
 8009098:	f021 0104 	bicge.w	r1, r1, #4
 800909c:	6021      	strge	r1, [r4, #0]
 800909e:	b90e      	cbnz	r6, 80090a4 <_printf_i+0x118>
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	d04d      	beq.n	8009140 <_printf_i+0x1b4>
 80090a4:	4615      	mov	r5, r2
 80090a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80090aa:	fb03 6711 	mls	r7, r3, r1, r6
 80090ae:	5dc7      	ldrb	r7, [r0, r7]
 80090b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090b4:	4637      	mov	r7, r6
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	460e      	mov	r6, r1
 80090ba:	d9f4      	bls.n	80090a6 <_printf_i+0x11a>
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d10b      	bne.n	80090d8 <_printf_i+0x14c>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07de      	lsls	r6, r3, #31
 80090c4:	d508      	bpl.n	80090d8 <_printf_i+0x14c>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4299      	cmp	r1, r3
 80090cc:	bfde      	ittt	le
 80090ce:	2330      	movle	r3, #48	; 0x30
 80090d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090d8:	1b52      	subs	r2, r2, r5
 80090da:	6122      	str	r2, [r4, #16]
 80090dc:	f8cd a000 	str.w	sl, [sp]
 80090e0:	464b      	mov	r3, r9
 80090e2:	aa03      	add	r2, sp, #12
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7ff fee2 	bl	8008eb0 <_printf_common>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d14c      	bne.n	800918a <_printf_i+0x1fe>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b004      	add	sp, #16
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	4835      	ldr	r0, [pc, #212]	; (80091d0 <_printf_i+0x244>)
 80090fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009100:	6829      	ldr	r1, [r5, #0]
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	f851 6b04 	ldr.w	r6, [r1], #4
 8009108:	6029      	str	r1, [r5, #0]
 800910a:	061d      	lsls	r5, r3, #24
 800910c:	d514      	bpl.n	8009138 <_printf_i+0x1ac>
 800910e:	07df      	lsls	r7, r3, #31
 8009110:	bf44      	itt	mi
 8009112:	f043 0320 	orrmi.w	r3, r3, #32
 8009116:	6023      	strmi	r3, [r4, #0]
 8009118:	b91e      	cbnz	r6, 8009122 <_printf_i+0x196>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	f023 0320 	bic.w	r3, r3, #32
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	2310      	movs	r3, #16
 8009124:	e7b0      	b.n	8009088 <_printf_i+0xfc>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f043 0320 	orr.w	r3, r3, #32
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	2378      	movs	r3, #120	; 0x78
 8009130:	4828      	ldr	r0, [pc, #160]	; (80091d4 <_printf_i+0x248>)
 8009132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009136:	e7e3      	b.n	8009100 <_printf_i+0x174>
 8009138:	0659      	lsls	r1, r3, #25
 800913a:	bf48      	it	mi
 800913c:	b2b6      	uxthmi	r6, r6
 800913e:	e7e6      	b.n	800910e <_printf_i+0x182>
 8009140:	4615      	mov	r5, r2
 8009142:	e7bb      	b.n	80090bc <_printf_i+0x130>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	6826      	ldr	r6, [r4, #0]
 8009148:	6961      	ldr	r1, [r4, #20]
 800914a:	1d18      	adds	r0, r3, #4
 800914c:	6028      	str	r0, [r5, #0]
 800914e:	0635      	lsls	r5, r6, #24
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	d501      	bpl.n	8009158 <_printf_i+0x1cc>
 8009154:	6019      	str	r1, [r3, #0]
 8009156:	e002      	b.n	800915e <_printf_i+0x1d2>
 8009158:	0670      	lsls	r0, r6, #25
 800915a:	d5fb      	bpl.n	8009154 <_printf_i+0x1c8>
 800915c:	8019      	strh	r1, [r3, #0]
 800915e:	2300      	movs	r3, #0
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	4615      	mov	r5, r2
 8009164:	e7ba      	b.n	80090dc <_printf_i+0x150>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	602a      	str	r2, [r5, #0]
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	2100      	movs	r1, #0
 8009172:	4628      	mov	r0, r5
 8009174:	f7f7 f8b4 	bl	80002e0 <memchr>
 8009178:	b108      	cbz	r0, 800917e <_printf_i+0x1f2>
 800917a:	1b40      	subs	r0, r0, r5
 800917c:	6060      	str	r0, [r4, #4]
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	2300      	movs	r3, #0
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	e7a8      	b.n	80090dc <_printf_i+0x150>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	462a      	mov	r2, r5
 800918e:	4649      	mov	r1, r9
 8009190:	4640      	mov	r0, r8
 8009192:	47d0      	blx	sl
 8009194:	3001      	adds	r0, #1
 8009196:	d0ab      	beq.n	80090f0 <_printf_i+0x164>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	079b      	lsls	r3, r3, #30
 800919c:	d413      	bmi.n	80091c6 <_printf_i+0x23a>
 800919e:	68e0      	ldr	r0, [r4, #12]
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	4298      	cmp	r0, r3
 80091a4:	bfb8      	it	lt
 80091a6:	4618      	movlt	r0, r3
 80091a8:	e7a4      	b.n	80090f4 <_printf_i+0x168>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4632      	mov	r2, r6
 80091ae:	4649      	mov	r1, r9
 80091b0:	4640      	mov	r0, r8
 80091b2:	47d0      	blx	sl
 80091b4:	3001      	adds	r0, #1
 80091b6:	d09b      	beq.n	80090f0 <_printf_i+0x164>
 80091b8:	3501      	adds	r5, #1
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	9903      	ldr	r1, [sp, #12]
 80091be:	1a5b      	subs	r3, r3, r1
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dcf2      	bgt.n	80091aa <_printf_i+0x21e>
 80091c4:	e7eb      	b.n	800919e <_printf_i+0x212>
 80091c6:	2500      	movs	r5, #0
 80091c8:	f104 0619 	add.w	r6, r4, #25
 80091cc:	e7f5      	b.n	80091ba <_printf_i+0x22e>
 80091ce:	bf00      	nop
 80091d0:	080094fd 	.word	0x080094fd
 80091d4:	0800950e 	.word	0x0800950e

080091d8 <memmove>:
 80091d8:	4288      	cmp	r0, r1
 80091da:	b510      	push	{r4, lr}
 80091dc:	eb01 0402 	add.w	r4, r1, r2
 80091e0:	d902      	bls.n	80091e8 <memmove+0x10>
 80091e2:	4284      	cmp	r4, r0
 80091e4:	4623      	mov	r3, r4
 80091e6:	d807      	bhi.n	80091f8 <memmove+0x20>
 80091e8:	1e43      	subs	r3, r0, #1
 80091ea:	42a1      	cmp	r1, r4
 80091ec:	d008      	beq.n	8009200 <memmove+0x28>
 80091ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091f6:	e7f8      	b.n	80091ea <memmove+0x12>
 80091f8:	4402      	add	r2, r0
 80091fa:	4601      	mov	r1, r0
 80091fc:	428a      	cmp	r2, r1
 80091fe:	d100      	bne.n	8009202 <memmove+0x2a>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920a:	e7f7      	b.n	80091fc <memmove+0x24>

0800920c <_free_r>:
 800920c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800920e:	2900      	cmp	r1, #0
 8009210:	d044      	beq.n	800929c <_free_r+0x90>
 8009212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009216:	9001      	str	r0, [sp, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f1a1 0404 	sub.w	r4, r1, #4
 800921e:	bfb8      	it	lt
 8009220:	18e4      	addlt	r4, r4, r3
 8009222:	f000 f913 	bl	800944c <__malloc_lock>
 8009226:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <_free_r+0x94>)
 8009228:	9801      	ldr	r0, [sp, #4]
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	b933      	cbnz	r3, 800923c <_free_r+0x30>
 800922e:	6063      	str	r3, [r4, #4]
 8009230:	6014      	str	r4, [r2, #0]
 8009232:	b003      	add	sp, #12
 8009234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009238:	f000 b90e 	b.w	8009458 <__malloc_unlock>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d908      	bls.n	8009252 <_free_r+0x46>
 8009240:	6825      	ldr	r5, [r4, #0]
 8009242:	1961      	adds	r1, r4, r5
 8009244:	428b      	cmp	r3, r1
 8009246:	bf01      	itttt	eq
 8009248:	6819      	ldreq	r1, [r3, #0]
 800924a:	685b      	ldreq	r3, [r3, #4]
 800924c:	1949      	addeq	r1, r1, r5
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	e7ed      	b.n	800922e <_free_r+0x22>
 8009252:	461a      	mov	r2, r3
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	b10b      	cbz	r3, 800925c <_free_r+0x50>
 8009258:	42a3      	cmp	r3, r4
 800925a:	d9fa      	bls.n	8009252 <_free_r+0x46>
 800925c:	6811      	ldr	r1, [r2, #0]
 800925e:	1855      	adds	r5, r2, r1
 8009260:	42a5      	cmp	r5, r4
 8009262:	d10b      	bne.n	800927c <_free_r+0x70>
 8009264:	6824      	ldr	r4, [r4, #0]
 8009266:	4421      	add	r1, r4
 8009268:	1854      	adds	r4, r2, r1
 800926a:	42a3      	cmp	r3, r4
 800926c:	6011      	str	r1, [r2, #0]
 800926e:	d1e0      	bne.n	8009232 <_free_r+0x26>
 8009270:	681c      	ldr	r4, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	6053      	str	r3, [r2, #4]
 8009276:	4421      	add	r1, r4
 8009278:	6011      	str	r1, [r2, #0]
 800927a:	e7da      	b.n	8009232 <_free_r+0x26>
 800927c:	d902      	bls.n	8009284 <_free_r+0x78>
 800927e:	230c      	movs	r3, #12
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	e7d6      	b.n	8009232 <_free_r+0x26>
 8009284:	6825      	ldr	r5, [r4, #0]
 8009286:	1961      	adds	r1, r4, r5
 8009288:	428b      	cmp	r3, r1
 800928a:	bf04      	itt	eq
 800928c:	6819      	ldreq	r1, [r3, #0]
 800928e:	685b      	ldreq	r3, [r3, #4]
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	bf04      	itt	eq
 8009294:	1949      	addeq	r1, r1, r5
 8009296:	6021      	streq	r1, [r4, #0]
 8009298:	6054      	str	r4, [r2, #4]
 800929a:	e7ca      	b.n	8009232 <_free_r+0x26>
 800929c:	b003      	add	sp, #12
 800929e:	bd30      	pop	{r4, r5, pc}
 80092a0:	24002920 	.word	0x24002920

080092a4 <sbrk_aligned>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4e0e      	ldr	r6, [pc, #56]	; (80092e0 <sbrk_aligned+0x3c>)
 80092a8:	460c      	mov	r4, r1
 80092aa:	6831      	ldr	r1, [r6, #0]
 80092ac:	4605      	mov	r5, r0
 80092ae:	b911      	cbnz	r1, 80092b6 <sbrk_aligned+0x12>
 80092b0:	f000 f8bc 	bl	800942c <_sbrk_r>
 80092b4:	6030      	str	r0, [r6, #0]
 80092b6:	4621      	mov	r1, r4
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f8b7 	bl	800942c <_sbrk_r>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	d00a      	beq.n	80092d8 <sbrk_aligned+0x34>
 80092c2:	1cc4      	adds	r4, r0, #3
 80092c4:	f024 0403 	bic.w	r4, r4, #3
 80092c8:	42a0      	cmp	r0, r4
 80092ca:	d007      	beq.n	80092dc <sbrk_aligned+0x38>
 80092cc:	1a21      	subs	r1, r4, r0
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f8ac 	bl	800942c <_sbrk_r>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d101      	bne.n	80092dc <sbrk_aligned+0x38>
 80092d8:	f04f 34ff 	mov.w	r4, #4294967295
 80092dc:	4620      	mov	r0, r4
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	24002924 	.word	0x24002924

080092e4 <_malloc_r>:
 80092e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e8:	1ccd      	adds	r5, r1, #3
 80092ea:	f025 0503 	bic.w	r5, r5, #3
 80092ee:	3508      	adds	r5, #8
 80092f0:	2d0c      	cmp	r5, #12
 80092f2:	bf38      	it	cc
 80092f4:	250c      	movcc	r5, #12
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	4607      	mov	r7, r0
 80092fa:	db01      	blt.n	8009300 <_malloc_r+0x1c>
 80092fc:	42a9      	cmp	r1, r5
 80092fe:	d905      	bls.n	800930c <_malloc_r+0x28>
 8009300:	230c      	movs	r3, #12
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	2600      	movs	r6, #0
 8009306:	4630      	mov	r0, r6
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	4e2e      	ldr	r6, [pc, #184]	; (80093c8 <_malloc_r+0xe4>)
 800930e:	f000 f89d 	bl	800944c <__malloc_lock>
 8009312:	6833      	ldr	r3, [r6, #0]
 8009314:	461c      	mov	r4, r3
 8009316:	bb34      	cbnz	r4, 8009366 <_malloc_r+0x82>
 8009318:	4629      	mov	r1, r5
 800931a:	4638      	mov	r0, r7
 800931c:	f7ff ffc2 	bl	80092a4 <sbrk_aligned>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	4604      	mov	r4, r0
 8009324:	d14d      	bne.n	80093c2 <_malloc_r+0xde>
 8009326:	6834      	ldr	r4, [r6, #0]
 8009328:	4626      	mov	r6, r4
 800932a:	2e00      	cmp	r6, #0
 800932c:	d140      	bne.n	80093b0 <_malloc_r+0xcc>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	4631      	mov	r1, r6
 8009332:	4638      	mov	r0, r7
 8009334:	eb04 0803 	add.w	r8, r4, r3
 8009338:	f000 f878 	bl	800942c <_sbrk_r>
 800933c:	4580      	cmp	r8, r0
 800933e:	d13a      	bne.n	80093b6 <_malloc_r+0xd2>
 8009340:	6821      	ldr	r1, [r4, #0]
 8009342:	3503      	adds	r5, #3
 8009344:	1a6d      	subs	r5, r5, r1
 8009346:	f025 0503 	bic.w	r5, r5, #3
 800934a:	3508      	adds	r5, #8
 800934c:	2d0c      	cmp	r5, #12
 800934e:	bf38      	it	cc
 8009350:	250c      	movcc	r5, #12
 8009352:	4629      	mov	r1, r5
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff ffa5 	bl	80092a4 <sbrk_aligned>
 800935a:	3001      	adds	r0, #1
 800935c:	d02b      	beq.n	80093b6 <_malloc_r+0xd2>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	442b      	add	r3, r5
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	e00e      	b.n	8009384 <_malloc_r+0xa0>
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	1b52      	subs	r2, r2, r5
 800936a:	d41e      	bmi.n	80093aa <_malloc_r+0xc6>
 800936c:	2a0b      	cmp	r2, #11
 800936e:	d916      	bls.n	800939e <_malloc_r+0xba>
 8009370:	1961      	adds	r1, r4, r5
 8009372:	42a3      	cmp	r3, r4
 8009374:	6025      	str	r5, [r4, #0]
 8009376:	bf18      	it	ne
 8009378:	6059      	strne	r1, [r3, #4]
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	bf08      	it	eq
 800937e:	6031      	streq	r1, [r6, #0]
 8009380:	5162      	str	r2, [r4, r5]
 8009382:	604b      	str	r3, [r1, #4]
 8009384:	4638      	mov	r0, r7
 8009386:	f104 060b 	add.w	r6, r4, #11
 800938a:	f000 f865 	bl	8009458 <__malloc_unlock>
 800938e:	f026 0607 	bic.w	r6, r6, #7
 8009392:	1d23      	adds	r3, r4, #4
 8009394:	1af2      	subs	r2, r6, r3
 8009396:	d0b6      	beq.n	8009306 <_malloc_r+0x22>
 8009398:	1b9b      	subs	r3, r3, r6
 800939a:	50a3      	str	r3, [r4, r2]
 800939c:	e7b3      	b.n	8009306 <_malloc_r+0x22>
 800939e:	6862      	ldr	r2, [r4, #4]
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	bf0c      	ite	eq
 80093a4:	6032      	streq	r2, [r6, #0]
 80093a6:	605a      	strne	r2, [r3, #4]
 80093a8:	e7ec      	b.n	8009384 <_malloc_r+0xa0>
 80093aa:	4623      	mov	r3, r4
 80093ac:	6864      	ldr	r4, [r4, #4]
 80093ae:	e7b2      	b.n	8009316 <_malloc_r+0x32>
 80093b0:	4634      	mov	r4, r6
 80093b2:	6876      	ldr	r6, [r6, #4]
 80093b4:	e7b9      	b.n	800932a <_malloc_r+0x46>
 80093b6:	230c      	movs	r3, #12
 80093b8:	603b      	str	r3, [r7, #0]
 80093ba:	4638      	mov	r0, r7
 80093bc:	f000 f84c 	bl	8009458 <__malloc_unlock>
 80093c0:	e7a1      	b.n	8009306 <_malloc_r+0x22>
 80093c2:	6025      	str	r5, [r4, #0]
 80093c4:	e7de      	b.n	8009384 <_malloc_r+0xa0>
 80093c6:	bf00      	nop
 80093c8:	24002920 	.word	0x24002920

080093cc <_realloc_r>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4680      	mov	r8, r0
 80093d2:	4614      	mov	r4, r2
 80093d4:	460e      	mov	r6, r1
 80093d6:	b921      	cbnz	r1, 80093e2 <_realloc_r+0x16>
 80093d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4611      	mov	r1, r2
 80093de:	f7ff bf81 	b.w	80092e4 <_malloc_r>
 80093e2:	b92a      	cbnz	r2, 80093f0 <_realloc_r+0x24>
 80093e4:	f7ff ff12 	bl	800920c <_free_r>
 80093e8:	4625      	mov	r5, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	f000 f838 	bl	8009464 <_malloc_usable_size_r>
 80093f4:	4284      	cmp	r4, r0
 80093f6:	4607      	mov	r7, r0
 80093f8:	d802      	bhi.n	8009400 <_realloc_r+0x34>
 80093fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093fe:	d812      	bhi.n	8009426 <_realloc_r+0x5a>
 8009400:	4621      	mov	r1, r4
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff ff6e 	bl	80092e4 <_malloc_r>
 8009408:	4605      	mov	r5, r0
 800940a:	2800      	cmp	r0, #0
 800940c:	d0ed      	beq.n	80093ea <_realloc_r+0x1e>
 800940e:	42bc      	cmp	r4, r7
 8009410:	4622      	mov	r2, r4
 8009412:	4631      	mov	r1, r6
 8009414:	bf28      	it	cs
 8009416:	463a      	movcs	r2, r7
 8009418:	f7ff fb9e 	bl	8008b58 <memcpy>
 800941c:	4631      	mov	r1, r6
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff fef4 	bl	800920c <_free_r>
 8009424:	e7e1      	b.n	80093ea <_realloc_r+0x1e>
 8009426:	4635      	mov	r5, r6
 8009428:	e7df      	b.n	80093ea <_realloc_r+0x1e>
	...

0800942c <_sbrk_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d06      	ldr	r5, [pc, #24]	; (8009448 <_sbrk_r+0x1c>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	f7f7 f904 	bl	8000644 <_sbrk>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_sbrk_r+0x1a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_sbrk_r+0x1a>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	24002928 	.word	0x24002928

0800944c <__malloc_lock>:
 800944c:	4801      	ldr	r0, [pc, #4]	; (8009454 <__malloc_lock+0x8>)
 800944e:	f000 b811 	b.w	8009474 <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	2400292c 	.word	0x2400292c

08009458 <__malloc_unlock>:
 8009458:	4801      	ldr	r0, [pc, #4]	; (8009460 <__malloc_unlock+0x8>)
 800945a:	f000 b80c 	b.w	8009476 <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	2400292c 	.word	0x2400292c

08009464 <_malloc_usable_size_r>:
 8009464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009468:	1f18      	subs	r0, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfbc      	itt	lt
 800946e:	580b      	ldrlt	r3, [r1, r0]
 8009470:	18c0      	addlt	r0, r0, r3
 8009472:	4770      	bx	lr

08009474 <__retarget_lock_acquire_recursive>:
 8009474:	4770      	bx	lr

08009476 <__retarget_lock_release_recursive>:
 8009476:	4770      	bx	lr

08009478 <_init>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr

08009484 <_fini>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr
