
fft_process.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008890  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012a38  08012a38  00022a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012a3c  08012a3c  00022a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  24000000  08012a40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000dc60  24000190  08012bcc  00030190  2**3
                  ALLOC
  7 ._user_heap_stack 00001400  2400ddf0  08012bcc  0003ddf0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b205  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f6c  00000000  00000000  0004b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fa0  00000000  00000000  0004f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000e90  00000000  00000000  000502d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000395e2  00000000  00000000  00051160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000179ed  00000000  00000000  0008a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015734c  00000000  00000000  000a212f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000c5  00000000  00000000  001f947b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004130  00000000  00000000  001f9540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00003245  00000000  00000000  001fd670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000190 	.word	0x24000190
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a190 	.word	0x0800a190

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000194 	.word	0x24000194
 80002dc:	0800a190 	.word	0x0800a190

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b2d      	ldr	r3, [pc, #180]	; (800044c <MX_GPIO_Init+0xcc>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a2b      	ldr	r2, [pc, #172]	; (800044c <MX_GPIO_Init+0xcc>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_GPIO_Init+0xcc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xcc>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xcc>)
 80003bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <MX_GPIO_Init+0xcc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_GPIO_Init+0xcc>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_GPIO_Init+0xcc>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_GPIO_Init+0xcc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_Pin|green_Pin|blue_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2107      	movs	r1, #7
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_GPIO_Init+0xd0>)
 80003f6:	f000 fd8b 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_Pin;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000400:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <MX_GPIO_Init+0xd0>)
 8000412:	f000 fbcd 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = red_Pin|green_Pin|blue_Pin;
 8000416:	2307      	movs	r3, #7
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <MX_GPIO_Init+0xd0>)
 800042e:	f000 fbbf 	bl	8000bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f000 fb85 	bl	8000b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f000 fb9c 	bl	8000b7a <HAL_NVIC_EnableIRQ>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	58024400 	.word	0x58024400
 8000450:	58020800 	.word	0x58020800

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 f9d8 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f806 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ff8e 	bl	8000380 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000464:	f007 fe02 	bl	800806c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	e7fe      	b.n	8000468 <main+0x14>
	...

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09c      	sub	sp, #112	; 0x70
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	224c      	movs	r2, #76	; 0x4c
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f009 f9e4 	bl	8009848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2220      	movs	r2, #32
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f009 f9de 	bl	8009848 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800048c:	2002      	movs	r0, #2
 800048e:	f002 f847 	bl	8002520 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000492:	2300      	movs	r3, #0
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <SystemClock_Config+0xf0>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a30      	ldr	r2, [pc, #192]	; (800055c <SystemClock_Config+0xf0>)
 800049c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <SystemClock_Config+0xf0>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <SystemClock_Config+0xf4>)
 80004ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <SystemClock_Config+0xf4>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004b8:	4b29      	ldr	r3, [pc, #164]	; (8000560 <SystemClock_Config+0xf4>)
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c4:	bf00      	nop
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <SystemClock_Config+0xf0>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d2:	d1f8      	bne.n	80004c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004d4:	2321      	movs	r3, #33	; 0x21
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	2302      	movs	r3, #2
 80004e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80004ee:	2350      	movs	r3, #80	; 0x50
 80004f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004fe:	230c      	movs	r3, #12
 8000500:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000502:	2300      	movs	r3, #0
 8000504:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050e:	4618      	mov	r0, r3
 8000510:	f002 f850 	bl	80025b4 <HAL_RCC_OscConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800051a:	f000 f823 	bl	8000564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051e:	233f      	movs	r3, #63	; 0x3f
 8000520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2303      	movs	r3, #3
 8000524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800052a:	2308      	movs	r3, #8
 800052c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000532:	2340      	movs	r3, #64	; 0x40
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2104      	movs	r1, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fc63 	bl	8002e10 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000550:	f000 f808 	bl	8000564 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3770      	adds	r7, #112	; 0x70
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	58024800 	.word	0x58024800
 8000560:	58000400 	.word	0x58000400

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>
	...

08000570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_MspInit+0x30>)
 8000578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x30>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x30>)
 8000588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	58024400 	.word	0x58024400

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f0:	f000 f97e 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80005fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000600:	f000 fc9f 	bl	8000f42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <OTG_FS_IRQHandler+0x10>)
 800060e:	f000 fe09 	bl	8001224 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2400d6b4 	.word	0x2400d6b4

0800061c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin)
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062c:	d101      	bne.n	8000632 <HAL_GPIO_EXTI_Callback+0x16>
	{
		//CDC_Transmit_FS((uint8_t *)UserRxBufferFS, 100);
		//int16_t *test = (int16_t *)UserRxBufferFS;
		//usb_debug("%d",*test);
        fft_start();
 800062e:	f005 fc5b 	bl	8005ee8 <fft_start>
		//usb_debug("\r\n");
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f009 f8b4 	bl	80097d8 <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	24080000 	.word	0x24080000
 800069c:	00000400 	.word	0x00000400
 80006a0:	240001ac 	.word	0x240001ac
 80006a4:	2400ddf0 	.word	0x2400ddf0

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0xe4>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a36      	ldr	r2, [pc, #216]	; (800078c <SystemInit+0xe4>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <SystemInit+0xe8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d807      	bhi.n	80006d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0xe8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f023 030f 	bic.w	r3, r3, #15
 80006d0:	4a2f      	ldr	r2, [pc, #188]	; (8000790 <SystemInit+0xe8>)
 80006d2:	f043 0307 	orr.w	r3, r3, #7
 80006d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <SystemInit+0xec>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <SystemInit+0xec>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemInit+0xec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <SystemInit+0xec>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4929      	ldr	r1, [pc, #164]	; (8000794 <SystemInit+0xec>)
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemInit+0xf0>)
 80006f2:	4013      	ands	r3, r2
 80006f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemInit+0xe8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d007      	beq.n	8000712 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0xe8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f023 030f 	bic.w	r3, r3, #15
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0xe8>)
 800070c:	f043 0307 	orr.w	r3, r3, #7
 8000710:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <SystemInit+0xec>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <SystemInit+0xec>)
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <SystemInit+0xf4>)
 8000728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0xec>)
 800072c:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0xf8>)
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <SystemInit+0xec>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <SystemInit+0xfc>)
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <SystemInit+0xec>)
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <SystemInit+0xfc>)
 8000740:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SystemInit+0xec>)
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <SystemInit+0xfc>)
 800074c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <SystemInit+0xec>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <SystemInit+0xec>)
 800075a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <SystemInit+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <SystemInit+0x100>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <SystemInit+0x104>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <SystemInit+0x108>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <SystemInit+0x10c>)
 800077c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000780:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f7ff ff74 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	; (8000804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f008 fffd 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ea:	f7ff fe33 	bl	8000454 <main>
  bx  lr
 80007ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007f8:	2400018c 	.word	0x2400018c
  ldr r2, =_sidata
 80007fc:	08012a40 	.word	0x08012a40
  ldr r2, =_sbss
 8000800:	24000190 	.word	0x24000190
  ldr r4, =_ebss
 8000804:	2400ddf0 	.word	0x2400ddf0

08000808 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC3_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000812:	2003      	movs	r0, #3
 8000814:	f000 f98c 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000818:	f002 fcb0 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800081c:	4602      	mov	r2, r0
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_Init+0x68>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	0a1b      	lsrs	r3, r3, #8
 8000824:	f003 030f 	and.w	r3, r3, #15
 8000828:	4913      	ldr	r1, [pc, #76]	; (8000878 <HAL_Init+0x6c>)
 800082a:	5ccb      	ldrb	r3, [r1, r3]
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	fa22 f303 	lsr.w	r3, r2, r3
 8000834:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_Init+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_Init+0x6c>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	fa22 f303 	lsr.w	r3, r2, r3
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <HAL_Init+0x70>)
 800084e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <HAL_Init+0x74>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f814 	bl	8000884 <HAL_InitTick>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e002      	b.n	800086c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000866:	f7ff fe83 	bl	8000570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400
 8000878:	0800a1f4 	.word	0x0800a1f4
 800087c:	24000004 	.word	0x24000004
 8000880:	24000000 	.word	0x24000000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_InitTick+0x60>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e021      	b.n	80008dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_InitTick+0x64>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_InitTick+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f971 	bl	8000b96 <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f93b 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x68>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2400000c 	.word	0x2400000c
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000008 	.word	0x24000008

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2400000c 	.word	0x2400000c
 8000914:	240001b0 	.word	0x240001b0

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	240001b0 	.word	0x240001b0

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2400000c 	.word	0x2400000c

08000978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_GetREVID+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	0c1b      	lsrs	r3, r3, #16
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	5c001000 	.word	0x5c001000

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <__NVIC_SetPriorityGrouping+0x40>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x40>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	05fa0000 	.word	0x05fa0000

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <__NVIC_EnableIRQ+0x38>)
 8000a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff29 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff40 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff90 	bl	8000a84 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5f 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff33 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffa4 	bl	8000aec <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bbe:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <HAL_GPIO_Init+0x234>)
 8000bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bc2:	e194      	b.n	8000eee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8186 	beq.w	8000ee8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d005      	beq.n	8000bf4 <HAL_GPIO_Init+0x44>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	f003 0201 	and.w	r2, r3, #1
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d017      	beq.n	8000c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d123      	bne.n	8000ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	69b9      	ldr	r1, [r7, #24]
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0203 	and.w	r2, r3, #3
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 80e0 	beq.w	8000ee8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_GPIO_Init+0x238>)
 8000d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2e:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <HAL_GPIO_Init+0x238>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_GPIO_Init+0x238>)
 8000d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d46:	4a29      	ldr	r2, [pc, #164]	; (8000dec <HAL_GPIO_Init+0x23c>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <HAL_GPIO_Init+0x240>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d052      	beq.n	8000e18 <HAL_GPIO_Init+0x268>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_GPIO_Init+0x244>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d031      	beq.n	8000dde <HAL_GPIO_Init+0x22e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_GPIO_Init+0x248>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d02b      	beq.n	8000dda <HAL_GPIO_Init+0x22a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_GPIO_Init+0x24c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d025      	beq.n	8000dd6 <HAL_GPIO_Init+0x226>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <HAL_GPIO_Init+0x250>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01f      	beq.n	8000dd2 <HAL_GPIO_Init+0x222>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <HAL_GPIO_Init+0x254>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x21e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_GPIO_Init+0x258>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x21a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_GPIO_Init+0x25c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x216>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_GPIO_Init+0x260>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x212>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_GPIO_Init+0x264>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x20e>
 8000dba:	2309      	movs	r3, #9
 8000dbc:	e02d      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	e02b      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	e029      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e027      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e025      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dce:	2305      	movs	r3, #5
 8000dd0:	e023      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	e021      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e01f      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e01d      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e01b      	b.n	8000e1a <HAL_GPIO_Init+0x26a>
 8000de2:	bf00      	nop
 8000de4:	58000080 	.word	0x58000080
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58000400 	.word	0x58000400
 8000df0:	58020000 	.word	0x58020000
 8000df4:	58020400 	.word	0x58020400
 8000df8:	58020800 	.word	0x58020800
 8000dfc:	58020c00 	.word	0x58020c00
 8000e00:	58021000 	.word	0x58021000
 8000e04:	58021400 	.word	0x58021400
 8000e08:	58021800 	.word	0x58021800
 8000e0c:	58021c00 	.word	0x58021c00
 8000e10:	58022000 	.word	0x58022000
 8000e14:	58022400 	.word	0x58022400
 8000e18:	2300      	movs	r3, #0
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2a:	4938      	ldr	r1, [pc, #224]	; (8000f0c <HAL_GPIO_Init+0x35c>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f ae63 	bne.w	8000bc4 <HAL_GPIO_Init+0x14>
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3724      	adds	r7, #36	; 0x24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58000400 	.word	0x58000400

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb57 	bl	800061c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f78:	b08f      	sub	sp, #60	; 0x3c
 8000f7a:	af0a      	add	r7, sp, #40	; 0x28
 8000f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e116      	b.n	80011b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f007 fb6e 	bl	8008684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fc4d 	bl	8004866 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	687e      	ldr	r6, [r7, #4]
 8000fd4:	466d      	mov	r5, sp
 8000fd6:	f106 0410 	add.w	r4, r6, #16
 8000fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fea:	1d33      	adds	r3, r6, #4
 8000fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f003 fb18 	bl	8004624 <USB_CoreInit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0d7      	b.n	80011b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fc3b 	bl	8004888 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e04a      	b.n	80010ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	333d      	adds	r3, #61	; 0x3d
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	333c      	adds	r3, #60	; 0x3c
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	b298      	uxth	r0, r3
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3344      	adds	r3, #68	; 0x44
 8001054:	4602      	mov	r2, r0
 8001056:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3340      	adds	r3, #64	; 0x40
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3348      	adds	r3, #72	; 0x48
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	334c      	adds	r3, #76	; 0x4c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3354      	adds	r3, #84	; 0x54
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3301      	adds	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3af      	bcc.n	8001018 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e044      	b.n	8001148 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3b5      	bcc.n	80010be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	687e      	ldr	r6, [r7, #4]
 800115a:	466d      	mov	r5, sp
 800115c:	f106 0410 	add.w	r4, r6, #16
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001170:	1d33      	adds	r3, r6, #4
 8001172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f003 fbd3 	bl	8004920 <USB_DevInit>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e014      	b.n	80011b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 f98b 	bl	80024c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 fd21 	bl	8005bf6 <USB_DevDisconnect>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_PCD_Start+0x1c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e020      	b.n	800121c <HAL_PCD_Start+0x5e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d109      	bne.n	80011fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fb1e 	bl	8004844 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fcd1 	bl	8005bb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08d      	sub	sp, #52	; 0x34
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fd8f 	bl	8005d5e <USB_GetMode>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 84b7 	bne.w	8001bb6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fcf3 	bl	8005c38 <USB_ReadInterrupts>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 84ad 	beq.w	8001bb4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fce0 	bl	8005c38 <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f002 0202 	and.w	r2, r2, #2
 8001290:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fcce 	bl	8005c38 <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d161      	bne.n	800136a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699a      	ldr	r2, [r3, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0210 	bic.w	r2, r2, #16
 80012b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f003 020f 	and.w	r2, r3, #15
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	0c5b      	lsrs	r3, r3, #17
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d124      	bne.n	800132c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d035      	beq.n	800135a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	6a38      	ldr	r0, [r7, #32]
 8001302:	f004 fb05 	bl	8005910 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001312:	441a      	add	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	6a1a      	ldr	r2, [r3, #32]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001324:	441a      	add	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	621a      	str	r2, [r3, #32]
 800132a:	e016      	b.n	800135a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	0c5b      	lsrs	r3, r3, #17
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	2b06      	cmp	r3, #6
 8001336:	d110      	bne.n	800135a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800133e:	2208      	movs	r2, #8
 8001340:	4619      	mov	r1, r3
 8001342:	6a38      	ldr	r0, [r7, #32]
 8001344:	f004 fae4 	bl	8005910 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001354:	441a      	add	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0210 	orr.w	r2, r2, #16
 8001368:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fc62 	bl	8005c38 <USB_ReadInterrupts>
 8001374:	4603      	mov	r3, r0
 8001376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800137e:	f040 80a7 	bne.w	80014d0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fc67 	bl	8005c5e <USB_ReadDevAllOutEpInterrupt>
 8001390:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001392:	e099      	b.n	80014c8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 808e 	beq.w	80014bc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fc8b 	bl	8005cc6 <USB_ReadDevOutEPInterrupt>
 80013b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2301      	movs	r3, #1
 80013cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 feef 	bl	80021b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00c      	beq.n	80013fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	2308      	movs	r3, #8
 80013f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 ffc5 	bl	8002384 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	015a      	lsls	r2, r3, #5
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	4413      	add	r3, r2
 800140c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001410:	461a      	mov	r2, r3
 8001412:	2310      	movs	r3, #16
 8001414:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d030      	beq.n	8001482 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001428:	2b80      	cmp	r3, #128	; 0x80
 800142a:	d109      	bne.n	8001440 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800143a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	3304      	adds	r3, #4
 8001454:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f007 fa2e 	bl	80088cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147c:	461a      	mov	r2, r3
 800147e:	2302      	movs	r3, #2
 8001480:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001498:	461a      	mov	r2, r3
 800149a:	2320      	movs	r3, #32
 800149c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d009      	beq.n	80014bc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b4:	461a      	mov	r2, r3
 80014b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3301      	adds	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f af62 	bne.w	8001394 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fbaf 	bl	8005c38 <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014e4:	f040 80db 	bne.w	800169e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fbd0 	bl	8005c92 <USB_ReadDevAllInEpInterrupt>
 80014f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014f8:	e0cd      	b.n	8001696 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80c2 	beq.w	800168a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f004 fbf6 	bl	8005d02 <USB_ReadDevInEPInterrupt>
 8001516:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d057      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	2201      	movs	r2, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	69f9      	ldr	r1, [r7, #28]
 800153e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001542:	4013      	ands	r3, r2
 8001544:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001552:	461a      	mov	r2, r3
 8001554:	2301      	movs	r3, #1
 8001556:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d132      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	334c      	adds	r3, #76	; 0x4c
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4403      	add	r3, r0
 8001580:	3348      	adds	r3, #72	; 0x48
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4419      	add	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4403      	add	r3, r0
 8001594:	334c      	adds	r3, #76	; 0x4c
 8001596:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d113      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x3a2>
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3354      	adds	r3, #84	; 0x54
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d108      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015be:	461a      	mov	r2, r3
 80015c0:	2101      	movs	r1, #1
 80015c2:	f004 fbff 	bl	8005dc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f007 f8f8 	bl	80087c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2310      	movs	r3, #16
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	6a38      	ldr	r0, [r7, #32]
 8001634:	f003 fad2 	bl	8004bdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	3338      	adds	r3, #56	; 0x38
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 f945 	bl	80088f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001672:	461a      	mov	r2, r3
 8001674:	2302      	movs	r3, #2
 8001676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fd08 	bl	800209a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f af2e 	bne.w	80014fa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fac8 	bl	8005c38 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b2:	d122      	bne.n	80016fa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016da:	2100      	movs	r1, #0
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 ff13 	bl	8002508 <HAL_PCDEx_LPM_Callback>
 80016e2:	e002      	b.n	80016ea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f007 f8e3 	bl	80088b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fa9a 	bl	8005c38 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800170e:	d112      	bne.n	8001736 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f007 f89f 	bl	8008864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001734:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fa7c 	bl	8005c38 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800174a:	d121      	bne.n	8001790 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800175a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d111      	bne.n	800178a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001780:	2101      	movs	r1, #1
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fec0 	bl	8002508 <HAL_PCDEx_LPM_Callback>
 8001788:	e002      	b.n	8001790 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f007 f86a 	bl	8008864 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f004 fa4f 	bl	8005c38 <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a4:	f040 80b7 	bne.w	8001916 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2110      	movs	r1, #16
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fa0a 	bl	8004bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	e046      	b.n	800185c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	461a      	mov	r2, r3
 8001810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001814:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001826:	0151      	lsls	r1, r2, #5
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	440a      	add	r2, r1
 800182c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	0151      	lsls	r1, r2, #5
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	440a      	add	r2, r1
 800184c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001854:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	3301      	adds	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	429a      	cmp	r2, r3
 8001864:	d3b3      	bcc.n	80017ce <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001874:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001878:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001892:	f043 030b 	orr.w	r3, r3, #11
 8001896:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	e015      	b.n	80018dc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018be:	4619      	mov	r1, r3
 80018c0:	f242 032b 	movw	r3, #8235	; 0x202b
 80018c4:	4313      	orrs	r3, r2
 80018c6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	f043 030b 	orr.w	r3, r3, #11
 80018da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001900:	461a      	mov	r2, r3
 8001902:	f004 fa5f 	bl	8005dc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f98c 	bl	8005c38 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192a:	d124      	bne.n	8001976 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fa23 	bl	8005d7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f9cb 	bl	8004cd6 <USB_GetDevSpeed>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681c      	ldr	r4, [r3, #0]
 800194c:	f001 fd90 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8001950:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	4620      	mov	r0, r4
 800195c:	f002 fed0 	bl	8004700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f006 ff56 	bl	8008812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001974:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 f95c 	bl	8005c38 <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b08      	cmp	r3, #8
 8001988:	d10a      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f006 ff33 	bl	80087f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f002 0208 	and.w	r2, r2, #8
 800199e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 f947 	bl	8005c38 <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b80      	cmp	r3, #128	; 0x80
 80019b2:	d122      	bne.n	80019fa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	e014      	b.n	80019f0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fb27 	bl	8002038 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e5      	bcc.n	80019c6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 f91a 	bl	8005c38 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a0e:	d13b      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e02b      	b.n	8001a6e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	3340      	adds	r3, #64	; 0x40
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d115      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da12      	bge.n	8001a68 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fae8 	bl	8002038 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d3ce      	bcc.n	8001a16 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 f8d3 	bl	8005c38 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9c:	d155      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e045      	b.n	8001b30 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d12e      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001acc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da2b      	bge.n	8001b2a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ade:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d121      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6053      	str	r3, [r2, #4]
            break;
 8001b28:	e007      	b.n	8001b3a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3b4      	bcc.n	8001aa4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 f872 	bl	8005c38 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5e:	d10a      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f006 fed7 	bl	8008914 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f85c 	bl	8005c38 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d115      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f006 fec7 	bl	8008930 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e000      	b.n	8001bb6 <HAL_PCD_IRQHandler+0x992>
      return;
 8001bb4:	bf00      	nop
    }
  }
}
 8001bb6:	3734      	adds	r7, #52	; 0x34
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_PCD_SetAddress+0x1a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e013      	b.n	8001bfe <HAL_PCD_SetAddress+0x42>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 ffba 	bl	8005b68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	4608      	mov	r0, r1
 8001c10:	4611      	mov	r1, r2
 8001c12:	461a      	mov	r2, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	70fb      	strb	r3, [r7, #3]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	803b      	strh	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da0f      	bge.n	8001c4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3338      	adds	r3, #56	; 0x38
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
 8001c4a:	e00f      	b.n	8001c6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 020f 	and.w	r2, r3, #15
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c78:	883a      	ldrh	r2, [r7, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	78ba      	ldrb	r2, [r7, #2]
 8001c82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d102      	bne.n	8001ca2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_EP_Open+0xaa>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e00e      	b.n	8001cce <HAL_PCD_EP_Open+0xc8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 f82e 	bl	8004d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da0f      	bge.n	8001d0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3338      	adds	r3, #56	; 0x38
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	705a      	strb	r2, [r3, #1]
 8001d08:	e00f      	b.n	8001d2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_PCD_EP_Close+0x6e>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e00e      	b.n	8001d62 <HAL_PCD_EP_Close+0x8c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 f86c 	bl	8004e30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	460b      	mov	r3, r1
 8001d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6979      	ldr	r1, [r7, #20]
 8001dde:	f003 fb53 	bl	8005488 <USB_EP0StartXfer>
 8001de2:	e008      	b.n	8001df6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	f003 f8f9 	bl	8004fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	f003 020f 	and.w	r2, r3, #15
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	f003 faf1 	bl	8005488 <USB_EP0StartXfer>
 8001ea6:	e008      	b.n	8001eba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	f003 f897 	bl	8004fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d901      	bls.n	8001ee2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e050      	b.n	8001f84 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00d      	b.n	8001f26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_PCD_EP_SetStall+0x82>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e01e      	b.n	8001f84 <HAL_PCD_EP_SetStall+0xc0>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fd33 	bl	80059c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	b2d9      	uxtb	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f74:	461a      	mov	r2, r3
 8001f76:	f003 ff25 	bl	8005dc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 020f 	and.w	r2, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d901      	bls.n	8001faa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e042      	b.n	8002030 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da0f      	bge.n	8001fd2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3338      	adds	r3, #56	; 0x38
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	705a      	strb	r2, [r3, #1]
 8001fd0:	e00f      	b.n	8001ff2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 020f 	and.w	r2, r3, #15
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_PCD_EP_ClrStall+0x86>
 800200e:	2302      	movs	r3, #2
 8002010:	e00e      	b.n	8002030 <HAL_PCD_EP_ClrStall+0xa4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fd3b 	bl	8005a9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da0c      	bge.n	8002066 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3338      	adds	r3, #56	; 0x38
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e00c      	b.n	8002080 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fb5a 	bl	8005740 <USB_EPStopXfer>
 800208c:	4603      	mov	r3, r0
 800208e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002090:	7afb      	ldrb	r3, [r7, #11]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b08a      	sub	sp, #40	; 0x28
 800209e:	af02      	add	r7, sp, #8
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3338      	adds	r3, #56	; 0x38
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d901      	bls.n	80020d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06c      	b.n	80021ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d902      	bls.n	80020ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3303      	adds	r3, #3
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f6:	e02b      	b.n	8002150 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	429a      	cmp	r2, r3
 800210c:	d902      	bls.n	8002114 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3303      	adds	r3, #3
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800212c:	b2db      	uxtb	r3, r3
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f003 fbae 	bl	8005894 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	b29b      	uxth	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	429a      	cmp	r2, r3
 8002164:	d809      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216e:	429a      	cmp	r2, r3
 8002170:	d203      	bcs.n	800217a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1be      	bne.n	80020f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	429a      	cmp	r2, r3
 8002184:	d811      	bhi.n	80021aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	43db      	mvns	r3, r3
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a6:	4013      	ands	r3, r2
 80021a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	333c      	adds	r3, #60	; 0x3c
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d17b      	bne.n	80022e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a61      	ldr	r2, [pc, #388]	; (800237c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f240 80b9 	bls.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b3 	beq.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002216:	461a      	mov	r2, r3
 8002218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221c:	6093      	str	r3, [r2, #8]
 800221e:	e0a7      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002236:	461a      	mov	r2, r3
 8002238:	2320      	movs	r3, #32
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	e098      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 8093 	bne.w	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d90f      	bls.n	8002272 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e07e      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	440b      	add	r3, r1
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022bc:	461a      	mov	r2, r3
 80022be:	2101      	movs	r1, #1
 80022c0:	f003 fd80 	bl	8005dc4 <USB_EP0_OutStart>
 80022c4:	e006      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	441a      	add	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f006 fa56 	bl	800878c <HAL_PCD_DataOutStageCallback>
 80022e0:	e046      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d124      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e032      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2320      	movs	r3, #32
 8002324:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f006 fa2d 	bl	800878c <HAL_PCD_DataOutStageCallback>
 8002332:	e01d      	b.n	8002370 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <PCD_EP_OutXfrComplete_int+0x1b0>
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f003 fd30 	bl	8005dc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f006 fa0e 	bl	800878c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	4f54300a 	.word	0x4f54300a
 8002380:	4f54310a 	.word	0x4f54310a

08002384 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	333c      	adds	r3, #60	; 0x3c
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <PCD_EP_OutSetupPacket_int+0x88>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d90e      	bls.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f006 f9c5 	bl	8008768 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <PCD_EP_OutSetupPacket_int+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d90c      	bls.n	8002400 <PCD_EP_OutSetupPacket_int+0x7c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023f8:	461a      	mov	r2, r3
 80023fa:	2101      	movs	r1, #1
 80023fc:	f003 fce2 	bl	8005dc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	4f54300a 	.word	0x4f54300a

08002410 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
 800241c:	4613      	mov	r3, r2
 800241e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800242e:	883b      	ldrh	r3, [r7, #0]
 8002430:	0419      	lsls	r1, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	430a      	orrs	r2, r1
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
 800243c:	e028      	b.n	8002490 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e00d      	b.n	800246e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4413      	add	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	3b01      	subs	r3, #1
 8002474:	429a      	cmp	r2, r3
 8002476:	d3ec      	bcc.n	8002452 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	0418      	lsls	r0, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	3b01      	subs	r3, #1
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	4302      	orrs	r2, r0
 8002488:	3340      	adds	r3, #64	; 0x40
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_PCDEx_ActivateLPM+0x44>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	10000003 	.word	0x10000003

08002508 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00a      	beq.n	800254a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e01f      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e01d      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	490f      	ldr	r1, [pc, #60]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800255a:	f7fe f9dd 	bl	8000918 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002560:	e009      	b.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002562:	f7fe f9d9 	bl	8000918 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002570:	d901      	bls.n	8002576 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_PWREx_ConfigSupply+0x70>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d1ee      	bne.n	8002562 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58024800 	.word	0x58024800

08002594 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	58024800 	.word	0x58024800

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f000 bc1d 	b.w	8002e02 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8087 	beq.w	80026e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d6:	4b99      	ldr	r3, [pc, #612]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e0:	4b96      	ldr	r3, [pc, #600]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d007      	beq.n	80025fc <HAL_RCC_OscConfig+0x48>
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	2b18      	cmp	r3, #24
 80025f0:	d110      	bne.n	8002614 <HAL_RCC_OscConfig+0x60>
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d10b      	bne.n	8002614 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d06c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x12e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d168      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e3f6      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x78>
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a86      	ldr	r2, [pc, #536]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e02e      	b.n	800268a <HAL_RCC_OscConfig+0xd6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x9a>
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a80      	ldr	r2, [pc, #512]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7d      	ldr	r2, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e01d      	b.n	800268a <HAL_RCC_OscConfig+0xd6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0xbe>
 8002658:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a77      	ldr	r2, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800265e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a74      	ldr	r2, [pc, #464]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0xd6>
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a71      	ldr	r2, [pc, #452]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d013      	beq.n	80026ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe f941 	bl	8000918 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269a:	f7fe f93d 	bl	8000918 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e3aa      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ac:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0xe6>
 80026b8:	e014      	b.n	80026e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe f92d 	bl	8000918 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c2:	f7fe f929 	bl	8000918 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e396      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x10e>
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80cb 	beq.w	8002888 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4b52      	ldr	r3, [pc, #328]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0x164>
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b18      	cmp	r3, #24
 800270c:	d156      	bne.n	80027bc <HAL_RCC_OscConfig+0x208>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d151      	bne.n	80027bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	4b48      	ldr	r3, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x17c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e368      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 0219 	bic.w	r2, r3, #25
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002742:	f7fe f8e9 	bl	8000918 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe f8e5 	bl	8000918 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e352      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275c:	4b37      	ldr	r3, [pc, #220]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	f7fe f906 	bl	8000978 <HAL_GetREVID>
 800276c:	4603      	mov	r3, r0
 800276e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002772:	4293      	cmp	r3, r2
 8002774:	d817      	bhi.n	80027a6 <HAL_RCC_OscConfig+0x1f2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d108      	bne.n	8002790 <HAL_RCC_OscConfig+0x1dc>
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002786:	4a2d      	ldr	r2, [pc, #180]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278e:	e07b      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	031b      	lsls	r3, r3, #12
 800279e:	4927      	ldr	r1, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	e070      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	061b      	lsls	r3, r3, #24
 80027b4:	4921      	ldr	r1, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ba:	e065      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d048      	beq.n	8002856 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 0219 	bic.w	r2, r3, #25
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	491a      	ldr	r1, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe f89f 	bl	8000918 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe f89b 	bl	8000918 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e308      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x288>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	f7fe f8bc 	bl	8000978 <HAL_GetREVID>
 8002800:	4603      	mov	r3, r0
 8002802:	f241 0203 	movw	r2, #4099	; 0x1003
 8002806:	4293      	cmp	r3, r2
 8002808:	d81a      	bhi.n	8002840 <HAL_RCC_OscConfig+0x28c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x270>
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_RCC_OscConfig+0x288>)
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	6053      	str	r3, [r2, #4]
 8002822:	e031      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	4902      	ldr	r1, [pc, #8]	; (800283c <HAL_RCC_OscConfig+0x288>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	e026      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
 800283a:	bf00      	nop
 800283c:	58024400 	.word	0x58024400
 8002840:	4b9a      	ldr	r3, [pc, #616]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4997      	ldr	r1, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e018      	b.n	8002888 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b95      	ldr	r3, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe f859 	bl	8000918 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe f855 	bl	8000918 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2c2      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a9 	beq.w	80029e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002896:	4b85      	ldr	r3, [pc, #532]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a0:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_OscConfig+0x308>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b18      	cmp	r3, #24
 80028b0:	d13a      	bne.n	8002928 <HAL_RCC_OscConfig+0x374>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d135      	bne.n	8002928 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x320>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e296      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d4:	f7fe f850 	bl	8000978 <HAL_GetREVID>
 80028d8:	4603      	mov	r3, r0
 80028da:	f241 0203 	movw	r2, #4099	; 0x1003
 80028de:	4293      	cmp	r3, r2
 80028e0:	d817      	bhi.n	8002912 <HAL_RCC_OscConfig+0x35e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x348>
 80028ea:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028f2:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fa:	e075      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	069b      	lsls	r3, r3, #26
 800290a:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002910:	e06a      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	4962      	ldr	r1, [pc, #392]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002926:	e05f      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d042      	beq.n	80029b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fd ffec 	bl	8000918 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002944:	f7fd ffe8 	bl	8000918 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e255      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002956:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002962:	f7fe f809 	bl	8000978 <HAL_GetREVID>
 8002966:	4603      	mov	r3, r0
 8002968:	f241 0203 	movw	r2, #4099	; 0x1003
 800296c:	4293      	cmp	r3, r2
 800296e:	d817      	bhi.n	80029a0 <HAL_RCC_OscConfig+0x3ec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	2b20      	cmp	r3, #32
 8002976:	d108      	bne.n	800298a <HAL_RCC_OscConfig+0x3d6>
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
 800298a:	4b48      	ldr	r3, [pc, #288]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	069b      	lsls	r3, r3, #26
 8002998:	4944      	ldr	r1, [pc, #272]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e023      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	493f      	ldr	r1, [pc, #252]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fd ffa9 	bl	8000918 <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029ca:	f7fd ffa5 	bl	8000918 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e212      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d036      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d019      	beq.n	8002a30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fd ff86 	bl	8000918 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fd ff82 	bl	8000918 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1ef      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x45c>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7fd ff6c 	bl	8000918 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fd ff68 	bl	8000918 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1d5      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d039      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a82:	f7fd ff49 	bl	8000918 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a8a:	f7fd ff45 	bl	8000918 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1b2      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4d6>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x52e>
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a9a      	ldr	r2, [pc, #616]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002abc:	f7fd ff2c 	bl	8000918 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ac4:	f7fd ff28 	bl	8000918 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e195      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ad6:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8081 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a8b      	ldr	r2, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afc:	f7fd ff0c 	bl	8000918 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fd ff08 	bl	8000918 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e175      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b16:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_RCC_OscConfig+0x770>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x584>
 8002b2a:	4b7d      	ldr	r3, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e02d      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5a6>
 8002b40:	4b77      	ldr	r3, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b74      	ldr	r3, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c8>
 8002b62:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0x5e0>
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fd febc 	bl	8000918 <HAL_GetTick>
 8002ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fd feb8 	bl	8000918 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e123      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ee      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x5f0>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fd fea6 	bl	8000918 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fd fea2 	bl	8000918 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e10d      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002be6:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8102 	beq.w	8002e00 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bfc:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c04:	2b18      	cmp	r3, #24
 8002c06:	f000 80bd 	beq.w	8002d84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 809e 	bne.w	8002d50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fd fe7a 	bl	8000918 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fd fe76 	bl	8000918 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0e3      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x774>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	4931      	ldr	r1, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	628b      	str	r3, [r1, #40]	; 0x28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	3b01      	subs	r3, #1
 8002c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_OscConfig+0x778>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f023 020c 	bic.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4917      	ldr	r1, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f023 0202 	bic.w	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	4912      	ldr	r1, [pc, #72]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fd fdff 	bl	8000918 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1c:	e011      	b.n	8002d42 <HAL_RCC_OscConfig+0x78e>
 8002d1e:	bf00      	nop
 8002d20:	58024400 	.word	0x58024400
 8002d24:	58024800 	.word	0x58024800
 8002d28:	fffffc0c 	.word	0xfffffc0c
 8002d2c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fd fdf2 	bl	8000918 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e05f      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x77c>
 8002d4e:	e057      	b.n	8002e00 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fd fddc 	bl	8000918 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fd fdd8 	bl	8000918 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e045      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x7b0>
 8002d82:	e03d      	b.n	8002e00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_OscConfig+0x858>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d031      	beq.n	8002dfc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d12a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d122      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d11a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0a5b      	lsrs	r3, r3, #9
 8002dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3730      	adds	r7, #48	; 0x30
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400

08002e10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e19c      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e24:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d910      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b87      	ldr	r3, [pc, #540]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 020f 	bic.w	r2, r3, #15
 8002e3a:	4985      	ldr	r1, [pc, #532]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b83      	ldr	r3, [pc, #524]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e184      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d908      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e70:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4975      	ldr	r1, [pc, #468]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	4b70      	ldr	r3, [pc, #448]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d908      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	496a      	ldr	r1, [pc, #424]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d908      	bls.n	8002ede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ecc:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	495e      	ldr	r1, [pc, #376]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d908      	bls.n	8002f0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002efa:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4953      	ldr	r1, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f023 020f 	bic.w	r2, r3, #15
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4947      	ldr	r1, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d055      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4940      	ldr	r1, [pc, #256]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0f6      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f78:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0ea      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f90:	4b30      	ldr	r3, [pc, #192]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0de      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0d6      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f023 0207 	bic.w	r2, r3, #7
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4925      	ldr	r1, [pc, #148]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fca9 	bl	8000918 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fd fca5 	bl	8000918 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0be      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d1eb      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	429a      	cmp	r2, r3
 800300c:	d208      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x244>)
 800301c:	4313      	orrs	r3, r2
 800301e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d214      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	4906      	ldr	r1, [pc, #24]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_RCC_ClockConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e086      	b.n	800315e <HAL_RCC_ClockConfig+0x34e>
 8003050:	52002000 	.word	0x52002000
 8003054:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003070:	429a      	cmp	r2, r3
 8003072:	d208      	bcs.n	8003086 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4939      	ldr	r1, [pc, #228]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003082:	4313      	orrs	r3, r2
 8003084:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d010      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800309e:	429a      	cmp	r2, r3
 80030a0:	d208      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	492e      	ldr	r1, [pc, #184]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d208      	bcs.n	80030e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4922      	ldr	r1, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d208      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4917      	ldr	r1, [pc, #92]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 800310c:	4313      	orrs	r3, r2
 800310e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003110:	f000 f834 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	4912      	ldr	r1, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x35c>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_RCC_ClockConfig+0x358>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_RCC_ClockConfig+0x35c>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x360>)
 8003146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x364>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x368>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fb96 	bl	8000884 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
 800316c:	0800a1f4 	.word	0x0800a1f4
 8003170:	24000004 	.word	0x24000004
 8003174:	24000000 	.word	0x24000000
 8003178:	24000008 	.word	0x24000008

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003182:	4bb3      	ldr	r3, [pc, #716]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318a:	2b18      	cmp	r3, #24
 800318c:	f200 8155 	bhi.w	800343a <HAL_RCC_GetSysClockFreq+0x2be>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031fd 	.word	0x080031fd
 800319c:	0800343b 	.word	0x0800343b
 80031a0:	0800343b 	.word	0x0800343b
 80031a4:	0800343b 	.word	0x0800343b
 80031a8:	0800343b 	.word	0x0800343b
 80031ac:	0800343b 	.word	0x0800343b
 80031b0:	0800343b 	.word	0x0800343b
 80031b4:	0800343b 	.word	0x0800343b
 80031b8:	08003223 	.word	0x08003223
 80031bc:	0800343b 	.word	0x0800343b
 80031c0:	0800343b 	.word	0x0800343b
 80031c4:	0800343b 	.word	0x0800343b
 80031c8:	0800343b 	.word	0x0800343b
 80031cc:	0800343b 	.word	0x0800343b
 80031d0:	0800343b 	.word	0x0800343b
 80031d4:	0800343b 	.word	0x0800343b
 80031d8:	08003229 	.word	0x08003229
 80031dc:	0800343b 	.word	0x0800343b
 80031e0:	0800343b 	.word	0x0800343b
 80031e4:	0800343b 	.word	0x0800343b
 80031e8:	0800343b 	.word	0x0800343b
 80031ec:	0800343b 	.word	0x0800343b
 80031f0:	0800343b 	.word	0x0800343b
 80031f4:	0800343b 	.word	0x0800343b
 80031f8:	0800322f 	.word	0x0800322f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031fc:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003208:	4b91      	ldr	r3, [pc, #580]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	4a90      	ldr	r2, [pc, #576]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800321a:	e111      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800321c:	4b8d      	ldr	r3, [pc, #564]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321e:	61bb      	str	r3, [r7, #24]
    break;
 8003220:	e10e      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003222:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003224:	61bb      	str	r3, [r7, #24]
    break;
 8003226:	e10b      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003228:	4b8c      	ldr	r3, [pc, #560]	; (800345c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800322a:	61bb      	str	r3, [r7, #24]
    break;
 800322c:	e108      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003238:	4b85      	ldr	r3, [pc, #532]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003242:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003244:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800324e:	4b80      	ldr	r3, [pc, #512]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	08db      	lsrs	r3, r3, #3
 8003254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80e1 	beq.w	8003434 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	f000 8083 	beq.w	8003380 <HAL_RCC_GetSysClockFreq+0x204>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f200 80a1 	bhi.w	80033c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x114>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d056      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x1c0>
 800328e:	e099      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02d      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800329c:	4b6c      	ldr	r3, [pc, #432]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	4a6b      	ldr	r2, [pc, #428]	; (8003454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c6:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032f6:	e087      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003464 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330a:	4b51      	ldr	r3, [pc, #324]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	ed97 6a02 	vldr	s12, [r7, #8]
 800331e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800333a:	e065      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2ec>
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800337e:	e043      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800346c <HAL_RCC_GetSysClockFreq+0x2f0>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033c2:	e021      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003468 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003460 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003406:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	0a5b      	lsrs	r3, r3, #9
 800340e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003412:	3301      	adds	r3, #1
 8003414:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003420:	edd7 6a07 	vldr	s13, [r7, #28]
 8003424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342c:	ee17 3a90 	vmov	r3, s15
 8003430:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003432:	e005      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    break;
 8003438:	e002      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800343c:	61bb      	str	r3, [r7, #24]
    break;
 800343e:	bf00      	nop
  }

  return sysclockfreq;
 8003440:	69bb      	ldr	r3, [r7, #24]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	58024400 	.word	0x58024400
 8003454:	03d09000 	.word	0x03d09000
 8003458:	003d0900 	.word	0x003d0900
 800345c:	00b71b00 	.word	0x00b71b00
 8003460:	46000000 	.word	0x46000000
 8003464:	4c742400 	.word	0x4c742400
 8003468:	4a742400 	.word	0x4a742400
 800346c:	4b371b00 	.word	0x4b371b00

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003476:	f7ff fe81 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800347a:	4602      	mov	r2, r0
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	490f      	ldr	r1, [pc, #60]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003488:	5ccb      	ldrb	r3, [r1, r3]
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	58024400 	.word	0x58024400
 80034c4:	0800a1f4 	.word	0x0800a1f4
 80034c8:	24000004 	.word	0x24000004
 80034cc:	24000000 	.word	0x24000000

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034dc:	2300      	movs	r3, #0
 80034de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034f4:	d02a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034fa:	d824      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003500:	d018      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003506:	d81e      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800350c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003510:	d007      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4ba3      	ldr	r3, [pc, #652]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4aa2      	ldr	r2, [pc, #648]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ff17 	bl	800435c <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 ffc0 	bl	80044c0 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003554:	4b93      	ldr	r3, [pc, #588]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	4990      	ldr	r1, [pc, #576]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	650b      	str	r3, [r1, #80]	; 0x50
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d03d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	2b04      	cmp	r3, #4
 800357e:	d826      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	0800359d 	.word	0x0800359d
 800358c:	080035ab 	.word	0x080035ab
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035d5 	.word	0x080035d5
 8003598:	080035d5 	.word	0x080035d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b81      	ldr	r3, [pc, #516]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a80      	ldr	r2, [pc, #512]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a8:	e015      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fed3 	bl	800435c <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ba:	e00c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 ff7c 	bl	80044c0 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035dc:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	f023 0207 	bic.w	r2, r3, #7
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	496e      	ldr	r1, [pc, #440]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	650b      	str	r3, [r1, #80]	; 0x50
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d042      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d02b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d825      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003610:	2bc0      	cmp	r3, #192	; 0xc0
 8003612:	d028      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003614:	2bc0      	cmp	r3, #192	; 0xc0
 8003616:	d821      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d016      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d81d      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d007      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003628:	e018      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003636:	e017      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fe8c 	bl	800435c <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003648:	e00e      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 ff35 	bl	80044c0 <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800365a:	e005      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	494a      	ldr	r1, [pc, #296]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	650b      	str	r3, [r1, #80]	; 0x50
 8003680:	e001      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368e:	2b00      	cmp	r3, #0
 8003690:	d049      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800369c:	d030      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800369e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a2:	d82a      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036a8:	d02c      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ae:	d824      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b4:	d018      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ba:	d81e      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c4:	d007      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036c6:	e018      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a35      	ldr	r2, [pc, #212]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d4:	e017      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fe3d 	bl	800435c <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036e6:	e00e      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fee6 	bl	80044c0 <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f8:	e005      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	e002      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800371a:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	658b      	str	r3, [r1, #88]	; 0x58
 8003720:	e001      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04b      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373c:	d030      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800373e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003742:	d82a      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003744:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003748:	d02e      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800374a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800374e:	d824      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003754:	d018      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800375a:	d81e      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003766:	e018      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003774:	e019      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fded 	bl	800435c <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003786:	e010      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3324      	adds	r3, #36	; 0x24
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe96 	bl	80044c0 <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003798:	e007      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      break;
 800379e:	e004      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037a0:	bf00      	nop
 80037a2:	e002      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037a4:	58024400 	.word	0x58024400
      break;
 80037a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037b0:	4b99      	ldr	r3, [pc, #612]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037be:	4996      	ldr	r1, [pc, #600]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	658b      	str	r3, [r1, #88]	; 0x58
 80037c4:	e001      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d032      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	2b30      	cmp	r3, #48	; 0x30
 80037dc:	d01c      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d817      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d00c      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d813      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d10f      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4a88      	ldr	r2, [pc, #544]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037fe:	e00e      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2102      	movs	r1, #2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fda8 	bl	800435c <RCCEx_PLL2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003810:	e005      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
      break;
 8003816:	e002      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800381c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003824:	4b7c      	ldr	r3, [pc, #496]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	4979      	ldr	r1, [pc, #484]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003832:	4313      	orrs	r3, r2
 8003834:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d047      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d030      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003856:	d82a      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800385c:	d02c      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800385e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003862:	d824      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003868:	d018      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	d81e      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800387a:	e018      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003888:	e017      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fd63 	bl	800435c <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800389a:	e00e      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fe0c 	bl	80044c0 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ac:	e005      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038c0:	4b55      	ldr	r3, [pc, #340]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	4952      	ldr	r1, [pc, #328]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	650b      	str	r3, [r1, #80]	; 0x50
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d049      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ec:	d02e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f2:	d828      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f8:	d02a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038fe:	d822      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003900:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003904:	d026      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003906:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800390a:	d81c      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800390c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003916:	d816      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d111      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fd17 	bl	800435c <RCCEx_PLL2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003932:	e012      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3324      	adds	r3, #36	; 0x24
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdc0 	bl	80044c0 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003944:	e009      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
      break;
 800394a:	e006      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800394c:	bf00      	nop
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003960:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	492a      	ldr	r1, [pc, #168]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800396e:	4313      	orrs	r3, r2
 8003970:	650b      	str	r3, [r1, #80]	; 0x50
 8003972:	e001      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d04d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800398a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398e:	d02e      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003994:	d828      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d02a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d822      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039a6:	d026      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ac:	d81c      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b2:	d010      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b8:	d816      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01d      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d111      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fcc6 	bl	800435c <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039d4:	e012      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3324      	adds	r3, #36	; 0x24
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fd6f 	bl	80044c0 <RCCEx_PLL3_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039e6:	e009      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
      break;
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ee:	bf00      	nop
 80039f0:	e004      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a10:	4901      	ldr	r1, [pc, #4]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	658b      	str	r3, [r1, #88]	; 0x58
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a34:	d00e      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3a:	d814      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a44:	d10f      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a46:	4baf      	ldr	r3, [pc, #700]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4aae      	ldr	r2, [pc, #696]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a52:	e00c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fc7e 	bl	800435c <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a74:	4ba3      	ldr	r3, [pc, #652]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a80:	49a0      	ldr	r1, [pc, #640]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	650b      	str	r3, [r1, #80]	; 0x50
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d032      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d81b      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003adf 	.word	0x08003adf
 8003aac:	08003ab9 	.word	0x08003ab9
 8003ab0:	08003ac7 	.word	0x08003ac7
 8003ab4:	08003adf 	.word	0x08003adf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab8:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	4a91      	ldr	r2, [pc, #580]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ac4:	e00c      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fc45 	bl	800435c <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
      break;
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ade:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ae6:	4b87      	ldr	r3, [pc, #540]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4984      	ldr	r1, [pc, #528]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003af8:	e001      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8086 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0c:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b18:	f7fc fefe 	bl	8000918 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1e:	e009      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fc fefa 	bl	8000918 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	; 0x64
 8003b2c:	d902      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	75fb      	strb	r3, [r7, #23]
        break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b34:	4b74      	ldr	r3, [pc, #464]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d166      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b46:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b50:	4053      	eors	r3, r2
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d013      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b64:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b70:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a63      	ldr	r2, [pc, #396]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b7c:	4a61      	ldr	r2, [pc, #388]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d115      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fc fec3 	bl	8000918 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b94:	e00b      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fc febf 	bl	8000918 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d902      	bls.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	75fb      	strb	r3, [r7, #23]
            break;
 8003bac:	e005      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bae:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ed      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d126      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d10d      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bde:	0919      	lsrs	r1, r3, #4
 8003be0:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	4947      	ldr	r1, [pc, #284]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]
 8003bea:	e005      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bec:	4b45      	ldr	r3, [pc, #276]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bf6:	6113      	str	r3, [r2, #16]
 8003bf8:	4b42      	ldr	r3, [pc, #264]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	493f      	ldr	r1, [pc, #252]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	670b      	str	r3, [r1, #112]	; 0x70
 8003c0c:	e004      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	75bb      	strb	r3, [r7, #22]
 8003c12:	e001      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8085 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2a:	2b28      	cmp	r3, #40	; 0x28
 8003c2c:	d866      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003d11 	.word	0x08003d11
 8003c38:	08003cfd 	.word	0x08003cfd
 8003c3c:	08003cfd 	.word	0x08003cfd
 8003c40:	08003cfd 	.word	0x08003cfd
 8003c44:	08003cfd 	.word	0x08003cfd
 8003c48:	08003cfd 	.word	0x08003cfd
 8003c4c:	08003cfd 	.word	0x08003cfd
 8003c50:	08003cfd 	.word	0x08003cfd
 8003c54:	08003cd9 	.word	0x08003cd9
 8003c58:	08003cfd 	.word	0x08003cfd
 8003c5c:	08003cfd 	.word	0x08003cfd
 8003c60:	08003cfd 	.word	0x08003cfd
 8003c64:	08003cfd 	.word	0x08003cfd
 8003c68:	08003cfd 	.word	0x08003cfd
 8003c6c:	08003cfd 	.word	0x08003cfd
 8003c70:	08003cfd 	.word	0x08003cfd
 8003c74:	08003ceb 	.word	0x08003ceb
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003cfd 	.word	0x08003cfd
 8003c80:	08003cfd 	.word	0x08003cfd
 8003c84:	08003cfd 	.word	0x08003cfd
 8003c88:	08003cfd 	.word	0x08003cfd
 8003c8c:	08003cfd 	.word	0x08003cfd
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003d11 	.word	0x08003d11
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003cfd 	.word	0x08003cfd
 8003ca0:	08003cfd 	.word	0x08003cfd
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003d11 	.word	0x08003d11
 8003cb8:	08003cfd 	.word	0x08003cfd
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003cfd 	.word	0x08003cfd
 8003cc4:	08003cfd 	.word	0x08003cfd
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003cfd 	.word	0x08003cfd
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d11 	.word	0x08003d11
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fb3c 	bl	800435c <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ce8:	e013      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fbe5 	bl	80044c0 <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	e007      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
 8003d08:	58024800 	.word	0x58024800
 8003d0c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d18:	4b96      	ldr	r3, [pc, #600]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d24:	4993      	ldr	r1, [pc, #588]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	654b      	str	r3, [r1, #84]	; 0x54
 8003d2a:	e001      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d038      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d821      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d8f 	.word	0x08003d8f
 8003d50:	08003d65 	.word	0x08003d65
 8003d54:	08003d77 	.word	0x08003d77
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 faf6 	bl	800435c <RCCEx_PLL2_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d74:	e00c      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3324      	adds	r3, #36	; 0x24
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb9f 	bl	80044c0 <RCCEx_PLL3_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d96:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	4974      	ldr	r1, [pc, #464]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	654b      	str	r3, [r1, #84]	; 0x54
 8003da8:	e001      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d821      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e0f 	.word	0x08003e0f
 8003dd0:	08003de5 	.word	0x08003de5
 8003dd4:	08003df7 	.word	0x08003df7
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003e0f 	.word	0x08003e0f
 8003de0:	08003e0f 	.word	0x08003e0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fab6 	bl	800435c <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003df4:	e00c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fb5f 	bl	80044c0 <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e16:	4b57      	ldr	r3, [pc, #348]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	4953      	ldr	r1, [pc, #332]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	658b      	str	r3, [r1, #88]	; 0x58
 8003e2a:	e001      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d04b      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e46:	d02e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4c:	d828      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	d02a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d822      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e5e:	d026      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e64:	d81c      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e70:	d816      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01d      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e7a:	d111      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fa6a 	bl	800435c <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e8c:	e012      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3324      	adds	r3, #36	; 0x24
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fb13 	bl	80044c0 <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e9e:	e009      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e004      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec8:	492a      	ldr	r1, [pc, #168]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	654b      	str	r3, [r1, #84]	; 0x54
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d04d      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003eea:	d02e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003eec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ef0:	d828      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d02a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d822      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f02:	d026      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f08:	d81c      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	d816      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fa18 	bl	800435c <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f30:	e012      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fac1 	bl	80044c0 <RCCEx_PLL3_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f42:	e009      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6c:	4901      	ldr	r1, [pc, #4]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	658b      	str	r3, [r1, #88]	; 0x58
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d04b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f92:	d02e      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f98:	d828      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9e:	d02a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa4:	d822      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fa6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003faa:	d026      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fb0:	d81c      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb6:	d010      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fbc:	d816      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01d      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d111      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9c4 	bl	800435c <RCCEx_PLL2_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fd8:	e012      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3324      	adds	r3, #36	; 0x24
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fa6d 	bl	80044c0 <RCCEx_PLL3_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fea:	e009      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004006:	4b9d      	ldr	r3, [pc, #628]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004014:	4999      	ldr	r1, [pc, #612]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004016:	4313      	orrs	r3, r2
 8004018:	658b      	str	r3, [r1, #88]	; 0x58
 800401a:	e001      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004036:	d10a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3324      	adds	r3, #36	; 0x24
 800403c:	2102      	movs	r1, #2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fa3e 	bl	80044c0 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800404e:	4b8b      	ldr	r3, [pc, #556]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405c:	4987      	ldr	r1, [pc, #540]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800405e:	4313      	orrs	r3, r2
 8004060:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004078:	d10a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fa1d 	bl	80044c0 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004090:	4b7a      	ldr	r3, [pc, #488]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409e:	4977      	ldr	r1, [pc, #476]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d034      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ba:	d01d      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c0:	d817      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d009      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040cc:	e011      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f941 	bl	800435c <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040de:	e00c      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f9ea 	bl	80044c0 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040f0:	e003      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800410e:	495b      	ldr	r1, [pc, #364]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004110:	4313      	orrs	r3, r2
 8004112:	658b      	str	r3, [r1, #88]	; 0x58
 8004114:	e001      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d033      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004130:	d01c      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004132:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004136:	d816      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413c:	d003      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800413e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004142:	d007      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004144:	e00f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	4a4c      	ldr	r2, [pc, #304]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800414c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004152:	e00c      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3324      	adds	r3, #36	; 0x24
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f9b0 	bl	80044c0 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004164:	e003      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
      break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800416c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004182:	493e      	ldr	r1, [pc, #248]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004184:	4313      	orrs	r3, r2
 8004186:	654b      	str	r3, [r1, #84]	; 0x54
 8004188:	e001      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d029      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d007      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041a8:	e00f      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4a33      	ldr	r2, [pc, #204]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041b6:	e00b      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2102      	movs	r1, #2
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f8cc 	bl	800435c <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041d6:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	4926      	ldr	r1, [pc, #152]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041e8:	e001      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3324      	adds	r3, #36	; 0x24
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f95d 	bl	80044c0 <RCCEx_PLL3_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d033      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004224:	d017      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422a:	d811      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d013      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004236:	d80b      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d106      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800424e:	e007      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800425e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004272:	4902      	ldr	r1, [pc, #8]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004274:	4313      	orrs	r3, r2
 8004276:	654b      	str	r3, [r1, #84]	; 0x54
 8004278:	e004      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	492e      	ldr	r1, [pc, #184]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042bc:	4926      	ldr	r1, [pc, #152]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	491f      	ldr	r1, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042f6:	6113      	str	r3, [r2, #16]
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004302:	4915      	ldr	r1, [pc, #84]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	da08      	bge.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	490e      	ldr	r1, [pc, #56]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431e:	4313      	orrs	r3, r2
 8004320:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800433e:	4313      	orrs	r3, r2
 8004340:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004342:	7dbb      	ldrb	r3, [r7, #22]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400

0800435c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b03      	cmp	r3, #3
 8004374:	d101      	bne.n	800437a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e099      	b.n	80044ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800437a:	4b4f      	ldr	r3, [pc, #316]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a4e      	ldr	r2, [pc, #312]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004386:	f7fc fac7 	bl	8000918 <HAL_GetTick>
 800438a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800438c:	e008      	b.n	80043a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800438e:	f7fc fac3 	bl	8000918 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e086      	b.n	80044ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043a0:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043ac:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	493f      	ldr	r1, [pc, #252]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	628b      	str	r3, [r1, #40]	; 0x28
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	025b      	lsls	r3, r3, #9
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043f0:	4931      	ldr	r1, [pc, #196]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043f6:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	492d      	ldr	r1, [pc, #180]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f023 0220 	bic.w	r2, r3, #32
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	4928      	ldr	r1, [pc, #160]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004420:	f023 0310 	bic.w	r3, r3, #16
 8004424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <RCCEx_PLL2_Config+0x160>)
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	69d2      	ldr	r2, [r2, #28]
 8004432:	00d2      	lsls	r2, r2, #3
 8004434:	4920      	ldr	r1, [pc, #128]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800443a:	4b1f      	ldr	r3, [pc, #124]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004440:	f043 0310 	orr.w	r3, r3, #16
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004458:	e00f      	b.n	800447a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004460:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800446c:	e005      	b.n	800447a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 8004480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004486:	f7fc fa47 	bl	8000918 <HAL_GetTick>
 800448a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800448c:	e008      	b.n	80044a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800448e:	f7fc fa43 	bl	8000918 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
 80044bc:	ffff0007 	.word	0xffff0007

080044c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044ce:	4b53      	ldr	r3, [pc, #332]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d101      	bne.n	80044de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e099      	b.n	8004612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044de:	4b4f      	ldr	r3, [pc, #316]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4e      	ldr	r2, [pc, #312]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ea:	f7fc fa15 	bl	8000918 <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044f0:	e008      	b.n	8004504 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044f2:	f7fc fa11 	bl	8000918 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e086      	b.n	8004612 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004510:	4b42      	ldr	r3, [pc, #264]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	051b      	lsls	r3, r3, #20
 800451e:	493f      	ldr	r1, [pc, #252]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	628b      	str	r3, [r1, #40]	; 0x28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	3b01      	subs	r3, #1
 800452a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	b29b      	uxth	r3, r3
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	3b01      	subs	r3, #1
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004554:	4931      	ldr	r1, [pc, #196]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	492d      	ldr	r1, [pc, #180]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800456c:	4b2b      	ldr	r3, [pc, #172]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4928      	ldr	r1, [pc, #160]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800457e:	4b27      	ldr	r3, [pc, #156]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	4a26      	ldr	r2, [pc, #152]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <RCCEx_PLL3_Config+0x160>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	69d2      	ldr	r2, [r2, #28]
 8004596:	00d2      	lsls	r2, r2, #3
 8004598:	4920      	ldr	r1, [pc, #128]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045bc:	e00f      	b.n	80045de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045d0:	e005      	b.n	80045de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	4a11      	ldr	r2, [pc, #68]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ea:	f7fc f995 	bl	8000918 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045f0:	e008      	b.n	8004604 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045f2:	f7fc f991 	bl	8000918 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <RCCEx_PLL3_Config+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
 8004620:	ffff0007 	.word	0xffff0007

08004624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	f107 001c 	add.w	r0, r7, #28
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	2b01      	cmp	r3, #1
 800463a:	d120      	bne.n	800467e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <USB_CoreInit+0xd4>)
 800464e:	4013      	ands	r3, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 fc04 	bl	8005e80 <USB_CoreReset>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e01a      	b.n	80046b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 fbf8 	bl	8005e80 <USB_CoreReset>
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
 80046a6:	e005      	b.n	80046b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d116      	bne.n	80046e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <USB_CoreInit+0xd8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f043 0206 	orr.w	r2, r3, #6
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f043 0220 	orr.w	r2, r3, #32
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	ffbdffbf 	.word	0xffbdffbf
 80046fc:	03ee0000 	.word	0x03ee0000

08004700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d165      	bne.n	80047e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4a41      	ldr	r2, [pc, #260]	; (800481c <USB_SetTurnaroundTime+0x11c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d906      	bls.n	800472a <USB_SetTurnaroundTime+0x2a>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a40      	ldr	r2, [pc, #256]	; (8004820 <USB_SetTurnaroundTime+0x120>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d202      	bcs.n	800472a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004724:	230f      	movs	r3, #15
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e062      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a3c      	ldr	r2, [pc, #240]	; (8004820 <USB_SetTurnaroundTime+0x120>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d306      	bcc.n	8004740 <USB_SetTurnaroundTime+0x40>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a3b      	ldr	r2, [pc, #236]	; (8004824 <USB_SetTurnaroundTime+0x124>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d202      	bcs.n	8004740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800473a:	230e      	movs	r3, #14
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e057      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a38      	ldr	r2, [pc, #224]	; (8004824 <USB_SetTurnaroundTime+0x124>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d306      	bcc.n	8004756 <USB_SetTurnaroundTime+0x56>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a37      	ldr	r2, [pc, #220]	; (8004828 <USB_SetTurnaroundTime+0x128>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d202      	bcs.n	8004756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004750:	230d      	movs	r3, #13
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e04c      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a33      	ldr	r2, [pc, #204]	; (8004828 <USB_SetTurnaroundTime+0x128>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d306      	bcc.n	800476c <USB_SetTurnaroundTime+0x6c>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a32      	ldr	r2, [pc, #200]	; (800482c <USB_SetTurnaroundTime+0x12c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d802      	bhi.n	800476c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004766:	230c      	movs	r3, #12
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e041      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a2f      	ldr	r2, [pc, #188]	; (800482c <USB_SetTurnaroundTime+0x12c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d906      	bls.n	8004782 <USB_SetTurnaroundTime+0x82>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <USB_SetTurnaroundTime+0x130>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d802      	bhi.n	8004782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800477c:	230b      	movs	r3, #11
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e036      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <USB_SetTurnaroundTime+0x130>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d906      	bls.n	8004798 <USB_SetTurnaroundTime+0x98>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <USB_SetTurnaroundTime+0x134>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d802      	bhi.n	8004798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004792:	230a      	movs	r3, #10
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e02b      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <USB_SetTurnaroundTime+0x134>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d906      	bls.n	80047ae <USB_SetTurnaroundTime+0xae>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a25      	ldr	r2, [pc, #148]	; (8004838 <USB_SetTurnaroundTime+0x138>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d202      	bcs.n	80047ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047a8:	2309      	movs	r3, #9
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e020      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a21      	ldr	r2, [pc, #132]	; (8004838 <USB_SetTurnaroundTime+0x138>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d306      	bcc.n	80047c4 <USB_SetTurnaroundTime+0xc4>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <USB_SetTurnaroundTime+0x13c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d802      	bhi.n	80047c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047be:	2308      	movs	r3, #8
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e015      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	; (800483c <USB_SetTurnaroundTime+0x13c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d906      	bls.n	80047da <USB_SetTurnaroundTime+0xda>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <USB_SetTurnaroundTime+0x140>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d202      	bcs.n	80047da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047d4:	2307      	movs	r3, #7
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e00a      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047da:	2306      	movs	r3, #6
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e007      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047e6:	2309      	movs	r3, #9
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e001      	b.n	80047f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047ec:	2309      	movs	r3, #9
 80047ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	00d8acbf 	.word	0x00d8acbf
 8004820:	00e4e1c0 	.word	0x00e4e1c0
 8004824:	00f42400 	.word	0x00f42400
 8004828:	01067380 	.word	0x01067380
 800482c:	011a499f 	.word	0x011a499f
 8004830:	01312cff 	.word	0x01312cff
 8004834:	014ca43f 	.word	0x014ca43f
 8004838:	016e3600 	.word	0x016e3600
 800483c:	01a6ab1f 	.word	0x01a6ab1f
 8004840:	01e84800 	.word	0x01e84800

08004844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d115      	bne.n	80048d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f7fc f83a 	bl	8000930 <HAL_Delay>
      ms++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f001 fa4b 	bl	8005d5e <USB_GetMode>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d01e      	beq.n	800490c <USB_SetCurrentMode+0x84>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b31      	cmp	r3, #49	; 0x31
 80048d2:	d9f0      	bls.n	80048b6 <USB_SetCurrentMode+0x2e>
 80048d4:	e01a      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fc f821 	bl	8000930 <HAL_Delay>
      ms++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fa32 	bl	8005d5e <USB_GetMode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <USB_SetCurrentMode+0x84>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b31      	cmp	r3, #49	; 0x31
 8004904:	d9f0      	bls.n	80048e8 <USB_SetCurrentMode+0x60>
 8004906:	e001      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e005      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b32      	cmp	r3, #50	; 0x32
 8004910:	d101      	bne.n	8004916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e009      	b.n	8004954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3340      	adds	r3, #64	; 0x40
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3301      	adds	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0e      	cmp	r3, #14
 8004958:	d9f2      	bls.n	8004940 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11c      	bne.n	800499a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496e:	f043 0302 	orr.w	r3, r3, #2
 8004972:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e005      	b.n	80049a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	4619      	mov	r1, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	461a      	mov	r2, r3
 80049c2:	680b      	ldr	r3, [r1, #0]
 80049c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10c      	bne.n	80049e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049d2:	2100      	movs	r1, #0
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f965 	bl	8004ca4 <USB_SetDevSpeed>
 80049da:	e008      	b.n	80049ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049dc:	2101      	movs	r1, #1
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f960 	bl	8004ca4 <USB_SetDevSpeed>
 80049e4:	e003      	b.n	80049ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049e6:	2103      	movs	r1, #3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f95b 	bl	8004ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049ee:	2110      	movs	r1, #16
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8f3 	bl	8004bdc <USB_FlushTxFifo>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f91f 	bl	8004c44 <USB_FlushRxFifo>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e043      	b.n	8004ac2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a50:	d118      	bne.n	8004a84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e013      	b.n	8004a96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e008      	b.n	8004a96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d3b7      	bcc.n	8004a3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e043      	b.n	8004b58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae6:	d118      	bne.n	8004b1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	461a      	mov	r2, r3
 8004afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e013      	b.n	8004b2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e008      	b.n	8004b2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d3b7      	bcc.n	8004ad0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <USB_DevInit+0x2b4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <USB_DevInit+0x2b8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr
 8004bd4:	803c3800 	.word	0x803c3800
 8004bd8:	40000004 	.word	0x40000004

08004bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <USB_FlushTxFifo+0x64>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e01b      	b.n	8004c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	daf2      	bge.n	8004bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	019b      	lsls	r3, r3, #6
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <USB_FlushTxFifo+0x64>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e006      	b.n	8004c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d0f0      	beq.n	8004c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	00030d40 	.word	0x00030d40

08004c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <USB_FlushRxFifo+0x5c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e018      	b.n	8004c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	daf2      	bge.n	8004c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2210      	movs	r2, #16
 8004c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <USB_FlushRxFifo+0x5c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e006      	b.n	8004c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d0f0      	beq.n	8004c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	00030d40 	.word	0x00030d40

08004ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0306 	and.w	r3, r3, #6
 8004cee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
 8004cfa:	e00a      	b.n	8004d12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d002      	beq.n	8004d08 <USB_GetDevSpeed+0x32>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d102      	bne.n	8004d0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	75fb      	strb	r3, [r7, #23]
 8004d0c:	e001      	b.n	8004d12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d0e:	230f      	movs	r3, #15
 8004d10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d139      	bne.n	8004db0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	68f9      	ldr	r1, [r7, #12]
 8004d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d153      	bne.n	8004e1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	059b      	lsls	r3, r3, #22
 8004d96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0159      	lsls	r1, r3, #5
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	4619      	mov	r1, r3
 8004da8:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <USB_ActivateEndpoint+0x10c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	e035      	b.n	8004e1c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	68f9      	ldr	r1, [r7, #12]
 8004dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d119      	bne.n	8004e1c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e04:	430b      	orrs	r3, r1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	0159      	lsls	r1, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	440b      	add	r3, r1
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	4619      	mov	r1, r3
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <USB_ActivateEndpoint+0x10c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	10008000 	.word	0x10008000

08004e30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d161      	bne.n	8004f10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e62:	d11f      	bne.n	8004ea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	2101      	movs	r1, #1
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	0159      	lsls	r1, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	4619      	mov	r1, r3
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <USB_DeactivateEndpoint+0x1b0>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
 8004f0e:	e060      	b.n	8004fd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f26:	d11f      	bne.n	8004f68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4013      	ands	r3, r2
 8004fae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0159      	lsls	r1, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	440b      	add	r3, r1
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <USB_DeactivateEndpoint+0x1b4>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	ec337800 	.word	0xec337800
 8004fe4:	eff37800 	.word	0xeff37800

08004fe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b01      	cmp	r3, #1
 8005006:	f040 8163 	bne.w	80052d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d132      	bne.n	8005078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	440b      	add	r3, r1
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	4619      	mov	r1, r3
 800502e:	4ba5      	ldr	r3, [pc, #660]	; (80052c4 <USB_EPStartXfer+0x2dc>)
 8005030:	4013      	ands	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	0159      	lsls	r1, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	440b      	add	r3, r1
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	4619      	mov	r1, r3
 8005070:	4b95      	ldr	r3, [pc, #596]	; (80052c8 <USB_EPStartXfer+0x2e0>)
 8005072:	4013      	ands	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e074      	b.n	8005162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	0159      	lsls	r1, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	440b      	add	r3, r1
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	4619      	mov	r1, r3
 8005094:	4b8c      	ldr	r3, [pc, #560]	; (80052c8 <USB_EPStartXfer+0x2e0>)
 8005096:	4013      	ands	r3, r2
 8005098:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	0159      	lsls	r1, r3, #5
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	440b      	add	r3, r1
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	4619      	mov	r1, r3
 80050b6:	4b83      	ldr	r3, [pc, #524]	; (80052c4 <USB_EPStartXfer+0x2dc>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	440b      	add	r3, r1
 80050d4:	1e59      	subs	r1, r3, #1
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	fbb1 f3f3 	udiv	r3, r1, r3
 80050de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050e0:	4b7a      	ldr	r3, [pc, #488]	; (80052cc <USB_EPStartXfer+0x2e4>)
 80050e2:	400b      	ands	r3, r1
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	0148      	lsls	r0, r1, #5
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	4401      	add	r1, r0
 80050ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	0148      	lsls	r0, r1, #5
 800510e:	69f9      	ldr	r1, [r7, #28]
 8005110:	4401      	add	r1, r0
 8005112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005116:	4313      	orrs	r3, r2
 8005118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d11f      	bne.n	8005162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d14b      	bne.n	8005200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	791b      	ldrb	r3, [r3, #4]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d128      	bne.n	80051de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d110      	bne.n	80051be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e00f      	b.n	80051de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e137      	b.n	8005470 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800521e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	791b      	ldrb	r3, [r3, #4]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d015      	beq.n	8005254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 811f 	beq.w	8005470 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	69f9      	ldr	r1, [r7, #28]
 800524a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524e:	4313      	orrs	r3, r2
 8005250:	634b      	str	r3, [r1, #52]	; 0x34
 8005252:	e10d      	b.n	8005470 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d110      	bne.n	8005286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e00f      	b.n	80052a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6919      	ldr	r1, [r3, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	b298      	uxth	r0, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	4603      	mov	r3, r0
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 faea 	bl	8005894 <USB_WritePacket>
 80052c0:	e0d6      	b.n	8005470 <USB_EPStartXfer+0x488>
 80052c2:	bf00      	nop
 80052c4:	e007ffff 	.word	0xe007ffff
 80052c8:	fff80000 	.word	0xfff80000
 80052cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	0159      	lsls	r1, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	4619      	mov	r1, r3
 80052ec:	4b63      	ldr	r3, [pc, #396]	; (800547c <USB_EPStartXfer+0x494>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	0159      	lsls	r1, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	440b      	add	r3, r1
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	4619      	mov	r1, r3
 800530e:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <USB_EPStartXfer+0x498>)
 8005310:	4013      	ands	r3, r2
 8005312:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d123      	bne.n	8005364 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	0148      	lsls	r0, r1, #5
 8005336:	69f9      	ldr	r1, [r7, #28]
 8005338:	4401      	add	r1, r0
 800533a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800533e:	4313      	orrs	r3, r2
 8005340:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005360:	6113      	str	r3, [r2, #16]
 8005362:	e037      	b.n	80053d4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4413      	add	r3, r2
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	8afa      	ldrh	r2, [r7, #22]
 8005380:	fb03 f202 	mul.w	r2, r3, r2
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	8afb      	ldrh	r3, [r7, #22]
 8005398:	04d9      	lsls	r1, r3, #19
 800539a:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <USB_EPStartXfer+0x49c>)
 800539c:	400b      	ands	r3, r1
 800539e:	69b9      	ldr	r1, [r7, #24]
 80053a0:	0148      	lsls	r0, r1, #5
 80053a2:	69f9      	ldr	r1, [r7, #28]
 80053a4:	4401      	add	r1, r0
 80053a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053aa:	4313      	orrs	r3, r2
 80053ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c4:	69b9      	ldr	r1, [r7, #24]
 80053c6:	0148      	lsls	r0, r1, #5
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	4401      	add	r1, r0
 80053cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d10d      	bne.n	80053f6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6919      	ldr	r1, [r3, #16]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	460a      	mov	r2, r1
 80053f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d128      	bne.n	8005450 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d110      	bne.n	8005430 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e00f      	b.n	8005450 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800546e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	fff80000 	.word	0xfff80000
 8005480:	e007ffff 	.word	0xe007ffff
 8005484:	1ff80000 	.word	0x1ff80000

08005488 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 80ce 	bne.w	8005646 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d132      	bne.n	8005518 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	0159      	lsls	r1, r3, #5
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	440b      	add	r3, r1
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	4619      	mov	r1, r3
 80054ce:	4b9a      	ldr	r3, [pc, #616]	; (8005738 <USB_EP0StartXfer+0x2b0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	0159      	lsls	r1, r3, #5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	440b      	add	r3, r1
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	4619      	mov	r1, r3
 8005510:	4b8a      	ldr	r3, [pc, #552]	; (800573c <USB_EP0StartXfer+0x2b4>)
 8005512:	4013      	ands	r3, r2
 8005514:	610b      	str	r3, [r1, #16]
 8005516:	e04e      	b.n	80055b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	0159      	lsls	r1, r3, #5
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	440b      	add	r3, r1
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	4619      	mov	r1, r3
 8005534:	4b81      	ldr	r3, [pc, #516]	; (800573c <USB_EP0StartXfer+0x2b4>)
 8005536:	4013      	ands	r3, r2
 8005538:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	0159      	lsls	r1, r3, #5
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	440b      	add	r3, r1
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	4619      	mov	r1, r3
 8005556:	4b78      	ldr	r3, [pc, #480]	; (8005738 <USB_EP0StartXfer+0x2b0>)
 8005558:	4013      	ands	r3, r2
 800555a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d903      	bls.n	8005570 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	6939      	ldr	r1, [r7, #16]
 80055a8:	0148      	lsls	r0, r1, #5
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	4401      	add	r1, r0
 80055ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d11e      	bne.n	80055fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e097      	b.n	800572a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005614:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005618:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8083 	beq.w	800572a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	2101      	movs	r1, #1
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	6979      	ldr	r1, [r7, #20]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4313      	orrs	r3, r2
 8005642:	634b      	str	r3, [r1, #52]	; 0x34
 8005644:	e071      	b.n	800572a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	0159      	lsls	r1, r3, #5
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	440b      	add	r3, r1
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	4619      	mov	r1, r3
 8005662:	4b36      	ldr	r3, [pc, #216]	; (800573c <USB_EP0StartXfer+0x2b4>)
 8005664:	4013      	ands	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	0159      	lsls	r1, r3, #5
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	440b      	add	r3, r1
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	4619      	mov	r1, r3
 8005684:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <USB_EP0StartXfer+0x2b0>)
 8005686:	4013      	ands	r3, r2
 8005688:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d8:	6939      	ldr	r1, [r7, #16]
 80056da:	0148      	lsls	r0, r1, #5
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	4401      	add	r1, r0
 80056e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10d      	bne.n	800570a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6919      	ldr	r1, [r3, #16]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	460a      	mov	r2, r1
 8005708:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e007ffff 	.word	0xe007ffff
 800573c:	fff80000 	.word	0xfff80000

08005740 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d14a      	bne.n	80057f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005776:	f040 8086 	bne.w	8005886 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800579c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d902      	bls.n	80057d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
          break;
 80057d6:	e056      	b.n	8005886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f0:	d0e7      	beq.n	80057c2 <USB_EPStopXfer+0x82>
 80057f2:	e048      	b.n	8005886 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580c:	d13b      	bne.n	8005886 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005830:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	7812      	ldrb	r2, [r2, #0]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005854:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005862:	4293      	cmp	r3, r2
 8005864:	d902      	bls.n	800586c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
          break;
 800586a:	e00c      	b.n	8005886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005884:	d0e7      	beq.n	8005856 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	460b      	mov	r3, r1
 80058a4:	71fb      	strb	r3, [r7, #7]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d123      	bne.n	8005902 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058ba:	88bb      	ldrh	r3, [r7, #4]
 80058bc:	3303      	adds	r3, #3
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e018      	b.n	80058fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	031a      	lsls	r2, r3, #12
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d4:	461a      	mov	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	3301      	adds	r3, #1
 80058e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3301      	adds	r3, #1
 80058ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3301      	adds	r3, #1
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3e2      	bcc.n	80058c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3724      	adds	r7, #36	; 0x24
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005910:	b480      	push	{r7}
 8005912:	b08b      	sub	sp, #44	; 0x2c
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	b29b      	uxth	r3, r3
 800592c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005936:	2300      	movs	r3, #0
 8005938:	623b      	str	r3, [r7, #32]
 800593a:	e014      	b.n	8005966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	601a      	str	r2, [r3, #0]
    pDest++;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	3301      	adds	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	3301      	adds	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	3301      	adds	r3, #1
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	3301      	adds	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	3301      	adds	r3, #1
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	429a      	cmp	r2, r3
 800596c:	d3e6      	bcc.n	800593c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800596e:	8bfb      	ldrh	r3, [r7, #30]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01e      	beq.n	80059b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	461a      	mov	r2, r3
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	701a      	strb	r2, [r3, #0]
      i++;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	3301      	adds	r3, #1
 800599e:	623b      	str	r3, [r7, #32]
      pDest++;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	3301      	adds	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059a6:	8bfb      	ldrh	r3, [r7, #30]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059ac:	8bfb      	ldrh	r3, [r7, #30]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ea      	bne.n	8005988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	372c      	adds	r7, #44	; 0x2c
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12c      	bne.n	8005a36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	db12      	blt.n	8005a14 <USB_EPSetStall+0x54>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00f      	beq.n	8005a14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e02b      	b.n	8005a8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	db12      	blt.n	8005a6e <USB_EPSetStall+0xae>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00f      	beq.n	8005a6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d128      	bne.n	8005b0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ad6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d003      	beq.n	8005ae8 <USB_EPClearStall+0x4c>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d138      	bne.n	8005b5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	e027      	b.n	8005b5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	791b      	ldrb	r3, [r3, #4]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d003      	beq.n	8005b3a <USB_EPClearStall+0x9e>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d10f      	bne.n	8005b5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b9c:	68f9      	ldr	r1, [r7, #12]
 8005b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be2:	f023 0302 	bic.w	r3, r3, #2
 8005be6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c10:	f023 0303 	bic.w	r3, r3, #3
 8005c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c50:	68fb      	ldr	r3, [r7, #12]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	0c1b      	lsrs	r3, r3, #16
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	b29b      	uxth	r3, r3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d50:	68bb      	ldr	r3, [r7, #8]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	4619      	mov	r1, r3
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <USB_ActivateSetup+0x44>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	fffff800 	.word	0xfffff800

08005dc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	333c      	adds	r3, #60	; 0x3c
 8005dda:	3304      	adds	r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <USB_EP0_OutStart+0xb8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d90a      	bls.n	8005dfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df8:	d101      	bne.n	8005dfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e037      	b.n	8005e6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f043 0318 	orr.w	r3, r3, #24
 8005e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10f      	bne.n	8005e6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	4f54300a 	.word	0x4f54300a

08005e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <USB_CoreReset+0x64>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e01b      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	daf2      	bge.n	8005e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <USB_CoreReset+0x64>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d0f0      	beq.n	8005eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	00030d40 	.word	0x00030d40

08005ee8 <fft_start>:
static double range_test;
static uint32_t max_x_test;
static double gap_test;

void fft_start()
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
	arm_cfft_radix4_instance_f32 scfft;
	arm_cfft_radix4_init_f32(&scfft, FFT_LENGTH, 0, 1);
 8005eee:	1d38      	adds	r0, r7, #4
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ef8:	f002 fefa 	bl	8008cf0 <arm_cfft_radix4_init_f32>

	int16_t temp_buf;
    for (int32_t i = 0; i < FFT_LENGTH; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	e03c      	b.n	8005f7c <fft_start+0x94>
    {
        if(i < 600)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005f08:	da24      	bge.n	8005f54 <fft_start+0x6c>
        {
        	temp_buf = UserRxBufferFS[2 * i]|(UserRxBufferFS[2 * i + 1] << 8);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4a26      	ldr	r2, [pc, #152]	; (8005fa8 <fft_start+0xc0>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	b21a      	sxth	r2, r3
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4923      	ldr	r1, [pc, #140]	; (8005fa8 <fft_start+0xc0>)
 8005f1c:	5ccb      	ldrb	r3, [r1, r3]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	837b      	strh	r3, [r7, #26]
            fft_inputbuf[2 * i]     = (float32_t)(temp_buf);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005f2e:	ee07 2a90 	vmov	s15, r2
 8005f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f36:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <fft_start+0xc4>)
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	edc3 7a00 	vstr	s15, [r3]
            fft_inputbuf[2 * i + 1] = 0;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	3301      	adds	r3, #1
 8005f46:	4a19      	ldr	r2, [pc, #100]	; (8005fac <fft_start+0xc4>)
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e010      	b.n	8005f76 <fft_start+0x8e>
        }
        else
        {
            fft_inputbuf[2 * i]     = 0;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <fft_start+0xc4>)
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
            fft_inputbuf[2 * i + 1] = 0;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a10      	ldr	r2, [pc, #64]	; (8005fac <fft_start+0xc4>)
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
    for (int32_t i = 0; i < FFT_LENGTH; i++)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	dbbe      	blt.n	8005f02 <fft_start+0x1a>
        }
    }

    arm_cfft_radix4_f32(&scfft, fft_inputbuf);
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	4909      	ldr	r1, [pc, #36]	; (8005fac <fft_start+0xc4>)
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f003 fa71 	bl	8009470 <arm_cfft_radix4_f32>
    arm_cmplx_mag_f32(fft_inputbuf, fft_outputbuf, FFT_LENGTH);
 8005f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f92:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <fft_start+0xc8>)
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <fft_start+0xc4>)
 8005f96:	f003 fafb 	bl	8009590 <arm_cmplx_mag_f32>

    caculate_range();
 8005f9a:	f000 f839 	bl	8006010 <caculate_range>
}
 8005f9e:	bf00      	nop
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2400c4b0 	.word	0x2400c4b0
 8005fac:	240001b4 	.word	0x240001b4
 8005fb0:	240081b4 	.word	0x240081b4

08005fb4 <find_fft_max>:

uint32_t find_fft_max()
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
	float32_t max = 0;
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
	uint32_t  max_x;
	for (int32_t i = 0; i < FFT_LENGTH/2; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	e017      	b.n	8005ff6 <find_fft_max+0x42>
	{
		if(max < fft_outputbuf[i])
 8005fc6:	4a11      	ldr	r2, [pc, #68]	; (800600c <find_fft_max+0x58>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	edd3 7a00 	vldr	s15, [r3]
 8005fd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fde:	d507      	bpl.n	8005ff0 <find_fft_max+0x3c>
		{
			max = fft_outputbuf[i];
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	; (800600c <find_fft_max+0x58>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
			max_x = i;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60bb      	str	r3, [r7, #8]
	for (int32_t i = 0; i < FFT_LENGTH/2; i++)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	dbe3      	blt.n	8005fc6 <find_fft_max+0x12>
		}
	}
	return max_x;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	240081b4 	.word	0x240081b4

08006010 <caculate_range>:

double caculate_range()
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
	uint32_t max_x = find_fft_max();
 8006016:	f7ff ffcd 	bl	8005fb4 <find_fft_max>
 800601a:	60f8      	str	r0, [r7, #12]
	max_x_test = max_x;
 800601c:	4a27      	ldr	r2, [pc, #156]	; (80060bc <caculate_range+0xac>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6013      	str	r3, [r2, #0]
	gap_test = gap;
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <caculate_range+0xb0>)
 8006024:	ed93 5b00 	vldr	d5, [r3]
 8006028:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <caculate_range+0xb4>)
 800602a:	ed93 7b00 	vldr	d7, [r3]
 800602e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006032:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <caculate_range+0xb8>)
 8006034:	ed93 7b00 	vldr	d7, [r3]
 8006038:	ee26 6b07 	vmul.f64	d6, d6, d7
 800603c:	4b23      	ldr	r3, [pc, #140]	; (80060cc <caculate_range+0xbc>)
 800603e:	ed93 7b00 	vldr	d7, [r3]
 8006042:	ee26 5b07 	vmul.f64	d5, d6, d7
 8006046:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <caculate_range+0xc0>)
 8006048:	ed93 7b00 	vldr	d7, [r3]
 800604c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8006050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006054:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <caculate_range+0xc4>)
 8006056:	ed83 7b00 	vstr	d7, [r3]
	double range = (max_x * gap);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <caculate_range+0xb0>)
 8006066:	ed93 4b00 	vldr	d4, [r3]
 800606a:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <caculate_range+0xb4>)
 800606c:	ed93 7b00 	vldr	d7, [r3]
 8006070:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8006074:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <caculate_range+0xb8>)
 8006076:	ed93 7b00 	vldr	d7, [r3]
 800607a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800607e:	4b13      	ldr	r3, [pc, #76]	; (80060cc <caculate_range+0xbc>)
 8006080:	ed93 7b00 	vldr	d7, [r3]
 8006084:	ee25 4b07 	vmul.f64	d4, d5, d7
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <caculate_range+0xc0>)
 800608a:	ed93 7b00 	vldr	d7, [r3]
 800608e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8006092:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8006096:	ee26 7b07 	vmul.f64	d7, d6, d7
 800609a:	ed87 7b00 	vstr	d7, [r7]
	range_test = range;
 800609e:	490e      	ldr	r1, [pc, #56]	; (80060d8 <caculate_range+0xc8>)
 80060a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a4:	e9c1 2300 	strd	r2, r3, [r1]
	return range;
 80060a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80060b0:	eeb0 0b47 	vmov.f64	d0, d7
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	2400c1c0 	.word	0x2400c1c0
 80060c0:	24000010 	.word	0x24000010
 80060c4:	24000018 	.word	0x24000018
 80060c8:	24000020 	.word	0x24000020
 80060cc:	24000030 	.word	0x24000030
 80060d0:	24000028 	.word	0x24000028
 80060d4:	2400c1c8 	.word	0x2400c1c8
 80060d8:	2400c1b8 	.word	0x2400c1b8

080060dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060ec:	f002 fdbc 	bl	8008c68 <USBD_static_malloc>
 80060f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32b0      	adds	r2, #176	; 0xb0
 8006102:	2100      	movs	r1, #0
 8006104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006108:	2302      	movs	r3, #2
 800610a:	e0d4      	b.n	80062b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800610c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006110:	2100      	movs	r1, #0
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f003 fb98 	bl	8009848 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32b0      	adds	r2, #176	; 0xb0
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	32b0      	adds	r2, #176	; 0xb0
 8006132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7c1b      	ldrb	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d138      	bne.n	80061b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006144:	4b5e      	ldr	r3, [pc, #376]	; (80062c0 <USBD_CDC_Init+0x1e4>)
 8006146:	7819      	ldrb	r1, [r3, #0]
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	2202      	movs	r2, #2
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 fc67 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006154:	4b5a      	ldr	r3, [pc, #360]	; (80062c0 <USBD_CDC_Init+0x1e4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	2201      	movs	r2, #1
 800616c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800616e:	4b55      	ldr	r3, [pc, #340]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 8006170:	7819      	ldrb	r1, [r3, #0]
 8006172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006176:	2202      	movs	r2, #2
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f002 fc52 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800617e:	4b51      	ldr	r3, [pc, #324]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006196:	2201      	movs	r2, #1
 8006198:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800619a:	4b4b      	ldr	r3, [pc, #300]	; (80062c8 <USBD_CDC_Init+0x1ec>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	3326      	adds	r3, #38	; 0x26
 80061b0:	2210      	movs	r2, #16
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e035      	b.n	8006222 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061b6:	4b42      	ldr	r3, [pc, #264]	; (80062c0 <USBD_CDC_Init+0x1e4>)
 80061b8:	7819      	ldrb	r1, [r3, #0]
 80061ba:	2340      	movs	r3, #64	; 0x40
 80061bc:	2202      	movs	r2, #2
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f002 fc2f 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061c4:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <USBD_CDC_Init+0x1e4>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2201      	movs	r2, #1
 80061dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061de:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 80061e0:	7819      	ldrb	r1, [r3, #0]
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	2202      	movs	r2, #2
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f002 fc1b 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061ec:	4b35      	ldr	r3, [pc, #212]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006204:	2201      	movs	r2, #1
 8006206:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <USBD_CDC_Init+0x1ec>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3326      	adds	r3, #38	; 0x26
 800621e:	2210      	movs	r2, #16
 8006220:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <USBD_CDC_Init+0x1ec>)
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	2308      	movs	r3, #8
 8006228:	2203      	movs	r2, #3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f002 fbf9 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006230:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <USBD_CDC_Init+0x1ec>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 020f 	and.w	r2, r3, #15
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	3324      	adds	r3, #36	; 0x24
 8006246:	2201      	movs	r2, #1
 8006248:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	33b0      	adds	r3, #176	; 0xb0
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006280:	2302      	movs	r3, #2
 8006282:	e018      	b.n	80062b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	7c1b      	ldrb	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 800628e:	7819      	ldrb	r1, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f002 fcb0 	bl	8008c00 <USBD_LL_PrepareReceive>
 80062a0:	e008      	b.n	80062b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062a2:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <USBD_CDC_Init+0x1e8>)
 80062a4:	7819      	ldrb	r1, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ac:	2340      	movs	r3, #64	; 0x40
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f002 fca6 	bl	8008c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	240000bf 	.word	0x240000bf
 80062c4:	240000c0 	.word	0x240000c0
 80062c8:	240000c1 	.word	0x240000c1

080062cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062d8:	4b3a      	ldr	r3, [pc, #232]	; (80063c4 <USBD_CDC_DeInit+0xf8>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 fbc5 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80062e4:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <USBD_CDC_DeInit+0xf8>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	3324      	adds	r3, #36	; 0x24
 80062fa:	2200      	movs	r2, #0
 80062fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <USBD_CDC_DeInit+0xfc>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 fbb2 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <USBD_CDC_DeInit+0xfc>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006322:	2200      	movs	r2, #0
 8006324:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006326:	4b29      	ldr	r3, [pc, #164]	; (80063cc <USBD_CDC_DeInit+0x100>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f002 fb9e 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <USBD_CDC_DeInit+0x100>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	2200      	movs	r2, #0
 800634a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <USBD_CDC_DeInit+0x100>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3326      	adds	r3, #38	; 0x26
 8006362:	2200      	movs	r2, #0
 8006364:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	32b0      	adds	r2, #176	; 0xb0
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01f      	beq.n	80063b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	33b0      	adds	r3, #176	; 0xb0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	32b0      	adds	r2, #176	; 0xb0
 8006396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639a:	4618      	mov	r0, r3
 800639c:	f002 fc72 	bl	8008c84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	32b0      	adds	r2, #176	; 0xb0
 80063aa:	2100      	movs	r1, #0
 80063ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	240000bf 	.word	0x240000bf
 80063c8:	240000c0 	.word	0x240000c0
 80063cc:	240000c1 	.word	0x240000c1

080063d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	32b0      	adds	r2, #176	; 0xb0
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0bf      	b.n	8006580 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006408:	2b00      	cmp	r3, #0
 800640a:	d050      	beq.n	80064ae <USBD_CDC_Setup+0xde>
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 80af 	bne.w	8006570 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	88db      	ldrh	r3, [r3, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d03a      	beq.n	8006490 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b25b      	sxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	da1b      	bge.n	800645c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	33b0      	adds	r3, #176	; 0xb0
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800643a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	88d2      	ldrh	r2, [r2, #6]
 8006440:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	2b07      	cmp	r3, #7
 8006448:	bf28      	it	cs
 800644a:	2307      	movcs	r3, #7
 800644c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	89fa      	ldrh	r2, [r7, #14]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fd89 	bl	8007f6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800645a:	e090      	b.n	800657e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785a      	ldrb	r2, [r3, #1]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	2b3f      	cmp	r3, #63	; 0x3f
 800646c:	d803      	bhi.n	8006476 <USBD_CDC_Setup+0xa6>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	88db      	ldrh	r3, [r3, #6]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	e000      	b.n	8006478 <USBD_CDC_Setup+0xa8>
 8006476:	2240      	movs	r2, #64	; 0x40
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800647e:	6939      	ldr	r1, [r7, #16]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006486:	461a      	mov	r2, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fd9b 	bl	8007fc4 <USBD_CtlPrepareRx>
      break;
 800648e:	e076      	b.n	800657e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	33b0      	adds	r3, #176	; 0xb0
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	7850      	ldrb	r0, [r2, #1]
 80064a6:	2200      	movs	r2, #0
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	4798      	blx	r3
      break;
 80064ac:	e067      	b.n	800657e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b0b      	cmp	r3, #11
 80064b4:	d851      	bhi.n	800655a <USBD_CDC_Setup+0x18a>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <USBD_CDC_Setup+0xec>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	08006569 	.word	0x08006569
 80064c4:	0800655b 	.word	0x0800655b
 80064c8:	0800655b 	.word	0x0800655b
 80064cc:	0800655b 	.word	0x0800655b
 80064d0:	0800655b 	.word	0x0800655b
 80064d4:	0800655b 	.word	0x0800655b
 80064d8:	0800655b 	.word	0x0800655b
 80064dc:	0800655b 	.word	0x0800655b
 80064e0:	0800655b 	.word	0x0800655b
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006541 	.word	0x08006541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d107      	bne.n	8006508 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064f8:	f107 030a 	add.w	r3, r7, #10
 80064fc:	2202      	movs	r2, #2
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fd33 	bl	8007f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006506:	e032      	b.n	800656e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fcbd 	bl	8007e8a <USBD_CtlError>
            ret = USBD_FAIL;
 8006510:	2303      	movs	r3, #3
 8006512:	75fb      	strb	r3, [r7, #23]
          break;
 8006514:	e02b      	b.n	800656e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d107      	bne.n	8006532 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006522:	f107 030d 	add.w	r3, r7, #13
 8006526:	2201      	movs	r2, #1
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fd1e 	bl	8007f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006530:	e01d      	b.n	800656e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fca8 	bl	8007e8a <USBD_CtlError>
            ret = USBD_FAIL;
 800653a:	2303      	movs	r3, #3
 800653c:	75fb      	strb	r3, [r7, #23]
          break;
 800653e:	e016      	b.n	800656e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b03      	cmp	r3, #3
 800654a:	d00f      	beq.n	800656c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fc9b 	bl	8007e8a <USBD_CtlError>
            ret = USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006558:	e008      	b.n	800656c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fc94 	bl	8007e8a <USBD_CtlError>
          ret = USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	75fb      	strb	r3, [r7, #23]
          break;
 8006566:	e002      	b.n	800656e <USBD_CDC_Setup+0x19e>
          break;
 8006568:	bf00      	nop
 800656a:	e008      	b.n	800657e <USBD_CDC_Setup+0x1ae>
          break;
 800656c:	bf00      	nop
      }
      break;
 800656e:	e006      	b.n	800657e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fc89 	bl	8007e8a <USBD_CtlError>
      ret = USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	bf00      	nop
  }

  return (uint8_t)ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800659a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	32b0      	adds	r2, #176	; 0xb0
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e065      	b.n	800667e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	32b0      	adds	r2, #176	; 0xb0
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3318      	adds	r3, #24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d02f      	beq.n	800663c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	3318      	adds	r3, #24
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 010f 	and.w	r1, r3, #15
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	460b      	mov	r3, r1
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4403      	add	r3, r0
 8006604:	3348      	adds	r3, #72	; 0x48
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	fbb2 f1f3 	udiv	r1, r2, r3
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006612:	2b00      	cmp	r3, #0
 8006614:	d112      	bne.n	800663c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3318      	adds	r3, #24
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800662e:	78f9      	ldrb	r1, [r7, #3]
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fac2 	bl	8008bbe <USBD_LL_Transmit>
 800663a:	e01f      	b.n	800667c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	33b0      	adds	r3, #176	; 0xb0
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	33b0      	adds	r3, #176	; 0xb0
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	32b0      	adds	r2, #176	; 0xb0
 800669c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32b0      	adds	r2, #176	; 0xb0
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01a      	b.n	80066ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f002 fac0 	bl	8008c42 <USBD_LL_GetRxDataSize>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	33b0      	adds	r3, #176	; 0xb0
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066e8:	4611      	mov	r1, r2
 80066ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	32b0      	adds	r2, #176	; 0xb0
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	e025      	b.n	8006764 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	33b0      	adds	r3, #176	; 0xb0
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01a      	beq.n	8006762 <USBD_CDC_EP0_RxReady+0x6c>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006732:	2bff      	cmp	r3, #255	; 0xff
 8006734:	d015      	beq.n	8006762 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	33b0      	adds	r3, #176	; 0xb0
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800674e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006756:	b292      	uxth	r2, r2
 8006758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	22ff      	movs	r2, #255	; 0xff
 800675e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006774:	2182      	movs	r1, #130	; 0x82
 8006776:	4818      	ldr	r0, [pc, #96]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006778:	f000 fd4f 	bl	800721a <USBD_GetEpDesc>
 800677c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800677e:	2101      	movs	r1, #1
 8006780:	4815      	ldr	r0, [pc, #84]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006782:	f000 fd4a 	bl	800721a <USBD_GetEpDesc>
 8006786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006788:	2181      	movs	r1, #129	; 0x81
 800678a:	4813      	ldr	r0, [pc, #76]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800678c:	f000 fd45 	bl	800721a <USBD_GetEpDesc>
 8006790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2210      	movs	r2, #16
 800679c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ac:	711a      	strb	r2, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c0:	711a      	strb	r2, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2243      	movs	r2, #67	; 0x43
 80067ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	2400007c 	.word	0x2400007c

080067dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067e4:	2182      	movs	r1, #130	; 0x82
 80067e6:	4818      	ldr	r0, [pc, #96]	; (8006848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067e8:	f000 fd17 	bl	800721a <USBD_GetEpDesc>
 80067ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067ee:	2101      	movs	r1, #1
 80067f0:	4815      	ldr	r0, [pc, #84]	; (8006848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067f2:	f000 fd12 	bl	800721a <USBD_GetEpDesc>
 80067f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067f8:	2181      	movs	r1, #129	; 0x81
 80067fa:	4813      	ldr	r0, [pc, #76]	; (8006848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067fc:	f000 fd0d 	bl	800721a <USBD_GetEpDesc>
 8006800:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2210      	movs	r2, #16
 800680c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2200      	movs	r2, #0
 8006818:	711a      	strb	r2, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f042 0202 	orr.w	r2, r2, #2
 8006820:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d006      	beq.n	8006836 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	711a      	strb	r2, [r3, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f042 0202 	orr.w	r2, r2, #2
 8006834:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2243      	movs	r2, #67	; 0x43
 800683a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	2400007c 	.word	0x2400007c

0800684c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006854:	2182      	movs	r1, #130	; 0x82
 8006856:	4818      	ldr	r0, [pc, #96]	; (80068b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006858:	f000 fcdf 	bl	800721a <USBD_GetEpDesc>
 800685c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800685e:	2101      	movs	r1, #1
 8006860:	4815      	ldr	r0, [pc, #84]	; (80068b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006862:	f000 fcda 	bl	800721a <USBD_GetEpDesc>
 8006866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006868:	2181      	movs	r1, #129	; 0x81
 800686a:	4813      	ldr	r0, [pc, #76]	; (80068b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800686c:	f000 fcd5 	bl	800721a <USBD_GetEpDesc>
 8006870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2210      	movs	r2, #16
 800687c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2200      	movs	r2, #0
 8006888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688c:	711a      	strb	r2, [r3, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068a0:	711a      	strb	r2, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2243      	movs	r2, #67	; 0x43
 80068aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2400007c 	.word	0x2400007c

080068bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	220a      	movs	r2, #10
 80068c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	24000038 	.word	0x24000038

080068dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e009      	b.n	8006904 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	33b0      	adds	r3, #176	; 0xb0
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	32b0      	adds	r2, #176	; 0xb0
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006932:	2303      	movs	r3, #3
 8006934:	e008      	b.n	8006948 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	e004      	b.n	8006982 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	32b0      	adds	r2, #176	; 0xb0
 80069a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	32b0      	adds	r2, #176	; 0xb0
 80069b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	e025      	b.n	8006a0e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11f      	bne.n	8006a0c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <USBD_CDC_TransmitPacket+0x88>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4403      	add	r3, r0
 80069ee:	3318      	adds	r3, #24
 80069f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <USBD_CDC_TransmitPacket+0x88>)
 80069f4:	7819      	ldrb	r1, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 f8db 	bl	8008bbe <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	240000bf 	.word	0x240000bf

08006a1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32b0      	adds	r2, #176	; 0xb0
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32b0      	adds	r2, #176	; 0xb0
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e018      	b.n	8006a7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7c1b      	ldrb	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <USBD_CDC_ReceivePacket+0x68>)
 8006a54:	7819      	ldrb	r1, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f002 f8cd 	bl	8008c00 <USBD_LL_PrepareReceive>
 8006a66:	e008      	b.n	8006a7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <USBD_CDC_ReceivePacket+0x68>)
 8006a6a:	7819      	ldrb	r1, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 f8c3 	bl	8008c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	240000c0 	.word	0x240000c0

08006a88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e01f      	b.n	8006ae0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	79fa      	ldrb	r2, [r7, #7]
 8006ad2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 ff39 	bl	800894c <USBD_LL_Init>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e025      	b.n	8006b4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32ae      	adds	r2, #174	; 0xae
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00f      	beq.n	8006b3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	32ae      	adds	r2, #174	; 0xae
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f107 020e 	add.w	r2, r7, #14
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	4602      	mov	r2, r0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 ff45 	bl	80089ec <USBD_LL_Start>
 8006b62:	4603      	mov	r3, r0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f908 	bl	8007e16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d01a      	beq.n	8006c60 <USBD_LL_SetupStage+0x72>
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d822      	bhi.n	8006c74 <USBD_LL_SetupStage+0x86>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <USBD_LL_SetupStage+0x4a>
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d00a      	beq.n	8006c4c <USBD_LL_SetupStage+0x5e>
 8006c36:	e01d      	b.n	8006c74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fb5f 	bl	8007304 <USBD_StdDevReq>
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
      break;
 8006c4a:	e020      	b.n	8006c8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fbc7 	bl	80073e8 <USBD_StdItfReq>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c5e:	e016      	b.n	8006c8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fc29 	bl	80074c0 <USBD_StdEPReq>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]
      break;
 8006c72:	e00c      	b.n	8006c8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 ff12 	bl	8008aac <USBD_LL_StallEP>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8c:	bf00      	nop
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d16e      	bne.n	8006d8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	f040 8098 	bne.w	8006df4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d913      	bls.n	8006cf8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	bf28      	it	cs
 8006cea:	4613      	movcs	r3, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f001 f984 	bl	8007ffe <USBD_CtlContinueRx>
 8006cf6:	e07d      	b.n	8006df4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d014      	beq.n	8006d30 <USBD_LL_DataOutStage+0x98>
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d81d      	bhi.n	8006d46 <USBD_LL_DataOutStage+0xae>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <USBD_LL_DataOutStage+0x7c>
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d003      	beq.n	8006d1a <USBD_LL_DataOutStage+0x82>
 8006d12:	e018      	b.n	8006d46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	75bb      	strb	r3, [r7, #22]
            break;
 8006d18:	e018      	b.n	8006d4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fa5e 	bl	80071e6 <USBD_CoreFindIF>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006d2e:	e00d      	b.n	8006d4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fa60 	bl	8007200 <USBD_CoreFindEP>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75bb      	strb	r3, [r7, #22]
            break;
 8006d44:	e002      	b.n	8006d4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75bb      	strb	r3, [r7, #22]
            break;
 8006d4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d4c:	7dbb      	ldrb	r3, [r7, #22]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d119      	bne.n	8006d86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d113      	bne.n	8006d86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d5e:	7dba      	ldrb	r2, [r7, #22]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	32ae      	adds	r2, #174	; 0xae
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d6e:	7dba      	ldrb	r2, [r7, #22]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d76:	7dba      	ldrb	r2, [r7, #22]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	32ae      	adds	r2, #174	; 0xae
 8006d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f001 f94a 	bl	8008020 <USBD_CtlSendStatus>
 8006d8c:	e032      	b.n	8006df4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d8e:	7afb      	ldrb	r3, [r7, #11]
 8006d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4619      	mov	r1, r3
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fa31 	bl	8007200 <USBD_CoreFindEP>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
 8006da4:	2bff      	cmp	r3, #255	; 0xff
 8006da6:	d025      	beq.n	8006df4 <USBD_LL_DataOutStage+0x15c>
 8006da8:	7dbb      	ldrb	r3, [r7, #22]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d122      	bne.n	8006df4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d117      	bne.n	8006dea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006dba:	7dba      	ldrb	r2, [r7, #22]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	32ae      	adds	r2, #174	; 0xae
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00f      	beq.n	8006dea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006dca:	7dba      	ldrb	r2, [r7, #22]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006dd2:	7dba      	ldrb	r2, [r7, #22]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	32ae      	adds	r2, #174	; 0xae
 8006dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	7afa      	ldrb	r2, [r7, #11]
 8006de0:	4611      	mov	r1, r2
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	e000      	b.n	8006df6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	460b      	mov	r3, r1
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d16f      	bne.n	8006ef2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3314      	adds	r3, #20
 8006e16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d15a      	bne.n	8006ed8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d914      	bls.n	8006e58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f001 f8ac 	bl	8007fa2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f001 fed5 	bl	8008c00 <USBD_LL_PrepareReceive>
 8006e56:	e03f      	b.n	8006ed8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d11c      	bne.n	8006e9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d316      	bcc.n	8006e9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d20f      	bcs.n	8006e9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f001 f88d 	bl	8007fa2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f001 feb2 	bl	8008c00 <USBD_LL_PrepareReceive>
 8006e9c:	e01c      	b.n	8006ed8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d10f      	bne.n	8006eca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 fded 	bl	8008aac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 f8b7 	bl	8008046 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d03a      	beq.n	8006f58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fe42 	bl	8006b6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ef0:	e032      	b.n	8006f58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f97f 	bl	8007200 <USBD_CoreFindEP>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2bff      	cmp	r3, #255	; 0xff
 8006f0a:	d025      	beq.n	8006f58 <USBD_LL_DataInStage+0x15a>
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d122      	bne.n	8006f58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d11c      	bne.n	8006f58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f1e:	7dfa      	ldrb	r2, [r7, #23]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	32ae      	adds	r2, #174	; 0xae
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f2e:	7dfa      	ldrb	r2, [r7, #23]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f36:	7dfa      	ldrb	r2, [r7, #23]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	32ae      	adds	r2, #174	; 0xae
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	7afa      	ldrb	r2, [r7, #11]
 8006f44:	4611      	mov	r1, r2
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f4e:	7dbb      	ldrb	r3, [r7, #22]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f54:	7dbb      	ldrb	r3, [r7, #22]
 8006f56:	e000      	b.n	8006f5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d014      	beq.n	8006fc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	4611      	mov	r1, r2
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fc8:	2340      	movs	r3, #64	; 0x40
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fd27 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2240      	movs	r2, #64	; 0x40
 8006fe0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2180      	movs	r1, #128	; 0x80
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fd19 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2240      	movs	r2, #64	; 0x40
 8006ffa:	621a      	str	r2, [r3, #32]

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b04      	cmp	r3, #4
 8007064:	d106      	bne.n	8007074 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d110      	bne.n	80070b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	32ae      	adds	r2, #174	; 0xae
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e01c      	b.n	800711e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d115      	bne.n	800711c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32ae      	adds	r2, #174	; 0xae
 80070fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	; 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	32ae      	adds	r2, #174	; 0xae
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e01c      	b.n	8007182 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b03      	cmp	r3, #3
 8007152:	d115      	bne.n	8007180 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	32ae      	adds	r2, #174	; 0xae
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32ae      	adds	r2, #174	; 0xae
 8007172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	4611      	mov	r1, r2
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00e      	beq.n	80071dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6852      	ldr	r2, [r2, #4]
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	4611      	mov	r1, r2
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800720c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	885b      	ldrh	r3, [r3, #2]
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	429a      	cmp	r2, r3
 8007240:	d920      	bls.n	8007284 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800724a:	e013      	b.n	8007274 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800724c:	f107 030a 	add.w	r3, r7, #10
 8007250:	4619      	mov	r1, r3
 8007252:	6978      	ldr	r0, [r7, #20]
 8007254:	f000 f81b 	bl	800728e <USBD_GetNextDesc>
 8007258:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b05      	cmp	r3, #5
 8007260:	d108      	bne.n	8007274 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	429a      	cmp	r2, r3
 800726e:	d008      	beq.n	8007282 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	885b      	ldrh	r3, [r3, #2]
 8007278:	b29a      	uxth	r2, r3
 800727a:	897b      	ldrh	r3, [r7, #10]
 800727c:	429a      	cmp	r2, r3
 800727e:	d8e5      	bhi.n	800724c <USBD_GetEpDesc+0x32>
 8007280:	e000      	b.n	8007284 <USBD_GetEpDesc+0x6a>
          break;
 8007282:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007284:	693b      	ldr	r3, [r7, #16]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	881a      	ldrh	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3301      	adds	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072e6:	8a3b      	ldrh	r3, [r7, #16]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072f6:	89fb      	ldrh	r3, [r7, #14]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d005      	beq.n	800732a <USBD_StdDevReq+0x26>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d857      	bhi.n	80073d2 <USBD_StdDevReq+0xce>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00f      	beq.n	8007346 <USBD_StdDevReq+0x42>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d153      	bne.n	80073d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32ae      	adds	r2, #174	; 0xae
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e04a      	b.n	80073dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b09      	cmp	r3, #9
 800734c:	d83b      	bhi.n	80073c6 <USBD_StdDevReq+0xc2>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <USBD_StdDevReq+0x50>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080073c7 	.word	0x080073c7
 8007360:	080073b3 	.word	0x080073b3
 8007364:	080073c7 	.word	0x080073c7
 8007368:	08007387 	.word	0x08007387
 800736c:	0800737d 	.word	0x0800737d
 8007370:	080073c7 	.word	0x080073c7
 8007374:	0800739f 	.word	0x0800739f
 8007378:	08007391 	.word	0x08007391
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa3c 	bl	80077fc <USBD_GetDescriptor>
          break;
 8007384:	e024      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fba1 	bl	8007ad0 <USBD_SetAddress>
          break;
 800738e:	e01f      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fbe0 	bl	8007b58 <USBD_SetConfig>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
          break;
 800739c:	e018      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fc83 	bl	8007cac <USBD_GetConfig>
          break;
 80073a6:	e013      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fcb4 	bl	8007d18 <USBD_GetStatus>
          break;
 80073b0:	e00e      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fce3 	bl	8007d80 <USBD_SetFeature>
          break;
 80073ba:	e009      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fd07 	bl	8007dd2 <USBD_ClrFeature>
          break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fd5e 	bl	8007e8a <USBD_CtlError>
          break;
 80073ce:	bf00      	nop
      }
      break;
 80073d0:	e004      	b.n	80073dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fd58 	bl	8007e8a <USBD_CtlError>
      break;
 80073da:	bf00      	nop
  }

  return ret;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d005      	beq.n	800740e <USBD_StdItfReq+0x26>
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d852      	bhi.n	80074ac <USBD_StdItfReq+0xc4>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <USBD_StdItfReq+0x26>
 800740a:	2b20      	cmp	r3, #32
 800740c:	d14e      	bne.n	80074ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	2b02      	cmp	r3, #2
 800741a:	d840      	bhi.n	800749e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	889b      	ldrh	r3, [r3, #4]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d836      	bhi.n	8007494 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	889b      	ldrh	r3, [r3, #4]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fed9 	bl	80071e6 <USBD_CoreFindIF>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2bff      	cmp	r3, #255	; 0xff
 800743c:	d01d      	beq.n	800747a <USBD_StdItfReq+0x92>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11a      	bne.n	800747a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007444:	7bba      	ldrb	r2, [r7, #14]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32ae      	adds	r2, #174	; 0xae
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00f      	beq.n	8007474 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007454:	7bba      	ldrb	r2, [r7, #14]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800745c:	7bba      	ldrb	r2, [r7, #14]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007472:	e004      	b.n	800747e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007478:	e001      	b.n	800747e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	88db      	ldrh	r3, [r3, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <USBD_StdItfReq+0xc0>
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10d      	bne.n	80074a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fdc7 	bl	8008020 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007492:	e009      	b.n	80074a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fcf7 	bl	8007e8a <USBD_CtlError>
          break;
 800749c:	e004      	b.n	80074a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fcf2 	bl	8007e8a <USBD_CtlError>
          break;
 80074a6:	e000      	b.n	80074aa <USBD_StdItfReq+0xc2>
          break;
 80074a8:	bf00      	nop
      }
      break;
 80074aa:	e004      	b.n	80074b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fceb 	bl	8007e8a <USBD_CtlError>
      break;
 80074b4:	bf00      	nop
  }

  return ret;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	889b      	ldrh	r3, [r3, #4]
 80074d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d007      	beq.n	80074f0 <USBD_StdEPReq+0x30>
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	f200 817f 	bhi.w	80077e4 <USBD_StdEPReq+0x324>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d02a      	beq.n	8007540 <USBD_StdEPReq+0x80>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f040 817a 	bne.w	80077e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fe83 	bl	8007200 <USBD_CoreFindEP>
 80074fa:	4603      	mov	r3, r0
 80074fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074fe:	7b7b      	ldrb	r3, [r7, #13]
 8007500:	2bff      	cmp	r3, #255	; 0xff
 8007502:	f000 8174 	beq.w	80077ee <USBD_StdEPReq+0x32e>
 8007506:	7b7b      	ldrb	r3, [r7, #13]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 8170 	bne.w	80077ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800750e:	7b7a      	ldrb	r2, [r7, #13]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007516:	7b7a      	ldrb	r2, [r7, #13]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	32ae      	adds	r2, #174	; 0xae
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8163 	beq.w	80077ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007528:	7b7a      	ldrb	r2, [r7, #13]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32ae      	adds	r2, #174	; 0xae
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800753e:	e156      	b.n	80077ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b03      	cmp	r3, #3
 8007546:	d008      	beq.n	800755a <USBD_StdEPReq+0x9a>
 8007548:	2b03      	cmp	r3, #3
 800754a:	f300 8145 	bgt.w	80077d8 <USBD_StdEPReq+0x318>
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 809b 	beq.w	800768a <USBD_StdEPReq+0x1ca>
 8007554:	2b01      	cmp	r3, #1
 8007556:	d03c      	beq.n	80075d2 <USBD_StdEPReq+0x112>
 8007558:	e13e      	b.n	80077d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d002      	beq.n	800756c <USBD_StdEPReq+0xac>
 8007566:	2b03      	cmp	r3, #3
 8007568:	d016      	beq.n	8007598 <USBD_StdEPReq+0xd8>
 800756a:	e02c      	b.n	80075c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <USBD_StdEPReq+0xce>
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b80      	cmp	r3, #128	; 0x80
 8007576:	d00a      	beq.n	800758e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 fa95 	bl	8008aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 fa91 	bl	8008aac <USBD_LL_StallEP>
 800758a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800758c:	e020      	b.n	80075d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fc7a 	bl	8007e8a <USBD_CtlError>
              break;
 8007596:	e01b      	b.n	80075d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	885b      	ldrh	r3, [r3, #2]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10e      	bne.n	80075be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <USBD_StdEPReq+0xfe>
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d008      	beq.n	80075be <USBD_StdEPReq+0xfe>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	88db      	ldrh	r3, [r3, #6]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fa77 	bl	8008aac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fd2e 	bl	8008020 <USBD_CtlSendStatus>

              break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc5e 	bl	8007e8a <USBD_CtlError>
              break;
 80075ce:	bf00      	nop
          }
          break;
 80075d0:	e107      	b.n	80077e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d002      	beq.n	80075e4 <USBD_StdEPReq+0x124>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d016      	beq.n	8007610 <USBD_StdEPReq+0x150>
 80075e2:	e04b      	b.n	800767c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00d      	beq.n	8007606 <USBD_StdEPReq+0x146>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d00a      	beq.n	8007606 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fa59 	bl	8008aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075fa:	2180      	movs	r1, #128	; 0x80
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fa55 	bl	8008aac <USBD_LL_StallEP>
 8007602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007604:	e040      	b.n	8007688 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc3e 	bl	8007e8a <USBD_CtlError>
              break;
 800760e:	e03b      	b.n	8007688 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	885b      	ldrh	r3, [r3, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d136      	bne.n	8007686 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa5f 	bl	8008aea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fcf7 	bl	8008020 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fde2 	bl	8007200 <USBD_CoreFindEP>
 800763c:	4603      	mov	r3, r0
 800763e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007640:	7b7b      	ldrb	r3, [r7, #13]
 8007642:	2bff      	cmp	r3, #255	; 0xff
 8007644:	d01f      	beq.n	8007686 <USBD_StdEPReq+0x1c6>
 8007646:	7b7b      	ldrb	r3, [r7, #13]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11c      	bne.n	8007686 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800764c:	7b7a      	ldrb	r2, [r7, #13]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007654:	7b7a      	ldrb	r2, [r7, #13]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32ae      	adds	r2, #174	; 0xae
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007664:	7b7a      	ldrb	r2, [r7, #13]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	32ae      	adds	r2, #174	; 0xae
 800766a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800767a:	e004      	b.n	8007686 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fc03 	bl	8007e8a <USBD_CtlError>
              break;
 8007684:	e000      	b.n	8007688 <USBD_StdEPReq+0x1c8>
              break;
 8007686:	bf00      	nop
          }
          break;
 8007688:	e0ab      	b.n	80077e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d002      	beq.n	800769c <USBD_StdEPReq+0x1dc>
 8007696:	2b03      	cmp	r3, #3
 8007698:	d032      	beq.n	8007700 <USBD_StdEPReq+0x240>
 800769a:	e097      	b.n	80077cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <USBD_StdEPReq+0x1f2>
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b80      	cmp	r3, #128	; 0x80
 80076a6:	d004      	beq.n	80076b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fbed 	bl	8007e8a <USBD_CtlError>
                break;
 80076b0:	e091      	b.n	80077d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da0b      	bge.n	80076d2 <USBD_StdEPReq+0x212>
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	3310      	adds	r3, #16
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	3304      	adds	r3, #4
 80076d0:	e00b      	b.n	80076ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	3304      	adds	r3, #4
 80076ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2202      	movs	r2, #2
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc37 	bl	8007f6c <USBD_CtlSendData>
              break;
 80076fe:	e06a      	b.n	80077d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da11      	bge.n	800772c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	f003 020f 	and.w	r2, r3, #15
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	3324      	adds	r3, #36	; 0x24
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d117      	bne.n	8007752 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fbb0 	bl	8007e8a <USBD_CtlError>
                  break;
 800772a:	e054      	b.n	80077d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 020f 	and.w	r2, r3, #15
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fb9d 	bl	8007e8a <USBD_CtlError>
                  break;
 8007750:	e041      	b.n	80077d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da0b      	bge.n	8007772 <USBD_StdEPReq+0x2b2>
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	3310      	adds	r3, #16
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	3304      	adds	r3, #4
 8007770:	e00b      	b.n	800778a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4413      	add	r3, r2
 8007788:	3304      	adds	r3, #4
 800778a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <USBD_StdEPReq+0x2d8>
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d103      	bne.n	80077a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e00e      	b.n	80077be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f9bf 	bl	8008b28 <USBD_LL_IsStallEP>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e002      	b.n	80077be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2202      	movs	r2, #2
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fbd1 	bl	8007f6c <USBD_CtlSendData>
              break;
 80077ca:	e004      	b.n	80077d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb5b 	bl	8007e8a <USBD_CtlError>
              break;
 80077d4:	bf00      	nop
          }
          break;
 80077d6:	e004      	b.n	80077e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fb55 	bl	8007e8a <USBD_CtlError>
          break;
 80077e0:	bf00      	nop
      }
      break;
 80077e2:	e005      	b.n	80077f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb4f 	bl	8007e8a <USBD_CtlError>
      break;
 80077ec:	e000      	b.n	80077f0 <USBD_StdEPReq+0x330>
      break;
 80077ee:	bf00      	nop
  }

  return ret;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	2b06      	cmp	r3, #6
 800781e:	f200 8128 	bhi.w	8007a72 <USBD_GetDescriptor+0x276>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USBD_GetDescriptor+0x2c>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007845 	.word	0x08007845
 800782c:	0800785d 	.word	0x0800785d
 8007830:	0800789d 	.word	0x0800789d
 8007834:	08007a73 	.word	0x08007a73
 8007838:	08007a73 	.word	0x08007a73
 800783c:	08007a13 	.word	0x08007a13
 8007840:	08007a3f 	.word	0x08007a3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
      break;
 800785a:	e112      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7c1b      	ldrb	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f107 0208 	add.w	r2, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	2202      	movs	r2, #2
 800787c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800787e:	e100      	b.n	8007a82 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f107 0208 	add.w	r2, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	2202      	movs	r2, #2
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e0f2      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	885b      	ldrh	r3, [r3, #2]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	f200 80ac 	bhi.w	8007a00 <USBD_GetDescriptor+0x204>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBD_GetDescriptor+0xb4>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c9 	.word	0x080078c9
 80078b4:	080078fd 	.word	0x080078fd
 80078b8:	08007931 	.word	0x08007931
 80078bc:	08007965 	.word	0x08007965
 80078c0:	08007999 	.word	0x08007999
 80078c4:	080079cd 	.word	0x080079cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	7c12      	ldrb	r2, [r2, #16]
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
 80078e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ea:	e091      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 facb 	bl	8007e8a <USBD_CtlError>
            err++;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	3301      	adds	r3, #1
 80078f8:	72fb      	strb	r3, [r7, #11]
          break;
 80078fa:	e089      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	7c12      	ldrb	r2, [r2, #16]
 8007914:	f107 0108 	add.w	r1, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791e:	e077      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fab1 	bl	8007e8a <USBD_CtlError>
            err++;
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	3301      	adds	r3, #1
 800792c:	72fb      	strb	r3, [r7, #11]
          break;
 800792e:	e06f      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	7c12      	ldrb	r2, [r2, #16]
 8007948:	f107 0108 	add.w	r1, r7, #8
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007952:	e05d      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa97 	bl	8007e8a <USBD_CtlError>
            err++;
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	3301      	adds	r3, #1
 8007960:	72fb      	strb	r3, [r7, #11]
          break;
 8007962:	e055      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007986:	e043      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa7d 	bl	8007e8a <USBD_CtlError>
            err++;
 8007990:	7afb      	ldrb	r3, [r7, #11]
 8007992:	3301      	adds	r3, #1
 8007994:	72fb      	strb	r3, [r7, #11]
          break;
 8007996:	e03b      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	7c12      	ldrb	r2, [r2, #16]
 80079b0:	f107 0108 	add.w	r1, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ba:	e029      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fa63 	bl	8007e8a <USBD_CtlError>
            err++;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	3301      	adds	r3, #1
 80079c8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ca:	e021      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00b      	beq.n	80079f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	7c12      	ldrb	r2, [r2, #16]
 80079e4:	f107 0108 	add.w	r1, r7, #8
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
 80079ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ee:	e00f      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa49 	bl	8007e8a <USBD_CtlError>
            err++;
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	3301      	adds	r3, #1
 80079fc:	72fb      	strb	r3, [r7, #11]
          break;
 80079fe:	e007      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa41 	bl	8007e8a <USBD_CtlError>
          err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a0e:	bf00      	nop
      }
      break;
 8007a10:	e037      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a2c:	e029      	b.n	8007a82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa2a 	bl	8007e8a <USBD_CtlError>
        err++;
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a3c:	e021      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7c1b      	ldrb	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
 8007a56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	2207      	movs	r2, #7
 8007a5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a60:	e00f      	b.n	8007a82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa10 	bl	8007e8a <USBD_CtlError>
        err++;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a70:	e007      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fa08 	bl	8007e8a <USBD_CtlError>
      err++;
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a80:	bf00      	nop
  }

  if (err != 0U)
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11e      	bne.n	8007ac6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d016      	beq.n	8007abe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a90:	893b      	ldrh	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88da      	ldrh	r2, [r3, #6]
 8007a9a:	893b      	ldrh	r3, [r7, #8]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bf28      	it	cs
 8007aa0:	4613      	movcs	r3, r2
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa5d 	bl	8007f6c <USBD_CtlSendData>
 8007ab2:	e009      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9e7 	bl	8007e8a <USBD_CtlError>
 8007abc:	e004      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 faae 	bl	8008020 <USBD_CtlSendStatus>
 8007ac4:	e000      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ac6:	bf00      	nop
  }
}
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop

08007ad0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	889b      	ldrh	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d131      	bne.n	8007b46 <USBD_SetAddress+0x76>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d12d      	bne.n	8007b46 <USBD_SetAddress+0x76>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	2b7f      	cmp	r3, #127	; 0x7f
 8007af0:	d829      	bhi.n	8007b46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d104      	bne.n	8007b14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9bc 	bl	8007e8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b12:	e01d      	b.n	8007b50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f82d 	bl	8008b80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa7a 	bl	8008020 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	e009      	b.n	8007b50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	e004      	b.n	8007b50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f99e 	bl	8007e8a <USBD_CtlError>
  }
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007b6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b70:	4b4d      	ldr	r3, [pc, #308]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d905      	bls.n	8007b84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f985 	bl	8007e8a <USBD_CtlError>
    return USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e08c      	b.n	8007c9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d002      	beq.n	8007b96 <USBD_SetConfig+0x3e>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d029      	beq.n	8007be8 <USBD_SetConfig+0x90>
 8007b94:	e075      	b.n	8007c82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b96:	4b44      	ldr	r3, [pc, #272]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d020      	beq.n	8007be0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b9e:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ba8:	4b3f      	ldr	r3, [pc, #252]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fe ffe7 	bl	8006b82 <USBD_SetClassConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f962 	bl	8007e8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bce:	e065      	b.n	8007c9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fa25 	bl	8008020 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bde:	e05d      	b.n	8007c9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa1d 	bl	8008020 <USBD_CtlSendStatus>
      break;
 8007be6:	e059      	b.n	8007c9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007be8:	4b2f      	ldr	r3, [pc, #188]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d112      	bne.n	8007c16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bf8:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c02:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fe ffd6 	bl	8006bba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa06 	bl	8008020 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c14:	e042      	b.n	8007c9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d02a      	beq.n	8007c7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fe ffc4 	bl	8006bba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fe ff9d 	bl	8006b82 <USBD_SetClassConfig>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00f      	beq.n	8007c72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f918 	bl	8007e8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fe ffa9 	bl	8006bba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c70:	e014      	b.n	8007c9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9d4 	bl	8008020 <USBD_CtlSendStatus>
      break;
 8007c78:	e010      	b.n	8007c9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9d0 	bl	8008020 <USBD_CtlSendStatus>
      break;
 8007c80:	e00c      	b.n	8007c9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f900 	bl	8007e8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <USBD_SetConfig+0x150>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fe ff92 	bl	8006bba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2400c1d0 	.word	0x2400c1d0

08007cac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d004      	beq.n	8007cc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8e2 	bl	8007e8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cc6:	e023      	b.n	8007d10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	dc02      	bgt.n	8007cda <USBD_GetConfig+0x2e>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dc03      	bgt.n	8007ce0 <USBD_GetConfig+0x34>
 8007cd8:	e015      	b.n	8007d06 <USBD_GetConfig+0x5a>
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_GetConfig+0x4a>
 8007cde:	e012      	b.n	8007d06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	2201      	movs	r2, #1
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f93c 	bl	8007f6c <USBD_CtlSendData>
        break;
 8007cf4:	e00c      	b.n	8007d10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f934 	bl	8007f6c <USBD_CtlSendData>
        break;
 8007d04:	e004      	b.n	8007d10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8be 	bl	8007e8a <USBD_CtlError>
        break;
 8007d0e:	bf00      	nop
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d81e      	bhi.n	8007d6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	88db      	ldrh	r3, [r3, #6]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d004      	beq.n	8007d42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f8a5 	bl	8007e8a <USBD_CtlError>
        break;
 8007d40:	e01a      	b.n	8007d78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f043 0202 	orr.w	r2, r3, #2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	330c      	adds	r3, #12
 8007d62:	2202      	movs	r2, #2
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f900 	bl	8007f6c <USBD_CtlSendData>
      break;
 8007d6c:	e004      	b.n	8007d78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f88a 	bl	8007e8a <USBD_CtlError>
      break;
 8007d76:	bf00      	nop
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d107      	bne.n	8007da2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f940 	bl	8008020 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007da0:	e013      	b.n	8007dca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d10b      	bne.n	8007dc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	889b      	ldrh	r3, [r3, #4]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f930 	bl	8008020 <USBD_CtlSendStatus>
}
 8007dc0:	e003      	b.n	8007dca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f860 	bl	8007e8a <USBD_CtlError>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d80b      	bhi.n	8007e02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d10c      	bne.n	8007e0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f910 	bl	8008020 <USBD_CtlSendStatus>
      }
      break;
 8007e00:	e004      	b.n	8007e0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f840 	bl	8007e8a <USBD_CtlError>
      break;
 8007e0a:	e000      	b.n	8007e0e <USBD_ClrFeature+0x3c>
      break;
 8007e0c:	bf00      	nop
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fa41 	bl	80072c8 <SWAPBYTE>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fa34 	bl	80072c8 <SWAPBYTE>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff fa27 	bl	80072c8 <SWAPBYTE>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	80da      	strh	r2, [r3, #6]
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e94:	2180      	movs	r1, #128	; 0x80
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fe08 	bl	8008aac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fe04 	bl	8008aac <USBD_LL_StallEP>
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d036      	beq.n	8007f30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f000 f836 	bl	8007f38 <USBD_GetLen>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	3301      	adds	r3, #1
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	4413      	add	r3, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7812      	ldrb	r2, [r2, #0]
 8007ee4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007efc:	e013      	b.n	8007f26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4413      	add	r3, r2
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
    idx++;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	3301      	adds	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	3301      	adds	r3, #1
 8007f24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e7      	bne.n	8007efe <USBD_GetString+0x52>
 8007f2e:	e000      	b.n	8007f32 <USBD_GetString+0x86>
    return;
 8007f30:	bf00      	nop
  }
}
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f48:	e005      	b.n	8007f56 <USBD_GetLen+0x1e>
  {
    len++;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f5      	bne.n	8007f4a <USBD_GetLen+0x12>
  }

  return len;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	2100      	movs	r1, #0
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fe13 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fe02 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	2100      	movs	r1, #0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fe06 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fdf5 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2204      	movs	r2, #4
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fdc1 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2205      	movs	r2, #5
 8008052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008056:	2300      	movs	r3, #0
 8008058:	2200      	movs	r2, #0
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fdcf 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008070:	2200      	movs	r2, #0
 8008072:	4913      	ldr	r1, [pc, #76]	; (80080c0 <MX_USB_DEVICE_Init+0x54>)
 8008074:	4813      	ldr	r0, [pc, #76]	; (80080c4 <MX_USB_DEVICE_Init+0x58>)
 8008076:	f7fe fd07 	bl	8006a88 <USBD_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008080:	f7f8 fa70 	bl	8000564 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008084:	4910      	ldr	r1, [pc, #64]	; (80080c8 <MX_USB_DEVICE_Init+0x5c>)
 8008086:	480f      	ldr	r0, [pc, #60]	; (80080c4 <MX_USB_DEVICE_Init+0x58>)
 8008088:	f7fe fd2e 	bl	8006ae8 <USBD_RegisterClass>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008092:	f7f8 fa67 	bl	8000564 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008096:	490d      	ldr	r1, [pc, #52]	; (80080cc <MX_USB_DEVICE_Init+0x60>)
 8008098:	480a      	ldr	r0, [pc, #40]	; (80080c4 <MX_USB_DEVICE_Init+0x58>)
 800809a:	f7fe fc1f 	bl	80068dc <USBD_CDC_RegisterInterface>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080a4:	f7f8 fa5e 	bl	8000564 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <MX_USB_DEVICE_Init+0x58>)
 80080aa:	f7fe fd53 	bl	8006b54 <USBD_Start>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080b4:	f7f8 fa56 	bl	8000564 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80080b8:	f7fa fa6c 	bl	8002594 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080bc:	bf00      	nop
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	240000d8 	.word	0x240000d8
 80080c4:	2400c1d4 	.word	0x2400c1d4
 80080c8:	24000044 	.word	0x24000044
 80080cc:	240000c4 	.word	0x240000c4

080080d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080d4:	2200      	movs	r2, #0
 80080d6:	4905      	ldr	r1, [pc, #20]	; (80080ec <CDC_Init_FS+0x1c>)
 80080d8:	4805      	ldr	r0, [pc, #20]	; (80080f0 <CDC_Init_FS+0x20>)
 80080da:	f7fe fc19 	bl	8006910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080de:	4905      	ldr	r1, [pc, #20]	; (80080f4 <CDC_Init_FS+0x24>)
 80080e0:	4803      	ldr	r0, [pc, #12]	; (80080f0 <CDC_Init_FS+0x20>)
 80080e2:	f7fe fc37 	bl	8006954 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	2400ccb0 	.word	0x2400ccb0
 80080f0:	2400c1d4 	.word	0x2400c1d4
 80080f4:	2400c4b0 	.word	0x2400c4b0

080080f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080fe:	4618      	mov	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	4613      	mov	r3, r2
 8008116:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b23      	cmp	r3, #35	; 0x23
 800811c:	d84a      	bhi.n	80081b4 <CDC_Control_FS+0xac>
 800811e:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <CDC_Control_FS+0x1c>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	080081b5 	.word	0x080081b5
 8008128:	080081b5 	.word	0x080081b5
 800812c:	080081b5 	.word	0x080081b5
 8008130:	080081b5 	.word	0x080081b5
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081b5 	.word	0x080081b5
 800813c:	080081b5 	.word	0x080081b5
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081b5 	.word	0x080081b5
 8008148:	080081b5 	.word	0x080081b5
 800814c:	080081b5 	.word	0x080081b5
 8008150:	080081b5 	.word	0x080081b5
 8008154:	080081b5 	.word	0x080081b5
 8008158:	080081b5 	.word	0x080081b5
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081b5 	.word	0x080081b5
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081b5 	.word	0x080081b5
 800816c:	080081b5 	.word	0x080081b5
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081b5 	.word	0x080081b5
 8008178:	080081b5 	.word	0x080081b5
 800817c:	080081b5 	.word	0x080081b5
 8008180:	080081b5 	.word	0x080081b5
 8008184:	080081b5 	.word	0x080081b5
 8008188:	080081b5 	.word	0x080081b5
 800818c:	080081b5 	.word	0x080081b5
 8008190:	080081b5 	.word	0x080081b5
 8008194:	080081b5 	.word	0x080081b5
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081b5 	.word	0x080081b5
 80081a0:	080081b5 	.word	0x080081b5
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081b5 	.word	0x080081b5
 80081ac:	080081b5 	.word	0x080081b5
 80081b0:	080081b5 	.word	0x080081b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081b4:	bf00      	nop
  }

  return (USBD_OK);
 80081b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    static uint8_t rx_status = 0;
    uint8_t *buf_p = (Buf + *Len);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = NULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	613b      	str	r3, [r7, #16]
    uint32_t buf_len = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
    if ((Buf - UserRxBufferFS) >= (APP_RX_DATA_SIZE - USB_ONCE_RX_MAX_LEN))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a1e      	ldr	r2, [pc, #120]	; (800825c <CDC_Receive_FS+0x98>)
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80081ea:	db01      	blt.n	80081f0 <CDC_Receive_FS+0x2c>
    {
        buf_p = &UserRxBufferFS[0];
 80081ec:	4b1b      	ldr	r3, [pc, #108]	; (800825c <CDC_Receive_FS+0x98>)
 80081ee:	617b      	str	r3, [r7, #20]
    }

    if(!rx_status)
 80081f0:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <CDC_Receive_FS+0x9c>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d107      	bne.n	8008208 <CDC_Receive_FS+0x44>
    {
        ptr = find_head(Buf, *Len);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f88c 	bl	800831c <find_head>
 8008204:	6138      	str	r0, [r7, #16]
 8008206:	e006      	b.n	8008216 <CDC_Receive_FS+0x52>
    }
    else
    {
        buf_len = find_tail(Buf, *Len);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f8da 	bl	80083c8 <find_tail>
 8008214:	60f8      	str	r0, [r7, #12]
    }

    if (ptr != NULL)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d004      	beq.n	8008226 <CDC_Receive_FS+0x62>
    {
        buf_p = ptr;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	617b      	str	r3, [r7, #20]
        rx_status = 1;
 8008220:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <CDC_Receive_FS+0x9c>)
 8008222:	2201      	movs	r2, #1
 8008224:	701a      	strb	r2, [r3, #0]
    }
    if(buf_len != 0)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <CDC_Receive_FS+0x7e>
    {
        usb_debug("%d", buf_len);
 800822c:	68f9      	ldr	r1, [r7, #12]
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <CDC_Receive_FS+0xa0>)
 8008230:	f000 f854 	bl	80082dc <usb_debug>
        buf_len = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
        buf_p = &UserRxBufferFS[0];
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <CDC_Receive_FS+0x98>)
 800823a:	617b      	str	r3, [r7, #20]
        rx_status = 0;
 800823c:	4b08      	ldr	r3, [pc, #32]	; (8008260 <CDC_Receive_FS+0x9c>)
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    }
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, buf_p);
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	4808      	ldr	r0, [pc, #32]	; (8008268 <CDC_Receive_FS+0xa4>)
 8008246:	f7fe fb85 	bl	8006954 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800824a:	4807      	ldr	r0, [pc, #28]	; (8008268 <CDC_Receive_FS+0xa4>)
 800824c:	f7fe fbe6 	bl	8006a1c <USBD_CDC_ReceivePacket>

    return (USBD_OK);
 8008250:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	2400c4b0 	.word	0x2400c4b0
 8008260:	2400d4b0 	.word	0x2400d4b0
 8008264:	0800a1a8 	.word	0x0800a1a8
 8008268:	2400c1d4 	.word	0x2400c1d4

0800826c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <CDC_Transmit_FS+0x48>)
 800827e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008282:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800828e:	2301      	movs	r3, #1
 8008290:	e00b      	b.n	80082aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	461a      	mov	r2, r3
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4806      	ldr	r0, [pc, #24]	; (80082b4 <CDC_Transmit_FS+0x48>)
 800829a:	f7fe fb39 	bl	8006910 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800829e:	4805      	ldr	r0, [pc, #20]	; (80082b4 <CDC_Transmit_FS+0x48>)
 80082a0:	f7fe fb76 	bl	8006990 <USBD_CDC_TransmitPacket>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2400c1d4 	.word	0x2400c1d4

080082b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <usb_debug>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t usb_debug(const char *format, ...)
{
 80082dc:	b40f      	push	{r0, r1, r2, r3}
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    va_start(args, format);
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082f2:	4809      	ldr	r0, [pc, #36]	; (8008318 <usb_debug+0x3c>)
 80082f4:	f001 fadc 	bl	80098b0 <vsniprintf>
 80082f8:	4603      	mov	r3, r0
 80082fa:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <usb_debug+0x3c>)
 8008304:	f7ff ffb2 	bl	800826c <CDC_Transmit_FS>

    return 0;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008314:	b004      	add	sp, #16
 8008316:	4770      	bx	lr
 8008318:	2400ccb0 	.word	0x2400ccb0

0800831c <find_head>:

uint8_t *find_head(uint8_t *Buf, uint32_t len)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
    uint8_t *next_ptr = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	613b      	str	r3, [r7, #16]
    if (Buf > UserRxBufferFS)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a22      	ldr	r2, [pc, #136]	; (80083c4 <find_head+0xa8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d937      	bls.n	80083ae <find_head+0x92>
    {
        if (*(Buf - 1) == head_1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3b01      	subs	r3, #1
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b5a      	cmp	r3, #90	; 0x5a
 8008346:	d132      	bne.n	80083ae <find_head+0x92>
        {
            status = 1;
 8008348:	2301      	movs	r3, #1
 800834a:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 800834c:	e02f      	b.n	80083ae <find_head+0x92>
    {
        now_buf = *(Buf + num);
 800834e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d11b      	bne.n	8008398 <find_head+0x7c>
        {
            if (now_buf == head_2)
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	2b52      	cmp	r3, #82	; 0x52
 8008364:	d116      	bne.n	8008394 <find_head+0x78>
            {
                status = 2;
 8008366:	2302      	movs	r3, #2
 8008368:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 800836a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800836e:	3b01      	subs	r3, #1
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
                memcpy(UserRxBufferFS, head_ptr, (Buf + len - head_ptr));
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	441a      	add	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	461a      	mov	r2, r3
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	480f      	ldr	r0, [pc, #60]	; (80083c4 <find_head+0xa8>)
 8008386:	f001 fa51 	bl	800982c <memcpy>
                next_ptr = Buf + len;
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	4413      	add	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
                break;
 8008392:	e011      	b.n	80083b8 <find_head+0x9c>
            }
            status = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == head_1)
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	2b5a      	cmp	r3, #90	; 0x5a
 800839c:	d101      	bne.n	80083a2 <find_head+0x86>
        {
            status = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 80083a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	3301      	adds	r3, #1
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	75bb      	strb	r3, [r7, #22]
 80083ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d8ca      	bhi.n	800834e <find_head+0x32>
        }
    }

    return next_ptr;
 80083b8:	693b      	ldr	r3, [r7, #16]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2400c4b0 	.word	0x2400c4b0

080083c8 <find_tail>:

uint32_t find_tail(uint8_t *Buf, uint32_t len)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
    uint8_t status = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]
    uint8_t now_buf;
    int8_t num = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75bb      	strb	r3, [r7, #22]
    uint8_t *head_ptr = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
    uint32_t buf_len = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]

    if (Buf > UserRxBufferFS)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <find_tail+0x98>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d92d      	bls.n	8008446 <find_tail+0x7e>
    {
        if (*(Buf - 1) == tail_1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2bff      	cmp	r3, #255	; 0xff
 80083f2:	d128      	bne.n	8008446 <find_tail+0x7e>
        {
            status = 1;
 80083f4:	2301      	movs	r3, #1
 80083f6:	75fb      	strb	r3, [r7, #23]
        }
    }
    for (; num < len; num++)
 80083f8:	e025      	b.n	8008446 <find_tail+0x7e>
    {
        now_buf = *(Buf + num);
 80083fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	72fb      	strb	r3, [r7, #11]
        if (status == 1)
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d111      	bne.n	8008430 <find_tail+0x68>
        {
            if (now_buf == tail_2)
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10c      	bne.n	800842c <find_tail+0x64>
            {
                status = 2;
 8008412:	2302      	movs	r3, #2
 8008414:	75fb      	strb	r3, [r7, #23]
                head_ptr = (Buf + num - 1);
 8008416:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800841a:	3b01      	subs	r3, #1
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
                buf_len = head_ptr - UserRxBufferFS;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <find_tail+0x98>)
 8008426:	1a9b      	subs	r3, r3, r2
 8008428:	613b      	str	r3, [r7, #16]
                break;
 800842a:	e011      	b.n	8008450 <find_tail+0x88>
            }
            status = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	75fb      	strb	r3, [r7, #23]
        }
        if (now_buf == tail_1)
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	2bff      	cmp	r3, #255	; 0xff
 8008434:	d101      	bne.n	800843a <find_tail+0x72>
        {
            status = 1;
 8008436:	2301      	movs	r3, #1
 8008438:	75fb      	strb	r3, [r7, #23]
    for (; num < len; num++)
 800843a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	3301      	adds	r3, #1
 8008442:	b2db      	uxtb	r3, r3
 8008444:	75bb      	strb	r3, [r7, #22]
 8008446:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d8d4      	bhi.n	80083fa <find_tail+0x32>
        }
    }

    return buf_len;
 8008450:	693b      	ldr	r3, [r7, #16]
}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	2400c4b0 	.word	0x2400c4b0

08008464 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	6039      	str	r1, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2212      	movs	r2, #18
 8008474:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008476:	4b03      	ldr	r3, [pc, #12]	; (8008484 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	240000f4 	.word	0x240000f4

08008488 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2204      	movs	r2, #4
 8008498:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800849a:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	24000108 	.word	0x24000108

080084ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	4907      	ldr	r1, [pc, #28]	; (80084e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80084c2:	4808      	ldr	r0, [pc, #32]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80084c4:	f7ff fcf2 	bl	8007eac <USBD_GetString>
 80084c8:	e004      	b.n	80084d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4904      	ldr	r1, [pc, #16]	; (80084e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80084ce:	4805      	ldr	r0, [pc, #20]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80084d0:	f7ff fcec 	bl	8007eac <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	2400d4b4 	.word	0x2400d4b4
 80084e4:	0800a1ac 	.word	0x0800a1ac

080084e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	4904      	ldr	r1, [pc, #16]	; (8008508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084f8:	4804      	ldr	r0, [pc, #16]	; (800850c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084fa:	f7ff fcd7 	bl	8007eac <USBD_GetString>
  return USBD_StrDesc;
 80084fe:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	2400d4b4 	.word	0x2400d4b4
 800850c:	0800a1c4 	.word	0x0800a1c4

08008510 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	221a      	movs	r2, #26
 8008520:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008522:	f000 f843 	bl	80085ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008526:	4b02      	ldr	r3, [pc, #8]	; (8008530 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2400010c 	.word	0x2400010c

08008534 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008540:	79fb      	ldrb	r3, [r7, #7]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	4907      	ldr	r1, [pc, #28]	; (8008568 <USBD_FS_ConfigStrDescriptor+0x34>)
 800854a:	4808      	ldr	r0, [pc, #32]	; (800856c <USBD_FS_ConfigStrDescriptor+0x38>)
 800854c:	f7ff fcae 	bl	8007eac <USBD_GetString>
 8008550:	e004      	b.n	800855c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4904      	ldr	r1, [pc, #16]	; (8008568 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008556:	4805      	ldr	r0, [pc, #20]	; (800856c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008558:	f7ff fca8 	bl	8007eac <USBD_GetString>
  }
  return USBD_StrDesc;
 800855c:	4b02      	ldr	r3, [pc, #8]	; (8008568 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	2400d4b4 	.word	0x2400d4b4
 800856c:	0800a1d8 	.word	0x0800a1d8

08008570 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4907      	ldr	r1, [pc, #28]	; (80085a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008586:	4808      	ldr	r0, [pc, #32]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008588:	f7ff fc90 	bl	8007eac <USBD_GetString>
 800858c:	e004      	b.n	8008598 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4904      	ldr	r1, [pc, #16]	; (80085a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008592:	4805      	ldr	r0, [pc, #20]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008594:	f7ff fc8a 	bl	8007eac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	2400d4b4 	.word	0x2400d4b4
 80085a8:	0800a1e4 	.word	0x0800a1e4

080085ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085b2:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <Get_SerialNum+0x44>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085b8:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <Get_SerialNum+0x48>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <Get_SerialNum+0x4c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085d2:	2208      	movs	r2, #8
 80085d4:	4909      	ldr	r1, [pc, #36]	; (80085fc <Get_SerialNum+0x50>)
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f814 	bl	8008604 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085dc:	2204      	movs	r2, #4
 80085de:	4908      	ldr	r1, [pc, #32]	; (8008600 <Get_SerialNum+0x54>)
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f000 f80f 	bl	8008604 <IntToUnicode>
  }
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	1ff1e800 	.word	0x1ff1e800
 80085f4:	1ff1e804 	.word	0x1ff1e804
 80085f8:	1ff1e808 	.word	0x1ff1e808
 80085fc:	2400010e 	.word	0x2400010e
 8008600:	2400011e 	.word	0x2400011e

08008604 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
 800861a:	e027      	b.n	800866c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	0f1b      	lsrs	r3, r3, #28
 8008620:	2b09      	cmp	r3, #9
 8008622:	d80b      	bhi.n	800863c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	0f1b      	lsrs	r3, r3, #28
 8008628:	b2da      	uxtb	r2, r3
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	4619      	mov	r1, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	440b      	add	r3, r1
 8008634:	3230      	adds	r2, #48	; 0x30
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e00a      	b.n	8008652 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	0f1b      	lsrs	r3, r3, #28
 8008640:	b2da      	uxtb	r2, r3
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	4619      	mov	r1, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	440b      	add	r3, r1
 800864c:	3237      	adds	r2, #55	; 0x37
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	3301      	adds	r3, #1
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	3301      	adds	r3, #1
 800866a:	75fb      	strb	r3, [r7, #23]
 800866c:	7dfa      	ldrb	r2, [r7, #23]
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d3d3      	bcc.n	800861c <IntToUnicode+0x18>
  }
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b0b8      	sub	sp, #224	; 0xe0
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	22bc      	movs	r2, #188	; 0xbc
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 f8cf 	bl	8009848 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2b      	ldr	r2, [pc, #172]	; (800875c <HAL_PCD_MspInit+0xd8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d14e      	bne.n	8008752 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80086b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80086ba:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80086be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fa ff02 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80086d2:	f7f7 ff47 	bl	8000564 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80086d6:	f7f9 ff5d 	bl	8002594 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086da:	4b21      	ldr	r3, [pc, #132]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 80086dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086e0:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086ea:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 80086ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008700:	2302      	movs	r3, #2
 8008702:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008706:	2300      	movs	r3, #0
 8008708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870c:	2303      	movs	r3, #3
 800870e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008712:	230a      	movs	r3, #10
 8008714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008718:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800871c:	4619      	mov	r1, r3
 800871e:	4811      	ldr	r0, [pc, #68]	; (8008764 <HAL_PCD_MspInit+0xe0>)
 8008720:	f7f8 fa46 	bl	8000bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008724:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 8008726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800872a:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 800872c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008730:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <HAL_PCD_MspInit+0xdc>)
 8008736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800873a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800873e:	60bb      	str	r3, [r7, #8]
 8008740:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	2065      	movs	r0, #101	; 0x65
 8008748:	f7f8 f9fd 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800874c:	2065      	movs	r0, #101	; 0x65
 800874e:	f7f8 fa14 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008752:	bf00      	nop
 8008754:	37e0      	adds	r7, #224	; 0xe0
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40080000 	.word	0x40080000
 8008760:	58024400 	.word	0x58024400
 8008764:	58020000 	.word	0x58020000

08008768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7fe fa35 	bl	8006bee <USBD_LL_SetupStage>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7fe fa6f 	bl	8006c98 <USBD_LL_DataOutStage>
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	334c      	adds	r3, #76	; 0x4c
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7fe fb08 	bl	8006dfe <USBD_LL_DataInStage>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fc3c 	bl	8007082 <USBD_LL_SOF>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
 800882a:	e008      	b.n	800883e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d102      	bne.n	800883a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	e001      	b.n	800883e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800883a:	f7f7 fe93 	bl	8000564 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fbdc 	bl	8007006 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fb84 	bl	8006f62 <USBD_LL_Reset>
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fbd7 	bl	8007026 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008898:	4b04      	ldr	r3, [pc, #16]	; (80088ac <HAL_PCD_SuspendCallback+0x48>)
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	4a03      	ldr	r2, [pc, #12]	; (80088ac <HAL_PCD_SuspendCallback+0x48>)
 800889e:	f043 0306 	orr.w	r3, r3, #6
 80088a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed00 	.word	0xe000ed00

080088b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fbc7 	bl	8007052 <USBD_LL_Resume>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fc1f 	bl	8007126 <USBD_LL_IsoOUTIncomplete>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fbdb 	bl	80070c2 <USBD_LL_IsoINIncomplete>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fc31 	bl	800718a <USBD_LL_DevConnected>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fc2e 	bl	80071a0 <USBD_LL_DevDisconnected>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d13e      	bne.n	80089da <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800895c:	4a21      	ldr	r2, [pc, #132]	; (80089e4 <USBD_LL_Init+0x98>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <USBD_LL_Init+0x98>)
 8008968:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <USBD_LL_Init+0x98>)
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <USBD_LL_Init+0x9c>)
 8008970:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <USBD_LL_Init+0x98>)
 8008974:	2209      	movs	r2, #9
 8008976:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008978:	4b1a      	ldr	r3, [pc, #104]	; (80089e4 <USBD_LL_Init+0x98>)
 800897a:	2202      	movs	r2, #2
 800897c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800897e:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <USBD_LL_Init+0x98>)
 8008980:	2200      	movs	r2, #0
 8008982:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008984:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <USBD_LL_Init+0x98>)
 8008986:	2202      	movs	r2, #2
 8008988:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800898a:	4b16      	ldr	r3, [pc, #88]	; (80089e4 <USBD_LL_Init+0x98>)
 800898c:	2200      	movs	r2, #0
 800898e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008990:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <USBD_LL_Init+0x98>)
 8008992:	2200      	movs	r2, #0
 8008994:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <USBD_LL_Init+0x98>)
 8008998:	2200      	movs	r2, #0
 800899a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800899c:	4b11      	ldr	r3, [pc, #68]	; (80089e4 <USBD_LL_Init+0x98>)
 800899e:	2200      	movs	r2, #0
 80089a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <USBD_LL_Init+0x98>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089a8:	4b0e      	ldr	r3, [pc, #56]	; (80089e4 <USBD_LL_Init+0x98>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089ae:	480d      	ldr	r0, [pc, #52]	; (80089e4 <USBD_LL_Init+0x98>)
 80089b0:	f7f8 fae1 	bl	8000f76 <HAL_PCD_Init>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80089ba:	f7f7 fdd3 	bl	8000564 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	4808      	ldr	r0, [pc, #32]	; (80089e4 <USBD_LL_Init+0x98>)
 80089c2:	f7f9 fd6c 	bl	800249e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089c6:	2240      	movs	r2, #64	; 0x40
 80089c8:	2100      	movs	r1, #0
 80089ca:	4806      	ldr	r0, [pc, #24]	; (80089e4 <USBD_LL_Init+0x98>)
 80089cc:	f7f9 fd20 	bl	8002410 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089d0:	2280      	movs	r2, #128	; 0x80
 80089d2:	2101      	movs	r1, #1
 80089d4:	4803      	ldr	r0, [pc, #12]	; (80089e4 <USBD_LL_Init+0x98>)
 80089d6:	f7f9 fd1b 	bl	8002410 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	2400d6b4 	.word	0x2400d6b4
 80089e8:	40080000 	.word	0x40080000

080089ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f8 fbdb 	bl	80011be <HAL_PCD_Start>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f942 	bl	8008c98 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	70fb      	strb	r3, [r7, #3]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70bb      	strb	r3, [r7, #2]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a4a:	78bb      	ldrb	r3, [r7, #2]
 8008a4c:	883a      	ldrh	r2, [r7, #0]
 8008a4e:	78f9      	ldrb	r1, [r7, #3]
 8008a50:	f7f9 f8d9 	bl	8001c06 <HAL_PCD_EP_Open>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f91c 	bl	8008c98 <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f9 f922 	bl	8001cd6 <HAL_PCD_EP_Close>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f8fd 	bl	8008c98 <USBD_Get_USB_Status>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f9 f9fa 	bl	8001ec4 <HAL_PCD_EP_SetStall>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f8de 	bl	8008c98 <USBD_Get_USB_Status>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f9 fa3f 	bl	8001f8c <HAL_PCD_EP_ClrStall>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f8bf 	bl	8008c98 <USBD_Get_USB_Status>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da0b      	bge.n	8008b5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	333e      	adds	r3, #62	; 0x3e
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	e00b      	b.n	8008b74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008b72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7f9 f80c 	bl	8001bbc <HAL_PCD_SetAddress>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f874 	bl	8008c98 <USBD_Get_USB_Status>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b086      	sub	sp, #24
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bdc:	7af9      	ldrb	r1, [r7, #11]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f7f9 f925 	bl	8001e30 <HAL_PCD_EP_Transmit>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f853 	bl	8008c98 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c1e:	7af9      	ldrb	r1, [r7, #11]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f7f9 f8a1 	bl	8001d6a <HAL_PCD_EP_Receive>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f832 	bl	8008c98 <USBD_Get_USB_Status>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f9 f8d1 	bl	8001e00 <HAL_PCD_EP_GetRxCount>
 8008c5e:	4603      	mov	r3, r0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c70:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <USBD_static_malloc+0x18>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	2400dbc0 	.word	0x2400dbc0

08008c84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d817      	bhi.n	8008cdc <USBD_Get_USB_Status+0x44>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_Get_USB_Status+0x1c>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008ccb 	.word	0x08008ccb
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008cd7 	.word	0x08008cd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e00b      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cce:	e008      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e005      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e002      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	bf00      	nop
  }
  return usb_status;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <arm_cfft_radix4_init_f32>:
 8008cf0:	b410      	push	{r4}
 8008cf2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4826      	ldr	r0, [pc, #152]	; (8008d94 <arm_cfft_radix4_init_f32+0xa4>)
 8008cfa:	70a2      	strb	r2, [r4, #2]
 8008cfc:	70e3      	strb	r3, [r4, #3]
 8008cfe:	8021      	strh	r1, [r4, #0]
 8008d00:	6060      	str	r0, [r4, #4]
 8008d02:	d027      	beq.n	8008d54 <arm_cfft_radix4_init_f32+0x64>
 8008d04:	d911      	bls.n	8008d2a <arm_cfft_radix4_init_f32+0x3a>
 8008d06:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d0a:	d02f      	beq.n	8008d6c <arm_cfft_radix4_init_f32+0x7c>
 8008d0c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008d10:	d11b      	bne.n	8008d4a <arm_cfft_radix4_init_f32+0x5a>
 8008d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d16:	4a20      	ldr	r2, [pc, #128]	; (8008d98 <arm_cfft_radix4_init_f32+0xa8>)
 8008d18:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	2910      	cmp	r1, #16
 8008d2c:	d028      	beq.n	8008d80 <arm_cfft_radix4_init_f32+0x90>
 8008d2e:	2940      	cmp	r1, #64	; 0x40
 8008d30:	d10b      	bne.n	8008d4a <arm_cfft_radix4_init_f32+0x5a>
 8008d32:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 8008d36:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 8008d3a:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <arm_cfft_radix4_init_f32+0xac>)
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8008d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8008d58:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 8008d5c:	4a10      	ldr	r2, [pc, #64]	; (8008da0 <arm_cfft_radix4_init_f32+0xb0>)
 8008d5e:	2000      	movs	r0, #0
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8008d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 8008d70:	4a0c      	ldr	r2, [pc, #48]	; (8008da4 <arm_cfft_radix4_init_f32+0xb4>)
 8008d72:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8008d76:	2000      	movs	r0, #0
 8008d78:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	e7d1      	b.n	8008d24 <arm_cfft_radix4_init_f32+0x34>
 8008d80:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 8008d84:	4a08      	ldr	r2, [pc, #32]	; (8008da8 <arm_cfft_radix4_init_f32+0xb8>)
 8008d86:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	e7c7      	b.n	8008d24 <arm_cfft_radix4_init_f32+0x34>
 8008d94:	0800aa04 	.word	0x0800aa04
 8008d98:	0800a204 	.word	0x0800a204
 8008d9c:	0800a282 	.word	0x0800a282
 8008da0:	0800a222 	.word	0x0800a222
 8008da4:	0800a20a 	.word	0x0800a20a
 8008da8:	0800a402 	.word	0x0800a402

08008dac <arm_radix4_butterfly_f32>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4684      	mov	ip, r0
 8008db2:	1d14      	adds	r4, r2, #4
 8008db4:	088a      	lsrs	r2, r1, #2
 8008db6:	468a      	mov	sl, r1
 8008db8:	4626      	mov	r6, r4
 8008dba:	4625      	mov	r5, r4
 8008dbc:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8008dc0:	4693      	mov	fp, r2
 8008dc2:	ed2d 8b06 	vpush	{d8-d10}
 8008dc6:	b08d      	sub	sp, #52	; 0x34
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	4662      	mov	r2, ip
 8008dcc:	9009      	str	r0, [sp, #36]	; 0x24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	444a      	add	r2, r9
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 8008dd8:	4663      	mov	r3, ip
 8008dda:	eb02 0109 	add.w	r1, r2, r9
 8008dde:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8008de2:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8008de6:	4690      	mov	r8, r2
 8008de8:	00ff      	lsls	r7, r7, #3
 8008dea:	eb01 0009 	add.w	r0, r1, r9
 8008dee:	940a      	str	r4, [sp, #40]	; 0x28
 8008df0:	ed93 7a00 	vldr	s14, [r3]
 8008df4:	3308      	adds	r3, #8
 8008df6:	ed91 6a00 	vldr	s12, [r1]
 8008dfa:	3208      	adds	r2, #8
 8008dfc:	edd0 6a00 	vldr	s13, [r0]
 8008e00:	3108      	adds	r1, #8
 8008e02:	ed11 2a01 	vldr	s4, [r1, #-4]
 8008e06:	ee37 4a06 	vadd.f32	s8, s14, s12
 8008e0a:	edd0 2a01 	vldr	s5, [r0, #4]
 8008e0e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008e12:	ed52 7a02 	vldr	s15, [r2, #-8]
 8008e16:	3008      	adds	r0, #8
 8008e18:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008e1c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8008e20:	ee37 3aa6 	vadd.f32	s6, s15, s13
 8008e24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e28:	edd4 3a00 	vldr	s7, [r4]
 8008e2c:	ee35 5aa2 	vadd.f32	s10, s11, s5
 8008e30:	ed54 4a01 	vldr	s9, [r4, #-4]
 8008e34:	ee76 6a02 	vadd.f32	s13, s12, s4
 8008e38:	4474      	add	r4, lr
 8008e3a:	ee36 6a42 	vsub.f32	s12, s12, s4
 8008e3e:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8008e42:	ee34 2a03 	vadd.f32	s4, s8, s6
 8008e46:	ee76 2a85 	vadd.f32	s5, s13, s10
 8008e4a:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008e4e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008e52:	ed03 2a02 	vstr	s4, [r3, #-8]
 8008e56:	ee37 3a25 	vadd.f32	s6, s14, s11
 8008e5a:	ed43 2a01 	vstr	s5, [r3, #-4]
 8008e5e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008e62:	ed15 2a01 	vldr	s4, [r5, #-4]
 8008e66:	ee76 5a67 	vsub.f32	s11, s12, s15
 8008e6a:	ed95 5a00 	vldr	s10, [r5]
 8008e6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e72:	edd6 2a00 	vldr	s5, [r6]
 8008e76:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008e7a:	ee63 1a02 	vmul.f32	s3, s6, s4
 8008e7e:	ee23 3a05 	vmul.f32	s6, s6, s10
 8008e82:	4598      	cmp	r8, r3
 8008e84:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008e88:	4465      	add	r5, ip
 8008e8a:	ee65 5a82 	vmul.f32	s11, s11, s4
 8008e8e:	443e      	add	r6, r7
 8008e90:	ee24 2a84 	vmul.f32	s4, s9, s8
 8008e94:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8008e98:	ee23 4a84 	vmul.f32	s8, s7, s8
 8008e9c:	ee63 6aa6 	vmul.f32	s13, s7, s13
 8008ea0:	ee67 3a06 	vmul.f32	s7, s14, s12
 8008ea4:	ee27 6a86 	vmul.f32	s12, s15, s12
 8008ea8:	ee27 7a22 	vmul.f32	s14, s14, s5
 8008eac:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008eb0:	ee35 5a21 	vadd.f32	s10, s10, s3
 8008eb4:	ee75 5ac3 	vsub.f32	s11, s11, s6
 8008eb8:	ee76 6a82 	vadd.f32	s13, s13, s4
 8008ebc:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8008ec0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8008ec4:	ee36 7a47 	vsub.f32	s14, s12, s14
 8008ec8:	ed42 6a02 	vstr	s13, [r2, #-8]
 8008ecc:	ed42 4a01 	vstr	s9, [r2, #-4]
 8008ed0:	ed01 5a02 	vstr	s10, [r1, #-8]
 8008ed4:	ed41 5a01 	vstr	s11, [r1, #-4]
 8008ed8:	ed40 7a02 	vstr	s15, [r0, #-8]
 8008edc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008ee0:	d186      	bne.n	8008df0 <arm_radix4_butterfly_f32+0x44>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	2a04      	cmp	r2, #4
 8008eec:	920b      	str	r2, [sp, #44]	; 0x2c
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	9307      	str	r3, [sp, #28]
 8008ef2:	f240 80b5 	bls.w	8009060 <arm_radix4_butterfly_f32+0x2b4>
 8008ef6:	9807      	ldr	r0, [sp, #28]
 8008ef8:	9208      	str	r2, [sp, #32]
 8008efa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f00:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8008f04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	46a0      	mov	r8, r4
 8008f0a:	9202      	str	r2, [sp, #8]
 8008f0c:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 8008f10:	9306      	str	r3, [sp, #24]
 8008f12:	00c3      	lsls	r3, r0, #3
 8008f14:	00d2      	lsls	r2, r2, #3
 8008f16:	46a6      	mov	lr, r4
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	2700      	movs	r7, #0
 8008f1c:	0103      	lsls	r3, r0, #4
 8008f1e:	9401      	str	r4, [sp, #4]
 8008f20:	9203      	str	r2, [sp, #12]
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	9b01      	ldr	r3, [sp, #4]
 8008f26:	1d34      	adds	r4, r6, #4
 8008f28:	9a03      	ldr	r2, [sp, #12]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	ed13 0a01 	vldr	s0, [r3, #-4]
 8008f30:	463d      	mov	r5, r7
 8008f32:	1991      	adds	r1, r2, r6
 8008f34:	edd3 0a00 	vldr	s1, [r3]
 8008f38:	4462      	add	r2, ip
 8008f3a:	ed1e 1a01 	vldr	s2, [lr, #-4]
 8008f3e:	edde 1a00 	vldr	s3, [lr]
 8008f42:	4663      	mov	r3, ip
 8008f44:	ed18 2a01 	vldr	s4, [r8, #-4]
 8008f48:	edd8 2a00 	vldr	s5, [r8]
 8008f4c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8008f50:	445d      	add	r5, fp
 8008f52:	ed93 6a00 	vldr	s12, [r3]
 8008f56:	edd2 6a00 	vldr	s13, [r2]
 8008f5a:	45aa      	cmp	sl, r5
 8008f5c:	edd1 7a00 	vldr	s15, [r1]
 8008f60:	ee77 3a06 	vadd.f32	s7, s14, s12
 8008f64:	edd0 5a01 	vldr	s11, [r0, #4]
 8008f68:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008f6c:	ed91 5a01 	vldr	s10, [r1, #4]
 8008f70:	ee37 9aa6 	vadd.f32	s18, s15, s13
 8008f74:	ed93 6a01 	vldr	s12, [r3, #4]
 8008f78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f7c:	edd2 6a01 	vldr	s13, [r2, #4]
 8008f80:	ee75 4a86 	vadd.f32	s9, s11, s12
 8008f84:	ee75 8a26 	vadd.f32	s17, s10, s13
 8008f88:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008f8c:	ee35 5a66 	vsub.f32	s10, s10, s13
 8008f90:	ee33 3ac9 	vsub.f32	s6, s7, s18
 8008f94:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8008f98:	ee37 4a05 	vadd.f32	s8, s14, s10
 8008f9c:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8008fa0:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008fa4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008fa8:	ee61 aa03 	vmul.f32	s21, s2, s6
 8008fac:	ee21 8a86 	vmul.f32	s16, s3, s12
 8008fb0:	ee20 aa04 	vmul.f32	s20, s0, s8
 8008fb4:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8008fb8:	ee62 9a07 	vmul.f32	s19, s4, s14
 8008fbc:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8008fc0:	ee21 3a83 	vmul.f32	s6, s3, s6
 8008fc4:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008fc8:	ee20 4a84 	vmul.f32	s8, s1, s8
 8008fcc:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008fd0:	ee22 7a87 	vmul.f32	s14, s5, s14
 8008fd4:	ee62 7a27 	vmul.f32	s15, s4, s15
 8008fd8:	ee73 3a89 	vadd.f32	s7, s7, s18
 8008fdc:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8008fe0:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8008fe4:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008fe8:	ed44 3a01 	vstr	s7, [r4, #-4]
 8008fec:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8008ff0:	edc0 4a01 	vstr	s9, [r0, #4]
 8008ff4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008ff8:	ed81 8a00 	vstr	s16, [r1]
 8008ffc:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8009000:	ed81 6a01 	vstr	s12, [r1, #4]
 8009004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009008:	ed83 5a00 	vstr	s10, [r3]
 800900c:	edc3 6a01 	vstr	s13, [r3, #4]
 8009010:	444c      	add	r4, r9
 8009012:	edc2 5a00 	vstr	s11, [r2]
 8009016:	4448      	add	r0, r9
 8009018:	edc2 7a01 	vstr	s15, [r2, #4]
 800901c:	4449      	add	r1, r9
 800901e:	444b      	add	r3, r9
 8009020:	444a      	add	r2, r9
 8009022:	d893      	bhi.n	8008f4c <arm_radix4_butterfly_f32+0x1a0>
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	3701      	adds	r7, #1
 8009028:	9a05      	ldr	r2, [sp, #20]
 800902a:	3608      	adds	r6, #8
 800902c:	f10c 0c08 	add.w	ip, ip, #8
 8009030:	4413      	add	r3, r2
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	449e      	add	lr, r3
 8009038:	9b06      	ldr	r3, [sp, #24]
 800903a:	4498      	add	r8, r3
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	42bb      	cmp	r3, r7
 8009040:	f47f af70 	bne.w	8008f24 <arm_radix4_butterfly_f32+0x178>
 8009044:	9a08      	ldr	r2, [sp, #32]
 8009046:	469b      	mov	fp, r3
 8009048:	9b07      	ldr	r3, [sp, #28]
 800904a:	0892      	lsrs	r2, r2, #2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	2a04      	cmp	r2, #4
 8009050:	9208      	str	r2, [sp, #32]
 8009052:	b29b      	uxth	r3, r3
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	d903      	bls.n	8009060 <arm_radix4_butterfly_f32+0x2b4>
 8009058:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 800905c:	4618      	mov	r0, r3
 800905e:	e74c      	b.n	8008efa <arm_radix4_butterfly_f32+0x14e>
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009064:	3320      	adds	r3, #32
 8009066:	ed53 7a04 	vldr	s15, [r3, #-16]
 800906a:	3a01      	subs	r2, #1
 800906c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8009070:	f103 0320 	add.w	r3, r3, #32
 8009074:	ed53 4a0a 	vldr	s9, [r3, #-40]	; 0xffffffd8
 8009078:	ed53 5a09 	vldr	s11, [r3, #-36]	; 0xffffffdc
 800907c:	ee37 5a27 	vadd.f32	s10, s14, s15
 8009080:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 8009084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009088:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800908c:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8009090:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8009094:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8009098:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800909c:	ee76 4a65 	vsub.f32	s9, s12, s11
 80090a0:	ee36 6a25 	vadd.f32	s12, s12, s11
 80090a4:	ee77 5aa3 	vadd.f32	s11, s15, s7
 80090a8:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80090ac:	ee75 3a04 	vadd.f32	s7, s10, s8
 80090b0:	ee35 5a44 	vsub.f32	s10, s10, s8
 80090b4:	ee37 4a24 	vadd.f32	s8, s14, s9
 80090b8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80090bc:	ed43 3a10 	vstr	s7, [r3, #-64]	; 0xffffffc0
 80090c0:	ee75 4a86 	vadd.f32	s9, s11, s12
 80090c4:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 80090c8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80090cc:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 80090d0:	ee77 5ae6 	vsub.f32	s11, s15, s13
 80090d4:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 80090d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090dc:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 80090e0:	ed03 6a0d 	vstr	s12, [r3, #-52]	; 0xffffffcc
 80090e4:	ed43 5a0b 	vstr	s11, [r3, #-44]	; 0xffffffd4
 80090e8:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 80090ec:	d1bb      	bne.n	8009066 <arm_radix4_butterfly_f32+0x2ba>
 80090ee:	b00d      	add	sp, #52	; 0x34
 80090f0:	ecbd 8b06 	vpop	{d8-d10}
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f8 <arm_radix4_butterfly_inverse_f32>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	468a      	mov	sl, r1
 80090fe:	1d11      	adds	r1, r2, #4
 8009100:	461f      	mov	r7, r3
 8009102:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8009106:	ea4f 029a 	mov.w	r2, sl, lsr #2
 800910a:	468c      	mov	ip, r1
 800910c:	460e      	mov	r6, r1
 800910e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009112:	4614      	mov	r4, r2
 8009114:	4665      	mov	r5, ip
 8009116:	ed2d 8b08 	vpush	{d8-d11}
 800911a:	b08d      	sub	sp, #52	; 0x34
 800911c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8009120:	46a3      	mov	fp, r4
 8009122:	9202      	str	r2, [sp, #8]
 8009124:	0112      	lsls	r2, r2, #4
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	4603      	mov	r3, r0
 800912a:	910a      	str	r1, [sp, #40]	; 0x28
 800912c:	4410      	add	r0, r2
 800912e:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 8009132:	9309      	str	r3, [sp, #36]	; 0x24
 8009134:	4664      	mov	r4, ip
 8009136:	eb03 0809 	add.w	r8, r3, r9
 800913a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8009144:	440a      	add	r2, r1
 8009146:	00ff      	lsls	r7, r7, #3
 8009148:	ed91 7a00 	vldr	s14, [r1]
 800914c:	3308      	adds	r3, #8
 800914e:	edd2 4a00 	vldr	s9, [r2]
 8009152:	3108      	adds	r1, #8
 8009154:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009158:	3008      	adds	r0, #8
 800915a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800915e:	ee37 3a24 	vadd.f32	s6, s14, s9
 8009162:	ed10 2a01 	vldr	s4, [r0, #-4]
 8009166:	ee77 4a64 	vsub.f32	s9, s14, s9
 800916a:	edd2 2a01 	vldr	s5, [r2, #4]
 800916e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009172:	ed13 7a01 	vldr	s14, [r3, #-4]
 8009176:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800917a:	ed11 4a01 	vldr	s8, [r1, #-4]
 800917e:	3208      	adds	r2, #8
 8009180:	ee77 6a02 	vadd.f32	s13, s14, s4
 8009184:	ed54 3a01 	vldr	s7, [r4, #-4]
 8009188:	ee34 6a22 	vadd.f32	s12, s8, s5
 800918c:	edd4 5a00 	vldr	s11, [r4]
 8009190:	ee34 4a62 	vsub.f32	s8, s8, s5
 8009194:	4464      	add	r4, ip
 8009196:	ee37 7a42 	vsub.f32	s14, s14, s4
 800919a:	ee76 2a86 	vadd.f32	s5, s13, s12
 800919e:	ee35 2a03 	vadd.f32	s4, s10, s6
 80091a2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80091a6:	ee35 5a43 	vsub.f32	s10, s10, s6
 80091aa:	ed43 2a01 	vstr	s5, [r3, #-4]
 80091ae:	ee37 6ac4 	vsub.f32	s12, s15, s8
 80091b2:	ed03 2a02 	vstr	s4, [r3, #-8]
 80091b6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80091ba:	ed15 2a01 	vldr	s4, [r5, #-4]
 80091be:	ee34 4a87 	vadd.f32	s8, s9, s14
 80091c2:	ed95 3a00 	vldr	s6, [r5]
 80091c6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80091ca:	edd6 1a00 	vldr	s3, [r6]
 80091ce:	ed56 4a01 	vldr	s9, [r6, #-4]
 80091d2:	ee66 2a02 	vmul.f32	s5, s12, s4
 80091d6:	ee26 6a03 	vmul.f32	s12, s12, s6
 80091da:	4598      	cmp	r8, r3
 80091dc:	ee24 3a03 	vmul.f32	s6, s8, s6
 80091e0:	443d      	add	r5, r7
 80091e2:	ee24 4a02 	vmul.f32	s8, s8, s4
 80091e6:	4476      	add	r6, lr
 80091e8:	ee23 2a85 	vmul.f32	s4, s7, s10
 80091ec:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80091f0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80091f4:	ee65 5a85 	vmul.f32	s11, s11, s10
 80091f8:	ee27 5aa4 	vmul.f32	s10, s15, s9
 80091fc:	ee67 4a24 	vmul.f32	s9, s14, s9
 8009200:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8009204:	ee27 7a21 	vmul.f32	s14, s14, s3
 8009208:	ee36 6a04 	vadd.f32	s12, s12, s8
 800920c:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009210:	ee32 4a66 	vsub.f32	s8, s4, s13
 8009214:	ee35 7a47 	vsub.f32	s14, s10, s14
 8009218:	ee75 6aa3 	vadd.f32	s13, s11, s7
 800921c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8009220:	ed01 4a02 	vstr	s8, [r1, #-8]
 8009224:	ed41 6a01 	vstr	s13, [r1, #-4]
 8009228:	ed00 3a02 	vstr	s6, [r0, #-8]
 800922c:	ed00 6a01 	vstr	s12, [r0, #-4]
 8009230:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009234:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009238:	d186      	bne.n	8009148 <arm_radix4_butterfly_inverse_f32+0x50>
 800923a:	9b01      	ldr	r3, [sp, #4]
 800923c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	2a04      	cmp	r2, #4
 8009244:	920b      	str	r2, [sp, #44]	; 0x2c
 8009246:	b29b      	uxth	r3, r3
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	f240 80b5 	bls.w	80093b8 <arm_radix4_butterfly_inverse_f32+0x2c0>
 800924e:	9807      	ldr	r0, [sp, #28]
 8009250:	9208      	str	r2, [sp, #32]
 8009252:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009256:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009258:	ea4f 029b 	mov.w	r2, fp, lsr #2
 800925c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	46a0      	mov	r8, r4
 8009262:	9202      	str	r2, [sp, #8]
 8009264:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 8009268:	9306      	str	r3, [sp, #24]
 800926a:	00c3      	lsls	r3, r0, #3
 800926c:	00d2      	lsls	r2, r2, #3
 800926e:	46a6      	mov	lr, r4
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	2700      	movs	r7, #0
 8009274:	0103      	lsls	r3, r0, #4
 8009276:	9401      	str	r4, [sp, #4]
 8009278:	9203      	str	r2, [sp, #12]
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	1d34      	adds	r4, r6, #4
 8009280:	9a03      	ldr	r2, [sp, #12]
 8009282:	4630      	mov	r0, r6
 8009284:	ed13 1a01 	vldr	s2, [r3, #-4]
 8009288:	463d      	mov	r5, r7
 800928a:	1991      	adds	r1, r2, r6
 800928c:	edd3 1a00 	vldr	s3, [r3]
 8009290:	4462      	add	r2, ip
 8009292:	ed1e 2a01 	vldr	s4, [lr, #-4]
 8009296:	edde 2a00 	vldr	s5, [lr]
 800929a:	4663      	mov	r3, ip
 800929c:	ed18 3a01 	vldr	s6, [r8, #-4]
 80092a0:	edd8 3a00 	vldr	s7, [r8]
 80092a4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80092a8:	445d      	add	r5, fp
 80092aa:	ed93 6a00 	vldr	s12, [r3]
 80092ae:	edd2 6a00 	vldr	s13, [r2]
 80092b2:	45aa      	cmp	sl, r5
 80092b4:	edd1 5a00 	vldr	s11, [r1]
 80092b8:	ee37 4a86 	vadd.f32	s8, s15, s12
 80092bc:	ed90 7a01 	vldr	s14, [r0, #4]
 80092c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80092c4:	ed91 5a01 	vldr	s10, [r1, #4]
 80092c8:	ee35 9aa6 	vadd.f32	s18, s11, s13
 80092cc:	ed93 6a01 	vldr	s12, [r3, #4]
 80092d0:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80092d4:	edd2 6a01 	vldr	s13, [r2, #4]
 80092d8:	ee77 4a06 	vadd.f32	s9, s14, s12
 80092dc:	ee75 9a26 	vadd.f32	s19, s10, s13
 80092e0:	ee37 7a46 	vsub.f32	s14, s14, s12
 80092e4:	ee35 5a66 	vsub.f32	s10, s10, s13
 80092e8:	ee34 6a49 	vsub.f32	s12, s8, s18
 80092ec:	ee74 0ae9 	vsub.f32	s1, s9, s19
 80092f0:	ee77 6ac5 	vsub.f32	s13, s15, s10
 80092f4:	ee77 7a85 	vadd.f32	s15, s15, s10
 80092f8:	ee35 5a87 	vadd.f32	s10, s11, s14
 80092fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009300:	ee62 8a06 	vmul.f32	s17, s4, s12
 8009304:	ee22 baa0 	vmul.f32	s22, s5, s1
 8009308:	ee21 8a26 	vmul.f32	s16, s2, s13
 800930c:	ee61 aa85 	vmul.f32	s21, s3, s10
 8009310:	ee63 5a27 	vmul.f32	s11, s6, s15
 8009314:	ee23 aa87 	vmul.f32	s20, s7, s14
 8009318:	ee34 4a09 	vadd.f32	s8, s8, s18
 800931c:	ee22 6a86 	vmul.f32	s12, s5, s12
 8009320:	ee62 0a20 	vmul.f32	s1, s4, s1
 8009324:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8009328:	ed04 4a01 	vstr	s8, [r4, #-4]
 800932c:	ee21 5a05 	vmul.f32	s10, s2, s10
 8009330:	444c      	add	r4, r9
 8009332:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8009336:	ee23 7a07 	vmul.f32	s14, s6, s14
 800933a:	ee74 4aa9 	vadd.f32	s9, s9, s19
 800933e:	ee78 8acb 	vsub.f32	s17, s17, s22
 8009342:	ee36 6a20 	vadd.f32	s12, s12, s1
 8009346:	ee38 4a6a 	vsub.f32	s8, s16, s21
 800934a:	edc0 4a01 	vstr	s9, [r0, #4]
 800934e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009352:	edc1 8a00 	vstr	s17, [r1]
 8009356:	ee75 5aca 	vsub.f32	s11, s11, s20
 800935a:	ed81 6a01 	vstr	s12, [r1, #4]
 800935e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009362:	ed83 4a00 	vstr	s8, [r3]
 8009366:	edc3 6a01 	vstr	s13, [r3, #4]
 800936a:	4448      	add	r0, r9
 800936c:	edc2 5a00 	vstr	s11, [r2]
 8009370:	4449      	add	r1, r9
 8009372:	edc2 7a01 	vstr	s15, [r2, #4]
 8009376:	444b      	add	r3, r9
 8009378:	444a      	add	r2, r9
 800937a:	d893      	bhi.n	80092a4 <arm_radix4_butterfly_inverse_f32+0x1ac>
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	3701      	adds	r7, #1
 8009380:	9a05      	ldr	r2, [sp, #20]
 8009382:	3608      	adds	r6, #8
 8009384:	f10c 0c08 	add.w	ip, ip, #8
 8009388:	4413      	add	r3, r2
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	449e      	add	lr, r3
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	4498      	add	r8, r3
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	42bb      	cmp	r3, r7
 8009398:	f47f af70 	bne.w	800927c <arm_radix4_butterfly_inverse_f32+0x184>
 800939c:	9a08      	ldr	r2, [sp, #32]
 800939e:	469b      	mov	fp, r3
 80093a0:	9b07      	ldr	r3, [sp, #28]
 80093a2:	0892      	lsrs	r2, r2, #2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	2a04      	cmp	r2, #4
 80093a8:	9208      	str	r2, [sp, #32]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	9307      	str	r3, [sp, #28]
 80093ae:	d903      	bls.n	80093b8 <arm_radix4_butterfly_inverse_f32+0x2c0>
 80093b0:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 80093b4:	4618      	mov	r0, r3
 80093b6:	e74c      	b.n	8009252 <arm_radix4_butterfly_inverse_f32+0x15a>
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093bc:	3320      	adds	r3, #32
 80093be:	ed53 7a04 	vldr	s15, [r3, #-16]
 80093c2:	3a01      	subs	r2, #1
 80093c4:	ed53 4a02 	vldr	s9, [r3, #-8]
 80093c8:	f103 0320 	add.w	r3, r3, #32
 80093cc:	ed13 7a10 	vldr	s14, [r3, #-64]	; 0xffffffc0
 80093d0:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 80093d4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80093d8:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80093dc:	ee35 4aa4 	vadd.f32	s8, s11, s9
 80093e0:	ed53 3a0b 	vldr	s7, [r3, #-44]	; 0xffffffd4
 80093e4:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 80093e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093ec:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80093f0:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80093f4:	ee76 4ac5 	vsub.f32	s9, s13, s10
 80093f8:	ee36 5a85 	vadd.f32	s10, s13, s10
 80093fc:	ee77 6aa3 	vadd.f32	s13, s15, s7
 8009400:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8009404:	ee76 3a04 	vadd.f32	s7, s12, s8
 8009408:	ee36 6a44 	vsub.f32	s12, s12, s8
 800940c:	ee37 4a64 	vsub.f32	s8, s14, s9
 8009410:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009414:	ee26 6a00 	vmul.f32	s12, s12, s0
 8009418:	ee76 4a85 	vadd.f32	s9, s13, s10
 800941c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009420:	ee37 5aa5 	vadd.f32	s10, s15, s11
 8009424:	ed03 6a0e 	vstr	s12, [r3, #-56]	; 0xffffffc8
 8009428:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800942c:	ee63 5a80 	vmul.f32	s11, s7, s0
 8009430:	ee24 4a00 	vmul.f32	s8, s8, s0
 8009434:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009438:	ed43 5a10 	vstr	s11, [r3, #-64]	; 0xffffffc0
 800943c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8009440:	ee64 5a80 	vmul.f32	s11, s9, s0
 8009444:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
 8009448:	ee25 6a00 	vmul.f32	s12, s10, s0
 800944c:	ed03 7a0a 	vstr	s14, [r3, #-40]	; 0xffffffd8
 8009450:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009454:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 8009458:	ed43 5a0f 	vstr	s11, [r3, #-60]	; 0xffffffc4
 800945c:	ed03 6a0b 	vstr	s12, [r3, #-44]	; 0xffffffd4
 8009460:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 8009464:	d1ab      	bne.n	80093be <arm_radix4_butterfly_inverse_f32+0x2c6>
 8009466:	b00d      	add	sp, #52	; 0x34
 8009468:	ecbd 8b08 	vpop	{d8-d11}
 800946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009470 <arm_cfft_radix4_f32>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	7880      	ldrb	r0, [r0, #2]
 8009476:	460d      	mov	r5, r1
 8009478:	2801      	cmp	r0, #1
 800947a:	8821      	ldrh	r1, [r4, #0]
 800947c:	6862      	ldr	r2, [r4, #4]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	d006      	beq.n	8009490 <arm_cfft_radix4_f32+0x20>
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fc92 	bl	8008dac <arm_radix4_butterfly_f32>
 8009488:	78e3      	ldrb	r3, [r4, #3]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d008      	beq.n	80094a0 <arm_cfft_radix4_f32+0x30>
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	ed94 0a04 	vldr	s0, [r4, #16]
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff fe2f 	bl	80090f8 <arm_radix4_butterfly_inverse_f32>
 800949a:	78e3      	ldrb	r3, [r4, #3]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d1f6      	bne.n	800948e <arm_cfft_radix4_f32+0x1e>
 80094a0:	4628      	mov	r0, r5
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	89e2      	ldrh	r2, [r4, #14]
 80094a6:	8821      	ldrh	r1, [r4, #0]
 80094a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094ac:	f000 b800 	b.w	80094b0 <arm_bitreversal_f32>

080094b0 <arm_bitreversal_f32>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	0052      	lsls	r2, r2, #1
 80094b6:	b085      	sub	sp, #20
 80094b8:	084c      	lsrs	r4, r1, #1
 80094ba:	2100      	movs	r1, #0
 80094bc:	9201      	str	r2, [sp, #4]
 80094be:	1ea2      	subs	r2, r4, #2
 80094c0:	9402      	str	r4, [sp, #8]
 80094c2:	f104 0e01 	add.w	lr, r4, #1
 80094c6:	460c      	mov	r4, r1
 80094c8:	9203      	str	r2, [sp, #12]
 80094ca:	460a      	mov	r2, r1
 80094cc:	1c4e      	adds	r6, r1, #1
 80094ce:	9902      	ldr	r1, [sp, #8]
 80094d0:	3402      	adds	r4, #2
 80094d2:	440a      	add	r2, r1
 80094d4:	00f6      	lsls	r6, r6, #3
 80094d6:	b2a4      	uxth	r4, r4
 80094d8:	00d2      	lsls	r2, r2, #3
 80094da:	1985      	adds	r5, r0, r6
 80094dc:	3604      	adds	r6, #4
 80094de:	1881      	adds	r1, r0, r2
 80094e0:	f8d5 c000 	ldr.w	ip, [r5]
 80094e4:	3204      	adds	r2, #4
 80094e6:	4406      	add	r6, r0
 80094e8:	680f      	ldr	r7, [r1, #0]
 80094ea:	4402      	add	r2, r0
 80094ec:	602f      	str	r7, [r5, #0]
 80094ee:	eb04 050e 	add.w	r5, r4, lr
 80094f2:	f8c1 c000 	str.w	ip, [r1]
 80094f6:	00e7      	lsls	r7, r4, #3
 80094f8:	00ed      	lsls	r5, r5, #3
 80094fa:	f8d2 a000 	ldr.w	sl, [r2]
 80094fe:	f8d6 9000 	ldr.w	r9, [r6]
 8009502:	eb00 0c07 	add.w	ip, r0, r7
 8009506:	eb00 0805 	add.w	r8, r0, r5
 800950a:	3504      	adds	r5, #4
 800950c:	f8c6 a000 	str.w	sl, [r6]
 8009510:	3704      	adds	r7, #4
 8009512:	1946      	adds	r6, r0, r5
 8009514:	9d01      	ldr	r5, [sp, #4]
 8009516:	f8c2 9000 	str.w	r9, [r2]
 800951a:	4621      	mov	r1, r4
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	442b      	add	r3, r5
 8009520:	9d03      	ldr	r5, [sp, #12]
 8009522:	4407      	add	r7, r0
 8009524:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8009528:	42ac      	cmp	r4, r5
 800952a:	eb02 050e 	add.w	r5, r2, lr
 800952e:	d82b      	bhi.n	8009588 <arm_bitreversal_f32+0xd8>
 8009530:	00ed      	lsls	r5, r5, #3
 8009532:	eb00 0a09 	add.w	sl, r0, r9
 8009536:	42a2      	cmp	r2, r4
 8009538:	f109 0904 	add.w	r9, r9, #4
 800953c:	eb00 0b05 	add.w	fp, r0, r5
 8009540:	f105 0504 	add.w	r5, r5, #4
 8009544:	4481      	add	r9, r0
 8009546:	d9c1      	bls.n	80094cc <arm_bitreversal_f32+0x1c>
 8009548:	eddc 7a00 	vldr	s15, [ip]
 800954c:	4405      	add	r5, r0
 800954e:	ed9a 7a00 	vldr	s14, [sl]
 8009552:	ed8c 7a00 	vstr	s14, [ip]
 8009556:	edca 7a00 	vstr	s15, [sl]
 800955a:	f8d7 c000 	ldr.w	ip, [r7]
 800955e:	f8d9 a000 	ldr.w	sl, [r9]
 8009562:	f8c7 a000 	str.w	sl, [r7]
 8009566:	f8c9 c000 	str.w	ip, [r9]
 800956a:	f8d8 7000 	ldr.w	r7, [r8]
 800956e:	f8db c000 	ldr.w	ip, [fp]
 8009572:	f8c8 c000 	str.w	ip, [r8]
 8009576:	f8cb 7000 	str.w	r7, [fp]
 800957a:	6837      	ldr	r7, [r6, #0]
 800957c:	f8d5 c000 	ldr.w	ip, [r5]
 8009580:	f8c6 c000 	str.w	ip, [r6]
 8009584:	602f      	str	r7, [r5, #0]
 8009586:	e7a1      	b.n	80094cc <arm_bitreversal_f32+0x1c>
 8009588:	b005      	add	sp, #20
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958e:	bf00      	nop

08009590 <arm_cmplx_mag_f32>:
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	0897      	lsrs	r7, r2, #2
 8009596:	ed2d 8b02 	vpush	{d8}
 800959a:	b084      	sub	sp, #16
 800959c:	d077      	beq.n	800968e <arm_cmplx_mag_f32+0xfe>
 800959e:	f100 0420 	add.w	r4, r0, #32
 80095a2:	f101 0510 	add.w	r5, r1, #16
 80095a6:	463e      	mov	r6, r7
 80095a8:	f04f 0800 	mov.w	r8, #0
 80095ac:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80095b0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80095b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80095b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c8:	f2c0 80c1 	blt.w	800974e <arm_cmplx_mag_f32+0x1be>
 80095cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80095d0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80095d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d8:	f100 80d4 	bmi.w	8009784 <arm_cmplx_mag_f32+0x1f4>
 80095dc:	ed05 8a04 	vstr	s16, [r5, #-16]
 80095e0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80095e4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80095e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80095ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fc:	f2c0 80a4 	blt.w	8009748 <arm_cmplx_mag_f32+0x1b8>
 8009600:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009604:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	f100 80a8 	bmi.w	8009760 <arm_cmplx_mag_f32+0x1d0>
 8009610:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009614:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009618:	ed54 7a03 	vldr	s15, [r4, #-12]
 800961c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009624:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009628:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800962c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009630:	f2c0 8087 	blt.w	8009742 <arm_cmplx_mag_f32+0x1b2>
 8009634:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009638:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	f100 8097 	bmi.w	8009772 <arm_cmplx_mag_f32+0x1e2>
 8009644:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009648:	ed14 0a02 	vldr	s0, [r4, #-8]
 800964c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009650:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009658:	ee30 0a27 	vadd.f32	s0, s0, s15
 800965c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009664:	db6a      	blt.n	800973c <arm_cmplx_mag_f32+0x1ac>
 8009666:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800966a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800966e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009672:	f100 8090 	bmi.w	8009796 <arm_cmplx_mag_f32+0x206>
 8009676:	ed05 8a01 	vstr	s16, [r5, #-4]
 800967a:	3e01      	subs	r6, #1
 800967c:	f104 0420 	add.w	r4, r4, #32
 8009680:	f105 0510 	add.w	r5, r5, #16
 8009684:	d192      	bne.n	80095ac <arm_cmplx_mag_f32+0x1c>
 8009686:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800968a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800968e:	f012 0203 	ands.w	r2, r2, #3
 8009692:	d04e      	beq.n	8009732 <arm_cmplx_mag_f32+0x1a2>
 8009694:	ed90 0a00 	vldr	s0, [r0]
 8009698:	2300      	movs	r3, #0
 800969a:	edd0 7a01 	vldr	s15, [r0, #4]
 800969e:	ee20 0a00 	vmul.f32	s0, s0, s0
 80096a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80096a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80096aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	db4f      	blt.n	8009754 <arm_cmplx_mag_f32+0x1c4>
 80096b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d472      	bmi.n	80097a8 <arm_cmplx_mag_f32+0x218>
 80096c2:	ed81 8a00 	vstr	s16, [r1]
 80096c6:	3a01      	subs	r2, #1
 80096c8:	d033      	beq.n	8009732 <arm_cmplx_mag_f32+0x1a2>
 80096ca:	ed90 0a02 	vldr	s0, [r0, #8]
 80096ce:	2300      	movs	r3, #0
 80096d0:	edd0 7a03 	vldr	s15, [r0, #12]
 80096d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80096d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80096dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80096e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e8:	db36      	blt.n	8009758 <arm_cmplx_mag_f32+0x1c8>
 80096ea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80096ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80096f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f6:	d460      	bmi.n	80097ba <arm_cmplx_mag_f32+0x22a>
 80096f8:	ed81 8a01 	vstr	s16, [r1, #4]
 80096fc:	2a01      	cmp	r2, #1
 80096fe:	d018      	beq.n	8009732 <arm_cmplx_mag_f32+0x1a2>
 8009700:	ed90 0a04 	vldr	s0, [r0, #16]
 8009704:	2300      	movs	r3, #0
 8009706:	edd0 7a05 	vldr	s15, [r0, #20]
 800970a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800970e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009712:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	db1d      	blt.n	800975c <arm_cmplx_mag_f32+0x1cc>
 8009720:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009724:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	d44e      	bmi.n	80097cc <arm_cmplx_mag_f32+0x23c>
 800972e:	ed81 8a02 	vstr	s16, [r1, #8]
 8009732:	b004      	add	sp, #16
 8009734:	ecbd 8b02 	vpop	{d8}
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973c:	f845 8c04 	str.w	r8, [r5, #-4]
 8009740:	e79b      	b.n	800967a <arm_cmplx_mag_f32+0xea>
 8009742:	f845 8c08 	str.w	r8, [r5, #-8]
 8009746:	e77f      	b.n	8009648 <arm_cmplx_mag_f32+0xb8>
 8009748:	f845 8c0c 	str.w	r8, [r5, #-12]
 800974c:	e762      	b.n	8009614 <arm_cmplx_mag_f32+0x84>
 800974e:	f845 8c10 	str.w	r8, [r5, #-16]
 8009752:	e745      	b.n	80095e0 <arm_cmplx_mag_f32+0x50>
 8009754:	600b      	str	r3, [r1, #0]
 8009756:	e7b6      	b.n	80096c6 <arm_cmplx_mag_f32+0x136>
 8009758:	604b      	str	r3, [r1, #4]
 800975a:	e7cf      	b.n	80096fc <arm_cmplx_mag_f32+0x16c>
 800975c:	608b      	str	r3, [r1, #8]
 800975e:	e7e8      	b.n	8009732 <arm_cmplx_mag_f32+0x1a2>
 8009760:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009764:	9001      	str	r0, [sp, #4]
 8009766:	f000 fcf1 	bl	800a14c <sqrtf>
 800976a:	9801      	ldr	r0, [sp, #4]
 800976c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009770:	e74e      	b.n	8009610 <arm_cmplx_mag_f32+0x80>
 8009772:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009776:	9001      	str	r0, [sp, #4]
 8009778:	f000 fce8 	bl	800a14c <sqrtf>
 800977c:	9801      	ldr	r0, [sp, #4]
 800977e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009782:	e75f      	b.n	8009644 <arm_cmplx_mag_f32+0xb4>
 8009784:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009788:	9001      	str	r0, [sp, #4]
 800978a:	f000 fcdf 	bl	800a14c <sqrtf>
 800978e:	9801      	ldr	r0, [sp, #4]
 8009790:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009794:	e722      	b.n	80095dc <arm_cmplx_mag_f32+0x4c>
 8009796:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800979a:	9001      	str	r0, [sp, #4]
 800979c:	f000 fcd6 	bl	800a14c <sqrtf>
 80097a0:	9801      	ldr	r0, [sp, #4]
 80097a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80097a6:	e766      	b.n	8009676 <arm_cmplx_mag_f32+0xe6>
 80097a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ac:	9201      	str	r2, [sp, #4]
 80097ae:	f000 fccd 	bl	800a14c <sqrtf>
 80097b2:	9903      	ldr	r1, [sp, #12]
 80097b4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80097b8:	e783      	b.n	80096c2 <arm_cmplx_mag_f32+0x132>
 80097ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097be:	9201      	str	r2, [sp, #4]
 80097c0:	f000 fcc4 	bl	800a14c <sqrtf>
 80097c4:	9903      	ldr	r1, [sp, #12]
 80097c6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80097ca:	e795      	b.n	80096f8 <arm_cmplx_mag_f32+0x168>
 80097cc:	9101      	str	r1, [sp, #4]
 80097ce:	f000 fcbd 	bl	800a14c <sqrtf>
 80097d2:	9901      	ldr	r1, [sp, #4]
 80097d4:	e7ab      	b.n	800972e <arm_cmplx_mag_f32+0x19e>
 80097d6:	bf00      	nop

080097d8 <__errno>:
 80097d8:	4b01      	ldr	r3, [pc, #4]	; (80097e0 <__errno+0x8>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	24000128 	.word	0x24000128

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4d0d      	ldr	r5, [pc, #52]	; (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	; (8009820 <__libc_init_array+0x3c>)
 80097ea:	1b64      	subs	r4, r4, r5
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2600      	movs	r6, #0
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4d0b      	ldr	r5, [pc, #44]	; (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	; (8009828 <__libc_init_array+0x44>)
 80097f8:	f000 fcca 	bl	800a190 <_init>
 80097fc:	1b64      	subs	r4, r4, r5
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2600      	movs	r6, #0
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f855 3b04 	ldr.w	r3, [r5], #4
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f855 3b04 	ldr.w	r3, [r5], #4
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	08012a38 	.word	0x08012a38
 8009820:	08012a38 	.word	0x08012a38
 8009824:	08012a38 	.word	0x08012a38
 8009828:	08012a3c 	.word	0x08012a3c

0800982c <memcpy>:
 800982c:	440a      	add	r2, r1
 800982e:	4291      	cmp	r1, r2
 8009830:	f100 33ff 	add.w	r3, r0, #4294967295
 8009834:	d100      	bne.n	8009838 <memcpy+0xc>
 8009836:	4770      	bx	lr
 8009838:	b510      	push	{r4, lr}
 800983a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009842:	4291      	cmp	r1, r2
 8009844:	d1f9      	bne.n	800983a <memcpy+0xe>
 8009846:	bd10      	pop	{r4, pc}

08009848 <memset>:
 8009848:	4402      	add	r2, r0
 800984a:	4603      	mov	r3, r0
 800984c:	4293      	cmp	r3, r2
 800984e:	d100      	bne.n	8009852 <memset+0xa>
 8009850:	4770      	bx	lr
 8009852:	f803 1b01 	strb.w	r1, [r3], #1
 8009856:	e7f9      	b.n	800984c <memset+0x4>

08009858 <_vsniprintf_r>:
 8009858:	b530      	push	{r4, r5, lr}
 800985a:	4614      	mov	r4, r2
 800985c:	2c00      	cmp	r4, #0
 800985e:	b09b      	sub	sp, #108	; 0x6c
 8009860:	4605      	mov	r5, r0
 8009862:	461a      	mov	r2, r3
 8009864:	da05      	bge.n	8009872 <_vsniprintf_r+0x1a>
 8009866:	238b      	movs	r3, #139	; 0x8b
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	b01b      	add	sp, #108	; 0x6c
 8009870:	bd30      	pop	{r4, r5, pc}
 8009872:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009876:	f8ad 300c 	strh.w	r3, [sp, #12]
 800987a:	bf14      	ite	ne
 800987c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009880:	4623      	moveq	r3, r4
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800988a:	9100      	str	r1, [sp, #0]
 800988c:	9104      	str	r1, [sp, #16]
 800988e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009892:	4669      	mov	r1, sp
 8009894:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009896:	f000 f875 	bl	8009984 <_svfiprintf_r>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	bfbc      	itt	lt
 800989e:	238b      	movlt	r3, #139	; 0x8b
 80098a0:	602b      	strlt	r3, [r5, #0]
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d0e3      	beq.n	800986e <_vsniprintf_r+0x16>
 80098a6:	9b00      	ldr	r3, [sp, #0]
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	e7df      	b.n	800986e <_vsniprintf_r+0x16>
	...

080098b0 <vsniprintf>:
 80098b0:	b507      	push	{r0, r1, r2, lr}
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	460a      	mov	r2, r1
 80098b8:	4601      	mov	r1, r0
 80098ba:	4803      	ldr	r0, [pc, #12]	; (80098c8 <vsniprintf+0x18>)
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f7ff ffcb 	bl	8009858 <_vsniprintf_r>
 80098c2:	b003      	add	sp, #12
 80098c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80098c8:	24000128 	.word	0x24000128

080098cc <__ssputs_r>:
 80098cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d0:	688e      	ldr	r6, [r1, #8]
 80098d2:	429e      	cmp	r6, r3
 80098d4:	4682      	mov	sl, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4690      	mov	r8, r2
 80098da:	461f      	mov	r7, r3
 80098dc:	d838      	bhi.n	8009950 <__ssputs_r+0x84>
 80098de:	898a      	ldrh	r2, [r1, #12]
 80098e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e4:	d032      	beq.n	800994c <__ssputs_r+0x80>
 80098e6:	6825      	ldr	r5, [r4, #0]
 80098e8:	6909      	ldr	r1, [r1, #16]
 80098ea:	eba5 0901 	sub.w	r9, r5, r1
 80098ee:	6965      	ldr	r5, [r4, #20]
 80098f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098f8:	3301      	adds	r3, #1
 80098fa:	444b      	add	r3, r9
 80098fc:	106d      	asrs	r5, r5, #1
 80098fe:	429d      	cmp	r5, r3
 8009900:	bf38      	it	cc
 8009902:	461d      	movcc	r5, r3
 8009904:	0553      	lsls	r3, r2, #21
 8009906:	d531      	bpl.n	800996c <__ssputs_r+0xa0>
 8009908:	4629      	mov	r1, r5
 800990a:	f000 fb55 	bl	8009fb8 <_malloc_r>
 800990e:	4606      	mov	r6, r0
 8009910:	b950      	cbnz	r0, 8009928 <__ssputs_r+0x5c>
 8009912:	230c      	movs	r3, #12
 8009914:	f8ca 3000 	str.w	r3, [sl]
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	6921      	ldr	r1, [r4, #16]
 800992a:	464a      	mov	r2, r9
 800992c:	f7ff ff7e 	bl	800982c <memcpy>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	6126      	str	r6, [r4, #16]
 800993e:	6165      	str	r5, [r4, #20]
 8009940:	444e      	add	r6, r9
 8009942:	eba5 0509 	sub.w	r5, r5, r9
 8009946:	6026      	str	r6, [r4, #0]
 8009948:	60a5      	str	r5, [r4, #8]
 800994a:	463e      	mov	r6, r7
 800994c:	42be      	cmp	r6, r7
 800994e:	d900      	bls.n	8009952 <__ssputs_r+0x86>
 8009950:	463e      	mov	r6, r7
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	4632      	mov	r2, r6
 8009956:	4641      	mov	r1, r8
 8009958:	f000 faa8 	bl	8009eac <memmove>
 800995c:	68a3      	ldr	r3, [r4, #8]
 800995e:	1b9b      	subs	r3, r3, r6
 8009960:	60a3      	str	r3, [r4, #8]
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	4433      	add	r3, r6
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	2000      	movs	r0, #0
 800996a:	e7db      	b.n	8009924 <__ssputs_r+0x58>
 800996c:	462a      	mov	r2, r5
 800996e:	f000 fb97 	bl	800a0a0 <_realloc_r>
 8009972:	4606      	mov	r6, r0
 8009974:	2800      	cmp	r0, #0
 8009976:	d1e1      	bne.n	800993c <__ssputs_r+0x70>
 8009978:	6921      	ldr	r1, [r4, #16]
 800997a:	4650      	mov	r0, sl
 800997c:	f000 fab0 	bl	8009ee0 <_free_r>
 8009980:	e7c7      	b.n	8009912 <__ssputs_r+0x46>
	...

08009984 <_svfiprintf_r>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	4698      	mov	r8, r3
 800998a:	898b      	ldrh	r3, [r1, #12]
 800998c:	061b      	lsls	r3, r3, #24
 800998e:	b09d      	sub	sp, #116	; 0x74
 8009990:	4607      	mov	r7, r0
 8009992:	460d      	mov	r5, r1
 8009994:	4614      	mov	r4, r2
 8009996:	d50e      	bpl.n	80099b6 <_svfiprintf_r+0x32>
 8009998:	690b      	ldr	r3, [r1, #16]
 800999a:	b963      	cbnz	r3, 80099b6 <_svfiprintf_r+0x32>
 800999c:	2140      	movs	r1, #64	; 0x40
 800999e:	f000 fb0b 	bl	8009fb8 <_malloc_r>
 80099a2:	6028      	str	r0, [r5, #0]
 80099a4:	6128      	str	r0, [r5, #16]
 80099a6:	b920      	cbnz	r0, 80099b2 <_svfiprintf_r+0x2e>
 80099a8:	230c      	movs	r3, #12
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e0d1      	b.n	8009b56 <_svfiprintf_r+0x1d2>
 80099b2:	2340      	movs	r3, #64	; 0x40
 80099b4:	616b      	str	r3, [r5, #20]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	2320      	movs	r3, #32
 80099bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099c4:	2330      	movs	r3, #48	; 0x30
 80099c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b70 <_svfiprintf_r+0x1ec>
 80099ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ce:	f04f 0901 	mov.w	r9, #1
 80099d2:	4623      	mov	r3, r4
 80099d4:	469a      	mov	sl, r3
 80099d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099da:	b10a      	cbz	r2, 80099e0 <_svfiprintf_r+0x5c>
 80099dc:	2a25      	cmp	r2, #37	; 0x25
 80099de:	d1f9      	bne.n	80099d4 <_svfiprintf_r+0x50>
 80099e0:	ebba 0b04 	subs.w	fp, sl, r4
 80099e4:	d00b      	beq.n	80099fe <_svfiprintf_r+0x7a>
 80099e6:	465b      	mov	r3, fp
 80099e8:	4622      	mov	r2, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff ff6d 	bl	80098cc <__ssputs_r>
 80099f2:	3001      	adds	r0, #1
 80099f4:	f000 80aa 	beq.w	8009b4c <_svfiprintf_r+0x1c8>
 80099f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099fa:	445a      	add	r2, fp
 80099fc:	9209      	str	r2, [sp, #36]	; 0x24
 80099fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80a2 	beq.w	8009b4c <_svfiprintf_r+0x1c8>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a12:	f10a 0a01 	add.w	sl, sl, #1
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a20:	4654      	mov	r4, sl
 8009a22:	2205      	movs	r2, #5
 8009a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a28:	4851      	ldr	r0, [pc, #324]	; (8009b70 <_svfiprintf_r+0x1ec>)
 8009a2a:	f7f6 fc59 	bl	80002e0 <memchr>
 8009a2e:	9a04      	ldr	r2, [sp, #16]
 8009a30:	b9d8      	cbnz	r0, 8009a6a <_svfiprintf_r+0xe6>
 8009a32:	06d0      	lsls	r0, r2, #27
 8009a34:	bf44      	itt	mi
 8009a36:	2320      	movmi	r3, #32
 8009a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a3c:	0711      	lsls	r1, r2, #28
 8009a3e:	bf44      	itt	mi
 8009a40:	232b      	movmi	r3, #43	; 0x2b
 8009a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a4c:	d015      	beq.n	8009a7a <_svfiprintf_r+0xf6>
 8009a4e:	9a07      	ldr	r2, [sp, #28]
 8009a50:	4654      	mov	r4, sl
 8009a52:	2000      	movs	r0, #0
 8009a54:	f04f 0c0a 	mov.w	ip, #10
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5e:	3b30      	subs	r3, #48	; 0x30
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d94e      	bls.n	8009b02 <_svfiprintf_r+0x17e>
 8009a64:	b1b0      	cbz	r0, 8009a94 <_svfiprintf_r+0x110>
 8009a66:	9207      	str	r2, [sp, #28]
 8009a68:	e014      	b.n	8009a94 <_svfiprintf_r+0x110>
 8009a6a:	eba0 0308 	sub.w	r3, r0, r8
 8009a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a72:	4313      	orrs	r3, r2
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	46a2      	mov	sl, r4
 8009a78:	e7d2      	b.n	8009a20 <_svfiprintf_r+0x9c>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	1d19      	adds	r1, r3, #4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	9103      	str	r1, [sp, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bfbb      	ittet	lt
 8009a86:	425b      	neglt	r3, r3
 8009a88:	f042 0202 	orrlt.w	r2, r2, #2
 8009a8c:	9307      	strge	r3, [sp, #28]
 8009a8e:	9307      	strlt	r3, [sp, #28]
 8009a90:	bfb8      	it	lt
 8009a92:	9204      	strlt	r2, [sp, #16]
 8009a94:	7823      	ldrb	r3, [r4, #0]
 8009a96:	2b2e      	cmp	r3, #46	; 0x2e
 8009a98:	d10c      	bne.n	8009ab4 <_svfiprintf_r+0x130>
 8009a9a:	7863      	ldrb	r3, [r4, #1]
 8009a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9e:	d135      	bne.n	8009b0c <_svfiprintf_r+0x188>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	9203      	str	r2, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfb8      	it	lt
 8009aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ab0:	3402      	adds	r4, #2
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b80 <_svfiprintf_r+0x1fc>
 8009ab8:	7821      	ldrb	r1, [r4, #0]
 8009aba:	2203      	movs	r2, #3
 8009abc:	4650      	mov	r0, sl
 8009abe:	f7f6 fc0f 	bl	80002e0 <memchr>
 8009ac2:	b140      	cbz	r0, 8009ad6 <_svfiprintf_r+0x152>
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	eba0 000a 	sub.w	r0, r0, sl
 8009aca:	fa03 f000 	lsl.w	r0, r3, r0
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	4303      	orrs	r3, r0
 8009ad2:	3401      	adds	r4, #1
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	4826      	ldr	r0, [pc, #152]	; (8009b74 <_svfiprintf_r+0x1f0>)
 8009adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae0:	2206      	movs	r2, #6
 8009ae2:	f7f6 fbfd 	bl	80002e0 <memchr>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d038      	beq.n	8009b5c <_svfiprintf_r+0x1d8>
 8009aea:	4b23      	ldr	r3, [pc, #140]	; (8009b78 <_svfiprintf_r+0x1f4>)
 8009aec:	bb1b      	cbnz	r3, 8009b36 <_svfiprintf_r+0x1b2>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	3307      	adds	r3, #7
 8009af2:	f023 0307 	bic.w	r3, r3, #7
 8009af6:	3308      	adds	r3, #8
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afc:	4433      	add	r3, r6
 8009afe:	9309      	str	r3, [sp, #36]	; 0x24
 8009b00:	e767      	b.n	80099d2 <_svfiprintf_r+0x4e>
 8009b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b06:	460c      	mov	r4, r1
 8009b08:	2001      	movs	r0, #1
 8009b0a:	e7a5      	b.n	8009a58 <_svfiprintf_r+0xd4>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	3401      	adds	r4, #1
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	4619      	mov	r1, r3
 8009b14:	f04f 0c0a 	mov.w	ip, #10
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b1e:	3a30      	subs	r2, #48	; 0x30
 8009b20:	2a09      	cmp	r2, #9
 8009b22:	d903      	bls.n	8009b2c <_svfiprintf_r+0x1a8>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0c5      	beq.n	8009ab4 <_svfiprintf_r+0x130>
 8009b28:	9105      	str	r1, [sp, #20]
 8009b2a:	e7c3      	b.n	8009ab4 <_svfiprintf_r+0x130>
 8009b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b30:	4604      	mov	r4, r0
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7f0      	b.n	8009b18 <_svfiprintf_r+0x194>
 8009b36:	ab03      	add	r3, sp, #12
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <_svfiprintf_r+0x1f8>)
 8009b3e:	a904      	add	r1, sp, #16
 8009b40:	4638      	mov	r0, r7
 8009b42:	f3af 8000 	nop.w
 8009b46:	1c42      	adds	r2, r0, #1
 8009b48:	4606      	mov	r6, r0
 8009b4a:	d1d6      	bne.n	8009afa <_svfiprintf_r+0x176>
 8009b4c:	89ab      	ldrh	r3, [r5, #12]
 8009b4e:	065b      	lsls	r3, r3, #25
 8009b50:	f53f af2c 	bmi.w	80099ac <_svfiprintf_r+0x28>
 8009b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b56:	b01d      	add	sp, #116	; 0x74
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <_svfiprintf_r+0x1f8>)
 8009b64:	a904      	add	r1, sp, #16
 8009b66:	4638      	mov	r0, r7
 8009b68:	f000 f87a 	bl	8009c60 <_printf_i>
 8009b6c:	e7eb      	b.n	8009b46 <_svfiprintf_r+0x1c2>
 8009b6e:	bf00      	nop
 8009b70:	08012a04 	.word	0x08012a04
 8009b74:	08012a0e 	.word	0x08012a0e
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	080098cd 	.word	0x080098cd
 8009b80:	08012a0a 	.word	0x08012a0a

08009b84 <_printf_common>:
 8009b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b88:	4616      	mov	r6, r2
 8009b8a:	4699      	mov	r9, r3
 8009b8c:	688a      	ldr	r2, [r1, #8]
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bfb8      	it	lt
 8009b98:	4613      	movlt	r3, r2
 8009b9a:	6033      	str	r3, [r6, #0]
 8009b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	b10a      	cbz	r2, 8009baa <_printf_common+0x26>
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	0699      	lsls	r1, r3, #26
 8009bae:	bf42      	ittt	mi
 8009bb0:	6833      	ldrmi	r3, [r6, #0]
 8009bb2:	3302      	addmi	r3, #2
 8009bb4:	6033      	strmi	r3, [r6, #0]
 8009bb6:	6825      	ldr	r5, [r4, #0]
 8009bb8:	f015 0506 	ands.w	r5, r5, #6
 8009bbc:	d106      	bne.n	8009bcc <_printf_common+0x48>
 8009bbe:	f104 0a19 	add.w	sl, r4, #25
 8009bc2:	68e3      	ldr	r3, [r4, #12]
 8009bc4:	6832      	ldr	r2, [r6, #0]
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	dc26      	bgt.n	8009c1a <_printf_common+0x96>
 8009bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bd0:	1e13      	subs	r3, r2, #0
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	bf18      	it	ne
 8009bd6:	2301      	movne	r3, #1
 8009bd8:	0692      	lsls	r2, r2, #26
 8009bda:	d42b      	bmi.n	8009c34 <_printf_common+0xb0>
 8009bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009be0:	4649      	mov	r1, r9
 8009be2:	4638      	mov	r0, r7
 8009be4:	47c0      	blx	r8
 8009be6:	3001      	adds	r0, #1
 8009be8:	d01e      	beq.n	8009c28 <_printf_common+0xa4>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	68e5      	ldr	r5, [r4, #12]
 8009bee:	6832      	ldr	r2, [r6, #0]
 8009bf0:	f003 0306 	and.w	r3, r3, #6
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	bf08      	it	eq
 8009bf8:	1aad      	subeq	r5, r5, r2
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	6922      	ldr	r2, [r4, #16]
 8009bfe:	bf0c      	ite	eq
 8009c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c04:	2500      	movne	r5, #0
 8009c06:	4293      	cmp	r3, r2
 8009c08:	bfc4      	itt	gt
 8009c0a:	1a9b      	subgt	r3, r3, r2
 8009c0c:	18ed      	addgt	r5, r5, r3
 8009c0e:	2600      	movs	r6, #0
 8009c10:	341a      	adds	r4, #26
 8009c12:	42b5      	cmp	r5, r6
 8009c14:	d11a      	bne.n	8009c4c <_printf_common+0xc8>
 8009c16:	2000      	movs	r0, #0
 8009c18:	e008      	b.n	8009c2c <_printf_common+0xa8>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	4649      	mov	r1, r9
 8009c20:	4638      	mov	r0, r7
 8009c22:	47c0      	blx	r8
 8009c24:	3001      	adds	r0, #1
 8009c26:	d103      	bne.n	8009c30 <_printf_common+0xac>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c30:	3501      	adds	r5, #1
 8009c32:	e7c6      	b.n	8009bc2 <_printf_common+0x3e>
 8009c34:	18e1      	adds	r1, r4, r3
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	2030      	movs	r0, #48	; 0x30
 8009c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c3e:	4422      	add	r2, r4
 8009c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c48:	3302      	adds	r3, #2
 8009c4a:	e7c7      	b.n	8009bdc <_printf_common+0x58>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4622      	mov	r2, r4
 8009c50:	4649      	mov	r1, r9
 8009c52:	4638      	mov	r0, r7
 8009c54:	47c0      	blx	r8
 8009c56:	3001      	adds	r0, #1
 8009c58:	d0e6      	beq.n	8009c28 <_printf_common+0xa4>
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	e7d9      	b.n	8009c12 <_printf_common+0x8e>
	...

08009c60 <_printf_i>:
 8009c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	7e0f      	ldrb	r7, [r1, #24]
 8009c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c68:	2f78      	cmp	r7, #120	; 0x78
 8009c6a:	4691      	mov	r9, r2
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	469a      	mov	sl, r3
 8009c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c76:	d807      	bhi.n	8009c88 <_printf_i+0x28>
 8009c78:	2f62      	cmp	r7, #98	; 0x62
 8009c7a:	d80a      	bhi.n	8009c92 <_printf_i+0x32>
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	f000 80d8 	beq.w	8009e32 <_printf_i+0x1d2>
 8009c82:	2f58      	cmp	r7, #88	; 0x58
 8009c84:	f000 80a3 	beq.w	8009dce <_printf_i+0x16e>
 8009c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c90:	e03a      	b.n	8009d08 <_printf_i+0xa8>
 8009c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c96:	2b15      	cmp	r3, #21
 8009c98:	d8f6      	bhi.n	8009c88 <_printf_i+0x28>
 8009c9a:	a101      	add	r1, pc, #4	; (adr r1, 8009ca0 <_printf_i+0x40>)
 8009c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009d0d 	.word	0x08009d0d
 8009ca8:	08009c89 	.word	0x08009c89
 8009cac:	08009c89 	.word	0x08009c89
 8009cb0:	08009c89 	.word	0x08009c89
 8009cb4:	08009c89 	.word	0x08009c89
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c89 	.word	0x08009c89
 8009cc0:	08009c89 	.word	0x08009c89
 8009cc4:	08009c89 	.word	0x08009c89
 8009cc8:	08009c89 	.word	0x08009c89
 8009ccc:	08009e19 	.word	0x08009e19
 8009cd0:	08009d3d 	.word	0x08009d3d
 8009cd4:	08009dfb 	.word	0x08009dfb
 8009cd8:	08009c89 	.word	0x08009c89
 8009cdc:	08009c89 	.word	0x08009c89
 8009ce0:	08009e3b 	.word	0x08009e3b
 8009ce4:	08009c89 	.word	0x08009c89
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009c89 	.word	0x08009c89
 8009cf0:	08009c89 	.word	0x08009c89
 8009cf4:	08009e03 	.word	0x08009e03
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	1d1a      	adds	r2, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	602a      	str	r2, [r5, #0]
 8009d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e0a3      	b.n	8009e54 <_printf_i+0x1f4>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	0606      	lsls	r6, r0, #24
 8009d12:	f101 0304 	add.w	r3, r1, #4
 8009d16:	d50a      	bpl.n	8009d2e <_printf_i+0xce>
 8009d18:	680e      	ldr	r6, [r1, #0]
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	da03      	bge.n	8009d28 <_printf_i+0xc8>
 8009d20:	232d      	movs	r3, #45	; 0x2d
 8009d22:	4276      	negs	r6, r6
 8009d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d28:	485e      	ldr	r0, [pc, #376]	; (8009ea4 <_printf_i+0x244>)
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	e019      	b.n	8009d62 <_printf_i+0x102>
 8009d2e:	680e      	ldr	r6, [r1, #0]
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d36:	bf18      	it	ne
 8009d38:	b236      	sxthne	r6, r6
 8009d3a:	e7ef      	b.n	8009d1c <_printf_i+0xbc>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	6029      	str	r1, [r5, #0]
 8009d44:	0601      	lsls	r1, r0, #24
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0xec>
 8009d48:	681e      	ldr	r6, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0xf2>
 8009d4c:	0646      	lsls	r6, r0, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0xe8>
 8009d50:	881e      	ldrh	r6, [r3, #0]
 8009d52:	4854      	ldr	r0, [pc, #336]	; (8009ea4 <_printf_i+0x244>)
 8009d54:	2f6f      	cmp	r7, #111	; 0x6f
 8009d56:	bf0c      	ite	eq
 8009d58:	2308      	moveq	r3, #8
 8009d5a:	230a      	movne	r3, #10
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d62:	6865      	ldr	r5, [r4, #4]
 8009d64:	60a5      	str	r5, [r4, #8]
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	bfa2      	ittt	ge
 8009d6a:	6821      	ldrge	r1, [r4, #0]
 8009d6c:	f021 0104 	bicge.w	r1, r1, #4
 8009d70:	6021      	strge	r1, [r4, #0]
 8009d72:	b90e      	cbnz	r6, 8009d78 <_printf_i+0x118>
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	d04d      	beq.n	8009e14 <_printf_i+0x1b4>
 8009d78:	4615      	mov	r5, r2
 8009d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d82:	5dc7      	ldrb	r7, [r0, r7]
 8009d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d88:	4637      	mov	r7, r6
 8009d8a:	42bb      	cmp	r3, r7
 8009d8c:	460e      	mov	r6, r1
 8009d8e:	d9f4      	bls.n	8009d7a <_printf_i+0x11a>
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d10b      	bne.n	8009dac <_printf_i+0x14c>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07de      	lsls	r6, r3, #31
 8009d98:	d508      	bpl.n	8009dac <_printf_i+0x14c>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	bfde      	ittt	le
 8009da2:	2330      	movle	r3, #48	; 0x30
 8009da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	6122      	str	r2, [r4, #16]
 8009db0:	f8cd a000 	str.w	sl, [sp]
 8009db4:	464b      	mov	r3, r9
 8009db6:	aa03      	add	r2, sp, #12
 8009db8:	4621      	mov	r1, r4
 8009dba:	4640      	mov	r0, r8
 8009dbc:	f7ff fee2 	bl	8009b84 <_printf_common>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d14c      	bne.n	8009e5e <_printf_i+0x1fe>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	b004      	add	sp, #16
 8009dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dce:	4835      	ldr	r0, [pc, #212]	; (8009ea4 <_printf_i+0x244>)
 8009dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dd4:	6829      	ldr	r1, [r5, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ddc:	6029      	str	r1, [r5, #0]
 8009dde:	061d      	lsls	r5, r3, #24
 8009de0:	d514      	bpl.n	8009e0c <_printf_i+0x1ac>
 8009de2:	07df      	lsls	r7, r3, #31
 8009de4:	bf44      	itt	mi
 8009de6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dea:	6023      	strmi	r3, [r4, #0]
 8009dec:	b91e      	cbnz	r6, 8009df6 <_printf_i+0x196>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f023 0320 	bic.w	r3, r3, #32
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	2310      	movs	r3, #16
 8009df8:	e7b0      	b.n	8009d5c <_printf_i+0xfc>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f043 0320 	orr.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2378      	movs	r3, #120	; 0x78
 8009e04:	4828      	ldr	r0, [pc, #160]	; (8009ea8 <_printf_i+0x248>)
 8009e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e0a:	e7e3      	b.n	8009dd4 <_printf_i+0x174>
 8009e0c:	0659      	lsls	r1, r3, #25
 8009e0e:	bf48      	it	mi
 8009e10:	b2b6      	uxthmi	r6, r6
 8009e12:	e7e6      	b.n	8009de2 <_printf_i+0x182>
 8009e14:	4615      	mov	r5, r2
 8009e16:	e7bb      	b.n	8009d90 <_printf_i+0x130>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	6826      	ldr	r6, [r4, #0]
 8009e1c:	6961      	ldr	r1, [r4, #20]
 8009e1e:	1d18      	adds	r0, r3, #4
 8009e20:	6028      	str	r0, [r5, #0]
 8009e22:	0635      	lsls	r5, r6, #24
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	d501      	bpl.n	8009e2c <_printf_i+0x1cc>
 8009e28:	6019      	str	r1, [r3, #0]
 8009e2a:	e002      	b.n	8009e32 <_printf_i+0x1d2>
 8009e2c:	0670      	lsls	r0, r6, #25
 8009e2e:	d5fb      	bpl.n	8009e28 <_printf_i+0x1c8>
 8009e30:	8019      	strh	r1, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	4615      	mov	r5, r2
 8009e38:	e7ba      	b.n	8009db0 <_printf_i+0x150>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	1d1a      	adds	r2, r3, #4
 8009e3e:	602a      	str	r2, [r5, #0]
 8009e40:	681d      	ldr	r5, [r3, #0]
 8009e42:	6862      	ldr	r2, [r4, #4]
 8009e44:	2100      	movs	r1, #0
 8009e46:	4628      	mov	r0, r5
 8009e48:	f7f6 fa4a 	bl	80002e0 <memchr>
 8009e4c:	b108      	cbz	r0, 8009e52 <_printf_i+0x1f2>
 8009e4e:	1b40      	subs	r0, r0, r5
 8009e50:	6060      	str	r0, [r4, #4]
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	2300      	movs	r3, #0
 8009e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5c:	e7a8      	b.n	8009db0 <_printf_i+0x150>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4649      	mov	r1, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	47d0      	blx	sl
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d0ab      	beq.n	8009dc4 <_printf_i+0x164>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	079b      	lsls	r3, r3, #30
 8009e70:	d413      	bmi.n	8009e9a <_printf_i+0x23a>
 8009e72:	68e0      	ldr	r0, [r4, #12]
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	4298      	cmp	r0, r3
 8009e78:	bfb8      	it	lt
 8009e7a:	4618      	movlt	r0, r3
 8009e7c:	e7a4      	b.n	8009dc8 <_printf_i+0x168>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4632      	mov	r2, r6
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d09b      	beq.n	8009dc4 <_printf_i+0x164>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	9903      	ldr	r1, [sp, #12]
 8009e92:	1a5b      	subs	r3, r3, r1
 8009e94:	42ab      	cmp	r3, r5
 8009e96:	dcf2      	bgt.n	8009e7e <_printf_i+0x21e>
 8009e98:	e7eb      	b.n	8009e72 <_printf_i+0x212>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	f104 0619 	add.w	r6, r4, #25
 8009ea0:	e7f5      	b.n	8009e8e <_printf_i+0x22e>
 8009ea2:	bf00      	nop
 8009ea4:	08012a15 	.word	0x08012a15
 8009ea8:	08012a26 	.word	0x08012a26

08009eac <memmove>:
 8009eac:	4288      	cmp	r0, r1
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	eb01 0402 	add.w	r4, r1, r2
 8009eb4:	d902      	bls.n	8009ebc <memmove+0x10>
 8009eb6:	4284      	cmp	r4, r0
 8009eb8:	4623      	mov	r3, r4
 8009eba:	d807      	bhi.n	8009ecc <memmove+0x20>
 8009ebc:	1e43      	subs	r3, r0, #1
 8009ebe:	42a1      	cmp	r1, r4
 8009ec0:	d008      	beq.n	8009ed4 <memmove+0x28>
 8009ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eca:	e7f8      	b.n	8009ebe <memmove+0x12>
 8009ecc:	4402      	add	r2, r0
 8009ece:	4601      	mov	r1, r0
 8009ed0:	428a      	cmp	r2, r1
 8009ed2:	d100      	bne.n	8009ed6 <memmove+0x2a>
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ede:	e7f7      	b.n	8009ed0 <memmove+0x24>

08009ee0 <_free_r>:
 8009ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	d044      	beq.n	8009f70 <_free_r+0x90>
 8009ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eea:	9001      	str	r0, [sp, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef2:	bfb8      	it	lt
 8009ef4:	18e4      	addlt	r4, r4, r3
 8009ef6:	f000 f913 	bl	800a120 <__malloc_lock>
 8009efa:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <_free_r+0x94>)
 8009efc:	9801      	ldr	r0, [sp, #4]
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	b933      	cbnz	r3, 8009f10 <_free_r+0x30>
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	6014      	str	r4, [r2, #0]
 8009f06:	b003      	add	sp, #12
 8009f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f0c:	f000 b90e 	b.w	800a12c <__malloc_unlock>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d908      	bls.n	8009f26 <_free_r+0x46>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf01      	itttt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	1949      	addeq	r1, r1, r5
 8009f22:	6021      	streq	r1, [r4, #0]
 8009f24:	e7ed      	b.n	8009f02 <_free_r+0x22>
 8009f26:	461a      	mov	r2, r3
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	b10b      	cbz	r3, 8009f30 <_free_r+0x50>
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	d9fa      	bls.n	8009f26 <_free_r+0x46>
 8009f30:	6811      	ldr	r1, [r2, #0]
 8009f32:	1855      	adds	r5, r2, r1
 8009f34:	42a5      	cmp	r5, r4
 8009f36:	d10b      	bne.n	8009f50 <_free_r+0x70>
 8009f38:	6824      	ldr	r4, [r4, #0]
 8009f3a:	4421      	add	r1, r4
 8009f3c:	1854      	adds	r4, r2, r1
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	d1e0      	bne.n	8009f06 <_free_r+0x26>
 8009f44:	681c      	ldr	r4, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	6053      	str	r3, [r2, #4]
 8009f4a:	4421      	add	r1, r4
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	e7da      	b.n	8009f06 <_free_r+0x26>
 8009f50:	d902      	bls.n	8009f58 <_free_r+0x78>
 8009f52:	230c      	movs	r3, #12
 8009f54:	6003      	str	r3, [r0, #0]
 8009f56:	e7d6      	b.n	8009f06 <_free_r+0x26>
 8009f58:	6825      	ldr	r5, [r4, #0]
 8009f5a:	1961      	adds	r1, r4, r5
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	bf04      	itt	eq
 8009f60:	6819      	ldreq	r1, [r3, #0]
 8009f62:	685b      	ldreq	r3, [r3, #4]
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	bf04      	itt	eq
 8009f68:	1949      	addeq	r1, r1, r5
 8009f6a:	6021      	streq	r1, [r4, #0]
 8009f6c:	6054      	str	r4, [r2, #4]
 8009f6e:	e7ca      	b.n	8009f06 <_free_r+0x26>
 8009f70:	b003      	add	sp, #12
 8009f72:	bd30      	pop	{r4, r5, pc}
 8009f74:	2400dde0 	.word	0x2400dde0

08009f78 <sbrk_aligned>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	4e0e      	ldr	r6, [pc, #56]	; (8009fb4 <sbrk_aligned+0x3c>)
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	6831      	ldr	r1, [r6, #0]
 8009f80:	4605      	mov	r5, r0
 8009f82:	b911      	cbnz	r1, 8009f8a <sbrk_aligned+0x12>
 8009f84:	f000 f8bc 	bl	800a100 <_sbrk_r>
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f000 f8b7 	bl	800a100 <_sbrk_r>
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	d00a      	beq.n	8009fac <sbrk_aligned+0x34>
 8009f96:	1cc4      	adds	r4, r0, #3
 8009f98:	f024 0403 	bic.w	r4, r4, #3
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d007      	beq.n	8009fb0 <sbrk_aligned+0x38>
 8009fa0:	1a21      	subs	r1, r4, r0
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 f8ac 	bl	800a100 <_sbrk_r>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d101      	bne.n	8009fb0 <sbrk_aligned+0x38>
 8009fac:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	2400dde4 	.word	0x2400dde4

08009fb8 <_malloc_r>:
 8009fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbc:	1ccd      	adds	r5, r1, #3
 8009fbe:	f025 0503 	bic.w	r5, r5, #3
 8009fc2:	3508      	adds	r5, #8
 8009fc4:	2d0c      	cmp	r5, #12
 8009fc6:	bf38      	it	cc
 8009fc8:	250c      	movcc	r5, #12
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	4607      	mov	r7, r0
 8009fce:	db01      	blt.n	8009fd4 <_malloc_r+0x1c>
 8009fd0:	42a9      	cmp	r1, r5
 8009fd2:	d905      	bls.n	8009fe0 <_malloc_r+0x28>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	2600      	movs	r6, #0
 8009fda:	4630      	mov	r0, r6
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	4e2e      	ldr	r6, [pc, #184]	; (800a09c <_malloc_r+0xe4>)
 8009fe2:	f000 f89d 	bl	800a120 <__malloc_lock>
 8009fe6:	6833      	ldr	r3, [r6, #0]
 8009fe8:	461c      	mov	r4, r3
 8009fea:	bb34      	cbnz	r4, 800a03a <_malloc_r+0x82>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ffc2 	bl	8009f78 <sbrk_aligned>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	d14d      	bne.n	800a096 <_malloc_r+0xde>
 8009ffa:	6834      	ldr	r4, [r6, #0]
 8009ffc:	4626      	mov	r6, r4
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d140      	bne.n	800a084 <_malloc_r+0xcc>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	4631      	mov	r1, r6
 800a006:	4638      	mov	r0, r7
 800a008:	eb04 0803 	add.w	r8, r4, r3
 800a00c:	f000 f878 	bl	800a100 <_sbrk_r>
 800a010:	4580      	cmp	r8, r0
 800a012:	d13a      	bne.n	800a08a <_malloc_r+0xd2>
 800a014:	6821      	ldr	r1, [r4, #0]
 800a016:	3503      	adds	r5, #3
 800a018:	1a6d      	subs	r5, r5, r1
 800a01a:	f025 0503 	bic.w	r5, r5, #3
 800a01e:	3508      	adds	r5, #8
 800a020:	2d0c      	cmp	r5, #12
 800a022:	bf38      	it	cc
 800a024:	250c      	movcc	r5, #12
 800a026:	4629      	mov	r1, r5
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ffa5 	bl	8009f78 <sbrk_aligned>
 800a02e:	3001      	adds	r0, #1
 800a030:	d02b      	beq.n	800a08a <_malloc_r+0xd2>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	442b      	add	r3, r5
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	e00e      	b.n	800a058 <_malloc_r+0xa0>
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	1b52      	subs	r2, r2, r5
 800a03e:	d41e      	bmi.n	800a07e <_malloc_r+0xc6>
 800a040:	2a0b      	cmp	r2, #11
 800a042:	d916      	bls.n	800a072 <_malloc_r+0xba>
 800a044:	1961      	adds	r1, r4, r5
 800a046:	42a3      	cmp	r3, r4
 800a048:	6025      	str	r5, [r4, #0]
 800a04a:	bf18      	it	ne
 800a04c:	6059      	strne	r1, [r3, #4]
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	bf08      	it	eq
 800a052:	6031      	streq	r1, [r6, #0]
 800a054:	5162      	str	r2, [r4, r5]
 800a056:	604b      	str	r3, [r1, #4]
 800a058:	4638      	mov	r0, r7
 800a05a:	f104 060b 	add.w	r6, r4, #11
 800a05e:	f000 f865 	bl	800a12c <__malloc_unlock>
 800a062:	f026 0607 	bic.w	r6, r6, #7
 800a066:	1d23      	adds	r3, r4, #4
 800a068:	1af2      	subs	r2, r6, r3
 800a06a:	d0b6      	beq.n	8009fda <_malloc_r+0x22>
 800a06c:	1b9b      	subs	r3, r3, r6
 800a06e:	50a3      	str	r3, [r4, r2]
 800a070:	e7b3      	b.n	8009fda <_malloc_r+0x22>
 800a072:	6862      	ldr	r2, [r4, #4]
 800a074:	42a3      	cmp	r3, r4
 800a076:	bf0c      	ite	eq
 800a078:	6032      	streq	r2, [r6, #0]
 800a07a:	605a      	strne	r2, [r3, #4]
 800a07c:	e7ec      	b.n	800a058 <_malloc_r+0xa0>
 800a07e:	4623      	mov	r3, r4
 800a080:	6864      	ldr	r4, [r4, #4]
 800a082:	e7b2      	b.n	8009fea <_malloc_r+0x32>
 800a084:	4634      	mov	r4, r6
 800a086:	6876      	ldr	r6, [r6, #4]
 800a088:	e7b9      	b.n	8009ffe <_malloc_r+0x46>
 800a08a:	230c      	movs	r3, #12
 800a08c:	603b      	str	r3, [r7, #0]
 800a08e:	4638      	mov	r0, r7
 800a090:	f000 f84c 	bl	800a12c <__malloc_unlock>
 800a094:	e7a1      	b.n	8009fda <_malloc_r+0x22>
 800a096:	6025      	str	r5, [r4, #0]
 800a098:	e7de      	b.n	800a058 <_malloc_r+0xa0>
 800a09a:	bf00      	nop
 800a09c:	2400dde0 	.word	0x2400dde0

0800a0a0 <_realloc_r>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	b921      	cbnz	r1, 800a0b6 <_realloc_r+0x16>
 800a0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	f7ff bf81 	b.w	8009fb8 <_malloc_r>
 800a0b6:	b92a      	cbnz	r2, 800a0c4 <_realloc_r+0x24>
 800a0b8:	f7ff ff12 	bl	8009ee0 <_free_r>
 800a0bc:	4625      	mov	r5, r4
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	f000 f838 	bl	800a138 <_malloc_usable_size_r>
 800a0c8:	4284      	cmp	r4, r0
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	d802      	bhi.n	800a0d4 <_realloc_r+0x34>
 800a0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0d2:	d812      	bhi.n	800a0fa <_realloc_r+0x5a>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff ff6e 	bl	8009fb8 <_malloc_r>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d0ed      	beq.n	800a0be <_realloc_r+0x1e>
 800a0e2:	42bc      	cmp	r4, r7
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	bf28      	it	cs
 800a0ea:	463a      	movcs	r2, r7
 800a0ec:	f7ff fb9e 	bl	800982c <memcpy>
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7ff fef4 	bl	8009ee0 <_free_r>
 800a0f8:	e7e1      	b.n	800a0be <_realloc_r+0x1e>
 800a0fa:	4635      	mov	r5, r6
 800a0fc:	e7df      	b.n	800a0be <_realloc_r+0x1e>
	...

0800a100 <_sbrk_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	; (800a11c <_sbrk_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f6 fa96 	bl	800063c <_sbrk>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_sbrk_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_sbrk_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	2400dde8 	.word	0x2400dde8

0800a120 <__malloc_lock>:
 800a120:	4801      	ldr	r0, [pc, #4]	; (800a128 <__malloc_lock+0x8>)
 800a122:	f000 b811 	b.w	800a148 <__retarget_lock_acquire_recursive>
 800a126:	bf00      	nop
 800a128:	2400ddec 	.word	0x2400ddec

0800a12c <__malloc_unlock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__malloc_unlock+0x8>)
 800a12e:	f000 b80c 	b.w	800a14a <__retarget_lock_release_recursive>
 800a132:	bf00      	nop
 800a134:	2400ddec 	.word	0x2400ddec

0800a138 <_malloc_usable_size_r>:
 800a138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a13c:	1f18      	subs	r0, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfbc      	itt	lt
 800a142:	580b      	ldrlt	r3, [r1, r0]
 800a144:	18c0      	addlt	r0, r0, r3
 800a146:	4770      	bx	lr

0800a148 <__retarget_lock_acquire_recursive>:
 800a148:	4770      	bx	lr

0800a14a <__retarget_lock_release_recursive>:
 800a14a:	4770      	bx	lr

0800a14c <sqrtf>:
 800a14c:	b508      	push	{r3, lr}
 800a14e:	ed2d 8b02 	vpush	{d8}
 800a152:	eeb0 8a40 	vmov.f32	s16, s0
 800a156:	f000 f817 	bl	800a188 <__ieee754_sqrtf>
 800a15a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a162:	d60c      	bvs.n	800a17e <sqrtf+0x32>
 800a164:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a184 <sqrtf+0x38>
 800a168:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a170:	d505      	bpl.n	800a17e <sqrtf+0x32>
 800a172:	f7ff fb31 	bl	80097d8 <__errno>
 800a176:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a17a:	2321      	movs	r3, #33	; 0x21
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	ecbd 8b02 	vpop	{d8}
 800a182:	bd08      	pop	{r3, pc}
 800a184:	00000000 	.word	0x00000000

0800a188 <__ieee754_sqrtf>:
 800a188:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a18c:	4770      	bx	lr
	...

0800a190 <_init>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	bf00      	nop
 800a194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a196:	bc08      	pop	{r3}
 800a198:	469e      	mov	lr, r3
 800a19a:	4770      	bx	lr

0800a19c <_fini>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr
