
fft_range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800d680  0800d680  0001d680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da84  0800da84  0001da84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800da8c  0800da8c  0001da8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da94  0800da94  0001da94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000ab0  24000000  0800da98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c6c  24000ab0  0800e548  00020ab0  2**2
                  ALLOC
  8 ._user_heap_stack 00003404  2400271c  0800e548  0002271c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020ab0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001443e  00000000  00000000  00020ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032d1  00000000  00000000  00034f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f40  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000db8  00000000  00000000  00039130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394d4  00000000  00000000  00039ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001376e  00000000  00000000  000733bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156305  00000000  00000000  00086b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001dce2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e38  00000000  00000000  001dce80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000ab0 	.word	0x24000ab0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d664 	.word	0x0800d664

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000ab4 	.word	0x24000ab4
 80002dc:	0800d664 	.word	0x0800d664

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_GPIO_Init+0x6c>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_GPIO_Init+0x6c>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024400 	.word	0x58024400

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fa5a 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f806 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ffc0 	bl	8000694 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000714:	f007 fd68 	bl	80081e8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x14>
	...

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	; 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	224c      	movs	r2, #76	; 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f008 faf6 	bl	8008d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f008 faf0 	bl	8008d1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800073c:	2002      	movs	r0, #2
 800073e:	f002 f897 	bl	8002870 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <SystemClock_Config+0x100>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a34      	ldr	r2, [pc, #208]	; (800081c <SystemClock_Config+0x100>)
 800074c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <SystemClock_Config+0x100>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <SystemClock_Config+0x104>)
 800075e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <SystemClock_Config+0x104>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <SystemClock_Config+0x104>)
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000774:	bf00      	nop
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <SystemClock_Config+0x100>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	d1f8      	bne.n	8000776 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <SystemClock_Config+0x108>)
 8000786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000788:	f023 0303 	bic.w	r3, r3, #3
 800078c:	4a25      	ldr	r2, [pc, #148]	; (8000824 <SystemClock_Config+0x108>)
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007aa:	2350      	movs	r3, #80	; 0x50
 80007ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ba:	230c      	movs	r3, #12
 80007bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007be:	2300      	movs	r3, #0
 80007c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 f89a 	bl	8002904 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007d6:	f000 f827 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	233f      	movs	r3, #63	; 0x3f
 80007dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e6:	2308      	movs	r3, #8
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ea:	2340      	movs	r3, #64	; 0x40
 80007ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2104      	movs	r1, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fcad 	bl	8003160 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800080c:	f000 f80c 	bl	8000828 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000810:	f002 fe5c 	bl	80034cc <HAL_RCC_EnableCSS>
}
 8000814:	bf00      	nop
 8000816:	3770      	adds	r7, #112	; 0x70
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024800 	.word	0x58024800
 8000820:	58000400 	.word	0x58000400
 8000824:	58024400 	.word	0x58024400

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_MspInit+0x30>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x30>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x30>)
 800084c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	58024400 	.word	0x58024400

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f9f6 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <OTG_FS_IRQHandler+0x10>)
 80008c2:	f000 fe56 	bl	8001572 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24001fb4 	.word	0x24001fb4

080008d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <_kill>:

int _kill(int pid, int sig)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008ea:	f008 f9ed 	bl	8008cc8 <__errno>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2216      	movs	r2, #22
 80008f2:	601a      	str	r2, [r3, #0]
	return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_exit>:

void _exit (int status)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ffe7 	bl	80008e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000912:	e7fe      	b.n	8000912 <_exit+0x12>

08000914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e00a      	b.n	800093c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000926:	f3af 8000 	nop.w
 800092a:	4601      	mov	r1, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <_read+0x12>
	}

return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e009      	b.n	8000974 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	dbf1      	blt.n	8000960 <_write+0x12>
	}
	return len;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_close>:

int _close(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ae:	605a      	str	r2, [r3, #4]
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f008 f952 	bl	8008cc8 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24080000 	.word	0x24080000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	24000acc 	.word	0x24000acc
 8000a58:	24002720 	.word	0x24002720

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <SystemInit+0xe4>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <SystemInit+0xe4>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <SystemInit+0xe8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d807      	bhi.n	8000a8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <SystemInit+0xe8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f023 030f 	bic.w	r3, r3, #15
 8000a84:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <SystemInit+0xe8>)
 8000a86:	f043 0307 	orr.w	r3, r3, #7
 8000a8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <SystemInit+0xec>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <SystemInit+0xec>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <SystemInit+0xec>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <SystemInit+0xec>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <SystemInit+0xec>)
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <SystemInit+0xf0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemInit+0xe8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemInit+0xe8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemInit+0xe8>)
 8000ac0:	f043 0307 	orr.w	r3, r3, #7
 8000ac4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <SystemInit+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <SystemInit+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <SystemInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <SystemInit+0xec>)
 8000ada:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <SystemInit+0xf4>)
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <SystemInit+0xec>)
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <SystemInit+0xf8>)
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <SystemInit+0xec>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <SystemInit+0xfc>)
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <SystemInit+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <SystemInit+0xec>)
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <SystemInit+0xfc>)
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <SystemInit+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <SystemInit+0xec>)
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0xfc>)
 8000b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <SystemInit+0xec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <SystemInit+0xec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <SystemInit+0xec>)
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <SystemInit+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x100>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <SystemInit+0x104>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b26:	d202      	bcs.n	8000b2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <SystemInit+0x108>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <SystemInit+0x10c>)
 8000b30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b34:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	52002000 	.word	0x52002000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b50:	02020200 	.word	0x02020200
 8000b54:	01ff0000 	.word	0x01ff0000
 8000b58:	01010280 	.word	0x01010280
 8000b5c:	5c001000 	.word	0x5c001000
 8000b60:	ffff0000 	.word	0xffff0000
 8000b64:	51008108 	.word	0x51008108
 8000b68:	52004000 	.word	0x52004000

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b70:	f7ff ff74 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f008 f89b 	bl	8008cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fdb1 	bl	8000704 <main>
  bx  lr
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bac:	24000ab0 	.word	0x24000ab0
  ldr r2, =_sidata
 8000bb0:	0800da98 	.word	0x0800da98
  ldr r2, =_sbss
 8000bb4:	24000ab0 	.word	0x24000ab0
  ldr r4, =_ebss
 8000bb8:	2400271c 	.word	0x2400271c

08000bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC3_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f98c 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bcc:	f002 fc8e 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_Init+0x6c>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_Init+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_Init+0x6c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x70>)
 8000c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f814 	bl	8000c38 <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e002      	b.n	8000c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff fe0b 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	0800d6dc 	.word	0x0800d6dc
 8000c30:	24000004 	.word	0x24000004
 8000c34:	24000000 	.word	0x24000000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_InitTick+0x60>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e021      	b.n	8000c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_InitTick+0x64>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f971 	bl	8000f4a <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f93b 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400000c 	.word	0x2400000c
 8000c9c:	24000000 	.word	0x24000000
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2400000c 	.word	0x2400000c
 8000cc8:	24000ad0 	.word	0x24000ad0

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	24000ad0 	.word	0x24000ad0

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2400000c 	.word	0x2400000c

08000d2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetREVID+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	0c1b      	lsrs	r3, r3, #16
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	5c001000 	.word	0x5c001000

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x40>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	05fa0000 	.word	0x05fa0000

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff40 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa4 	bl	8000ea0 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_GPIO_Init+0x234>)
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f76:	e194      	b.n	80012a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8186 	beq.w	800129c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x44>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e0 	beq.w	800129c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_GPIO_Init+0x238>)
 80010de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_GPIO_Init+0x238>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_GPIO_Init+0x238>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_GPIO_Init+0x23c>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x240>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d052      	beq.n	80011cc <HAL_GPIO_Init+0x268>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x244>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x248>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x24c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x250>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x254>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x258>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x25c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x260>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_GPIO_Init+0x264>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20e>
 800116e:	2309      	movs	r3, #9
 8001170:	e02d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001172:	230a      	movs	r3, #10
 8001174:	e02b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001176:	2308      	movs	r3, #8
 8001178:	e029      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117a:	2307      	movs	r3, #7
 800117c:	e027      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117e:	2306      	movs	r3, #6
 8001180:	e025      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001182:	2305      	movs	r3, #5
 8001184:	e023      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001186:	2304      	movs	r3, #4
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118a:	2303      	movs	r3, #3
 800118c:	e01f      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118e:	2302      	movs	r3, #2
 8001190:	e01d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001192:	2301      	movs	r3, #1
 8001194:	e01b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001196:	bf00      	nop
 8001198:	58000080 	.word	0x58000080
 800119c:	58024400 	.word	0x58024400
 80011a0:	58000400 	.word	0x58000400
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021800 	.word	0x58021800
 80011c0:	58021c00 	.word	0x58021c00
 80011c4:	58022000 	.word	0x58022000
 80011c8:	58022400 	.word	0x58022400
 80011cc:	2300      	movs	r3, #0
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011de:	4938      	ldr	r1, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x35c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae63 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	; 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	58000400 	.word	0x58000400

080012c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b08f      	sub	sp, #60	; 0x3c
 80012c8:	af0a      	add	r7, sp, #40	; 0x28
 80012ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e116      	b.n	8001504 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 f9a5 	bl	8008640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fc5e 	bl	8004bd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	687e      	ldr	r6, [r7, #4]
 8001322:	466d      	mov	r5, sp
 8001324:	f106 0410 	add.w	r4, r6, #16
 8001328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001334:	e885 0003 	stmia.w	r5, {r0, r1}
 8001338:	1d33      	adds	r3, r6, #4
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f003 fb29 	bl	8004994 <USB_CoreInit>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d7      	b.n	8001504 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fc4c 	bl	8004bf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e04a      	b.n	80013fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	333d      	adds	r3, #61	; 0x3d
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	333c      	adds	r3, #60	; 0x3c
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	b298      	uxth	r0, r3
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3344      	adds	r3, #68	; 0x44
 80013a2:	4602      	mov	r2, r0
 80013a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3340      	adds	r3, #64	; 0x40
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	334c      	adds	r3, #76	; 0x4c
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3354      	adds	r3, #84	; 0x54
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	3301      	adds	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3af      	bcc.n	8001366 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e044      	b.n	8001496 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3b5      	bcc.n	800140c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f003 fbe4 	bl	8004c90 <USB_DevInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e014      	b.n	8001504 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d102      	bne.n	80014f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f001 f98c 	bl	8002810 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fd32 	bl	8005f66 <USB_DevDisconnect>

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800150c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_PCD_Start+0x1c>
 8001524:	2302      	movs	r3, #2
 8001526:	e020      	b.n	800156a <HAL_PCD_Start+0x5e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	2b01      	cmp	r3, #1
 8001536:	d109      	bne.n	800154c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fb2f 	bl	8004bb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fce2 	bl	8005f24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b08d      	sub	sp, #52	; 0x34
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fda0 	bl	80060ce <USB_GetMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 84b7 	bne.w	8001f04 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fd04 	bl	8005fa8 <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 84ad 	beq.w	8001f02 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fcf1 	bl	8005fa8 <USB_ReadInterrupts>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d107      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f002 0202 	and.w	r2, r2, #2
 80015de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fcdf 	bl	8005fa8 <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	d161      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0210 	bic.w	r2, r2, #16
 8001602:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f003 020f 	and.w	r2, r3, #15
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	3304      	adds	r3, #4
 8001622:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	0c5b      	lsrs	r3, r3, #17
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	2b02      	cmp	r3, #2
 800162e:	d124      	bne.n	800167a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d035      	beq.n	80016a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	6a38      	ldr	r0, [r7, #32]
 8001650:	f004 fb16 	bl	8005c80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001660:	441a      	add	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	441a      	add	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	e016      	b.n	80016a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	0c5b      	lsrs	r3, r3, #17
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	2b06      	cmp	r3, #6
 8001684:	d110      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800168c:	2208      	movs	r2, #8
 800168e:	4619      	mov	r1, r3
 8001690:	6a38      	ldr	r0, [r7, #32]
 8001692:	f004 faf5 	bl	8005c80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a2:	441a      	add	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0210 	orr.w	r2, r2, #16
 80016b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fc73 	bl	8005fa8 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016cc:	f040 80a7 	bne.w	800181e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fc78 	bl	8005fce <USB_ReadDevAllOutEpInterrupt>
 80016de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016e0:	e099      	b.n	8001816 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 808e 	beq.w	800180a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fc9c 	bl	8006036 <USB_ReadDevOutEPInterrupt>
 80016fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001716:	461a      	mov	r2, r3
 8001718:	2301      	movs	r3, #1
 800171a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800171c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fef0 	bl	8002504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173a:	461a      	mov	r2, r3
 800173c:	2308      	movs	r3, #8
 800173e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 ffc6 	bl	80026d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175e:	461a      	mov	r2, r3
 8001760:	2310      	movs	r3, #16
 8001762:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d030      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d109      	bne.n	800178e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	3304      	adds	r3, #4
 80017a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2200      	movs	r2, #0
 80017b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 f873 	bl	80088a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ca:	461a      	mov	r2, r3
 80017cc:	2302      	movs	r3, #2
 80017ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e6:	461a      	mov	r2, r3
 80017e8:	2320      	movs	r3, #32
 80017ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	f47f af62 	bne.w	80016e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fbc0 	bl	8005fa8 <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001832:	f040 80db 	bne.w	80019ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f004 fbe1 	bl	8006002 <USB_ReadDevAllInEpInterrupt>
 8001840:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001846:	e0cd      	b.n	80019e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80c2 	beq.w	80019d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fc07 	bl	8006072 <USB_ReadDevInEPInterrupt>
 8001864:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d057      	beq.n	8001920 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	2201      	movs	r2, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	69f9      	ldr	r1, [r7, #28]
 800188c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001890:	4013      	ands	r3, r2
 8001892:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a0:	461a      	mov	r2, r3
 80018a2:	2301      	movs	r3, #1
 80018a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d132      	bne.n	8001914 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	334c      	adds	r3, #76	; 0x4c
 80018be:	6819      	ldr	r1, [r3, #0]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4403      	add	r3, r0
 80018ce:	3348      	adds	r3, #72	; 0x48
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4419      	add	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4403      	add	r3, r0
 80018e2:	334c      	adds	r3, #76	; 0x4c
 80018e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d113      	bne.n	8001914 <HAL_PCD_IRQHandler+0x3a2>
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3354      	adds	r3, #84	; 0x54
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800190c:	461a      	mov	r2, r3
 800190e:	2101      	movs	r1, #1
 8001910:	f004 fc10 	bl	8006134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f006 ff3d 	bl	800879a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001936:	461a      	mov	r2, r3
 8001938:	2308      	movs	r3, #8
 800193a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001952:	461a      	mov	r2, r3
 8001954:	2310      	movs	r3, #16
 8001956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196e:	461a      	mov	r2, r3
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d023      	beq.n	80019c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	6a38      	ldr	r0, [r7, #32]
 8001982:	f003 fae3 	bl	8004f4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	3338      	adds	r3, #56	; 0x38
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d108      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2200      	movs	r2, #0
 80019a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f006 ff8a 	bl	80088c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c0:	461a      	mov	r2, r3
 80019c2:	2302      	movs	r3, #2
 80019c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fd08 	bl	80023e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3301      	adds	r3, #1
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f af2e 	bne.w	8001848 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fad9 	bl	8005fa8 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a00:	d122      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 ff14 	bl	8002858 <HAL_PCDEx_LPM_Callback>
 8001a30:	e002      	b.n	8001a38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f006 ff28 	bl	8008888 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f004 faab 	bl	8005fa8 <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a5c:	d112      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f006 fee4 	bl	800883c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 fa8d 	bl	8005fa8 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a98:	d121      	bne.n	8001ade <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001aa8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d111      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fec1 	bl	8002858 <HAL_PCDEx_LPM_Callback>
 8001ad6:	e002      	b.n	8001ade <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f006 feaf 	bl	800883c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fa60 	bl	8005fa8 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af2:	f040 80b7 	bne.w	8001c64 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2110      	movs	r1, #16
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fa1b 	bl	8004f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1a:	e046      	b.n	8001baa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b40:	0151      	lsls	r1, r2, #5
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	440a      	add	r2, r1
 8001b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b74:	0151      	lsls	r1, r2, #5
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	440a      	add	r2, r1
 8001b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b94:	0151      	lsls	r1, r2, #5
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	440a      	add	r2, r1
 8001b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ba2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3b3      	bcc.n	8001b1c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d016      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be0:	f043 030b 	orr.w	r3, r3, #11
 8001be4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf6:	f043 030b 	orr.w	r3, r3, #11
 8001bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfc:	e015      	b.n	8001c2a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c12:	4313      	orrs	r3, r2
 8001c14:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f043 030b 	orr.w	r3, r3, #11
 8001c28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f004 fa70 	bl	8006134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f99d 	bl	8005fa8 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c78:	d124      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fa34 	bl	80060ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f9dc 	bl	8005046 <USB_GetDevSpeed>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	f001 fda1 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8001c9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f002 fee1 	bl	8004a70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f006 fd9b 	bl	80087ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f96d 	bl	8005fa8 <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d10a      	bne.n	8001cee <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f006 fd78 	bl	80087ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 0208 	and.w	r2, r2, #8
 8001cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 f958 	bl	8005fa8 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d122      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e014      	b.n	8001d3e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb27 	bl	8002386 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e5      	bcc.n	8001d14 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 f92b 	bl	8005fa8 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5c:	d13b      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e02b      	b.n	8001dbc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3340      	adds	r3, #64	; 0x40
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d115      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da12      	bge.n	8001db6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	333f      	adds	r3, #63	; 0x3f
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fae8 	bl	8002386 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	3301      	adds	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3ce      	bcc.n	8001d64 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f8e4 	bl	8005fa8 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dea:	d155      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dec:	2301      	movs	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e045      	b.n	8001e7e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d12e      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da2b      	bge.n	8001e78 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d121      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	6053      	str	r3, [r2, #4]
            break;
 8001e76:	e007      	b.n	8001e88 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3b4      	bcc.n	8001df2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 f883 	bl	8005fa8 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d10a      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f006 fd1c 	bl	80088ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 f86d 	bl	8005fa8 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d115      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f006 fd0c 	bl	8008908 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e000      	b.n	8001f04 <HAL_PCD_IRQHandler+0x992>
      return;
 8001f02:	bf00      	nop
    }
  }
}
 8001f04:	3734      	adds	r7, #52	; 0x34
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_SetAddress+0x1a>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e013      	b.n	8001f4c <HAL_PCD_SetAddress+0x42>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 ffcb 	bl	8005ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	70fb      	strb	r3, [r7, #3]
 8001f66:	460b      	mov	r3, r1
 8001f68:	803b      	strh	r3, [r7, #0]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0f      	bge.n	8001f9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
 8001f98:	e00f      	b.n	8001fba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fc6:	883a      	ldrh	r2, [r7, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	78ba      	ldrb	r2, [r7, #2]
 8001fd0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe4:	78bb      	ldrb	r3, [r7, #2]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_Open+0xaa>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00e      	b.n	800201c <HAL_PCD_EP_Open+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f83f 	bl	8005090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800201a:	7afb      	ldrb	r3, [r7, #11]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00f      	b.n	8002078 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_PCD_EP_Close+0x6e>
 800208e:	2302      	movs	r3, #2
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_Close+0x8c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 f87d 	bl	80051a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	460b      	mov	r3, r1
 80020c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f003 fb64 	bl	80057f8 <USB_EP0StartXfer>
 8002130:	e008      	b.n	8002144 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	f003 f90a 	bl	8005358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	f003 fb02 	bl	80057f8 <USB_EP0StartXfer>
 80021f4:	e008      	b.n	8002208 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	f003 f8a8 	bl	8005358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e050      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0f      	bge.n	8002258 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e00d      	b.n	8002274 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_SetStall+0x82>
 8002290:	2302      	movs	r3, #2
 8002292:	e01e      	b.n	80022d2 <HAL_PCD_EP_SetStall+0xc0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fd44 	bl	8005d30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c2:	461a      	mov	r2, r3
 80022c4:	f003 ff36 	bl	8006134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e042      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0f      	bge.n	8002320 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3338      	adds	r3, #56	; 0x38
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	705a      	strb	r2, [r3, #1]
 800231e:	e00f      	b.n	8002340 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_PCD_EP_ClrStall+0x86>
 800235c:	2302      	movs	r3, #2
 800235e:	e00e      	b.n	800237e <HAL_PCD_EP_ClrStall+0xa4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fd4c 	bl	8005e0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da0c      	bge.n	80023b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e00c      	b.n	80023ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 020f 	and.w	r2, r3, #15
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fb6b 	bl	8005ab0 <USB_EPStopXfer>
 80023da:	4603      	mov	r3, r0
 80023dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023de:	7afb      	ldrb	r3, [r7, #11]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	d901      	bls.n	8002420 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e06c      	b.n	80024fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	429a      	cmp	r2, r3
 8002434:	d902      	bls.n	800243c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3303      	adds	r3, #3
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002444:	e02b      	b.n	800249e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	429a      	cmp	r2, r3
 800245a:	d902      	bls.n	8002462 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3303      	adds	r3, #3
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800247a:	b2db      	uxtb	r3, r3
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4603      	mov	r3, r0
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f003 fbbf 	bl	8005c04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	441a      	add	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	441a      	add	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d809      	bhi.n	80024c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024bc:	429a      	cmp	r2, r3
 80024be:	d203      	bcs.n	80024c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1be      	bne.n	8002446 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d811      	bhi.n	80024f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024f4:	4013      	ands	r3, r2
 80024f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	333c      	adds	r3, #60	; 0x3c
 800251c:	3304      	adds	r3, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d17b      	bne.n	8002632 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a61      	ldr	r2, [pc, #388]	; (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f240 80b9 	bls.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80b3 	beq.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	e0a7      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2320      	movs	r3, #32
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	e098      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8093 	bne.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d90f      	bls.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e07e      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d114      	bne.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800260c:	461a      	mov	r2, r3
 800260e:	2101      	movs	r1, #1
 8002610:	f003 fd90 	bl	8006134 <USB_EP0_OutStart>
 8002614:	e006      	b.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f006 f89a 	bl	8008764 <HAL_PCD_DataOutStageCallback>
 8002630:	e046      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d124      	bne.n	8002684 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002656:	6093      	str	r3, [r2, #8]
 8002658:	e032      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f006 f871 	bl	8008764 <HAL_PCD_DataOutStageCallback>
 8002682:	e01d      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ac:	461a      	mov	r2, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	f003 fd40 	bl	8006134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f006 f852 	bl	8008764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	4f54300a 	.word	0x4f54300a
 80026d0:	4f54310a 	.word	0x4f54310a

080026d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	333c      	adds	r3, #60	; 0x3c
 80026ec:	3304      	adds	r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d90e      	bls.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002726:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f006 f809 	bl	8008740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d90c      	bls.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002748:	461a      	mov	r2, r3
 800274a:	2101      	movs	r1, #1
 800274c:	f003 fcf2 	bl	8006134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	4f54300a 	.word	0x4f54300a

08002760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	4613      	mov	r3, r2
 800276e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	0419      	lsls	r1, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	430a      	orrs	r2, r1
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
 800278c:	e028      	b.n	80027e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e00d      	b.n	80027be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3340      	adds	r3, #64	; 0x40
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3ec      	bcc.n	80027a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027c8:	883b      	ldrh	r3, [r7, #0]
 80027ca:	0418      	lsls	r0, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4302      	orrs	r2, r0
 80027d8:	3340      	adds	r3, #64	; 0x40
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_PCDEx_ActivateLPM+0x44>)
 8002840:	4313      	orrs	r3, r2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	10000003 	.word	0x10000003

08002858 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_PWREx_ConfigSupply+0x70>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d00a      	beq.n	800289a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_PWREx_ConfigSupply+0x70>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01f      	b.n	80028d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e01d      	b.n	80028d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_PWREx_ConfigSupply+0x70>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	490f      	ldr	r1, [pc, #60]	; (80028e0 <HAL_PWREx_ConfigSupply+0x70>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028aa:	f7fe fa0f 	bl	8000ccc <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028b0:	e009      	b.n	80028c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028b2:	f7fe fa0b 	bl	8000ccc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c0:	d901      	bls.n	80028c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e007      	b.n	80028d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_PWREx_ConfigSupply+0x70>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d2:	d1ee      	bne.n	80028b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58024800 	.word	0x58024800

080028e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	58024800 	.word	0x58024800

08002904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f000 bc1d 	b.w	8003152 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8087 	beq.w	8002a34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002926:	4b99      	ldr	r3, [pc, #612]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002930:	4b96      	ldr	r3, [pc, #600]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	2b10      	cmp	r3, #16
 800293a:	d007      	beq.n	800294c <HAL_RCC_OscConfig+0x48>
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	2b18      	cmp	r3, #24
 8002940:	d110      	bne.n	8002964 <HAL_RCC_OscConfig+0x60>
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d06c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x12e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d168      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e3f6      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x78>
 800296e:	4b87      	ldr	r3, [pc, #540]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a86      	ldr	r2, [pc, #536]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e02e      	b.n	80029da <HAL_RCC_OscConfig+0xd6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10c      	bne.n	800299e <HAL_RCC_OscConfig+0x9a>
 8002984:	4b81      	ldr	r3, [pc, #516]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7d      	ldr	r2, [pc, #500]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e01d      	b.n	80029da <HAL_RCC_OscConfig+0xd6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0xbe>
 80029a8:	4b78      	ldr	r3, [pc, #480]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0xd6>
 80029c2:	4b72      	ldr	r3, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a71      	ldr	r2, [pc, #452]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6e      	ldr	r2, [pc, #440]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d013      	beq.n	8002a0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe f973 	bl	8000ccc <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ea:	f7fe f96f 	bl	8000ccc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	; 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e3aa      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029fc:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0xe6>
 8002a08:	e014      	b.n	8002a34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe f95f 	bl	8000ccc <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a12:	f7fe f95b 	bl	8000ccc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e396      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x10e>
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80cb 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_RCC_OscConfig+0x164>
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2b18      	cmp	r3, #24
 8002a5c:	d156      	bne.n	8002b0c <HAL_RCC_OscConfig+0x208>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d151      	bne.n	8002b0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_OscConfig+0x17c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e368      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 0219 	bic.w	r2, r3, #25
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	493f      	ldr	r1, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a92:	f7fe f91b 	bl	8000ccc <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe f917 	bl	8000ccc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e352      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	f7fe f938 	bl	8000d2c <HAL_GetREVID>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d817      	bhi.n	8002af6 <HAL_RCC_OscConfig+0x1f2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d108      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1dc>
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ad6:	4a2d      	ldr	r2, [pc, #180]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ade:	e07b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	031b      	lsls	r3, r3, #12
 8002aee:	4927      	ldr	r1, [pc, #156]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e070      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	4921      	ldr	r1, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0a:	e065      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d048      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0219 	bic.w	r2, r3, #25
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe f8d1 	bl	8000ccc <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f8cd 	bl	8000ccc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e308      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	f7fe f8ee 	bl	8000d2c <HAL_GetREVID>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d81a      	bhi.n	8002b90 <HAL_RCC_OscConfig+0x28c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x270>
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b70:	6053      	str	r3, [r2, #4]
 8002b72:	e031      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	4902      	ldr	r1, [pc, #8]	; (8002b8c <HAL_RCC_OscConfig+0x288>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
 8002b8a:	bf00      	nop
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	4b9a      	ldr	r3, [pc, #616]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	4997      	ldr	r1, [pc, #604]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
 8002ba4:	e018      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b95      	ldr	r3, [pc, #596]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a94      	ldr	r2, [pc, #592]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe f88b 	bl	8000ccc <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bba:	f7fe f887 	bl	8000ccc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e2c2      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bcc:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a9 	beq.w	8002d38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf0:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d007      	beq.n	8002c0c <HAL_RCC_OscConfig+0x308>
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b18      	cmp	r3, #24
 8002c00:	d13a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x374>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d135      	bne.n	8002c78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_OscConfig+0x320>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b80      	cmp	r3, #128	; 0x80
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e296      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c24:	f7fe f882 	bl	8000d2c <HAL_GetREVID>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d817      	bhi.n	8002c62 <HAL_RCC_OscConfig+0x35e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x348>
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c42:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4a:	e075      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4c:	4b6b      	ldr	r3, [pc, #428]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	069b      	lsls	r3, r3, #26
 8002c5a:	4968      	ldr	r1, [pc, #416]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c60:	e06a      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	4962      	ldr	r1, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c76:	e05f      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d042      	beq.n	8002d06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f81e 	bl	8000ccc <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c94:	f7fe f81a 	bl	8000ccc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e255      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb2:	f7fe f83b 	bl	8000d2c <HAL_GetREVID>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d817      	bhi.n	8002cf0 <HAL_RCC_OscConfig+0x3ec>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d108      	bne.n	8002cda <HAL_RCC_OscConfig+0x3d6>
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cd6:	6053      	str	r3, [r2, #4]
 8002cd8:	e02e      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
 8002cda:	4b48      	ldr	r3, [pc, #288]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	4944      	ldr	r1, [pc, #272]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
 8002cee:	e023      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	493f      	ldr	r1, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	e018      	b.n	8002d38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3c      	ldr	r2, [pc, #240]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fd ffdb 	bl	8000ccc <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d1a:	f7fd ffd7 	bl	8000ccc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e212      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d036      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d019      	beq.n	8002d80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fd ffb8 	bl	8000ccc <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fd ffb4 	bl	8000ccc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1ef      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x45c>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fd ff9e 	bl	8000ccc <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fd ff9a 	bl	8000ccc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1d5      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d039      	beq.n	8002e32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dd2:	f7fd ff7b 	bl	8000ccc <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dda:	f7fd ff77 	bl	8000ccc <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1b2      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x4d6>
 8002df8:	e01b      	b.n	8002e32 <HAL_RCC_OscConfig+0x52e>
 8002dfa:	bf00      	nop
 8002dfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e00:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a9a      	ldr	r2, [pc, #616]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e0c:	f7fd ff5e 	bl	8000ccc <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e14:	f7fd ff5a 	bl	8000ccc <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e195      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8081 	beq.w	8002f42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e40:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <HAL_RCC_OscConfig+0x770>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a8b      	ldr	r2, [pc, #556]	; (8003074 <HAL_RCC_OscConfig+0x770>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e4c:	f7fd ff3e 	bl	8000ccc <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fd ff3a 	bl	8000ccc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e175      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <HAL_RCC_OscConfig+0x770>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x584>
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e02d      	b.n	8002ee4 <HAL_RCC_OscConfig+0x5e0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5a6>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ea2:	f023 0304 	bic.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e01c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x5e0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c8>
 8002eb2:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x5e0>
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a67      	ldr	r2, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a64      	ldr	r2, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ede:	f023 0304 	bic.w	r3, r3, #4
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fd feee 	bl	8000ccc <HAL_GetTick>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fd feea 	bl	8000ccc <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e123      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0a:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ee      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5f0>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd fed8 	bl	8000ccc <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7fd fed4 	bl	8000ccc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e10d      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f36:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ee      	bne.n	8002f20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8102 	beq.w	8003150 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f4c:	4b48      	ldr	r3, [pc, #288]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f54:	2b18      	cmp	r3, #24
 8002f56:	f000 80bd 	beq.w	80030d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	f040 809e 	bne.w	80030a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a41      	ldr	r2, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fd feac 	bl	8000ccc <HAL_GetTick>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fd fea8 	bl	8000ccc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0e3      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x774>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	4931      	ldr	r1, [pc, #196]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	628b      	str	r3, [r1, #40]	; 0x28
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fe0:	4923      	ldr	r1, [pc, #140]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x778>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f023 020c 	bic.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4917      	ldr	r1, [pc, #92]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f023 0202 	bic.w	r2, r3, #2
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fd fe31 	bl	8000ccc <HAL_GetTick>
 800306a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306c:	e011      	b.n	8003092 <HAL_RCC_OscConfig+0x78e>
 800306e:	bf00      	nop
 8003070:	58024400 	.word	0x58024400
 8003074:	58024800 	.word	0x58024800
 8003078:	fffffc0c 	.word	0xfffffc0c
 800307c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fd fe24 	bl	8000ccc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e05f      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003092:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_RCC_OscConfig+0x858>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x77c>
 800309e:	e057      	b.n	8003150 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCC_OscConfig+0x858>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x858>)
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fe0e 	bl	8000ccc <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fd fe0a 	bl	8000ccc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e045      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_RCC_OscConfig+0x858>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x7b0>
 80030d2:	e03d      	b.n	8003150 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_RCC_OscConfig+0x858>)
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_OscConfig+0x858>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d031      	beq.n	800314c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0203 	and.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d12a      	bne.n	800314c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d122      	bne.n	800314c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d11a      	bne.n	800314c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0a5b      	lsrs	r3, r3, #9
 800311a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d111      	bne.n	800314c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d108      	bne.n	800314c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0e1b      	lsrs	r3, r3, #24
 800313e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3730      	adds	r7, #48	; 0x30
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	58024400 	.word	0x58024400

08003160 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e19c      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b8a      	ldr	r3, [pc, #552]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	4985      	ldr	r1, [pc, #532]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b83      	ldr	r3, [pc, #524]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e184      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	4b7b      	ldr	r3, [pc, #492]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031bc:	429a      	cmp	r2, r3
 80031be:	d908      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	4975      	ldr	r1, [pc, #468]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d908      	bls.n	8003200 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ee:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	496a      	ldr	r1, [pc, #424]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003218:	429a      	cmp	r2, r3
 800321a:	d908      	bls.n	800322e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800321c:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	495e      	ldr	r1, [pc, #376]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800322a:	4313      	orrs	r3, r2
 800322c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003246:	429a      	cmp	r2, r3
 8003248:	d908      	bls.n	800325c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4953      	ldr	r1, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003258:	4313      	orrs	r3, r2
 800325a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d010      	beq.n	800328a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	429a      	cmp	r2, r3
 8003276:	d908      	bls.n	800328a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f023 020f 	bic.w	r2, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4947      	ldr	r1, [pc, #284]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003286:	4313      	orrs	r3, r2
 8003288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d055      	beq.n	8003342 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4940      	ldr	r1, [pc, #256]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b0:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0f6      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d115      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0ea      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e0:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0de      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f0:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d6      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f023 0207 	bic.w	r2, r3, #7
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4925      	ldr	r1, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800330e:	4313      	orrs	r3, r2
 8003310:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fd fcdb 	bl	8000ccc <HAL_GetTick>
 8003316:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003318:	e00a      	b.n	8003330 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331a:	f7fd fcd7 	bl	8000ccc <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0be      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	429a      	cmp	r2, r3
 8003340:	d1eb      	bne.n	800331a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	429a      	cmp	r2, r3
 800335c:	d208      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f023 020f 	bic.w	r2, r3, #15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_RCC_ClockConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d214      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 020f 	bic.w	r2, r3, #15
 8003386:	4906      	ldr	r1, [pc, #24]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_ClockConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e086      	b.n	80034ae <HAL_RCC_ClockConfig+0x34e>
 80033a0:	52002000 	.word	0x52002000
 80033a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d208      	bcs.n	80033d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	4939      	ldr	r1, [pc, #228]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d208      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	492e      	ldr	r1, [pc, #184]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003400:	4313      	orrs	r3, r2
 8003402:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800341c:	429a      	cmp	r2, r3
 800341e:	d208      	bcs.n	8003432 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4922      	ldr	r1, [pc, #136]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 800342e:	4313      	orrs	r3, r2
 8003430:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344a:	429a      	cmp	r2, r3
 800344c:	d208      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4917      	ldr	r1, [pc, #92]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 800345c:	4313      	orrs	r3, r2
 800345e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003460:	f000 f844 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	4912      	ldr	r1, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x35c>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_RCC_ClockConfig+0x358>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <HAL_RCC_ClockConfig+0x35c>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x360>)
 8003496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003498:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <HAL_RCC_ClockConfig+0x364>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_ClockConfig+0x368>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fbc8 	bl	8000c38 <HAL_InitTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	0800d6dc 	.word	0x0800d6dc
 80034c0:	24000004 	.word	0x24000004
 80034c4:	24000000 	.word	0x24000000
 80034c8:	24000008 	.word	0x24000008

080034cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_EnableCSS+0x1c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_RCC_EnableCSS+0x1c>)
 80034d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f2:	4bb3      	ldr	r3, [pc, #716]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034fa:	2b18      	cmp	r3, #24
 80034fc:	f200 8155 	bhi.w	80037aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003500:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	0800356d 	.word	0x0800356d
 800350c:	080037ab 	.word	0x080037ab
 8003510:	080037ab 	.word	0x080037ab
 8003514:	080037ab 	.word	0x080037ab
 8003518:	080037ab 	.word	0x080037ab
 800351c:	080037ab 	.word	0x080037ab
 8003520:	080037ab 	.word	0x080037ab
 8003524:	080037ab 	.word	0x080037ab
 8003528:	08003593 	.word	0x08003593
 800352c:	080037ab 	.word	0x080037ab
 8003530:	080037ab 	.word	0x080037ab
 8003534:	080037ab 	.word	0x080037ab
 8003538:	080037ab 	.word	0x080037ab
 800353c:	080037ab 	.word	0x080037ab
 8003540:	080037ab 	.word	0x080037ab
 8003544:	080037ab 	.word	0x080037ab
 8003548:	08003599 	.word	0x08003599
 800354c:	080037ab 	.word	0x080037ab
 8003550:	080037ab 	.word	0x080037ab
 8003554:	080037ab 	.word	0x080037ab
 8003558:	080037ab 	.word	0x080037ab
 800355c:	080037ab 	.word	0x080037ab
 8003560:	080037ab 	.word	0x080037ab
 8003564:	080037ab 	.word	0x080037ab
 8003568:	0800359f 	.word	0x0800359f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800356c:	4b94      	ldr	r3, [pc, #592]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	4a90      	ldr	r2, [pc, #576]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800358a:	e111      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800358c:	4b8d      	ldr	r3, [pc, #564]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800358e:	61bb      	str	r3, [r7, #24]
    break;
 8003590:	e10e      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003594:	61bb      	str	r3, [r7, #24]
    break;
 8003596:	e10b      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003598:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800359a:	61bb      	str	r3, [r7, #24]
    break;
 800359c:	e108      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035a8:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035b4:	4b82      	ldr	r3, [pc, #520]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035be:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80e1 	beq.w	80037a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f000 8083 	beq.w	80036f0 <HAL_RCC_GetSysClockFreq+0x204>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f200 80a1 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x248>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x114>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d056      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80035fe:	e099      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02d      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800360c:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	08db      	lsrs	r3, r3, #3
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	4a6b      	ldr	r2, [pc, #428]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
 800361c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003636:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	ed97 6a02 	vldr	s12, [r7, #8]
 800364a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003666:	e087      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003672:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368a:	ed97 6a02 	vldr	s12, [r7, #8]
 800368e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036aa:	e065      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80036d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ee:	e043      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80036fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003712:	ed97 6a02 	vldr	s12, [r7, #8]
 8003716:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800371a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003732:	e021      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003756:	ed97 6a02 	vldr	s12, [r7, #8]
 800375a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800375e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003776:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	0a5b      	lsrs	r3, r3, #9
 800377e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003782:	3301      	adds	r3, #1
 8003784:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003790:	edd7 6a07 	vldr	s13, [r7, #28]
 8003794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379c:	ee17 3a90 	vmov	r3, s15
 80037a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037ac:	61bb      	str	r3, [r7, #24]
    break;
 80037ae:	bf00      	nop
  }

  return sysclockfreq;
 80037b0:	69bb      	ldr	r3, [r7, #24]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
 80037c4:	03d09000 	.word	0x03d09000
 80037c8:	003d0900 	.word	0x003d0900
 80037cc:	00b71b00 	.word	0x00b71b00
 80037d0:	46000000 	.word	0x46000000
 80037d4:	4c742400 	.word	0x4c742400
 80037d8:	4a742400 	.word	0x4a742400
 80037dc:	4b371b00 	.word	0x4b371b00

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037e6:	f7ff fe81 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	490f      	ldr	r1, [pc, #60]	; (8003834 <HAL_RCC_GetHCLKFreq+0x54>)
 80037f8:	5ccb      	ldrb	r3, [r1, r3]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_GetHCLKFreq+0x50>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <HAL_RCC_GetHCLKFreq+0x54>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_RCC_GetHCLKFreq+0x58>)
 800381c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_GetHCLKFreq+0x58>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	58024400 	.word	0x58024400
 8003834:	0800d6dc 	.word	0x0800d6dc
 8003838:	24000004 	.word	0x24000004
 800383c:	24000000 	.word	0x24000000

08003840 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003848:	2300      	movs	r3, #0
 800384a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800384c:	2300      	movs	r3, #0
 800384e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d03f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003864:	d02a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800386c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003870:	d018      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800387c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4ba3      	ldr	r3, [pc, #652]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4aa2      	ldr	r2, [pc, #648]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2102      	movs	r1, #2
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff17 	bl	80046cc <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038a2:	e00c      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ffc0 	bl	8004830 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038c4:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d0:	4990      	ldr	r1, [pc, #576]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	650b      	str	r3, [r1, #80]	; 0x50
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d826      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800390d 	.word	0x0800390d
 80038fc:	0800391b 	.word	0x0800391b
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003945 	.word	0x08003945
 8003908:	08003945 	.word	0x08003945
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a80      	ldr	r2, [pc, #512]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003918:	e015      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fed3 	bl	80046cc <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800392a:	e00c      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3324      	adds	r3, #36	; 0x24
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 ff7c 	bl	8004830 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
      break;
 8003942:	e000      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800394c:	4b71      	ldr	r3, [pc, #452]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	f023 0207 	bic.w	r2, r3, #7
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	496e      	ldr	r1, [pc, #440]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800395a:	4313      	orrs	r3, r2
 800395c:	650b      	str	r3, [r1, #80]	; 0x50
 800395e:	e001      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396c:	2b00      	cmp	r3, #0
 800396e:	d042      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003978:	d02b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d825      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003980:	2bc0      	cmp	r3, #192	; 0xc0
 8003982:	d028      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003984:	2bc0      	cmp	r3, #192	; 0xc0
 8003986:	d821      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d016      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d81d      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d007      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003998:	e018      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399a:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039a6:	e017      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe8c 	bl	80046cc <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039b8:	e00e      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff35 	bl	8004830 <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039ca:	e005      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039de:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	494a      	ldr	r1, [pc, #296]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	650b      	str	r3, [r1, #80]	; 0x50
 80039f0:	e001      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d049      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a0c:	d030      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a12:	d82a      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a18:	d02c      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a1e:	d824      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a24:	d018      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2a:	d81e      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a34:	d007      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a36:	e018      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a44:	e017      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fe3d 	bl	80046cc <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a56:	e00e      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3324      	adds	r3, #36	; 0x24
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fee6 	bl	8004830 <RCCEx_PLL3_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a68:	e005      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a8a:	4922      	ldr	r1, [pc, #136]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04b      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aac:	d030      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab2:	d82a      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ab8:	d02e      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003abe:	d824      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac4:	d018      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aca:	d81e      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ad6:	e018      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e019      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fded 	bl	80046cc <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003af6:	e010      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fe96 	bl	8004830 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b08:	e007      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003b10:	bf00      	nop
 8003b12:	e002      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003b14:	58024400 	.word	0x58024400
      break;
 8003b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b2e:	4996      	ldr	r1, [pc, #600]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	658b      	str	r3, [r1, #88]	; 0x58
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d032      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	d01c      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b4e:	2b30      	cmp	r3, #48	; 0x30
 8003b50:	d817      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d813      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b62:	4b89      	ldr	r3, [pc, #548]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a88      	ldr	r2, [pc, #544]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b6e:	e00e      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fda8 	bl	80046cc <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b88:	bf00      	nop
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	4979      	ldr	r1, [pc, #484]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d047      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc0:	d030      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc6:	d82a      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bcc:	d02c      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bd2:	d824      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd8:	d018      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d81e      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d007      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003bea:	e018      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bf8:	e017      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fd63 	bl	80046cc <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e00e      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3324      	adds	r3, #36	; 0x24
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fe0c 	bl	8004830 <RCCEx_PLL3_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e005      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c30:	4b55      	ldr	r3, [pc, #340]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	4952      	ldr	r1, [pc, #328]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	650b      	str	r3, [r1, #80]	; 0x50
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d049      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5c:	d02e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c62:	d828      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c68:	d02a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c6e:	d822      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c74:	d026      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c7a:	d81c      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c80:	d010      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c86:	d816      	bhi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d111      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd17 	bl	80046cc <RCCEx_PLL2_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ca2:	e012      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fdc0 	bl	8004830 <RCCEx_PLL3_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cb4:	e009      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cba:	e006      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cc0:	bf00      	nop
 8003cc2:	e002      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	492a      	ldr	r1, [pc, #168]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d04d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfe:	d02e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d04:	d828      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d02a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d822      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d16:	d026      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003d18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d1c:	d81c      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d22:	d010      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d28:	d816      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01d      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d32:	d111      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fcc6 	bl	80046cc <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d44:	e012      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fd6f 	bl	8004830 <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d56:	e009      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d80:	4901      	ldr	r1, [pc, #4]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	658b      	str	r3, [r1, #88]	; 0x58
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02f      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d00e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003daa:	d814      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db6:	4baf      	ldr	r3, [pc, #700]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4aae      	ldr	r2, [pc, #696]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dc2:	e00c      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fc7e 	bl	80046cc <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de4:	4ba3      	ldr	r3, [pc, #652]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	49a0      	ldr	r1, [pc, #640]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	650b      	str	r3, [r1, #80]	; 0x50
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d032      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d81b      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4f 	.word	0x08003e4f
 8003e1c:	08003e29 	.word	0x08003e29
 8003e20:	08003e37 	.word	0x08003e37
 8003e24:	08003e4f 	.word	0x08003e4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e28:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	4a91      	ldr	r2, [pc, #580]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fc45 	bl	80046cc <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e56:	4b87      	ldr	r3, [pc, #540]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	4984      	ldr	r1, [pc, #528]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e68:	e001      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8086 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7c:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a7d      	ldr	r2, [pc, #500]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e88:	f7fc ff20 	bl	8000ccc <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fc ff1c 	bl	8000ccc <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d902      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea4:	4b74      	ldr	r3, [pc, #464]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d166      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003eb6:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec0:	4053      	eors	r3, r2
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ed4:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a66      	ldr	r2, [pc, #408]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee0:	4b64      	ldr	r3, [pc, #400]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a63      	ldr	r2, [pc, #396]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003eec:	4a61      	ldr	r2, [pc, #388]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efc:	d115      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fc fee5 	bl	8000ccc <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f04:	e00b      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fc fee1 	bl	8000ccc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f1c:	e005      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1e:	4b55      	ldr	r3, [pc, #340]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ed      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d126      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3e:	d10d      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f4e:	0919      	lsrs	r1, r3, #4
 8003f50:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	4947      	ldr	r1, [pc, #284]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	610b      	str	r3, [r1, #16]
 8003f5a:	e005      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4a44      	ldr	r2, [pc, #272]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f66:	6113      	str	r3, [r2, #16]
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f76:	493f      	ldr	r1, [pc, #252]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	670b      	str	r3, [r1, #112]	; 0x70
 8003f7c:	e004      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	75bb      	strb	r3, [r7, #22]
 8003f82:	e001      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8085 	beq.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f9a:	2b28      	cmp	r3, #40	; 0x28
 8003f9c:	d866      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08004081 	.word	0x08004081
 8003fa8:	0800406d 	.word	0x0800406d
 8003fac:	0800406d 	.word	0x0800406d
 8003fb0:	0800406d 	.word	0x0800406d
 8003fb4:	0800406d 	.word	0x0800406d
 8003fb8:	0800406d 	.word	0x0800406d
 8003fbc:	0800406d 	.word	0x0800406d
 8003fc0:	0800406d 	.word	0x0800406d
 8003fc4:	08004049 	.word	0x08004049
 8003fc8:	0800406d 	.word	0x0800406d
 8003fcc:	0800406d 	.word	0x0800406d
 8003fd0:	0800406d 	.word	0x0800406d
 8003fd4:	0800406d 	.word	0x0800406d
 8003fd8:	0800406d 	.word	0x0800406d
 8003fdc:	0800406d 	.word	0x0800406d
 8003fe0:	0800406d 	.word	0x0800406d
 8003fe4:	0800405b 	.word	0x0800405b
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	0800406d 	.word	0x0800406d
 8003ff0:	0800406d 	.word	0x0800406d
 8003ff4:	0800406d 	.word	0x0800406d
 8003ff8:	0800406d 	.word	0x0800406d
 8003ffc:	0800406d 	.word	0x0800406d
 8004000:	0800406d 	.word	0x0800406d
 8004004:	08004081 	.word	0x08004081
 8004008:	0800406d 	.word	0x0800406d
 800400c:	0800406d 	.word	0x0800406d
 8004010:	0800406d 	.word	0x0800406d
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800406d 	.word	0x0800406d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800406d 	.word	0x0800406d
 8004024:	08004081 	.word	0x08004081
 8004028:	0800406d 	.word	0x0800406d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800406d 	.word	0x0800406d
 8004034:	0800406d 	.word	0x0800406d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004081 	.word	0x08004081
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fb3c 	bl	80046cc <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004058:	e013      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fbe5 	bl	8004830 <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	e007      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	58024800 	.word	0x58024800
 800407c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004088:	4b96      	ldr	r3, [pc, #600]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004094:	4993      	ldr	r1, [pc, #588]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	654b      	str	r3, [r1, #84]	; 0x54
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d038      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d821      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040ff 	.word	0x080040ff
 80040c0:	080040d5 	.word	0x080040d5
 80040c4:	080040e7 	.word	0x080040e7
 80040c8:	080040ff 	.word	0x080040ff
 80040cc:	080040ff 	.word	0x080040ff
 80040d0:	080040ff 	.word	0x080040ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 faf6 	bl	80046cc <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040e4:	e00c      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3324      	adds	r3, #36	; 0x24
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb9f 	bl	8004830 <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80040fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004106:	4b77      	ldr	r3, [pc, #476]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f023 0207 	bic.w	r2, r3, #7
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	4974      	ldr	r1, [pc, #464]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	654b      	str	r3, [r1, #84]	; 0x54
 8004118:	e001      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	2b05      	cmp	r3, #5
 8004132:	d821      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	0800417f 	.word	0x0800417f
 8004140:	08004155 	.word	0x08004155
 8004144:	08004167 	.word	0x08004167
 8004148:	0800417f 	.word	0x0800417f
 800414c:	0800417f 	.word	0x0800417f
 8004150:	0800417f 	.word	0x0800417f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fab6 	bl	80046cc <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004164:	e00c      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3324      	adds	r3, #36	; 0x24
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb5f 	bl	8004830 <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
      break;
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800417e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004186:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f023 0207 	bic.w	r2, r3, #7
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	4953      	ldr	r1, [pc, #332]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	658b      	str	r3, [r1, #88]	; 0x58
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d04b      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b6:	d02e      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80041b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041bc:	d828      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d02a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d822      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ce:	d026      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80041d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041d4:	d81c      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041da:	d010      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80041dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e0:	d816      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01d      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80041e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ea:	d111      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa6a 	bl	80046cc <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041fc:	e012      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3324      	adds	r3, #36	; 0x24
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fb13 	bl	8004830 <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800420e:	e009      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      break;
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004216:	bf00      	nop
 8004218:	e004      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004238:	492a      	ldr	r1, [pc, #168]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	654b      	str	r3, [r1, #84]	; 0x54
 800423e:	e001      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d04d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004256:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800425a:	d02e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800425c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004260:	d828      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d02a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d822      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800426e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004272:	d026      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004278:	d81c      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d010      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d816      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01d      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d111      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fa18 	bl	80046cc <RCCEx_PLL2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042a0:	e012      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3324      	adds	r3, #36	; 0x24
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fac1 	bl	8004830 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042b2:	e009      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
      break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80042c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042dc:	4901      	ldr	r1, [pc, #4]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	658b      	str	r3, [r1, #88]	; 0x58
 80042e2:	e003      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d04b      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004302:	d02e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004304:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004308:	d828      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430e:	d02a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004314:	d822      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004316:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800431a:	d026      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800431c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004320:	d81c      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004326:	d010      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d816      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01d      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d111      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f9c4 	bl	80046cc <RCCEx_PLL2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004348:	e012      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3324      	adds	r3, #36	; 0x24
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa6d 	bl	8004830 <RCCEx_PLL3_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800435a:	e009      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004362:	bf00      	nop
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004366:	bf00      	nop
 8004368:	e002      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800436a:	bf00      	nop
 800436c:	e000      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800436e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004376:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004384:	4999      	ldr	r1, [pc, #612]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004386:	4313      	orrs	r3, r2
 8004388:	658b      	str	r3, [r1, #88]	; 0x58
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	d10a      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	2102      	movs	r1, #2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fa3e 	bl	8004830 <RCCEx_PLL3_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043cc:	4987      	ldr	r1, [pc, #540]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e8:	d10a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3324      	adds	r3, #36	; 0x24
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fa1d 	bl	8004830 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004400:	4b7a      	ldr	r3, [pc, #488]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440e:	4977      	ldr	r1, [pc, #476]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004410:	4313      	orrs	r3, r2
 8004412:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d034      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800442a:	d01d      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800442c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004430:	d817      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800443c:	e011      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f941 	bl	80046cc <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800444e:	e00c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f9ea 	bl	8004830 <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
      break;
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004470:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800447e:	495b      	ldr	r1, [pc, #364]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004480:	4313      	orrs	r3, r2
 8004482:	658b      	str	r3, [r1, #88]	; 0x58
 8004484:	e001      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d033      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a0:	d01c      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80044a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a6:	d816      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d003      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80044ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b2:	d007      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044c2:	e00c      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f9b0 	bl	8004830 <RCCEx_PLL3_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80044dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f2:	493e      	ldr	r1, [pc, #248]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	654b      	str	r3, [r1, #84]	; 0x54
 80044f8:	e001      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d029      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d007      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004518:	e00f      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451a:	4b34      	ldr	r3, [pc, #208]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a33      	ldr	r2, [pc, #204]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004526:	e00b      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f8cc 	bl	80046cc <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
      break;
 800453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	4926      	ldr	r1, [pc, #152]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004554:	4313      	orrs	r3, r2
 8004556:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004558:	e001      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3324      	adds	r3, #36	; 0x24
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f95d 	bl	8004830 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d033      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004594:	d017      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459a:	d811      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800459c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a0:	d013      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80045a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a6:	d80b      	bhi.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d106      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045be:	e007      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
      break;
 80045c4:	e004      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80045ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e2:	4902      	ldr	r1, [pc, #8]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	654b      	str	r3, [r1, #84]	; 0x54
 80045e8:	e004      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	492e      	ldr	r1, [pc, #184]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800460e:	4313      	orrs	r3, r2
 8004610:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800462c:	4926      	ldr	r1, [pc, #152]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464a:	491f      	ldr	r1, [pc, #124]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800464c:	4313      	orrs	r3, r2
 800464e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004666:	6113      	str	r3, [r2, #16]
 8004668:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004672:	4915      	ldr	r1, [pc, #84]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	da08      	bge.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004680:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004684:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800468e:	4313      	orrs	r3, r2
 8004690:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	4906      	ldr	r1, [pc, #24]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046b2:	7dbb      	ldrb	r3, [r7, #22]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	58024400 	.word	0x58024400

080046cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046da:	4b53      	ldr	r3, [pc, #332]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d101      	bne.n	80046ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e099      	b.n	800481e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046ea:	4b4f      	ldr	r3, [pc, #316]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4e      	ldr	r2, [pc, #312]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f6:	f7fc fae9 	bl	8000ccc <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046fc:	e008      	b.n	8004710 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046fe:	f7fc fae5 	bl	8000ccc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e086      	b.n	800481e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004710:	4b45      	ldr	r3, [pc, #276]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800471c:	4b42      	ldr	r3, [pc, #264]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	031b      	lsls	r3, r3, #12
 800472a:	493f      	ldr	r1, [pc, #252]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	628b      	str	r3, [r1, #40]	; 0x28
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	3b01      	subs	r3, #1
 8004736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	3b01      	subs	r3, #1
 8004740:	025b      	lsls	r3, r3, #9
 8004742:	b29b      	uxth	r3, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	3b01      	subs	r3, #1
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004760:	4931      	ldr	r1, [pc, #196]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004766:	4b30      	ldr	r3, [pc, #192]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	492d      	ldr	r1, [pc, #180]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	f023 0220 	bic.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4928      	ldr	r1, [pc, #160]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004790:	f023 0310 	bic.w	r3, r3, #16
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <RCCEx_PLL2_Config+0x160>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	69d2      	ldr	r2, [r2, #28]
 80047a2:	00d2      	lsls	r2, r2, #3
 80047a4:	4920      	ldr	r1, [pc, #128]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047b0:	f043 0310 	orr.w	r3, r3, #16
 80047b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047c8:	e00f      	b.n	80047ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047d0:	4b15      	ldr	r3, [pc, #84]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a14      	ldr	r2, [pc, #80]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047dc:	e005      	b.n	80047ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f6:	f7fc fa69 	bl	8000ccc <HAL_GetTick>
 80047fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047fc:	e008      	b.n	8004810 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047fe:	f7fc fa65 	bl	8000ccc <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e006      	b.n	800481e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <RCCEx_PLL2_Config+0x15c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
 800482c:	ffff0007 	.word	0xffff0007

08004830 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800483e:	4b53      	ldr	r3, [pc, #332]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b03      	cmp	r3, #3
 8004848:	d101      	bne.n	800484e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e099      	b.n	8004982 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800484e:	4b4f      	ldr	r3, [pc, #316]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a4e      	ldr	r2, [pc, #312]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485a:	f7fc fa37 	bl	8000ccc <HAL_GetTick>
 800485e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004860:	e008      	b.n	8004874 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004862:	f7fc fa33 	bl	8000ccc <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e086      	b.n	8004982 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004874:	4b45      	ldr	r3, [pc, #276]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004880:	4b42      	ldr	r3, [pc, #264]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	051b      	lsls	r3, r3, #20
 800488e:	493f      	ldr	r1, [pc, #252]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	628b      	str	r3, [r1, #40]	; 0x28
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	025b      	lsls	r3, r3, #9
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	3b01      	subs	r3, #1
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048c4:	4931      	ldr	r1, [pc, #196]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048ca:	4b30      	ldr	r3, [pc, #192]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	492d      	ldr	r1, [pc, #180]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048dc:	4b2b      	ldr	r3, [pc, #172]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	4928      	ldr	r1, [pc, #160]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 80048fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <RCCEx_PLL3_Config+0x160>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	69d2      	ldr	r2, [r2, #28]
 8004906:	00d2      	lsls	r2, r2, #3
 8004908:	4920      	ldr	r1, [pc, #128]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800490e:	4b1f      	ldr	r3, [pc, #124]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800492a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800492c:	e00f      	b.n	800494e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004934:	4b15      	ldr	r3, [pc, #84]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a14      	ldr	r2, [pc, #80]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 800493a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004940:	e005      	b.n	800494e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	4a11      	ldr	r2, [pc, #68]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a0e      	ldr	r2, [pc, #56]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495a:	f7fc f9b7 	bl	8000ccc <HAL_GetTick>
 800495e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004960:	e008      	b.n	8004974 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004962:	f7fc f9b3 	bl	8000ccc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e006      	b.n	8004982 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <RCCEx_PLL3_Config+0x15c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	ffff0007 	.word	0xffff0007

08004994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004994:	b084      	sub	sp, #16
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	f107 001c 	add.w	r0, r7, #28
 80049a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d120      	bne.n	80049ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <USB_CoreInit+0xd4>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d105      	bne.n	80049e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 fc04 	bl	80061f0 <USB_CoreReset>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	e01a      	b.n	8004a24 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 fbf8 	bl	80061f0 <USB_CoreReset>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
 8004a16:	e005      	b.n	8004a24 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d116      	bne.n	8004a58 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <USB_CoreInit+0xd8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f043 0206 	orr.w	r2, r3, #6
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr
 8004a68:	ffbdffbf 	.word	0xffbdffbf
 8004a6c:	03ee0000 	.word	0x03ee0000

08004a70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d165      	bne.n	8004b50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4a41      	ldr	r2, [pc, #260]	; (8004b8c <USB_SetTurnaroundTime+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d906      	bls.n	8004a9a <USB_SetTurnaroundTime+0x2a>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a40      	ldr	r2, [pc, #256]	; (8004b90 <USB_SetTurnaroundTime+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d202      	bcs.n	8004a9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a94:	230f      	movs	r3, #15
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e062      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4a3c      	ldr	r2, [pc, #240]	; (8004b90 <USB_SetTurnaroundTime+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d306      	bcc.n	8004ab0 <USB_SetTurnaroundTime+0x40>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <USB_SetTurnaroundTime+0x124>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d202      	bcs.n	8004ab0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aaa:	230e      	movs	r3, #14
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e057      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <USB_SetTurnaroundTime+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d306      	bcc.n	8004ac6 <USB_SetTurnaroundTime+0x56>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a37      	ldr	r2, [pc, #220]	; (8004b98 <USB_SetTurnaroundTime+0x128>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d202      	bcs.n	8004ac6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ac0:	230d      	movs	r3, #13
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e04c      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4a33      	ldr	r2, [pc, #204]	; (8004b98 <USB_SetTurnaroundTime+0x128>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d306      	bcc.n	8004adc <USB_SetTurnaroundTime+0x6c>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4a32      	ldr	r2, [pc, #200]	; (8004b9c <USB_SetTurnaroundTime+0x12c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d802      	bhi.n	8004adc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	e041      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <USB_SetTurnaroundTime+0x12c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d906      	bls.n	8004af2 <USB_SetTurnaroundTime+0x82>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4a2e      	ldr	r2, [pc, #184]	; (8004ba0 <USB_SetTurnaroundTime+0x130>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d802      	bhi.n	8004af2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004aec:	230b      	movs	r3, #11
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e036      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <USB_SetTurnaroundTime+0x130>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d906      	bls.n	8004b08 <USB_SetTurnaroundTime+0x98>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <USB_SetTurnaroundTime+0x134>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d802      	bhi.n	8004b08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b02:	230a      	movs	r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e02b      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <USB_SetTurnaroundTime+0x134>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d906      	bls.n	8004b1e <USB_SetTurnaroundTime+0xae>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <USB_SetTurnaroundTime+0x138>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d202      	bcs.n	8004b1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b18:	2309      	movs	r3, #9
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e020      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <USB_SetTurnaroundTime+0x138>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d306      	bcc.n	8004b34 <USB_SetTurnaroundTime+0xc4>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <USB_SetTurnaroundTime+0x13c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d802      	bhi.n	8004b34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b2e:	2308      	movs	r3, #8
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e015      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <USB_SetTurnaroundTime+0x13c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d906      	bls.n	8004b4a <USB_SetTurnaroundTime+0xda>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <USB_SetTurnaroundTime+0x140>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d202      	bcs.n	8004b4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b44:	2307      	movs	r3, #7
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e00a      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b4a:	2306      	movs	r3, #6
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e007      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b56:	2309      	movs	r3, #9
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	e001      	b.n	8004b60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b5c:	2309      	movs	r3, #9
 8004b5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	00d8acbf 	.word	0x00d8acbf
 8004b90:	00e4e1c0 	.word	0x00e4e1c0
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	01067380 	.word	0x01067380
 8004b9c:	011a499f 	.word	0x011a499f
 8004ba0:	01312cff 	.word	0x01312cff
 8004ba4:	014ca43f 	.word	0x014ca43f
 8004ba8:	016e3600 	.word	0x016e3600
 8004bac:	01a6ab1f 	.word	0x01a6ab1f
 8004bb0:	01e84800 	.word	0x01e84800

08004bb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f043 0201 	orr.w	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d115      	bne.n	8004c46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c26:	2001      	movs	r0, #1
 8004c28:	f7fc f85c 	bl	8000ce4 <HAL_Delay>
      ms++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fa4b 	bl	80060ce <USB_GetMode>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d01e      	beq.n	8004c7c <USB_SetCurrentMode+0x84>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b31      	cmp	r3, #49	; 0x31
 8004c42:	d9f0      	bls.n	8004c26 <USB_SetCurrentMode+0x2e>
 8004c44:	e01a      	b.n	8004c7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d115      	bne.n	8004c78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7fc f843 	bl	8000ce4 <HAL_Delay>
      ms++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fa32 	bl	80060ce <USB_GetMode>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <USB_SetCurrentMode+0x84>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b31      	cmp	r3, #49	; 0x31
 8004c74:	d9f0      	bls.n	8004c58 <USB_SetCurrentMode+0x60>
 8004c76:	e001      	b.n	8004c7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e005      	b.n	8004c88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b32      	cmp	r3, #50	; 0x32
 8004c80:	d101      	bne.n	8004c86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c90:	b084      	sub	sp, #16
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	e009      	b.n	8004cc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3340      	adds	r3, #64	; 0x40
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0e      	cmp	r3, #14
 8004cc8:	d9f2      	bls.n	8004cb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d11c      	bne.n	8004d0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cde:	f043 0302 	orr.w	r3, r3, #2
 8004ce2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e005      	b.n	8004d16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	4619      	mov	r1, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	461a      	mov	r2, r3
 8004d32:	680b      	ldr	r3, [r1, #0]
 8004d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10c      	bne.n	8004d56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f965 	bl	8005014 <USB_SetDevSpeed>
 8004d4a:	e008      	b.n	8004d5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f960 	bl	8005014 <USB_SetDevSpeed>
 8004d54:	e003      	b.n	8004d5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d56:	2103      	movs	r1, #3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f95b 	bl	8005014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d5e:	2110      	movs	r1, #16
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8f3 	bl	8004f4c <USB_FlushTxFifo>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f91f 	bl	8004fb4 <USB_FlushRxFifo>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	461a      	mov	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e043      	b.n	8004e32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc0:	d118      	bne.n	8004df4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e013      	b.n	8004e06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	461a      	mov	r2, r3
 8004dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e008      	b.n	8004e06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3b7      	bcc.n	8004daa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e043      	b.n	8004ec8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e56:	d118      	bne.n	8004e8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e013      	b.n	8004e9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e008      	b.n	8004e9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3b7      	bcc.n	8004e40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f043 0210 	orr.w	r2, r3, #16
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <USB_DevInit+0x2b4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <USB_DevInit+0x2b8>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr
 8004f44:	803c3800 	.word	0x803c3800
 8004f48:	40000004 	.word	0x40000004

08004f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e01b      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	daf2      	bge.n	8004f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	019b      	lsls	r3, r3, #6
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <USB_FlushTxFifo+0x64>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e006      	b.n	8004fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d0f0      	beq.n	8004f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e018      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	daf2      	bge.n	8004fc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <USB_FlushRxFifo+0x5c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e006      	b.n	8005004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d0f0      	beq.n	8004fe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	00030d40 	.word	0x00030d40

08005014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]
 800506a:	e00a      	b.n	8005082 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d002      	beq.n	8005078 <USB_GetDevSpeed+0x32>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b06      	cmp	r3, #6
 8005076:	d102      	bne.n	800507e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005078:	2302      	movs	r3, #2
 800507a:	75fb      	strb	r3, [r7, #23]
 800507c:	e001      	b.n	8005082 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800507e:	230f      	movs	r3, #15
 8005080:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d139      	bne.n	8005120 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d153      	bne.n	800518c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005100:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	059b      	lsls	r3, r3, #22
 8005106:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005108:	431a      	orrs	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	0159      	lsls	r1, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	440b      	add	r3, r1
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	4619      	mov	r1, r3
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <USB_ActivateEndpoint+0x10c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
 800511e:	e035      	b.n	800518c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800513e:	4313      	orrs	r3, r2
 8005140:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d119      	bne.n	800518c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	791b      	ldrb	r3, [r3, #4]
 8005172:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005174:	430b      	orrs	r3, r1
 8005176:	431a      	orrs	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	0159      	lsls	r1, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	440b      	add	r3, r1
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	4619      	mov	r1, r3
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <USB_ActivateEndpoint+0x10c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	10008000 	.word	0x10008000

080051a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d161      	bne.n	8005280 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d2:	d11f      	bne.n	8005214 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	b29b      	uxth	r3, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4013      	ands	r3, r2
 8005236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	b29b      	uxth	r3, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005258:	4013      	ands	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	0159      	lsls	r1, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	440b      	add	r3, r1
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	4619      	mov	r1, r3
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <USB_DeactivateEndpoint+0x1b0>)
 800527a:	4013      	ands	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
 800527e:	e060      	b.n	8005342 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	d11f      	bne.n	80052d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	43db      	mvns	r3, r3
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f8:	4013      	ands	r3, r2
 80052fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	2101      	movs	r1, #1
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	43db      	mvns	r3, r3
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4013      	ands	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	440b      	add	r3, r1
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	4619      	mov	r1, r3
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <USB_DeactivateEndpoint+0x1b4>)
 800533e:	4013      	ands	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	ec337800 	.word	0xec337800
 8005354:	eff37800 	.word	0xeff37800

08005358 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 8163 	bne.w	8005640 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d132      	bne.n	80053e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	0159      	lsls	r1, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	440b      	add	r3, r1
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	4619      	mov	r1, r3
 800539e:	4ba5      	ldr	r3, [pc, #660]	; (8005634 <USB_EPStartXfer+0x2dc>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	0159      	lsls	r1, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	440b      	add	r3, r1
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	4619      	mov	r1, r3
 80053e0:	4b95      	ldr	r3, [pc, #596]	; (8005638 <USB_EPStartXfer+0x2e0>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	610b      	str	r3, [r1, #16]
 80053e6:	e074      	b.n	80054d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	0159      	lsls	r1, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	4619      	mov	r1, r3
 8005404:	4b8c      	ldr	r3, [pc, #560]	; (8005638 <USB_EPStartXfer+0x2e0>)
 8005406:	4013      	ands	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	440b      	add	r3, r1
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	4619      	mov	r1, r3
 8005426:	4b83      	ldr	r3, [pc, #524]	; (8005634 <USB_EPStartXfer+0x2dc>)
 8005428:	4013      	ands	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6999      	ldr	r1, [r3, #24]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	440b      	add	r3, r1
 8005444:	1e59      	subs	r1, r3, #1
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	fbb1 f3f3 	udiv	r3, r1, r3
 800544e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005450:	4b7a      	ldr	r3, [pc, #488]	; (800563c <USB_EPStartXfer+0x2e4>)
 8005452:	400b      	ands	r3, r1
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	0148      	lsls	r0, r1, #5
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	4401      	add	r1, r0
 800545c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	0148      	lsls	r0, r1, #5
 800547e:	69f9      	ldr	r1, [r7, #28]
 8005480:	4401      	add	r1, r0
 8005482:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005486:	4313      	orrs	r3, r2
 8005488:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	791b      	ldrb	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d11f      	bne.n	80054d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d14b      	bne.n	8005570 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d128      	bne.n	800554e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d110      	bne.n	800552e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e00f      	b.n	800554e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e137      	b.n	80057e0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800558e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d015      	beq.n	80055c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 811f 	beq.w	80057e0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	69f9      	ldr	r1, [r7, #28]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055be:	4313      	orrs	r3, r2
 80055c0:	634b      	str	r3, [r1, #52]	; 0x34
 80055c2:	e10d      	b.n	80057e0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d110      	bne.n	80055f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	e00f      	b.n	8005616 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6919      	ldr	r1, [r3, #16]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	b298      	uxth	r0, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4603      	mov	r3, r0
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 faea 	bl	8005c04 <USB_WritePacket>
 8005630:	e0d6      	b.n	80057e0 <USB_EPStartXfer+0x488>
 8005632:	bf00      	nop
 8005634:	e007ffff 	.word	0xe007ffff
 8005638:	fff80000 	.word	0xfff80000
 800563c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	440b      	add	r3, r1
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	4619      	mov	r1, r3
 800565c:	4b63      	ldr	r3, [pc, #396]	; (80057ec <USB_EPStartXfer+0x494>)
 800565e:	4013      	ands	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	0159      	lsls	r1, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	440b      	add	r3, r1
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	4619      	mov	r1, r3
 800567e:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <USB_EPStartXfer+0x498>)
 8005680:	4013      	ands	r3, r2
 8005682:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d123      	bne.n	80056d4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a2:	69b9      	ldr	r1, [r7, #24]
 80056a4:	0148      	lsls	r0, r1, #5
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	4401      	add	r1, r0
 80056aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ae:	4313      	orrs	r3, r2
 80056b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d0:	6113      	str	r3, [r2, #16]
 80056d2:	e037      	b.n	8005744 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	699a      	ldr	r2, [r3, #24]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	8afa      	ldrh	r2, [r7, #22]
 80056f0:	fb03 f202 	mul.w	r2, r3, r2
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	04d9      	lsls	r1, r3, #19
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <USB_EPStartXfer+0x49c>)
 800570c:	400b      	ands	r3, r1
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	0148      	lsls	r0, r1, #5
 8005712:	69f9      	ldr	r1, [r7, #28]
 8005714:	4401      	add	r1, r0
 8005716:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800571a:	4313      	orrs	r3, r2
 800571c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	0148      	lsls	r0, r1, #5
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	4401      	add	r1, r0
 800573c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6919      	ldr	r1, [r3, #16]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	460a      	mov	r2, r1
 8005764:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	791b      	ldrb	r3, [r3, #4]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d128      	bne.n	80057c0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d110      	bne.n	80057a0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e00f      	b.n	80057c0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	fff80000 	.word	0xfff80000
 80057f0:	e007ffff 	.word	0xe007ffff
 80057f4:	1ff80000 	.word	0x1ff80000

080057f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	f040 80ce 	bne.w	80059b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d132      	bne.n	8005888 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	0159      	lsls	r1, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	440b      	add	r3, r1
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	4619      	mov	r1, r3
 800583e:	4b9a      	ldr	r3, [pc, #616]	; (8005aa8 <USB_EP0StartXfer+0x2b0>)
 8005840:	4013      	ands	r3, r2
 8005842:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	0159      	lsls	r1, r3, #5
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	440b      	add	r3, r1
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	4619      	mov	r1, r3
 8005880:	4b8a      	ldr	r3, [pc, #552]	; (8005aac <USB_EP0StartXfer+0x2b4>)
 8005882:	4013      	ands	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
 8005886:	e04e      	b.n	8005926 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	0159      	lsls	r1, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	440b      	add	r3, r1
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	4619      	mov	r1, r3
 80058a4:	4b81      	ldr	r3, [pc, #516]	; (8005aac <USB_EP0StartXfer+0x2b4>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	0159      	lsls	r1, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	440b      	add	r3, r1
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	4619      	mov	r1, r3
 80058c6:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <USB_EP0StartXfer+0x2b0>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d903      	bls.n	80058e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005916:	6939      	ldr	r1, [r7, #16]
 8005918:	0148      	lsls	r0, r1, #5
 800591a:	6979      	ldr	r1, [r7, #20]
 800591c:	4401      	add	r1, r0
 800591e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005922:	4313      	orrs	r3, r2
 8005924:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d11e      	bne.n	800596a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e097      	b.n	8005a9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005988:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8083 	beq.w	8005a9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	6979      	ldr	r1, [r7, #20]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b0:	4313      	orrs	r3, r2
 80059b2:	634b      	str	r3, [r1, #52]	; 0x34
 80059b4:	e071      	b.n	8005a9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	0159      	lsls	r1, r3, #5
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	440b      	add	r3, r1
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	4619      	mov	r1, r3
 80059d2:	4b36      	ldr	r3, [pc, #216]	; (8005aac <USB_EP0StartXfer+0x2b4>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	0159      	lsls	r1, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	440b      	add	r3, r1
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	4619      	mov	r1, r3
 80059f4:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <USB_EP0StartXfer+0x2b0>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a48:	6939      	ldr	r1, [r7, #16]
 8005a4a:	0148      	lsls	r0, r1, #5
 8005a4c:	6979      	ldr	r1, [r7, #20]
 8005a4e:	4401      	add	r1, r0
 8005a50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10d      	bne.n	8005a7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6919      	ldr	r1, [r3, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	460a      	mov	r2, r1
 8005a78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	e007ffff 	.word	0xe007ffff
 8005aac:	fff80000 	.word	0xfff80000

08005ab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d14a      	bne.n	8005b64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	f040 8086 	bne.w	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d902      	bls.n	8005b48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
          break;
 8005b46:	e056      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b60:	d0e7      	beq.n	8005b32 <USB_EPStopXfer+0x82>
 8005b62:	e048      	b.n	8005bf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7c:	d13b      	bne.n	8005bf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d902      	bls.n	8005bdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bda:	e00c      	b.n	8005bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf4:	d0e7      	beq.n	8005bc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	460b      	mov	r3, r1
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d123      	bne.n	8005c72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c2a:	88bb      	ldrh	r3, [r7, #4]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e018      	b.n	8005c6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	031a      	lsls	r2, r3, #12
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c44:	461a      	mov	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3e2      	bcc.n	8005c38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3724      	adds	r7, #36	; 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b08b      	sub	sp, #44	; 0x2c
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	e014      	b.n	8005cd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3e6      	bcc.n	8005cac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cde:	8bfb      	ldrh	r3, [r7, #30]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01e      	beq.n	8005d22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	701a      	strb	r2, [r3, #0]
      i++;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	3301      	adds	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ea      	bne.n	8005cf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	372c      	adds	r7, #44	; 0x2c
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d12c      	bne.n	8005da6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	db12      	blt.n	8005d84 <USB_EPSetStall+0x54>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e02b      	b.n	8005dfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db12      	blt.n	8005dde <USB_EPSetStall+0xae>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00f      	beq.n	8005dde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d128      	bne.n	8005e7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	791b      	ldrb	r3, [r3, #4]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d003      	beq.n	8005e58 <USB_EPClearStall+0x4c>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	791b      	ldrb	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d138      	bne.n	8005eca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e027      	b.n	8005eca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d003      	beq.n	8005eaa <USB_EPClearStall+0x9e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	791b      	ldrb	r3, [r3, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d10f      	bne.n	8005eca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005efa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f023 0302 	bic.w	r3, r3, #2
 8005f56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f80:	f023 0303 	bic.w	r3, r3, #3
 8005f84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	b29b      	uxth	r3, r3
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006064:	68bb      	ldr	r3, [r7, #8]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	01db      	lsls	r3, r3, #7
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4013      	ands	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060c0:	68bb      	ldr	r3, [r7, #8]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006106:	4619      	mov	r1, r3
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <USB_ActivateSetup+0x44>)
 800610a:	4013      	ands	r3, r2
 800610c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	fffff800 	.word	0xfffff800

08006134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	333c      	adds	r3, #60	; 0x3c
 800614a:	3304      	adds	r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <USB_EP0_OutStart+0xb8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d90a      	bls.n	800616e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d101      	bne.n	800616e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e037      	b.n	80061de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800618c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 0318 	orr.w	r3, r3, #24
 80061a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d10f      	bne.n	80061dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	4f54300a 	.word	0x4f54300a

080061f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <USB_CoreReset+0x64>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e01b      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	daf2      	bge.n	80061fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <USB_CoreReset+0x64>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e006      	b.n	8006246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d0f0      	beq.n	8006226 <USB_CoreReset+0x36>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	00030d40 	.word	0x00030d40

08006258 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006264:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006268:	f002 fcea 	bl	8008c40 <USBD_static_malloc>
 800626c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	32b0      	adds	r2, #176	; 0xb0
 800627e:	2100      	movs	r1, #0
 8006280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006284:	2302      	movs	r3, #2
 8006286:	e0d4      	b.n	8006432 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006288:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f002 fd44 	bl	8008d1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32b0      	adds	r2, #176	; 0xb0
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	32b0      	adds	r2, #176	; 0xb0
 80062ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d138      	bne.n	8006332 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062c0:	4b5e      	ldr	r3, [pc, #376]	; (800643c <USBD_CDC_Init+0x1e4>)
 80062c2:	7819      	ldrb	r1, [r3, #0]
 80062c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c8:	2202      	movs	r2, #2
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f002 fb95 	bl	80089fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062d0:	4b5a      	ldr	r3, [pc, #360]	; (800643c <USBD_CDC_Init+0x1e4>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	3324      	adds	r3, #36	; 0x24
 80062e6:	2201      	movs	r2, #1
 80062e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062ea:	4b55      	ldr	r3, [pc, #340]	; (8006440 <USBD_CDC_Init+0x1e8>)
 80062ec:	7819      	ldrb	r1, [r3, #0]
 80062ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062f2:	2202      	movs	r2, #2
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 fb80 	bl	80089fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <USBD_CDC_Init+0x1e8>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f003 020f 	and.w	r2, r3, #15
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006312:	2201      	movs	r2, #1
 8006314:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006316:	4b4b      	ldr	r3, [pc, #300]	; (8006444 <USBD_CDC_Init+0x1ec>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f003 020f 	and.w	r2, r3, #15
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	3326      	adds	r3, #38	; 0x26
 800632c:	2210      	movs	r2, #16
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e035      	b.n	800639e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006332:	4b42      	ldr	r3, [pc, #264]	; (800643c <USBD_CDC_Init+0x1e4>)
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	2340      	movs	r3, #64	; 0x40
 8006338:	2202      	movs	r2, #2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 fb5d 	bl	80089fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006340:	4b3e      	ldr	r3, [pc, #248]	; (800643c <USBD_CDC_Init+0x1e4>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2201      	movs	r2, #1
 8006358:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800635a:	4b39      	ldr	r3, [pc, #228]	; (8006440 <USBD_CDC_Init+0x1e8>)
 800635c:	7819      	ldrb	r1, [r3, #0]
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	2202      	movs	r2, #2
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f002 fb49 	bl	80089fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006368:	4b35      	ldr	r3, [pc, #212]	; (8006440 <USBD_CDC_Init+0x1e8>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f003 020f 	and.w	r2, r3, #15
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006380:	2201      	movs	r2, #1
 8006382:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006384:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <USBD_CDC_Init+0x1ec>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	3326      	adds	r3, #38	; 0x26
 800639a:	2210      	movs	r2, #16
 800639c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <USBD_CDC_Init+0x1ec>)
 80063a0:	7819      	ldrb	r1, [r3, #0]
 80063a2:	2308      	movs	r3, #8
 80063a4:	2203      	movs	r2, #3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 fb27 	bl	80089fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <USBD_CDC_Init+0x1ec>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2201      	movs	r2, #1
 80063c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	33b0      	adds	r3, #176	; 0xb0
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063fc:	2302      	movs	r3, #2
 80063fe:	e018      	b.n	8006432 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7c1b      	ldrb	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <USBD_CDC_Init+0x1e8>)
 800640a:	7819      	ldrb	r1, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fbde 	bl	8008bd8 <USBD_LL_PrepareReceive>
 800641c:	e008      	b.n	8006430 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <USBD_CDC_Init+0x1e8>)
 8006420:	7819      	ldrb	r1, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fbd4 	bl	8008bd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	24000097 	.word	0x24000097
 8006440:	24000098 	.word	0x24000098
 8006444:	24000099 	.word	0x24000099

08006448 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006454:	4b3a      	ldr	r3, [pc, #232]	; (8006540 <USBD_CDC_DeInit+0xf8>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f002 faf3 	bl	8008a46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006460:	4b37      	ldr	r3, [pc, #220]	; (8006540 <USBD_CDC_DeInit+0xf8>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3324      	adds	r3, #36	; 0x24
 8006476:	2200      	movs	r2, #0
 8006478:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800647a:	4b32      	ldr	r3, [pc, #200]	; (8006544 <USBD_CDC_DeInit+0xfc>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 fae0 	bl	8008a46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006486:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <USBD_CDC_DeInit+0xfc>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800649e:	2200      	movs	r2, #0
 80064a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064a2:	4b29      	ldr	r3, [pc, #164]	; (8006548 <USBD_CDC_DeInit+0x100>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f002 facc 	bl	8008a46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064ae:	4b26      	ldr	r3, [pc, #152]	; (8006548 <USBD_CDC_DeInit+0x100>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	2200      	movs	r2, #0
 80064c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064c8:	4b1f      	ldr	r3, [pc, #124]	; (8006548 <USBD_CDC_DeInit+0x100>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3326      	adds	r3, #38	; 0x26
 80064de:	2200      	movs	r2, #0
 80064e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	32b0      	adds	r2, #176	; 0xb0
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01f      	beq.n	8006534 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	33b0      	adds	r3, #176	; 0xb0
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	; 0xb0
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	4618      	mov	r0, r3
 8006518:	f002 fba0 	bl	8008c5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32b0      	adds	r2, #176	; 0xb0
 8006526:	2100      	movs	r1, #0
 8006528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	24000097 	.word	0x24000097
 8006544:	24000098 	.word	0x24000098
 8006548:	24000099 	.word	0x24000099

0800654c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32b0      	adds	r2, #176	; 0xb0
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	e0bf      	b.n	80066fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006584:	2b00      	cmp	r3, #0
 8006586:	d050      	beq.n	800662a <USBD_CDC_Setup+0xde>
 8006588:	2b20      	cmp	r3, #32
 800658a:	f040 80af 	bne.w	80066ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d03a      	beq.n	800660c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da1b      	bge.n	80065d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	; 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	88d2      	ldrh	r2, [r2, #6]
 80065bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b07      	cmp	r3, #7
 80065c4:	bf28      	it	cs
 80065c6:	2307      	movcs	r3, #7
 80065c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	89fa      	ldrh	r2, [r7, #14]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fd89 	bl	80080e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80065d6:	e090      	b.n	80066fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	785a      	ldrb	r2, [r3, #1]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	88db      	ldrh	r3, [r3, #6]
 80065e6:	2b3f      	cmp	r3, #63	; 0x3f
 80065e8:	d803      	bhi.n	80065f2 <USBD_CDC_Setup+0xa6>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	e000      	b.n	80065f4 <USBD_CDC_Setup+0xa8>
 80065f2:	2240      	movs	r2, #64	; 0x40
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065fa:	6939      	ldr	r1, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006602:	461a      	mov	r2, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fd9b 	bl	8008140 <USBD_CtlPrepareRx>
      break;
 800660a:	e076      	b.n	80066fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	33b0      	adds	r3, #176	; 0xb0
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	7850      	ldrb	r0, [r2, #1]
 8006622:	2200      	movs	r2, #0
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	4798      	blx	r3
      break;
 8006628:	e067      	b.n	80066fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b0b      	cmp	r3, #11
 8006630:	d851      	bhi.n	80066d6 <USBD_CDC_Setup+0x18a>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <USBD_CDC_Setup+0xec>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006669 	.word	0x08006669
 800663c:	080066e5 	.word	0x080066e5
 8006640:	080066d7 	.word	0x080066d7
 8006644:	080066d7 	.word	0x080066d7
 8006648:	080066d7 	.word	0x080066d7
 800664c:	080066d7 	.word	0x080066d7
 8006650:	080066d7 	.word	0x080066d7
 8006654:	080066d7 	.word	0x080066d7
 8006658:	080066d7 	.word	0x080066d7
 800665c:	080066d7 	.word	0x080066d7
 8006660:	08006693 	.word	0x08006693
 8006664:	080066bd 	.word	0x080066bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b03      	cmp	r3, #3
 8006672:	d107      	bne.n	8006684 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006674:	f107 030a 	add.w	r3, r7, #10
 8006678:	2202      	movs	r2, #2
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fd33 	bl	80080e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006682:	e032      	b.n	80066ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fcbd 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 800668c:	2303      	movs	r3, #3
 800668e:	75fb      	strb	r3, [r7, #23]
          break;
 8006690:	e02b      	b.n	80066ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d107      	bne.n	80066ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800669e:	f107 030d 	add.w	r3, r7, #13
 80066a2:	2201      	movs	r2, #1
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fd1e 	bl	80080e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066ac:	e01d      	b.n	80066ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fca8 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ba:	e016      	b.n	80066ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d00f      	beq.n	80066e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fc9b 	bl	8008006 <USBD_CtlError>
            ret = USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066d4:	e008      	b.n	80066e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fc94 	bl	8008006 <USBD_CtlError>
          ret = USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	75fb      	strb	r3, [r7, #23]
          break;
 80066e2:	e002      	b.n	80066ea <USBD_CDC_Setup+0x19e>
          break;
 80066e4:	bf00      	nop
 80066e6:	e008      	b.n	80066fa <USBD_CDC_Setup+0x1ae>
          break;
 80066e8:	bf00      	nop
      }
      break;
 80066ea:	e006      	b.n	80066fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fc89 	bl	8008006 <USBD_CtlError>
      ret = USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	75fb      	strb	r3, [r7, #23]
      break;
 80066f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006716:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32b0      	adds	r2, #176	; 0xb0
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	e065      	b.n	80067fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	; 0xb0
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3318      	adds	r3, #24
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02f      	beq.n	80067b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	f003 020f 	and.w	r2, r3, #15
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	3318      	adds	r3, #24
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 010f 	and.w	r1, r3, #15
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	460b      	mov	r3, r1
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	440b      	add	r3, r1
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4403      	add	r3, r0
 8006780:	3348      	adds	r3, #72	; 0x48
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	fbb2 f1f3 	udiv	r1, r2, r3
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800678e:	2b00      	cmp	r3, #0
 8006790:	d112      	bne.n	80067b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3318      	adds	r3, #24
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067aa:	78f9      	ldrb	r1, [r7, #3]
 80067ac:	2300      	movs	r3, #0
 80067ae:	2200      	movs	r2, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f9f0 	bl	8008b96 <USBD_LL_Transmit>
 80067b6:	e01f      	b.n	80067f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	33b0      	adds	r3, #176	; 0xb0
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	33b0      	adds	r3, #176	; 0xb0
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	; 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	32b0      	adds	r2, #176	; 0xb0
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006830:	2303      	movs	r3, #3
 8006832:	e01a      	b.n	800686a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f002 f9ee 	bl	8008c1a <USBD_LL_GetRxDataSize>
 800683e:	4602      	mov	r2, r0
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	33b0      	adds	r3, #176	; 0xb0
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006864:	4611      	mov	r1, r2
 8006866:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	32b0      	adds	r2, #176	; 0xb0
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e025      	b.n	80068e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	33b0      	adds	r3, #176	; 0xb0
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01a      	beq.n	80068de <USBD_CDC_EP0_RxReady+0x6c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	d015      	beq.n	80068de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	33b0      	adds	r3, #176	; 0xb0
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068d2:	b292      	uxth	r2, r2
 80068d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	22ff      	movs	r2, #255	; 0xff
 80068da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068f0:	2182      	movs	r1, #130	; 0x82
 80068f2:	4818      	ldr	r0, [pc, #96]	; (8006954 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068f4:	f000 fd4f 	bl	8007396 <USBD_GetEpDesc>
 80068f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068fa:	2101      	movs	r1, #1
 80068fc:	4815      	ldr	r0, [pc, #84]	; (8006954 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068fe:	f000 fd4a 	bl	8007396 <USBD_GetEpDesc>
 8006902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006904:	2181      	movs	r1, #129	; 0x81
 8006906:	4813      	ldr	r0, [pc, #76]	; (8006954 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006908:	f000 fd45 	bl	8007396 <USBD_GetEpDesc>
 800690c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2210      	movs	r2, #16
 8006918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d006      	beq.n	800692e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2200      	movs	r2, #0
 8006924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006928:	711a      	strb	r2, [r3, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	711a      	strb	r2, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2243      	movs	r2, #67	; 0x43
 8006946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006948:	4b02      	ldr	r3, [pc, #8]	; (8006954 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	24000054 	.word	0x24000054

08006958 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006960:	2182      	movs	r1, #130	; 0x82
 8006962:	4818      	ldr	r0, [pc, #96]	; (80069c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006964:	f000 fd17 	bl	8007396 <USBD_GetEpDesc>
 8006968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800696a:	2101      	movs	r1, #1
 800696c:	4815      	ldr	r0, [pc, #84]	; (80069c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800696e:	f000 fd12 	bl	8007396 <USBD_GetEpDesc>
 8006972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006974:	2181      	movs	r1, #129	; 0x81
 8006976:	4813      	ldr	r0, [pc, #76]	; (80069c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006978:	f000 fd0d 	bl	8007396 <USBD_GetEpDesc>
 800697c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2210      	movs	r2, #16
 8006988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2200      	movs	r2, #0
 8006994:	711a      	strb	r2, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f042 0202 	orr.w	r2, r2, #2
 800699c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	711a      	strb	r2, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f042 0202 	orr.w	r2, r2, #2
 80069b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2243      	movs	r2, #67	; 0x43
 80069b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	24000054 	.word	0x24000054

080069c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069d0:	2182      	movs	r1, #130	; 0x82
 80069d2:	4818      	ldr	r0, [pc, #96]	; (8006a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069d4:	f000 fcdf 	bl	8007396 <USBD_GetEpDesc>
 80069d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069da:	2101      	movs	r1, #1
 80069dc:	4815      	ldr	r0, [pc, #84]	; (8006a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069de:	f000 fcda 	bl	8007396 <USBD_GetEpDesc>
 80069e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e4:	2181      	movs	r1, #129	; 0x81
 80069e6:	4813      	ldr	r0, [pc, #76]	; (8006a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069e8:	f000 fcd5 	bl	8007396 <USBD_GetEpDesc>
 80069ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2210      	movs	r2, #16
 80069f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a08:	711a      	strb	r2, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2243      	movs	r2, #67	; 0x43
 8006a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a28:	4b02      	ldr	r3, [pc, #8]	; (8006a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	24000054 	.word	0x24000054

08006a38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	220a      	movs	r2, #10
 8006a44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a46:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	24000010 	.word	0x24000010

08006a58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e009      	b.n	8006a80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	33b0      	adds	r3, #176	; 0xb0
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	32b0      	adds	r2, #176	; 0xb0
 8006aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e008      	b.n	8006ac4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	32b0      	adds	r2, #176	; 0xb0
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e004      	b.n	8006afe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32b0      	adds	r2, #176	; 0xb0
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b24:	2301      	movs	r3, #1
 8006b26:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32b0      	adds	r2, #176	; 0xb0
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e025      	b.n	8006b8a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11f      	bne.n	8006b88 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b50:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <USBD_CDC_TransmitPacket+0x88>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 020f 	and.w	r2, r3, #15
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4403      	add	r3, r0
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <USBD_CDC_TransmitPacket+0x88>)
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f002 f809 	bl	8008b96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	24000097 	.word	0x24000097

08006b98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	32b0      	adds	r2, #176	; 0xb0
 8006baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	32b0      	adds	r2, #176	; 0xb0
 8006bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e018      	b.n	8006bf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7c1b      	ldrb	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bce:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <USBD_CDC_ReceivePacket+0x68>)
 8006bd0:	7819      	ldrb	r1, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fffb 	bl	8008bd8 <USBD_LL_PrepareReceive>
 8006be2:	e008      	b.n	8006bf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <USBD_CDC_ReceivePacket+0x68>)
 8006be6:	7819      	ldrb	r1, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bee:	2340      	movs	r3, #64	; 0x40
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fff1 	bl	8008bd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	24000098 	.word	0x24000098

08006c04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e01f      	b.n	8006c5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	79fa      	ldrb	r2, [r7, #7]
 8006c4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f001 fe67 	bl	8008924 <USBD_LL_Init>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e025      	b.n	8006cc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	32ae      	adds	r2, #174	; 0xae
 8006c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	32ae      	adds	r2, #174	; 0xae
 8006ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	f107 020e 	add.w	r2, r7, #14
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fe73 	bl	80089c4 <USBD_LL_Start>
 8006cde:	4603      	mov	r3, r0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	4611      	mov	r1, r2
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	4611      	mov	r1, r2
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f908 	bl	8007f92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d01a      	beq.n	8006ddc <USBD_LL_SetupStage+0x72>
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d822      	bhi.n	8006df0 <USBD_LL_SetupStage+0x86>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <USBD_LL_SetupStage+0x4a>
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d00a      	beq.n	8006dc8 <USBD_LL_SetupStage+0x5e>
 8006db2:	e01d      	b.n	8006df0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb5f 	bl	8007480 <USBD_StdDevReq>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc6:	e020      	b.n	8006e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbc7 	bl	8007564 <USBD_StdItfReq>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dda:	e016      	b.n	8006e0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc29 	bl	800763c <USBD_StdEPReq>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
      break;
 8006dee:	e00c      	b.n	8006e0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006df6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fe40 	bl	8008a84 <USBD_LL_StallEP>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	bf00      	nop
  }

  return ret;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d16e      	bne.n	8006f0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	f040 8098 	bne.w	8006f70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d913      	bls.n	8006e74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bf28      	it	cs
 8006e66:	4613      	movcs	r3, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f001 f984 	bl	800817a <USBD_CtlContinueRx>
 8006e72:	e07d      	b.n	8006f70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d014      	beq.n	8006eac <USBD_LL_DataOutStage+0x98>
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d81d      	bhi.n	8006ec2 <USBD_LL_DataOutStage+0xae>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <USBD_LL_DataOutStage+0x7c>
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d003      	beq.n	8006e96 <USBD_LL_DataOutStage+0x82>
 8006e8e:	e018      	b.n	8006ec2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75bb      	strb	r3, [r7, #22]
            break;
 8006e94:	e018      	b.n	8006ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fa5e 	bl	8007362 <USBD_CoreFindIF>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75bb      	strb	r3, [r7, #22]
            break;
 8006eaa:	e00d      	b.n	8006ec8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fa60 	bl	800737c <USBD_CoreFindEP>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75bb      	strb	r3, [r7, #22]
            break;
 8006ec0:	e002      	b.n	8006ec8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ec6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ec8:	7dbb      	ldrb	r3, [r7, #22]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d119      	bne.n	8006f02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d113      	bne.n	8006f02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	32ae      	adds	r2, #174	; 0xae
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006eea:	7dba      	ldrb	r2, [r7, #22]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ef2:	7dba      	ldrb	r2, [r7, #22]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	32ae      	adds	r2, #174	; 0xae
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 f94a 	bl	800819c <USBD_CtlSendStatus>
 8006f08:	e032      	b.n	8006f70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fa31 	bl	800737c <USBD_CoreFindEP>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f1e:	7dbb      	ldrb	r3, [r7, #22]
 8006f20:	2bff      	cmp	r3, #255	; 0xff
 8006f22:	d025      	beq.n	8006f70 <USBD_LL_DataOutStage+0x15c>
 8006f24:	7dbb      	ldrb	r3, [r7, #22]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d122      	bne.n	8006f70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d117      	bne.n	8006f66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f36:	7dba      	ldrb	r2, [r7, #22]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	32ae      	adds	r2, #174	; 0xae
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00f      	beq.n	8006f66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f46:	7dba      	ldrb	r2, [r7, #22]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f4e:	7dba      	ldrb	r2, [r7, #22]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	32ae      	adds	r2, #174	; 0xae
 8006f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	7afa      	ldrb	r2, [r7, #11]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	e000      	b.n	8006f72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	460b      	mov	r3, r1
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d16f      	bne.n	800706e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3314      	adds	r3, #20
 8006f92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d15a      	bne.n	8007054 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d914      	bls.n	8006fd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 f8ac 	bl	800811e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fe03 	bl	8008bd8 <USBD_LL_PrepareReceive>
 8006fd2:	e03f      	b.n	8007054 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d11c      	bne.n	800701a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d316      	bcc.n	800701a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d20f      	bcs.n	800701a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f001 f88d 	bl	800811e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800700c:	2300      	movs	r3, #0
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f001 fde0 	bl	8008bd8 <USBD_LL_PrepareReceive>
 8007018:	e01c      	b.n	8007054 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d10f      	bne.n	8007046 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f001 fd1b 	bl	8008a84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f8b7 	bl	80081c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d03a      	beq.n	80070d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff fe42 	bl	8006ce8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800706c:	e032      	b.n	80070d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f97f 	bl	800737c <USBD_CoreFindEP>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2bff      	cmp	r3, #255	; 0xff
 8007086:	d025      	beq.n	80070d4 <USBD_LL_DataInStage+0x15a>
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d122      	bne.n	80070d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d11c      	bne.n	80070d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800709a:	7dfa      	ldrb	r2, [r7, #23]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	32ae      	adds	r2, #174	; 0xae
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d014      	beq.n	80070d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070aa:	7dfa      	ldrb	r2, [r7, #23]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070b2:	7dfa      	ldrb	r2, [r7, #23]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	32ae      	adds	r2, #174	; 0xae
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	7afa      	ldrb	r2, [r7, #11]
 80070c0:	4611      	mov	r1, r2
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	e000      	b.n	80070d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d014      	beq.n	8007144 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00e      	beq.n	8007144 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6852      	ldr	r2, [r2, #4]
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	4611      	mov	r1, r2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 fc55 	bl	80089fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2240      	movs	r2, #64	; 0x40
 800715c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fc47 	bl	80089fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2240      	movs	r2, #64	; 0x40
 8007176:	621a      	str	r2, [r3, #32]

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2204      	movs	r2, #4
 80071bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d106      	bne.n	80071f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d110      	bne.n	8007234 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e01c      	b.n	800729a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d115      	bne.n	8007298 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32ae      	adds	r2, #174	; 0xae
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	; 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	4611      	mov	r1, r2
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32ae      	adds	r2, #174	; 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e01c      	b.n	80072fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d115      	bne.n	80072fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32ae      	adds	r2, #174	; 0xae
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	; 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	4611      	mov	r1, r2
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6852      	ldr	r2, [r2, #4]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	4611      	mov	r1, r2
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800736e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007388:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d920      	bls.n	8007400 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073c6:	e013      	b.n	80073f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073c8:	f107 030a 	add.w	r3, r7, #10
 80073cc:	4619      	mov	r1, r3
 80073ce:	6978      	ldr	r0, [r7, #20]
 80073d0:	f000 f81b 	bl	800740a <USBD_GetNextDesc>
 80073d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d108      	bne.n	80073f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	789b      	ldrb	r3, [r3, #2]
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d008      	beq.n	80073fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	885b      	ldrh	r3, [r3, #2]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	897b      	ldrh	r3, [r7, #10]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d8e5      	bhi.n	80073c8 <USBD_GetEpDesc+0x32>
 80073fc:	e000      	b.n	8007400 <USBD_GetEpDesc+0x6a>
          break;
 80073fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007400:	693b      	ldr	r3, [r7, #16]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3301      	adds	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007462:	8a3b      	ldrh	r3, [r7, #16]
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	b21a      	sxth	r2, r3
 8007468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800746c:	4313      	orrs	r3, r2
 800746e:	b21b      	sxth	r3, r3
 8007470:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007472:	89fb      	ldrh	r3, [r7, #14]
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	d005      	beq.n	80074a6 <USBD_StdDevReq+0x26>
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d857      	bhi.n	800754e <USBD_StdDevReq+0xce>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <USBD_StdDevReq+0x42>
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d153      	bne.n	800754e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	32ae      	adds	r2, #174	; 0xae
 80074b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e04a      	b.n	8007558 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d83b      	bhi.n	8007542 <USBD_StdDevReq+0xc2>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <USBD_StdDevReq+0x50>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	08007525 	.word	0x08007525
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007543 	.word	0x08007543
 80074dc:	0800752f 	.word	0x0800752f
 80074e0:	08007543 	.word	0x08007543
 80074e4:	08007503 	.word	0x08007503
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007543 	.word	0x08007543
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800750d 	.word	0x0800750d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa3c 	bl	8007978 <USBD_GetDescriptor>
          break;
 8007500:	e024      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fba1 	bl	8007c4c <USBD_SetAddress>
          break;
 800750a:	e01f      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fbe0 	bl	8007cd4 <USBD_SetConfig>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
          break;
 8007518:	e018      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc83 	bl	8007e28 <USBD_GetConfig>
          break;
 8007522:	e013      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fcb4 	bl	8007e94 <USBD_GetStatus>
          break;
 800752c:	e00e      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fce3 	bl	8007efc <USBD_SetFeature>
          break;
 8007536:	e009      	b.n	800754c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fd07 	bl	8007f4e <USBD_ClrFeature>
          break;
 8007540:	e004      	b.n	800754c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fd5e 	bl	8008006 <USBD_CtlError>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e004      	b.n	8007558 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fd58 	bl	8008006 <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d005      	beq.n	800758a <USBD_StdItfReq+0x26>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d852      	bhi.n	8007628 <USBD_StdItfReq+0xc4>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <USBD_StdItfReq+0x26>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d14e      	bne.n	8007628 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	2b02      	cmp	r3, #2
 8007596:	d840      	bhi.n	800761a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	889b      	ldrh	r3, [r3, #4]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d836      	bhi.n	8007610 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fed9 	bl	8007362 <USBD_CoreFindIF>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2bff      	cmp	r3, #255	; 0xff
 80075b8:	d01d      	beq.n	80075f6 <USBD_StdItfReq+0x92>
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11a      	bne.n	80075f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075c0:	7bba      	ldrb	r2, [r7, #14]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	; 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00f      	beq.n	80075f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075d0:	7bba      	ldrb	r2, [r7, #14]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075d8:	7bba      	ldrb	r2, [r7, #14]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	32ae      	adds	r2, #174	; 0xae
 80075de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075ee:	e004      	b.n	80075fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075f4:	e001      	b.n	80075fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d110      	bne.n	8007624 <USBD_StdItfReq+0xc0>
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10d      	bne.n	8007624 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fdc7 	bl	800819c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800760e:	e009      	b.n	8007624 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fcf7 	bl	8008006 <USBD_CtlError>
          break;
 8007618:	e004      	b.n	8007624 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fcf2 	bl	8008006 <USBD_CtlError>
          break;
 8007622:	e000      	b.n	8007626 <USBD_StdItfReq+0xc2>
          break;
 8007624:	bf00      	nop
      }
      break;
 8007626:	e004      	b.n	8007632 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fceb 	bl	8008006 <USBD_CtlError>
      break;
 8007630:	bf00      	nop
  }

  return ret;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d007      	beq.n	800766c <USBD_StdEPReq+0x30>
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	f200 817f 	bhi.w	8007960 <USBD_StdEPReq+0x324>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02a      	beq.n	80076bc <USBD_StdEPReq+0x80>
 8007666:	2b20      	cmp	r3, #32
 8007668:	f040 817a 	bne.w	8007960 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fe83 	bl	800737c <USBD_CoreFindEP>
 8007676:	4603      	mov	r3, r0
 8007678:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800767a:	7b7b      	ldrb	r3, [r7, #13]
 800767c:	2bff      	cmp	r3, #255	; 0xff
 800767e:	f000 8174 	beq.w	800796a <USBD_StdEPReq+0x32e>
 8007682:	7b7b      	ldrb	r3, [r7, #13]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8170 	bne.w	800796a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800768a:	7b7a      	ldrb	r2, [r7, #13]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007692:	7b7a      	ldrb	r2, [r7, #13]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32ae      	adds	r2, #174	; 0xae
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8163 	beq.w	800796a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076a4:	7b7a      	ldrb	r2, [r7, #13]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	; 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ba:	e156      	b.n	800796a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d008      	beq.n	80076d6 <USBD_StdEPReq+0x9a>
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	f300 8145 	bgt.w	8007954 <USBD_StdEPReq+0x318>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 809b 	beq.w	8007806 <USBD_StdEPReq+0x1ca>
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d03c      	beq.n	800774e <USBD_StdEPReq+0x112>
 80076d4:	e13e      	b.n	8007954 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d002      	beq.n	80076e8 <USBD_StdEPReq+0xac>
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d016      	beq.n	8007714 <USBD_StdEPReq+0xd8>
 80076e6:	e02c      	b.n	8007742 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <USBD_StdEPReq+0xce>
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d00a      	beq.n	800770a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f9c3 	bl	8008a84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f9bf 	bl	8008a84 <USBD_LL_StallEP>
 8007706:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007708:	e020      	b.n	800774c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc7a 	bl	8008006 <USBD_CtlError>
              break;
 8007712:	e01b      	b.n	800774c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10e      	bne.n	800773a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <USBD_StdEPReq+0xfe>
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d008      	beq.n	800773a <USBD_StdEPReq+0xfe>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 f9a5 	bl	8008a84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fd2e 	bl	800819c <USBD_CtlSendStatus>

              break;
 8007740:	e004      	b.n	800774c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc5e 	bl	8008006 <USBD_CtlError>
              break;
 800774a:	bf00      	nop
          }
          break;
 800774c:	e107      	b.n	800795e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d002      	beq.n	8007760 <USBD_StdEPReq+0x124>
 800775a:	2b03      	cmp	r3, #3
 800775c:	d016      	beq.n	800778c <USBD_StdEPReq+0x150>
 800775e:	e04b      	b.n	80077f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <USBD_StdEPReq+0x146>
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	d00a      	beq.n	8007782 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f987 	bl	8008a84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f983 	bl	8008a84 <USBD_LL_StallEP>
 800777e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007780:	e040      	b.n	8007804 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc3e 	bl	8008006 <USBD_CtlError>
              break;
 800778a:	e03b      	b.n	8007804 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d136      	bne.n	8007802 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f98d 	bl	8008ac2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fcf7 	bl	800819c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff fde2 	bl	800737c <USBD_CoreFindEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077bc:	7b7b      	ldrb	r3, [r7, #13]
 80077be:	2bff      	cmp	r3, #255	; 0xff
 80077c0:	d01f      	beq.n	8007802 <USBD_StdEPReq+0x1c6>
 80077c2:	7b7b      	ldrb	r3, [r7, #13]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11c      	bne.n	8007802 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077c8:	7b7a      	ldrb	r2, [r7, #13]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077d0:	7b7a      	ldrb	r2, [r7, #13]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32ae      	adds	r2, #174	; 0xae
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d010      	beq.n	8007802 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077e0:	7b7a      	ldrb	r2, [r7, #13]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32ae      	adds	r2, #174	; 0xae
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077f6:	e004      	b.n	8007802 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc03 	bl	8008006 <USBD_CtlError>
              break;
 8007800:	e000      	b.n	8007804 <USBD_StdEPReq+0x1c8>
              break;
 8007802:	bf00      	nop
          }
          break;
 8007804:	e0ab      	b.n	800795e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d002      	beq.n	8007818 <USBD_StdEPReq+0x1dc>
 8007812:	2b03      	cmp	r3, #3
 8007814:	d032      	beq.n	800787c <USBD_StdEPReq+0x240>
 8007816:	e097      	b.n	8007948 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <USBD_StdEPReq+0x1f2>
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b80      	cmp	r3, #128	; 0x80
 8007822:	d004      	beq.n	800782e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fbed 	bl	8008006 <USBD_CtlError>
                break;
 800782c:	e091      	b.n	8007952 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007832:	2b00      	cmp	r3, #0
 8007834:	da0b      	bge.n	800784e <USBD_StdEPReq+0x212>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	3310      	adds	r3, #16
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	3304      	adds	r3, #4
 800784c:	e00b      	b.n	8007866 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	3304      	adds	r3, #4
 8007866:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2202      	movs	r2, #2
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fc37 	bl	80080e8 <USBD_CtlSendData>
              break;
 800787a:	e06a      	b.n	8007952 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800787c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da11      	bge.n	80078a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 020f 	and.w	r2, r3, #15
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	3324      	adds	r3, #36	; 0x24
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d117      	bne.n	80078ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fbb0 	bl	8008006 <USBD_CtlError>
                  break;
 80078a6:	e054      	b.n	8007952 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb9d 	bl	8008006 <USBD_CtlError>
                  break;
 80078cc:	e041      	b.n	8007952 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da0b      	bge.n	80078ee <USBD_StdEPReq+0x2b2>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	3310      	adds	r3, #16
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	3304      	adds	r3, #4
 80078ec:	e00b      	b.n	8007906 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	3304      	adds	r3, #4
 8007906:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <USBD_StdEPReq+0x2d8>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d103      	bne.n	800791c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e00e      	b.n	800793a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f8ed 	bl	8008b00 <USBD_LL_IsStallEP>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2201      	movs	r2, #1
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e002      	b.n	800793a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2202      	movs	r2, #2
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fbd1 	bl	80080e8 <USBD_CtlSendData>
              break;
 8007946:	e004      	b.n	8007952 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb5b 	bl	8008006 <USBD_CtlError>
              break;
 8007950:	bf00      	nop
          }
          break;
 8007952:	e004      	b.n	800795e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb55 	bl	8008006 <USBD_CtlError>
          break;
 800795c:	bf00      	nop
      }
      break;
 800795e:	e005      	b.n	800796c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fb4f 	bl	8008006 <USBD_CtlError>
      break;
 8007968:	e000      	b.n	800796c <USBD_StdEPReq+0x330>
      break;
 800796a:	bf00      	nop
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	2b06      	cmp	r3, #6
 800799a:	f200 8128 	bhi.w	8007bee <USBD_GetDescriptor+0x276>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <USBD_GetDescriptor+0x2c>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079c1 	.word	0x080079c1
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007bef 	.word	0x08007bef
 80079b4:	08007bef 	.word	0x08007bef
 80079b8:	08007b8f 	.word	0x08007b8f
 80079bc:	08007bbb 	.word	0x08007bbb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	7c12      	ldrb	r2, [r2, #16]
 80079cc:	f107 0108 	add.w	r1, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
      break;
 80079d6:	e112      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7c1b      	ldrb	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10d      	bne.n	80079fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	f107 0208 	add.w	r2, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	2202      	movs	r2, #2
 80079f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079fa:	e100      	b.n	8007bfe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	f107 0208 	add.w	r2, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	2202      	movs	r2, #2
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e0f2      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	885b      	ldrh	r3, [r3, #2]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	f200 80ac 	bhi.w	8007b7c <USBD_GetDescriptor+0x204>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USBD_GetDescriptor+0xb4>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a45 	.word	0x08007a45
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007ae1 	.word	0x08007ae1
 8007a3c:	08007b15 	.word	0x08007b15
 8007a40:	08007b49 	.word	0x08007b49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e091      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 facb 	bl	8008006 <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e089      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e077      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fab1 	bl	8008006 <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e06f      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ace:	e05d      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa97 	bl	8008006 <USBD_CtlError>
            err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ade:	e055      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b02:	e043      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa7d 	bl	8008006 <USBD_CtlError>
            err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
          break;
 8007b12:	e03b      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b36:	e029      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa63 	bl	8008006 <USBD_CtlError>
            err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
          break;
 8007b46:	e021      	b.n	8007b8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6a:	e00f      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa49 	bl	8008006 <USBD_CtlError>
            err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7a:	e007      	b.n	8007b8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa41 	bl	8008006 <USBD_CtlError>
          err++;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	3301      	adds	r3, #1
 8007b88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b8a:	bf00      	nop
      }
      break;
 8007b8c:	e037      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7c1b      	ldrb	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	f107 0208 	add.w	r2, r7, #8
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4798      	blx	r3
 8007ba6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ba8:	e029      	b.n	8007bfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa2a 	bl	8008006 <USBD_CtlError>
        err++;
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb8:	e021      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7c1b      	ldrb	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10d      	bne.n	8007bde <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f107 0208 	add.w	r2, r7, #8
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4798      	blx	r3
 8007bd2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	2207      	movs	r2, #7
 8007bda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bdc:	e00f      	b.n	8007bfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa10 	bl	8008006 <USBD_CtlError>
        err++;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	3301      	adds	r3, #1
 8007bea:	72fb      	strb	r3, [r7, #11]
      break;
 8007bec:	e007      	b.n	8007bfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa08 	bl	8008006 <USBD_CtlError>
      err++;
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfc:	bf00      	nop
  }

  if (err != 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11e      	bne.n	8007c42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d016      	beq.n	8007c3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88da      	ldrh	r2, [r3, #6]
 8007c16:	893b      	ldrh	r3, [r7, #8]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	bf28      	it	cs
 8007c1c:	4613      	movcs	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c22:	893b      	ldrh	r3, [r7, #8]
 8007c24:	461a      	mov	r2, r3
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa5d 	bl	80080e8 <USBD_CtlSendData>
 8007c2e:	e009      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9e7 	bl	8008006 <USBD_CtlError>
 8007c38:	e004      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 faae 	bl	800819c <USBD_CtlSendStatus>
 8007c40:	e000      	b.n	8007c44 <USBD_GetDescriptor+0x2cc>
    return;
 8007c42:	bf00      	nop
  }
}
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	889b      	ldrh	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d131      	bne.n	8007cc2 <USBD_SetAddress+0x76>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d12d      	bne.n	8007cc2 <USBD_SetAddress+0x76>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	885b      	ldrh	r3, [r3, #2]
 8007c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c6c:	d829      	bhi.n	8007cc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d104      	bne.n	8007c90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9bc 	bl	8008006 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c8e:	e01d      	b.n	8007ccc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7bfa      	ldrb	r2, [r7, #15]
 8007c94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ff5b 	bl	8008b58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa7a 	bl	800819c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb6:	e009      	b.n	8007ccc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	e004      	b.n	8007ccc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f99e 	bl	8008006 <USBD_CtlError>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	885b      	ldrh	r3, [r3, #2]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <USBD_SetConfig+0x150>)
 8007cea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cec:	4b4d      	ldr	r3, [pc, #308]	; (8007e24 <USBD_SetConfig+0x150>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d905      	bls.n	8007d00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f985 	bl	8008006 <USBD_CtlError>
    return USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e08c      	b.n	8007e1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d002      	beq.n	8007d12 <USBD_SetConfig+0x3e>
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d029      	beq.n	8007d64 <USBD_SetConfig+0x90>
 8007d10:	e075      	b.n	8007dfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d12:	4b44      	ldr	r3, [pc, #272]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d020      	beq.n	8007d5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d1a:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d24:	4b3f      	ldr	r3, [pc, #252]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe ffe7 	bl	8006cfe <USBD_SetClassConfig>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f962 	bl	8008006 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d4a:	e065      	b.n	8007e18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa25 	bl	800819c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d5a:	e05d      	b.n	8007e18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa1d 	bl	800819c <USBD_CtlSendStatus>
      break;
 8007d62:	e059      	b.n	8007e18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d112      	bne.n	8007d92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d74:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d7e:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe ffd6 	bl	8006d36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa06 	bl	800819c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d90:	e042      	b.n	8007e18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <USBD_SetConfig+0x150>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d02a      	beq.n	8007df6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ffc4 	bl	8006d36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dae:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <USBD_SetConfig+0x150>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007db8:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <USBD_SetConfig+0x150>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fe ff9d 	bl	8006cfe <USBD_SetClassConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00f      	beq.n	8007dee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f918 	bl	8008006 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fe ffa9 	bl	8006d36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dec:	e014      	b.n	8007e18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9d4 	bl	800819c <USBD_CtlSendStatus>
      break;
 8007df4:	e010      	b.n	8007e18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9d0 	bl	800819c <USBD_CtlSendStatus>
      break;
 8007dfc:	e00c      	b.n	8007e18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f900 	bl	8008006 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <USBD_SetConfig+0x150>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe ff92 	bl	8006d36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	bf00      	nop
  }

  return ret;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	24000ad4 	.word	0x24000ad4

08007e28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d004      	beq.n	8007e44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8e2 	bl	8008006 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e42:	e023      	b.n	8007e8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	dc02      	bgt.n	8007e56 <USBD_GetConfig+0x2e>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dc03      	bgt.n	8007e5c <USBD_GetConfig+0x34>
 8007e54:	e015      	b.n	8007e82 <USBD_GetConfig+0x5a>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d00b      	beq.n	8007e72 <USBD_GetConfig+0x4a>
 8007e5a:	e012      	b.n	8007e82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3308      	adds	r3, #8
 8007e66:	2201      	movs	r2, #1
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f93c 	bl	80080e8 <USBD_CtlSendData>
        break;
 8007e70:	e00c      	b.n	8007e8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3304      	adds	r3, #4
 8007e76:	2201      	movs	r2, #1
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f934 	bl	80080e8 <USBD_CtlSendData>
        break;
 8007e80:	e004      	b.n	8007e8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8be 	bl	8008006 <USBD_CtlError>
        break;
 8007e8a:	bf00      	nop
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d81e      	bhi.n	8007eea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	88db      	ldrh	r3, [r3, #6]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d004      	beq.n	8007ebe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8a5 	bl	8008006 <USBD_CtlError>
        break;
 8007ebc:	e01a      	b.n	8007ef4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f043 0202 	orr.w	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	330c      	adds	r3, #12
 8007ede:	2202      	movs	r2, #2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f900 	bl	80080e8 <USBD_CtlSendData>
      break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f88a 	bl	8008006 <USBD_CtlError>
      break;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d107      	bne.n	8007f1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f940 	bl	800819c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f1c:	e013      	b.n	8007f46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d10b      	bne.n	8007f3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	889b      	ldrh	r3, [r3, #4]
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f930 	bl	800819c <USBD_CtlSendStatus>
}
 8007f3c:	e003      	b.n	8007f46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f860 	bl	8008006 <USBD_CtlError>
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d80b      	bhi.n	8007f7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10c      	bne.n	8007f88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f910 	bl	800819c <USBD_CtlSendStatus>
      }
      break;
 8007f7c:	e004      	b.n	8007f88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f840 	bl	8008006 <USBD_CtlError>
      break;
 8007f86:	e000      	b.n	8007f8a <USBD_ClrFeature+0x3c>
      break;
 8007f88:	bf00      	nop
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fa41 	bl	8007444 <SWAPBYTE>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f7ff fa34 	bl	8007444 <SWAPBYTE>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f7ff fa27 	bl	8007444 <SWAPBYTE>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	80da      	strh	r2, [r3, #6]
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fd36 	bl	8008a84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fd32 	bl	8008a84 <USBD_LL_StallEP>
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d036      	beq.n	80080ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008042:	6938      	ldr	r0, [r7, #16]
 8008044:	f000 f836 	bl	80080b4 <USBD_GetLen>
 8008048:	4603      	mov	r3, r0
 800804a:	3301      	adds	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4413      	add	r3, r2
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	7812      	ldrb	r2, [r2, #0]
 8008060:	701a      	strb	r2, [r3, #0]
  idx++;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	3301      	adds	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	2203      	movs	r2, #3
 8008070:	701a      	strb	r2, [r3, #0]
  idx++;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	3301      	adds	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008078:	e013      	b.n	80080a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4413      	add	r3, r2
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	7812      	ldrb	r2, [r2, #0]
 8008084:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	3301      	adds	r3, #1
 800808a:	613b      	str	r3, [r7, #16]
    idx++;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	3301      	adds	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4413      	add	r3, r2
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
    idx++;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	3301      	adds	r3, #1
 80080a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e7      	bne.n	800807a <USBD_GetString+0x52>
 80080aa:	e000      	b.n	80080ae <USBD_GetString+0x86>
    return;
 80080ac:	bf00      	nop
  }
}
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080c4:	e005      	b.n	80080d2 <USBD_GetLen+0x1e>
  {
    len++;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	3301      	adds	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f5      	bne.n	80080c6 <USBD_GetLen+0x12>
  }

  return len;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	2100      	movs	r1, #0
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fd41 	bl	8008b96 <USBD_LL_Transmit>

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fd30 	bl	8008b96 <USBD_LL_Transmit>

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2203      	movs	r2, #3
 8008150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fd34 	bl	8008bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	2100      	movs	r1, #0
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fd23 	bl	8008bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2204      	movs	r2, #4
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081ac:	2300      	movs	r3, #0
 80081ae:	2200      	movs	r2, #0
 80081b0:	2100      	movs	r1, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fcef 	bl	8008b96 <USBD_LL_Transmit>

  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2205      	movs	r2, #5
 80081ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081d2:	2300      	movs	r3, #0
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fcfd 	bl	8008bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4913      	ldr	r1, [pc, #76]	; (800823c <MX_USB_DEVICE_Init+0x54>)
 80081f0:	4813      	ldr	r0, [pc, #76]	; (8008240 <MX_USB_DEVICE_Init+0x58>)
 80081f2:	f7fe fd07 	bl	8006c04 <USBD_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081fc:	f7f8 fb14 	bl	8000828 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008200:	4910      	ldr	r1, [pc, #64]	; (8008244 <MX_USB_DEVICE_Init+0x5c>)
 8008202:	480f      	ldr	r0, [pc, #60]	; (8008240 <MX_USB_DEVICE_Init+0x58>)
 8008204:	f7fe fd2e 	bl	8006c64 <USBD_RegisterClass>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800820e:	f7f8 fb0b 	bl	8000828 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008212:	490d      	ldr	r1, [pc, #52]	; (8008248 <MX_USB_DEVICE_Init+0x60>)
 8008214:	480a      	ldr	r0, [pc, #40]	; (8008240 <MX_USB_DEVICE_Init+0x58>)
 8008216:	f7fe fc1f 	bl	8006a58 <USBD_CDC_RegisterInterface>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008220:	f7f8 fb02 	bl	8000828 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <MX_USB_DEVICE_Init+0x58>)
 8008226:	f7fe fd53 	bl	8006cd0 <USBD_Start>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008230:	f7f8 fafa 	bl	8000828 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008234:	f7fa fb56 	bl	80028e4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008238:	bf00      	nop
 800823a:	bd80      	pop	{r7, pc}
 800823c:	240000b0 	.word	0x240000b0
 8008240:	24000ad8 	.word	0x24000ad8
 8008244:	2400001c 	.word	0x2400001c
 8008248:	2400009c 	.word	0x2400009c

0800824c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008250:	2200      	movs	r2, #0
 8008252:	4905      	ldr	r1, [pc, #20]	; (8008268 <CDC_Init_FS+0x1c>)
 8008254:	4805      	ldr	r0, [pc, #20]	; (800826c <CDC_Init_FS+0x20>)
 8008256:	f7fe fc19 	bl	8006a8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800825a:	4905      	ldr	r1, [pc, #20]	; (8008270 <CDC_Init_FS+0x24>)
 800825c:	4803      	ldr	r0, [pc, #12]	; (800826c <CDC_Init_FS+0x20>)
 800825e:	f7fe fc37 	bl	8006ad0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008262:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008264:	4618      	mov	r0, r3
 8008266:	bd80      	pop	{r7, pc}
 8008268:	240015b4 	.word	0x240015b4
 800826c:	24000ad8 	.word	0x24000ad8
 8008270:	24000db4 	.word	0x24000db4

08008274 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008278:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800827a:	4618      	mov	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
 8008290:	4613      	mov	r3, r2
 8008292:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b23      	cmp	r3, #35	; 0x23
 8008298:	d84a      	bhi.n	8008330 <CDC_Control_FS+0xac>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <CDC_Control_FS+0x1c>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	08008331 	.word	0x08008331
 80082a4:	08008331 	.word	0x08008331
 80082a8:	08008331 	.word	0x08008331
 80082ac:	08008331 	.word	0x08008331
 80082b0:	08008331 	.word	0x08008331
 80082b4:	08008331 	.word	0x08008331
 80082b8:	08008331 	.word	0x08008331
 80082bc:	08008331 	.word	0x08008331
 80082c0:	08008331 	.word	0x08008331
 80082c4:	08008331 	.word	0x08008331
 80082c8:	08008331 	.word	0x08008331
 80082cc:	08008331 	.word	0x08008331
 80082d0:	08008331 	.word	0x08008331
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008331 	.word	0x08008331
 80082e4:	08008331 	.word	0x08008331
 80082e8:	08008331 	.word	0x08008331
 80082ec:	08008331 	.word	0x08008331
 80082f0:	08008331 	.word	0x08008331
 80082f4:	08008331 	.word	0x08008331
 80082f8:	08008331 	.word	0x08008331
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008331 	.word	0x08008331
 8008304:	08008331 	.word	0x08008331
 8008308:	08008331 	.word	0x08008331
 800830c:	08008331 	.word	0x08008331
 8008310:	08008331 	.word	0x08008331
 8008314:	08008331 	.word	0x08008331
 8008318:	08008331 	.word	0x08008331
 800831c:	08008331 	.word	0x08008331
 8008320:	08008331 	.word	0x08008331
 8008324:	08008331 	.word	0x08008331
 8008328:	08008331 	.word	0x08008331
 800832c:	08008331 	.word	0x08008331
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008330:	bf00      	nop
  }

  return (USBD_OK);
 8008332:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  //    CDC_Transmit_FS(buf, 4);
  //    buff_len = 0;
  //}

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[buff_len]);
	usb_debug("this is a test\r\n");
 800834a:	4807      	ldr	r0, [pc, #28]	; (8008368 <CDC_Receive_FS+0x28>)
 800834c:	f000 f848 	bl	80083e0 <usb_debug>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4806      	ldr	r0, [pc, #24]	; (800836c <CDC_Receive_FS+0x2c>)
 8008354:	f7fe fbbc 	bl	8006ad0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008358:	4804      	ldr	r0, [pc, #16]	; (800836c <CDC_Receive_FS+0x2c>)
 800835a:	f7fe fc1d 	bl	8006b98 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800835e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	0800d680 	.word	0x0800d680
 800836c:	24000ad8 	.word	0x24000ad8

08008370 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008380:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <CDC_Transmit_FS+0x48>)
 8008382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008386:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008392:	2301      	movs	r3, #1
 8008394:	e00b      	b.n	80083ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008396:	887b      	ldrh	r3, [r7, #2]
 8008398:	461a      	mov	r2, r3
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4806      	ldr	r0, [pc, #24]	; (80083b8 <CDC_Transmit_FS+0x48>)
 800839e:	f7fe fb75 	bl	8006a8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083a2:	4805      	ldr	r0, [pc, #20]	; (80083b8 <CDC_Transmit_FS+0x48>)
 80083a4:	f7fe fbb2 	bl	8006b0c <USBD_CDC_TransmitPacket>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	24000ad8 	.word	0x24000ad8

080083bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <usb_debug>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t usb_debug(const char *format, ...)
{
 80083e0:	b40f      	push	{r0, r1, r2, r3}
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;

    va_start(args, format);
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <usb_debug+0x3c>)
 80083f8:	f000 fcc4 	bl	8008d84 <vsnprintf>
 80083fc:	4603      	mov	r3, r0
 80083fe:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	b29b      	uxth	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <usb_debug+0x3c>)
 8008408:	f7ff ffb2 	bl	8008370 <CDC_Transmit_FS>

    return 0;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008418:	b004      	add	sp, #16
 800841a:	4770      	bx	lr
 800841c:	240015b4 	.word	0x240015b4

08008420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2212      	movs	r2, #18
 8008430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	240000cc 	.word	0x240000cc

08008444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2204      	movs	r2, #4
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	240000e0 	.word	0x240000e0

08008468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4907      	ldr	r1, [pc, #28]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800847e:	4808      	ldr	r0, [pc, #32]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008480:	f7ff fdd2 	bl	8008028 <USBD_GetString>
 8008484:	e004      	b.n	8008490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4904      	ldr	r1, [pc, #16]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800848c:	f7ff fdcc 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	24001db4 	.word	0x24001db4
 80084a0:	0800d694 	.word	0x0800d694

080084a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	4904      	ldr	r1, [pc, #16]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084b6:	f7ff fdb7 	bl	8008028 <USBD_GetString>
  return USBD_StrDesc;
 80084ba:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	24001db4 	.word	0x24001db4
 80084c8:	0800d6ac 	.word	0x0800d6ac

080084cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	221a      	movs	r2, #26
 80084dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084de:	f000 f843 	bl	8008568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084e2:	4b02      	ldr	r3, [pc, #8]	; (80084ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	240000e4 	.word	0x240000e4

080084f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4907      	ldr	r1, [pc, #28]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008506:	4808      	ldr	r0, [pc, #32]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008508:	f7ff fd8e 	bl	8008028 <USBD_GetString>
 800850c:	e004      	b.n	8008518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4904      	ldr	r1, [pc, #16]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008514:	f7ff fd88 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	24001db4 	.word	0x24001db4
 8008528:	0800d6c0 	.word	0x0800d6c0

0800852c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008542:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008544:	f7ff fd70 	bl	8008028 <USBD_GetString>
 8008548:	e004      	b.n	8008554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800854e:	4805      	ldr	r0, [pc, #20]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008550:	f7ff fd6a 	bl	8008028 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	24001db4 	.word	0x24001db4
 8008564:	0800d6cc 	.word	0x0800d6cc

08008568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <Get_SerialNum+0x44>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <Get_SerialNum+0x48>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <Get_SerialNum+0x4c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800858e:	2208      	movs	r2, #8
 8008590:	4909      	ldr	r1, [pc, #36]	; (80085b8 <Get_SerialNum+0x50>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f814 	bl	80085c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008598:	2204      	movs	r2, #4
 800859a:	4908      	ldr	r1, [pc, #32]	; (80085bc <Get_SerialNum+0x54>)
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f000 f80f 	bl	80085c0 <IntToUnicode>
  }
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	1ff1e800 	.word	0x1ff1e800
 80085b0:	1ff1e804 	.word	0x1ff1e804
 80085b4:	1ff1e808 	.word	0x1ff1e808
 80085b8:	240000e6 	.word	0x240000e6
 80085bc:	240000f6 	.word	0x240000f6

080085c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085d2:	2300      	movs	r3, #0
 80085d4:	75fb      	strb	r3, [r7, #23]
 80085d6:	e027      	b.n	8008628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d80b      	bhi.n	80085f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4619      	mov	r1, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	440b      	add	r3, r1
 80085f0:	3230      	adds	r2, #48	; 0x30
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e00a      	b.n	800860e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	0f1b      	lsrs	r3, r3, #28
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4619      	mov	r1, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	440b      	add	r3, r1
 8008608:	3237      	adds	r2, #55	; 0x37
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	3301      	adds	r3, #1
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	3301      	adds	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
 8008628:	7dfa      	ldrb	r2, [r7, #23]
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	429a      	cmp	r2, r3
 800862e:	d3d3      	bcc.n	80085d8 <IntToUnicode+0x18>
  }
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b0b8      	sub	sp, #224	; 0xe0
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	605a      	str	r2, [r3, #4]
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008658:	f107 0310 	add.w	r3, r7, #16
 800865c:	22bc      	movs	r2, #188	; 0xbc
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fb5b 	bl	8008d1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a32      	ldr	r2, [pc, #200]	; (8008734 <HAL_PCD_MspInit+0xf4>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d15c      	bne.n	800872a <HAL_PCD_MspInit+0xea>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008674:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8008676:	230a      	movs	r3, #10
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 170;
 800867a:	23aa      	movs	r3, #170	; 0xaa
 800867c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800867e:	2302      	movs	r3, #2
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8008682:	2304      	movs	r3, #4
 8008684:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8008686:	2302      	movs	r3, #2
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800868a:	2300      	movs	r3, #0
 800868c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8008692:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800869a:	f107 0310 	add.w	r3, r7, #16
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fb f8ce 	bl	8003840 <HAL_RCCEx_PeriphCLKConfig>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80086aa:	f7f8 f8bd 	bl	8000828 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80086ae:	f7fa f919 	bl	80028e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b2:	4b21      	ldr	r3, [pc, #132]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 80086b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086c2:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 80086c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d8:	2302      	movs	r3, #2
 80086da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80086ea:	230a      	movs	r3, #10
 80086ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80086f4:	4619      	mov	r1, r3
 80086f6:	4811      	ldr	r0, [pc, #68]	; (800873c <HAL_PCD_MspInit+0xfc>)
 80086f8:	f7f8 fc34 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086fc:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 80086fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008702:	4a0d      	ldr	r2, [pc, #52]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 8008704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008708:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <HAL_PCD_MspInit+0xf8>)
 800870e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008716:	60bb      	str	r3, [r7, #8]
 8008718:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	2065      	movs	r0, #101	; 0x65
 8008720:	f7f8 fbeb 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008724:	2065      	movs	r0, #101	; 0x65
 8008726:	f7f8 fc02 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800872a:	bf00      	nop
 800872c:	37e0      	adds	r7, #224	; 0xe0
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40080000 	.word	0x40080000
 8008738:	58024400 	.word	0x58024400
 800873c:	58020000 	.word	0x58020000

08008740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fe fb07 	bl	8006d6a <USBD_LL_SetupStage>
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	4619      	mov	r1, r3
 800878e:	f7fe fb41 	bl	8006e14 <USBD_LL_DataOutStage>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80087ac:	78fa      	ldrb	r2, [r7, #3]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	334c      	adds	r3, #76	; 0x4c
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7fe fbda 	bl	8006f7a <USBD_LL_DataInStage>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe fd0e 	bl	80071fe <USBD_LL_SOF>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087f2:	2301      	movs	r3, #1
 80087f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
 8008802:	e008      	b.n	8008816 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b02      	cmp	r3, #2
 800880a:	d102      	bne.n	8008812 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
 8008810:	e001      	b.n	8008816 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008812:	f7f8 f809 	bl	8000828 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800881c:	7bfa      	ldrb	r2, [r7, #15]
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fcae 	bl	8007182 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fc56 	bl	80070de <USBD_LL_Reset>
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fca9 	bl	80071a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <HAL_PCD_SuspendCallback+0x48>)
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	4a03      	ldr	r2, [pc, #12]	; (8008884 <HAL_PCD_SuspendCallback+0x48>)
 8008876:	f043 0306 	orr.w	r3, r3, #6
 800887a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	e000ed00 	.word	0xe000ed00

08008888 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fc99 	bl	80071ce <USBD_LL_Resume>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fcf1 	bl	80072a2 <USBD_LL_IsoOUTIncomplete>
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fcad 	bl	800723e <USBD_LL_IsoINIncomplete>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fd03 	bl	8007306 <USBD_LL_DevConnected>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fd00 	bl	800731c <USBD_LL_DevDisconnected>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d13e      	bne.n	80089b2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008934:	4a21      	ldr	r2, [pc, #132]	; (80089bc <USBD_LL_Init+0x98>)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a1f      	ldr	r2, [pc, #124]	; (80089bc <USBD_LL_Init+0x98>)
 8008940:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008944:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <USBD_LL_Init+0x98>)
 8008946:	4a1e      	ldr	r2, [pc, #120]	; (80089c0 <USBD_LL_Init+0x9c>)
 8008948:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800894a:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <USBD_LL_Init+0x98>)
 800894c:	2209      	movs	r2, #9
 800894e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008950:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <USBD_LL_Init+0x98>)
 8008952:	2202      	movs	r2, #2
 8008954:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008956:	4b19      	ldr	r3, [pc, #100]	; (80089bc <USBD_LL_Init+0x98>)
 8008958:	2200      	movs	r2, #0
 800895a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800895c:	4b17      	ldr	r3, [pc, #92]	; (80089bc <USBD_LL_Init+0x98>)
 800895e:	2202      	movs	r2, #2
 8008960:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <USBD_LL_Init+0x98>)
 8008964:	2200      	movs	r2, #0
 8008966:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008968:	4b14      	ldr	r3, [pc, #80]	; (80089bc <USBD_LL_Init+0x98>)
 800896a:	2200      	movs	r2, #0
 800896c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800896e:	4b13      	ldr	r3, [pc, #76]	; (80089bc <USBD_LL_Init+0x98>)
 8008970:	2200      	movs	r2, #0
 8008972:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008974:	4b11      	ldr	r3, [pc, #68]	; (80089bc <USBD_LL_Init+0x98>)
 8008976:	2200      	movs	r2, #0
 8008978:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <USBD_LL_Init+0x98>)
 800897c:	2200      	movs	r2, #0
 800897e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008980:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <USBD_LL_Init+0x98>)
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008986:	480d      	ldr	r0, [pc, #52]	; (80089bc <USBD_LL_Init+0x98>)
 8008988:	f7f8 fc9c 	bl	80012c4 <HAL_PCD_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008992:	f7f7 ff49 	bl	8000828 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	4808      	ldr	r0, [pc, #32]	; (80089bc <USBD_LL_Init+0x98>)
 800899a:	f7f9 ff28 	bl	80027ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800899e:	2240      	movs	r2, #64	; 0x40
 80089a0:	2100      	movs	r1, #0
 80089a2:	4806      	ldr	r0, [pc, #24]	; (80089bc <USBD_LL_Init+0x98>)
 80089a4:	f7f9 fedc 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089a8:	2280      	movs	r2, #128	; 0x80
 80089aa:	2101      	movs	r1, #1
 80089ac:	4803      	ldr	r0, [pc, #12]	; (80089bc <USBD_LL_Init+0x98>)
 80089ae:	f7f9 fed7 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	24001fb4 	.word	0x24001fb4
 80089c0:	40080000 	.word	0x40080000

080089c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f8 fd96 	bl	800150c <HAL_PCD_Start>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f942 	bl	8008c70 <USBD_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	461a      	mov	r2, r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	70fb      	strb	r3, [r7, #3]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70bb      	strb	r3, [r7, #2]
 8008a10:	4613      	mov	r3, r2
 8008a12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a22:	78bb      	ldrb	r3, [r7, #2]
 8008a24:	883a      	ldrh	r2, [r7, #0]
 8008a26:	78f9      	ldrb	r1, [r7, #3]
 8008a28:	f7f9 fa94 	bl	8001f54 <HAL_PCD_EP_Open>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f91c 	bl	8008c70 <USBD_Get_USB_Status>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7f9 fadd 	bl	8002024 <HAL_PCD_EP_Close>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f8fd 	bl	8008c70 <USBD_Get_USB_Status>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f9 fbb5 	bl	8002212 <HAL_PCD_EP_SetStall>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f8de 	bl	8008c70 <USBD_Get_USB_Status>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7f9 fbfa 	bl	80022da <HAL_PCD_EP_ClrStall>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f8bf 	bl	8008c70 <USBD_Get_USB_Status>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da0b      	bge.n	8008b34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b22:	68f9      	ldr	r1, [r7, #12]
 8008b24:	4613      	mov	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	333e      	adds	r3, #62	; 0x3e
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	e00b      	b.n	8008b4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008b4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7f9 f9c7 	bl	8001f0a <HAL_PCD_SetAddress>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f874 	bl	8008c70 <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bb4:	7af9      	ldrb	r1, [r7, #11]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	f7f9 fae0 	bl	800217e <HAL_PCD_EP_Transmit>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f853 	bl	8008c70 <USBD_Get_USB_Status>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bce:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	607a      	str	r2, [r7, #4]
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	460b      	mov	r3, r1
 8008be6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bf6:	7af9      	ldrb	r1, [r7, #11]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	f7f9 fa5c 	bl	80020b8 <HAL_PCD_EP_Receive>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f832 	bl	8008c70 <USBD_Get_USB_Status>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c10:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7f9 fa8c 	bl	800214e <HAL_PCD_EP_GetRxCount>
 8008c36:	4603      	mov	r3, r0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c48:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <USBD_static_malloc+0x18>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	240024c0 	.word	0x240024c0

08008c5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]

}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d817      	bhi.n	8008cb4 <USBD_Get_USB_Status+0x44>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_Get_USB_Status+0x1c>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ca3 	.word	0x08008ca3
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008caf 	.word	0x08008caf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca0:	e00b      	b.n	8008cba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca6:	e008      	b.n	8008cba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cac:	e005      	b.n	8008cba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb2:	e002      	b.n	8008cba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb8:	bf00      	nop
  }
  return usb_status;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <__errno>:
 8008cc8:	4b01      	ldr	r3, [pc, #4]	; (8008cd0 <__errno+0x8>)
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	24000100 	.word	0x24000100

08008cd4 <__libc_init_array>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4d0d      	ldr	r5, [pc, #52]	; (8008d0c <__libc_init_array+0x38>)
 8008cd8:	4c0d      	ldr	r4, [pc, #52]	; (8008d10 <__libc_init_array+0x3c>)
 8008cda:	1b64      	subs	r4, r4, r5
 8008cdc:	10a4      	asrs	r4, r4, #2
 8008cde:	2600      	movs	r6, #0
 8008ce0:	42a6      	cmp	r6, r4
 8008ce2:	d109      	bne.n	8008cf8 <__libc_init_array+0x24>
 8008ce4:	4d0b      	ldr	r5, [pc, #44]	; (8008d14 <__libc_init_array+0x40>)
 8008ce6:	4c0c      	ldr	r4, [pc, #48]	; (8008d18 <__libc_init_array+0x44>)
 8008ce8:	f004 fcbc 	bl	800d664 <_init>
 8008cec:	1b64      	subs	r4, r4, r5
 8008cee:	10a4      	asrs	r4, r4, #2
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	42a6      	cmp	r6, r4
 8008cf4:	d105      	bne.n	8008d02 <__libc_init_array+0x2e>
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfc:	4798      	blx	r3
 8008cfe:	3601      	adds	r6, #1
 8008d00:	e7ee      	b.n	8008ce0 <__libc_init_array+0xc>
 8008d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d06:	4798      	blx	r3
 8008d08:	3601      	adds	r6, #1
 8008d0a:	e7f2      	b.n	8008cf2 <__libc_init_array+0x1e>
 8008d0c:	0800da8c 	.word	0x0800da8c
 8008d10:	0800da8c 	.word	0x0800da8c
 8008d14:	0800da8c 	.word	0x0800da8c
 8008d18:	0800da94 	.word	0x0800da94

08008d1c <memset>:
 8008d1c:	4402      	add	r2, r0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d100      	bne.n	8008d26 <memset+0xa>
 8008d24:	4770      	bx	lr
 8008d26:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2a:	e7f9      	b.n	8008d20 <memset+0x4>

08008d2c <_vsnprintf_r>:
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	4614      	mov	r4, r2
 8008d30:	2c00      	cmp	r4, #0
 8008d32:	b09b      	sub	sp, #108	; 0x6c
 8008d34:	4605      	mov	r5, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	da05      	bge.n	8008d46 <_vsnprintf_r+0x1a>
 8008d3a:	238b      	movs	r3, #139	; 0x8b
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	b01b      	add	sp, #108	; 0x6c
 8008d44:	bd30      	pop	{r4, r5, pc}
 8008d46:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d4a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d4e:	bf14      	ite	ne
 8008d50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d54:	4623      	moveq	r3, r4
 8008d56:	9302      	str	r3, [sp, #8]
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d5e:	9100      	str	r1, [sp, #0]
 8008d60:	9104      	str	r1, [sp, #16]
 8008d62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d66:	4669      	mov	r1, sp
 8008d68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d6a:	f000 f841 	bl	8008df0 <_svfprintf_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	bfbc      	itt	lt
 8008d72:	238b      	movlt	r3, #139	; 0x8b
 8008d74:	602b      	strlt	r3, [r5, #0]
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	d0e3      	beq.n	8008d42 <_vsnprintf_r+0x16>
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	e7df      	b.n	8008d42 <_vsnprintf_r+0x16>
	...

08008d84 <vsnprintf>:
 8008d84:	b507      	push	{r0, r1, r2, lr}
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4803      	ldr	r0, [pc, #12]	; (8008d9c <vsnprintf+0x18>)
 8008d90:	6800      	ldr	r0, [r0, #0]
 8008d92:	f7ff ffcb 	bl	8008d2c <_vsnprintf_r>
 8008d96:	b003      	add	sp, #12
 8008d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d9c:	24000100 	.word	0x24000100

08008da0 <register_fini>:
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <register_fini+0xc>)
 8008da2:	b113      	cbz	r3, 8008daa <register_fini+0xa>
 8008da4:	4802      	ldr	r0, [pc, #8]	; (8008db0 <register_fini+0x10>)
 8008da6:	f000 b805 	b.w	8008db4 <atexit>
 8008daa:	4770      	bx	lr
 8008dac:	00000000 	.word	0x00000000
 8008db0:	08008dc1 	.word	0x08008dc1

08008db4 <atexit>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	4601      	mov	r1, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 b9e6 	b.w	800a18c <__register_exitproc>

08008dc0 <__libc_fini_array>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <__libc_fini_array+0x20>)
 8008dc4:	4c07      	ldr	r4, [pc, #28]	; (8008de4 <__libc_fini_array+0x24>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	b91c      	cbnz	r4, 8008dd4 <__libc_fini_array+0x14>
 8008dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd0:	f004 bc4e 	b.w	800d670 <_fini>
 8008dd4:	3c01      	subs	r4, #1
 8008dd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008dda:	4798      	blx	r3
 8008ddc:	e7f5      	b.n	8008dca <__libc_fini_array+0xa>
 8008dde:	bf00      	nop
 8008de0:	0800da94 	.word	0x0800da94
 8008de4:	0800da98 	.word	0x0800da98

08008de8 <__retarget_lock_init_recursive>:
 8008de8:	4770      	bx	lr

08008dea <__retarget_lock_close_recursive>:
 8008dea:	4770      	bx	lr

08008dec <__retarget_lock_acquire_recursive>:
 8008dec:	4770      	bx	lr

08008dee <__retarget_lock_release_recursive>:
 8008dee:	4770      	bx	lr

08008df0 <_svfprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	ed2d 8b04 	vpush	{d8-d9}
 8008df8:	b0cb      	sub	sp, #300	; 0x12c
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	4692      	mov	sl, r2
 8008dfe:	4698      	mov	r8, r3
 8008e00:	4607      	mov	r7, r0
 8008e02:	f002 f8fb 	bl	800affc <_localeconv_r>
 8008e06:	6803      	ldr	r3, [r0, #0]
 8008e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7f7 fab8 	bl	8000380 <strlen>
 8008e10:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e16:	061a      	lsls	r2, r3, #24
 8008e18:	d519      	bpl.n	8008e4e <_svfprintf_r+0x5e>
 8008e1a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008e1e:	b9b3      	cbnz	r3, 8008e4e <_svfprintf_r+0x5e>
 8008e20:	2140      	movs	r1, #64	; 0x40
 8008e22:	4638      	mov	r0, r7
 8008e24:	f002 f8ee 	bl	800b004 <_malloc_r>
 8008e28:	f8cb 0000 	str.w	r0, [fp]
 8008e2c:	f8cb 0010 	str.w	r0, [fp, #16]
 8008e30:	b950      	cbnz	r0, 8008e48 <_svfprintf_r+0x58>
 8008e32:	230c      	movs	r3, #12
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e3e:	b04b      	add	sp, #300	; 0x12c
 8008e40:	ecbd 8b04 	vpop	{d8-d9}
 8008e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	f8cb 3014 	str.w	r3, [fp, #20]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8008e54:	ed9f 8b96 	vldr	d8, [pc, #600]	; 80090b0 <_svfprintf_r+0x2c0>
 8008e58:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8008e5c:	ac21      	add	r4, sp, #132	; 0x84
 8008e5e:	941e      	str	r4, [sp, #120]	; 0x78
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	930e      	str	r3, [sp, #56]	; 0x38
 8008e66:	9310      	str	r3, [sp, #64]	; 0x40
 8008e68:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6a:	4653      	mov	r3, sl
 8008e6c:	461d      	mov	r5, r3
 8008e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e72:	b10a      	cbz	r2, 8008e78 <_svfprintf_r+0x88>
 8008e74:	2a25      	cmp	r2, #37	; 0x25
 8008e76:	d1f9      	bne.n	8008e6c <_svfprintf_r+0x7c>
 8008e78:	ebb5 060a 	subs.w	r6, r5, sl
 8008e7c:	d00d      	beq.n	8008e9a <_svfprintf_r+0xaa>
 8008e7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e80:	4433      	add	r3, r6
 8008e82:	9320      	str	r3, [sp, #128]	; 0x80
 8008e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e86:	3301      	adds	r3, #1
 8008e88:	2b07      	cmp	r3, #7
 8008e8a:	e9c4 a600 	strd	sl, r6, [r4]
 8008e8e:	931f      	str	r3, [sp, #124]	; 0x7c
 8008e90:	dc77      	bgt.n	8008f82 <_svfprintf_r+0x192>
 8008e92:	3408      	adds	r4, #8
 8008e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e96:	4433      	add	r3, r6
 8008e98:	930a      	str	r3, [sp, #40]	; 0x28
 8008e9a:	782b      	ldrb	r3, [r5, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f001 8135 	beq.w	800a10c <_svfprintf_r+0x131c>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	1c6b      	adds	r3, r5, #1
 8008ea6:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8008eaa:	f04f 36ff 	mov.w	r6, #4294967295
 8008eae:	920c      	str	r2, [sp, #48]	; 0x30
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	f04f 092b 	mov.w	r9, #43	; 0x2b
 8008eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eba:	9204      	str	r2, [sp, #16]
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	3b20      	subs	r3, #32
 8008ec2:	2b5a      	cmp	r3, #90	; 0x5a
 8008ec4:	f200 8590 	bhi.w	80099e8 <_svfprintf_r+0xbf8>
 8008ec8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ecc:	058e007d 	.word	0x058e007d
 8008ed0:	0085058e 	.word	0x0085058e
 8008ed4:	058e058e 	.word	0x058e058e
 8008ed8:	0065058e 	.word	0x0065058e
 8008edc:	058e058e 	.word	0x058e058e
 8008ee0:	00920088 	.word	0x00920088
 8008ee4:	008f058e 	.word	0x008f058e
 8008ee8:	058e0095 	.word	0x058e0095
 8008eec:	00b200af 	.word	0x00b200af
 8008ef0:	00b200b2 	.word	0x00b200b2
 8008ef4:	00b200b2 	.word	0x00b200b2
 8008ef8:	00b200b2 	.word	0x00b200b2
 8008efc:	00b200b2 	.word	0x00b200b2
 8008f00:	058e058e 	.word	0x058e058e
 8008f04:	058e058e 	.word	0x058e058e
 8008f08:	058e058e 	.word	0x058e058e
 8008f0c:	012d058e 	.word	0x012d058e
 8008f10:	00e0058e 	.word	0x00e0058e
 8008f14:	012d00fa 	.word	0x012d00fa
 8008f18:	012d012d 	.word	0x012d012d
 8008f1c:	058e058e 	.word	0x058e058e
 8008f20:	058e058e 	.word	0x058e058e
 8008f24:	058e00c3 	.word	0x058e00c3
 8008f28:	0455058e 	.word	0x0455058e
 8008f2c:	058e058e 	.word	0x058e058e
 8008f30:	04a3058e 	.word	0x04a3058e
 8008f34:	04c7058e 	.word	0x04c7058e
 8008f38:	058e058e 	.word	0x058e058e
 8008f3c:	058e04ed 	.word	0x058e04ed
 8008f40:	058e058e 	.word	0x058e058e
 8008f44:	058e058e 	.word	0x058e058e
 8008f48:	058e058e 	.word	0x058e058e
 8008f4c:	012d058e 	.word	0x012d058e
 8008f50:	00e0058e 	.word	0x00e0058e
 8008f54:	012d00fc 	.word	0x012d00fc
 8008f58:	012d012d 	.word	0x012d012d
 8008f5c:	00fc00c6 	.word	0x00fc00c6
 8008f60:	058e00da 	.word	0x058e00da
 8008f64:	058e00d3 	.word	0x058e00d3
 8008f68:	0457042e 	.word	0x0457042e
 8008f6c:	00da0490 	.word	0x00da0490
 8008f70:	04a3058e 	.word	0x04a3058e
 8008f74:	04c9007b 	.word	0x04c9007b
 8008f78:	058e058e 	.word	0x058e058e
 8008f7c:	058e050d 	.word	0x058e050d
 8008f80:	007b      	.short	0x007b
 8008f82:	aa1e      	add	r2, sp, #120	; 0x78
 8008f84:	4659      	mov	r1, fp
 8008f86:	4638      	mov	r0, r7
 8008f88:	f002 fe25 	bl	800bbd6 <__ssprint_r>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f040 8126 	bne.w	80091de <_svfprintf_r+0x3ee>
 8008f92:	ac21      	add	r4, sp, #132	; 0x84
 8008f94:	e77e      	b.n	8008e94 <_svfprintf_r+0xa4>
 8008f96:	4638      	mov	r0, r7
 8008f98:	f002 f830 	bl	800affc <_localeconv_r>
 8008f9c:	6843      	ldr	r3, [r0, #4]
 8008f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f7 f9ed 	bl	8000380 <strlen>
 8008fa6:	900e      	str	r0, [sp, #56]	; 0x38
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f002 f827 	bl	800affc <_localeconv_r>
 8008fae:	6883      	ldr	r3, [r0, #8]
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb4:	b12b      	cbz	r3, 8008fc2 <_svfprintf_r+0x1d2>
 8008fb6:	9b08      	ldr	r3, [sp, #32]
 8008fb8:	b11b      	cbz	r3, 8008fc2 <_svfprintf_r+0x1d2>
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	b10b      	cbz	r3, 8008fc2 <_svfprintf_r+0x1d2>
 8008fbe:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 8008fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc4:	e777      	b.n	8008eb6 <_svfprintf_r+0xc6>
 8008fc6:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f9      	bne.n	8008fc2 <_svfprintf_r+0x1d2>
 8008fce:	2320      	movs	r3, #32
 8008fd0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008fd4:	e7f5      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8008fd6:	f045 0501 	orr.w	r5, r5, #1
 8008fda:	e7f2      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8008fdc:	f858 3b04 	ldr.w	r3, [r8], #4
 8008fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	daed      	bge.n	8008fc2 <_svfprintf_r+0x1d2>
 8008fe6:	425b      	negs	r3, r3
 8008fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8008fea:	f045 0504 	orr.w	r5, r5, #4
 8008fee:	e7e8      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8008ff0:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 8008ff4:	e7e5      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8008ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	d111      	bne.n	8009026 <_svfprintf_r+0x236>
 8009002:	f858 6b04 	ldr.w	r6, [r8], #4
 8009006:	9209      	str	r2, [sp, #36]	; 0x24
 8009008:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 800900c:	e7d9      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 800900e:	210a      	movs	r1, #10
 8009010:	fb01 3606 	mla	r6, r1, r6, r3
 8009014:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	3b30      	subs	r3, #48	; 0x30
 800901e:	2b09      	cmp	r3, #9
 8009020:	d9f5      	bls.n	800900e <_svfprintf_r+0x21e>
 8009022:	9209      	str	r2, [sp, #36]	; 0x24
 8009024:	e74b      	b.n	8008ebe <_svfprintf_r+0xce>
 8009026:	2600      	movs	r6, #0
 8009028:	e7f7      	b.n	800901a <_svfprintf_r+0x22a>
 800902a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800902e:	e7c8      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8009030:	2300      	movs	r3, #0
 8009032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009034:	930c      	str	r3, [sp, #48]	; 0x30
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	990c      	ldr	r1, [sp, #48]	; 0x30
 800903a:	3b30      	subs	r3, #48	; 0x30
 800903c:	200a      	movs	r0, #10
 800903e:	fb00 3301 	mla	r3, r0, r1, r3
 8009042:	930c      	str	r3, [sp, #48]	; 0x30
 8009044:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	3b30      	subs	r3, #48	; 0x30
 800904c:	2b09      	cmp	r3, #9
 800904e:	d9f2      	bls.n	8009036 <_svfprintf_r+0x246>
 8009050:	e7e7      	b.n	8009022 <_svfprintf_r+0x232>
 8009052:	f045 0508 	orr.w	r5, r5, #8
 8009056:	e7b4      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8009058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b68      	cmp	r3, #104	; 0x68
 800905e:	bf01      	itttt	eq
 8009060:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 8009062:	3301      	addeq	r3, #1
 8009064:	9309      	streq	r3, [sp, #36]	; 0x24
 8009066:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800906a:	bf18      	it	ne
 800906c:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8009070:	e7a7      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b6c      	cmp	r3, #108	; 0x6c
 8009078:	d105      	bne.n	8009086 <_svfprintf_r+0x296>
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	3301      	adds	r3, #1
 800907e:	9309      	str	r3, [sp, #36]	; 0x24
 8009080:	f045 0520 	orr.w	r5, r5, #32
 8009084:	e79d      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 8009086:	f045 0510 	orr.w	r5, r5, #16
 800908a:	e79a      	b.n	8008fc2 <_svfprintf_r+0x1d2>
 800908c:	4642      	mov	r2, r8
 800908e:	2000      	movs	r0, #0
 8009090:	f852 3b04 	ldr.w	r3, [r2], #4
 8009094:	9205      	str	r2, [sp, #20]
 8009096:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800909a:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 800909e:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80090a2:	9002      	str	r0, [sp, #8]
 80090a4:	2601      	movs	r6, #1
 80090a6:	4681      	mov	r9, r0
 80090a8:	4680      	mov	r8, r0
 80090aa:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 80090ae:	e18e      	b.n	80093ce <_svfprintf_r+0x5de>
	...
 80090b8:	ffffffff 	.word	0xffffffff
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	f045 0510 	orr.w	r5, r5, #16
 80090c4:	06ab      	lsls	r3, r5, #26
 80090c6:	d516      	bpl.n	80090f6 <_svfprintf_r+0x306>
 80090c8:	f108 0307 	add.w	r3, r8, #7
 80090cc:	f023 0307 	bic.w	r3, r3, #7
 80090d0:	461a      	mov	r2, r3
 80090d2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80090d6:	f852 8b08 	ldr.w	r8, [r2], #8
 80090da:	9205      	str	r2, [sp, #20]
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	da07      	bge.n	80090f2 <_svfprintf_r+0x302>
 80090e2:	f1d8 0800 	rsbs	r8, r8, #0
 80090e6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80090ea:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80090ee:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80090f2:	2301      	movs	r3, #1
 80090f4:	e354      	b.n	80097a0 <_svfprintf_r+0x9b0>
 80090f6:	4642      	mov	r2, r8
 80090f8:	06e8      	lsls	r0, r5, #27
 80090fa:	f852 3b04 	ldr.w	r3, [r2], #4
 80090fe:	9205      	str	r2, [sp, #20]
 8009100:	d503      	bpl.n	800910a <_svfprintf_r+0x31a>
 8009102:	4698      	mov	r8, r3
 8009104:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8009108:	e7e8      	b.n	80090dc <_svfprintf_r+0x2ec>
 800910a:	0669      	lsls	r1, r5, #25
 800910c:	d504      	bpl.n	8009118 <_svfprintf_r+0x328>
 800910e:	fa0f f883 	sxth.w	r8, r3
 8009112:	f343 39c0 	sbfx	r9, r3, #15, #1
 8009116:	e7e1      	b.n	80090dc <_svfprintf_r+0x2ec>
 8009118:	05aa      	lsls	r2, r5, #22
 800911a:	d5f2      	bpl.n	8009102 <_svfprintf_r+0x312>
 800911c:	fa4f f883 	sxtb.w	r8, r3
 8009120:	f343 19c0 	sbfx	r9, r3, #7, #1
 8009124:	e7da      	b.n	80090dc <_svfprintf_r+0x2ec>
 8009126:	f108 0807 	add.w	r8, r8, #7
 800912a:	f028 0307 	bic.w	r3, r8, #7
 800912e:	ecb3 8b02 	vldmia	r3!, {d8}
 8009132:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 80090b8 <_svfprintf_r+0x2c8>
 8009136:	eeb0 6bc8 	vabs.f64	d6, d8
 800913a:	eeb4 6b47 	vcmp.f64	d6, d7
 800913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	dd18      	ble.n	8009178 <_svfprintf_r+0x388>
 8009146:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	d502      	bpl.n	8009156 <_svfprintf_r+0x366>
 8009150:	232d      	movs	r3, #45	; 0x2d
 8009152:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8009156:	4a26      	ldr	r2, [pc, #152]	; (80091f0 <_svfprintf_r+0x400>)
 8009158:	4826      	ldr	r0, [pc, #152]	; (80091f4 <_svfprintf_r+0x404>)
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	2b47      	cmp	r3, #71	; 0x47
 800915e:	bfd4      	ite	le
 8009160:	4692      	movle	sl, r2
 8009162:	4682      	movgt	sl, r0
 8009164:	2300      	movs	r3, #0
 8009166:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800916a:	9302      	str	r3, [sp, #8]
 800916c:	2603      	movs	r6, #3
 800916e:	4699      	mov	r9, r3
 8009170:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8009174:	4698      	mov	r8, r3
 8009176:	e12a      	b.n	80093ce <_svfprintf_r+0x5de>
 8009178:	eeb4 8b48 	vcmp.f64	d8, d8
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	d70a      	bvc.n	8009198 <_svfprintf_r+0x3a8>
 8009182:	ee18 3a90 	vmov	r3, s17
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	232d      	movlt	r3, #45	; 0x2d
 800918c:	4a1a      	ldr	r2, [pc, #104]	; (80091f8 <_svfprintf_r+0x408>)
 800918e:	481b      	ldr	r0, [pc, #108]	; (80091fc <_svfprintf_r+0x40c>)
 8009190:	bfb8      	it	lt
 8009192:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 8009196:	e7e0      	b.n	800915a <_svfprintf_r+0x36a>
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	f023 0920 	bic.w	r9, r3, #32
 800919e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80091a2:	d12d      	bne.n	8009200 <_svfprintf_r+0x410>
 80091a4:	2330      	movs	r3, #48	; 0x30
 80091a6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	2b61      	cmp	r3, #97	; 0x61
 80091ae:	bf0c      	ite	eq
 80091b0:	2378      	moveq	r3, #120	; 0x78
 80091b2:	2358      	movne	r3, #88	; 0x58
 80091b4:	2e63      	cmp	r6, #99	; 0x63
 80091b6:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80091ba:	f045 0502 	orr.w	r5, r5, #2
 80091be:	f340 81db 	ble.w	8009578 <_svfprintf_r+0x788>
 80091c2:	1c71      	adds	r1, r6, #1
 80091c4:	4638      	mov	r0, r7
 80091c6:	f001 ff1d 	bl	800b004 <_malloc_r>
 80091ca:	4682      	mov	sl, r0
 80091cc:	2800      	cmp	r0, #0
 80091ce:	f040 81d8 	bne.w	8009582 <_svfprintf_r+0x792>
 80091d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80091d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091da:	f8ab 300c 	strh.w	r3, [fp, #12]
 80091de:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80091e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80091e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e8:	bf18      	it	ne
 80091ea:	f04f 33ff 	movne.w	r3, #4294967295
 80091ee:	e624      	b.n	8008e3a <_svfprintf_r+0x4a>
 80091f0:	0800d6f0 	.word	0x0800d6f0
 80091f4:	0800d6f4 	.word	0x0800d6f4
 80091f8:	0800d6f8 	.word	0x0800d6f8
 80091fc:	0800d6fc 	.word	0x0800d6fc
 8009200:	1c73      	adds	r3, r6, #1
 8009202:	f000 81c0 	beq.w	8009586 <_svfprintf_r+0x796>
 8009206:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800920a:	f040 81c0 	bne.w	800958e <_svfprintf_r+0x79e>
 800920e:	2e00      	cmp	r6, #0
 8009210:	f040 81bd 	bne.w	800958e <_svfprintf_r+0x79e>
 8009214:	9602      	str	r6, [sp, #8]
 8009216:	2601      	movs	r6, #1
 8009218:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800921c:	930d      	str	r3, [sp, #52]	; 0x34
 800921e:	ee18 3a90 	vmov	r3, s17
 8009222:	2b00      	cmp	r3, #0
 8009224:	f280 81b6 	bge.w	8009594 <_svfprintf_r+0x7a4>
 8009228:	eeb1 9b48 	vneg.f64	d9, d8
 800922c:	232d      	movs	r3, #45	; 0x2d
 800922e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8009232:	9313      	str	r3, [sp, #76]	; 0x4c
 8009234:	f040 81c7 	bne.w	80095c6 <_svfprintf_r+0x7d6>
 8009238:	eeb0 0b49 	vmov.f64	d0, d9
 800923c:	a818      	add	r0, sp, #96	; 0x60
 800923e:	f002 fc6f 	bl	800bb20 <frexp>
 8009242:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8009246:	ee20 0b07 	vmul.f64	d0, d0, d7
 800924a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800924e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009252:	bf08      	it	eq
 8009254:	2301      	moveq	r3, #1
 8009256:	9a04      	ldr	r2, [sp, #16]
 8009258:	bf08      	it	eq
 800925a:	9318      	streq	r3, [sp, #96]	; 0x60
 800925c:	49b5      	ldr	r1, [pc, #724]	; (8009534 <_svfprintf_r+0x744>)
 800925e:	4bb6      	ldr	r3, [pc, #728]	; (8009538 <_svfprintf_r+0x748>)
 8009260:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8009264:	2a61      	cmp	r2, #97	; 0x61
 8009266:	bf18      	it	ne
 8009268:	4619      	movne	r1, r3
 800926a:	1e72      	subs	r2, r6, #1
 800926c:	4653      	mov	r3, sl
 800926e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009272:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8009276:	f1b2 3fff 	cmp.w	r2, #4294967295
 800927a:	ee16 ca90 	vmov	ip, s13
 800927e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8009282:	f803 0b01 	strb.w	r0, [r3], #1
 8009286:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800928a:	4610      	mov	r0, r2
 800928c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009290:	d006      	beq.n	80092a0 <_svfprintf_r+0x4b0>
 8009292:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929a:	f102 32ff 	add.w	r2, r2, #4294967295
 800929e:	d1e6      	bne.n	800926e <_svfprintf_r+0x47e>
 80092a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80092a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80092a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ac:	dc09      	bgt.n	80092c2 <_svfprintf_r+0x4d2>
 80092ae:	eeb4 0b47 	vcmp.f64	d0, d7
 80092b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b6:	f040 8180 	bne.w	80095ba <_svfprintf_r+0x7ca>
 80092ba:	f01c 0f01 	tst.w	ip, #1
 80092be:	f000 817c 	beq.w	80095ba <_svfprintf_r+0x7ca>
 80092c2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80092c6:	931c      	str	r3, [sp, #112]	; 0x70
 80092c8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80092cc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80092ce:	1e42      	subs	r2, r0, #1
 80092d0:	921c      	str	r2, [sp, #112]	; 0x70
 80092d2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80092d6:	4562      	cmp	r2, ip
 80092d8:	f000 8160 	beq.w	800959c <_svfprintf_r+0x7ac>
 80092dc:	2a39      	cmp	r2, #57	; 0x39
 80092de:	bf16      	itet	ne
 80092e0:	3201      	addne	r2, #1
 80092e2:	7a8a      	ldrbeq	r2, [r1, #10]
 80092e4:	b2d2      	uxtbne	r2, r2
 80092e6:	f800 2c01 	strb.w	r2, [r0, #-1]
 80092ea:	eba3 030a 	sub.w	r3, r3, sl
 80092ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092f2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	f040 81a7 	bne.w	800964a <_svfprintf_r+0x85a>
 80092fc:	f118 0f03 	cmn.w	r8, #3
 8009300:	db02      	blt.n	8009308 <_svfprintf_r+0x518>
 8009302:	4546      	cmp	r6, r8
 8009304:	f280 81c9 	bge.w	800969a <_svfprintf_r+0x8aa>
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	3b02      	subs	r3, #2
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	9904      	ldr	r1, [sp, #16]
 8009310:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009314:	f021 0120 	bic.w	r1, r1, #32
 8009318:	2941      	cmp	r1, #65	; 0x41
 800931a:	bf08      	it	eq
 800931c:	320f      	addeq	r2, #15
 800931e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009322:	bf06      	itte	eq
 8009324:	b2d2      	uxtbeq	r2, r2
 8009326:	2101      	moveq	r1, #1
 8009328:	2100      	movne	r1, #0
 800932a:	2b00      	cmp	r3, #0
 800932c:	9318      	str	r3, [sp, #96]	; 0x60
 800932e:	bfb8      	it	lt
 8009330:	f1c8 0301 	rsblt	r3, r8, #1
 8009334:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8009338:	bfb4      	ite	lt
 800933a:	222d      	movlt	r2, #45	; 0x2d
 800933c:	222b      	movge	r2, #43	; 0x2b
 800933e:	2b09      	cmp	r3, #9
 8009340:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8009344:	f340 8198 	ble.w	8009678 <_svfprintf_r+0x888>
 8009348:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 800934c:	200a      	movs	r0, #10
 800934e:	4611      	mov	r1, r2
 8009350:	fb93 f6f0 	sdiv	r6, r3, r0
 8009354:	fb00 3016 	mls	r0, r0, r6, r3
 8009358:	3030      	adds	r0, #48	; 0x30
 800935a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800935e:	4618      	mov	r0, r3
 8009360:	2863      	cmp	r0, #99	; 0x63
 8009362:	f102 32ff 	add.w	r2, r2, #4294967295
 8009366:	4633      	mov	r3, r6
 8009368:	dcf0      	bgt.n	800934c <_svfprintf_r+0x55c>
 800936a:	3330      	adds	r3, #48	; 0x30
 800936c:	1e88      	subs	r0, r1, #2
 800936e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009372:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 8009376:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 800937a:	4603      	mov	r3, r0
 800937c:	42b3      	cmp	r3, r6
 800937e:	f0c0 8176 	bcc.w	800966e <_svfprintf_r+0x87e>
 8009382:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8009386:	1a52      	subs	r2, r2, r1
 8009388:	42b0      	cmp	r0, r6
 800938a:	bf88      	it	hi
 800938c:	2200      	movhi	r2, #0
 800938e:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8009392:	441a      	add	r2, r3
 8009394:	ab1a      	add	r3, sp, #104	; 0x68
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	9a03      	ldr	r2, [sp, #12]
 800939a:	9311      	str	r3, [sp, #68]	; 0x44
 800939c:	2a01      	cmp	r2, #1
 800939e:	eb03 0602 	add.w	r6, r3, r2
 80093a2:	dc01      	bgt.n	80093a8 <_svfprintf_r+0x5b8>
 80093a4:	07e8      	lsls	r0, r5, #31
 80093a6:	d501      	bpl.n	80093ac <_svfprintf_r+0x5bc>
 80093a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093aa:	441e      	add	r6, r3
 80093ac:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80093b0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80093b4:	930d      	str	r3, [sp, #52]	; 0x34
 80093b6:	2300      	movs	r3, #0
 80093b8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80093bc:	4698      	mov	r8, r3
 80093be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093c0:	b113      	cbz	r3, 80093c8 <_svfprintf_r+0x5d8>
 80093c2:	232d      	movs	r3, #45	; 0x2d
 80093c4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80093c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80093ca:	f04f 0900 	mov.w	r9, #0
 80093ce:	45b1      	cmp	r9, r6
 80093d0:	464b      	mov	r3, r9
 80093d2:	bfb8      	it	lt
 80093d4:	4633      	movlt	r3, r6
 80093d6:	930d      	str	r3, [sp, #52]	; 0x34
 80093d8:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80093dc:	b113      	cbz	r3, 80093e4 <_svfprintf_r+0x5f4>
 80093de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e0:	3301      	adds	r3, #1
 80093e2:	930d      	str	r3, [sp, #52]	; 0x34
 80093e4:	f015 0302 	ands.w	r3, r5, #2
 80093e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80093ea:	bf1e      	ittt	ne
 80093ec:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 80093ee:	3302      	addne	r3, #2
 80093f0:	930d      	strne	r3, [sp, #52]	; 0x34
 80093f2:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80093f6:	9314      	str	r3, [sp, #80]	; 0x50
 80093f8:	d120      	bne.n	800943c <_svfprintf_r+0x64c>
 80093fa:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	2b00      	cmp	r3, #0
 8009402:	dd1b      	ble.n	800943c <_svfprintf_r+0x64c>
 8009404:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8009408:	494c      	ldr	r1, [pc, #304]	; (800953c <_svfprintf_r+0x74c>)
 800940a:	6021      	str	r1, [r4, #0]
 800940c:	2b10      	cmp	r3, #16
 800940e:	f102 0201 	add.w	r2, r2, #1
 8009412:	f104 0008 	add.w	r0, r4, #8
 8009416:	f300 82f7 	bgt.w	8009a08 <_svfprintf_r+0xc18>
 800941a:	eb0c 0103 	add.w	r1, ip, r3
 800941e:	2a07      	cmp	r2, #7
 8009420:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	f340 8304 	ble.w	8009a32 <_svfprintf_r+0xc42>
 800942a:	aa1e      	add	r2, sp, #120	; 0x78
 800942c:	4659      	mov	r1, fp
 800942e:	4638      	mov	r0, r7
 8009430:	f002 fbd1 	bl	800bbd6 <__ssprint_r>
 8009434:	2800      	cmp	r0, #0
 8009436:	f040 8646 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 800943a:	ac21      	add	r4, sp, #132	; 0x84
 800943c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8009440:	b173      	cbz	r3, 8009460 <_svfprintf_r+0x670>
 8009442:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	2301      	movs	r3, #1
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800944e:	3301      	adds	r3, #1
 8009450:	9320      	str	r3, [sp, #128]	; 0x80
 8009452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009454:	3301      	adds	r3, #1
 8009456:	2b07      	cmp	r3, #7
 8009458:	931f      	str	r3, [sp, #124]	; 0x7c
 800945a:	f300 82ec 	bgt.w	8009a36 <_svfprintf_r+0xc46>
 800945e:	3408      	adds	r4, #8
 8009460:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009462:	b16b      	cbz	r3, 8009480 <_svfprintf_r+0x690>
 8009464:	ab17      	add	r3, sp, #92	; 0x5c
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	2302      	movs	r3, #2
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800946e:	3302      	adds	r3, #2
 8009470:	9320      	str	r3, [sp, #128]	; 0x80
 8009472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009474:	3301      	adds	r3, #1
 8009476:	2b07      	cmp	r3, #7
 8009478:	931f      	str	r3, [sp, #124]	; 0x7c
 800947a:	f300 82e6 	bgt.w	8009a4a <_svfprintf_r+0xc5a>
 800947e:	3408      	adds	r4, #8
 8009480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	d120      	bne.n	80094c8 <_svfprintf_r+0x6d8>
 8009486:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd1b      	ble.n	80094c8 <_svfprintf_r+0x6d8>
 8009490:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8009494:	492a      	ldr	r1, [pc, #168]	; (8009540 <_svfprintf_r+0x750>)
 8009496:	6021      	str	r1, [r4, #0]
 8009498:	2b10      	cmp	r3, #16
 800949a:	f102 0201 	add.w	r2, r2, #1
 800949e:	f104 0008 	add.w	r0, r4, #8
 80094a2:	f300 82dc 	bgt.w	8009a5e <_svfprintf_r+0xc6e>
 80094a6:	eb0c 0103 	add.w	r1, ip, r3
 80094aa:	2a07      	cmp	r2, #7
 80094ac:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	f340 82e9 	ble.w	8009a88 <_svfprintf_r+0xc98>
 80094b6:	aa1e      	add	r2, sp, #120	; 0x78
 80094b8:	4659      	mov	r1, fp
 80094ba:	4638      	mov	r0, r7
 80094bc:	f002 fb8b 	bl	800bbd6 <__ssprint_r>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 8600 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 80094c6:	ac21      	add	r4, sp, #132	; 0x84
 80094c8:	eba9 0906 	sub.w	r9, r9, r6
 80094cc:	f1b9 0f00 	cmp.w	r9, #0
 80094d0:	dd1c      	ble.n	800950c <_svfprintf_r+0x71c>
 80094d2:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80094d6:	481a      	ldr	r0, [pc, #104]	; (8009540 <_svfprintf_r+0x750>)
 80094d8:	6020      	str	r0, [r4, #0]
 80094da:	f1b9 0f10 	cmp.w	r9, #16
 80094de:	f102 0201 	add.w	r2, r2, #1
 80094e2:	f104 0108 	add.w	r1, r4, #8
 80094e6:	f300 82d1 	bgt.w	8009a8c <_svfprintf_r+0xc9c>
 80094ea:	444b      	add	r3, r9
 80094ec:	2a07      	cmp	r2, #7
 80094ee:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 80094f2:	f8c4 9004 	str.w	r9, [r4, #4]
 80094f6:	f340 82dd 	ble.w	8009ab4 <_svfprintf_r+0xcc4>
 80094fa:	aa1e      	add	r2, sp, #120	; 0x78
 80094fc:	4659      	mov	r1, fp
 80094fe:	4638      	mov	r0, r7
 8009500:	f002 fb69 	bl	800bbd6 <__ssprint_r>
 8009504:	2800      	cmp	r0, #0
 8009506:	f040 85de 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 800950a:	ac21      	add	r4, sp, #132	; 0x84
 800950c:	05e9      	lsls	r1, r5, #23
 800950e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8009510:	f100 82d6 	bmi.w	8009ac0 <_svfprintf_r+0xcd0>
 8009514:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009516:	3301      	adds	r3, #1
 8009518:	4430      	add	r0, r6
 800951a:	2b07      	cmp	r3, #7
 800951c:	e9c4 a600 	strd	sl, r6, [r4]
 8009520:	9020      	str	r0, [sp, #128]	; 0x80
 8009522:	931f      	str	r3, [sp, #124]	; 0x7c
 8009524:	f300 8310 	bgt.w	8009b48 <_svfprintf_r+0xd58>
 8009528:	3408      	adds	r4, #8
 800952a:	076b      	lsls	r3, r5, #29
 800952c:	f100 85ac 	bmi.w	800a088 <_svfprintf_r+0x1298>
 8009530:	e008      	b.n	8009544 <_svfprintf_r+0x754>
 8009532:	bf00      	nop
 8009534:	0800d700 	.word	0x0800d700
 8009538:	0800d711 	.word	0x0800d711
 800953c:	0800d724 	.word	0x0800d724
 8009540:	0800d734 	.word	0x0800d734
 8009544:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8009548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954a:	428a      	cmp	r2, r1
 800954c:	bfac      	ite	ge
 800954e:	189b      	addge	r3, r3, r2
 8009550:	185b      	addlt	r3, r3, r1
 8009552:	930a      	str	r3, [sp, #40]	; 0x28
 8009554:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009556:	b13b      	cbz	r3, 8009568 <_svfprintf_r+0x778>
 8009558:	aa1e      	add	r2, sp, #120	; 0x78
 800955a:	4659      	mov	r1, fp
 800955c:	4638      	mov	r0, r7
 800955e:	f002 fb3a 	bl	800bbd6 <__ssprint_r>
 8009562:	2800      	cmp	r0, #0
 8009564:	f040 85af 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009568:	2300      	movs	r3, #0
 800956a:	931f      	str	r3, [sp, #124]	; 0x7c
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f040 85c6 	bne.w	800a100 <_svfprintf_r+0x1310>
 8009574:	ac21      	add	r4, sp, #132	; 0x84
 8009576:	e0e3      	b.n	8009740 <_svfprintf_r+0x950>
 8009578:	2300      	movs	r3, #0
 800957a:	9302      	str	r3, [sp, #8]
 800957c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8009580:	e64a      	b.n	8009218 <_svfprintf_r+0x428>
 8009582:	9002      	str	r0, [sp, #8]
 8009584:	e648      	b.n	8009218 <_svfprintf_r+0x428>
 8009586:	2300      	movs	r3, #0
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	2606      	movs	r6, #6
 800958c:	e644      	b.n	8009218 <_svfprintf_r+0x428>
 800958e:	2300      	movs	r3, #0
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	e641      	b.n	8009218 <_svfprintf_r+0x428>
 8009594:	2300      	movs	r3, #0
 8009596:	eeb0 9b48 	vmov.f64	d9, d8
 800959a:	e648      	b.n	800922e <_svfprintf_r+0x43e>
 800959c:	f800 ec01 	strb.w	lr, [r0, #-1]
 80095a0:	e694      	b.n	80092cc <_svfprintf_r+0x4dc>
 80095a2:	f802 eb01 	strb.w	lr, [r2], #1
 80095a6:	ebac 0102 	sub.w	r1, ip, r2
 80095aa:	2900      	cmp	r1, #0
 80095ac:	daf9      	bge.n	80095a2 <_svfprintf_r+0x7b2>
 80095ae:	1c42      	adds	r2, r0, #1
 80095b0:	3001      	adds	r0, #1
 80095b2:	bfb8      	it	lt
 80095b4:	2200      	movlt	r2, #0
 80095b6:	4413      	add	r3, r2
 80095b8:	e697      	b.n	80092ea <_svfprintf_r+0x4fa>
 80095ba:	461a      	mov	r2, r3
 80095bc:	eb03 0c00 	add.w	ip, r3, r0
 80095c0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80095c4:	e7ef      	b.n	80095a6 <_svfprintf_r+0x7b6>
 80095c6:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80095ca:	d006      	beq.n	80095da <_svfprintf_r+0x7ea>
 80095cc:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 80095d0:	d118      	bne.n	8009604 <_svfprintf_r+0x814>
 80095d2:	f106 0801 	add.w	r8, r6, #1
 80095d6:	2102      	movs	r1, #2
 80095d8:	e001      	b.n	80095de <_svfprintf_r+0x7ee>
 80095da:	46b0      	mov	r8, r6
 80095dc:	2103      	movs	r1, #3
 80095de:	ab1c      	add	r3, sp, #112	; 0x70
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	ab19      	add	r3, sp, #100	; 0x64
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	4642      	mov	r2, r8
 80095e8:	ab18      	add	r3, sp, #96	; 0x60
 80095ea:	4638      	mov	r0, r7
 80095ec:	eeb0 0b49 	vmov.f64	d0, d9
 80095f0:	f000 fe9a 	bl	800a328 <_dtoa_r>
 80095f4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80095f8:	4682      	mov	sl, r0
 80095fa:	d105      	bne.n	8009608 <_svfprintf_r+0x818>
 80095fc:	07eb      	lsls	r3, r5, #31
 80095fe:	d403      	bmi.n	8009608 <_svfprintf_r+0x818>
 8009600:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009602:	e672      	b.n	80092ea <_svfprintf_r+0x4fa>
 8009604:	46b0      	mov	r8, r6
 8009606:	e7e6      	b.n	80095d6 <_svfprintf_r+0x7e6>
 8009608:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800960c:	eb0a 0308 	add.w	r3, sl, r8
 8009610:	d10d      	bne.n	800962e <_svfprintf_r+0x83e>
 8009612:	f89a 2000 	ldrb.w	r2, [sl]
 8009616:	2a30      	cmp	r2, #48	; 0x30
 8009618:	d107      	bne.n	800962a <_svfprintf_r+0x83a>
 800961a:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800961e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009622:	bf1c      	itt	ne
 8009624:	f1c8 0201 	rsbne	r2, r8, #1
 8009628:	9218      	strne	r2, [sp, #96]	; 0x60
 800962a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800962c:	4413      	add	r3, r2
 800962e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8009632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009636:	bf08      	it	eq
 8009638:	931c      	streq	r3, [sp, #112]	; 0x70
 800963a:	2130      	movs	r1, #48	; 0x30
 800963c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800963e:	4293      	cmp	r3, r2
 8009640:	d9de      	bls.n	8009600 <_svfprintf_r+0x810>
 8009642:	1c50      	adds	r0, r2, #1
 8009644:	901c      	str	r0, [sp, #112]	; 0x70
 8009646:	7011      	strb	r1, [r2, #0]
 8009648:	e7f8      	b.n	800963c <_svfprintf_r+0x84c>
 800964a:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 800964e:	f47f ae5e 	bne.w	800930e <_svfprintf_r+0x51e>
 8009652:	f005 0301 	and.w	r3, r5, #1
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	ea43 0306 	orr.w	r3, r3, r6
 800965e:	dd18      	ble.n	8009692 <_svfprintf_r+0x8a2>
 8009660:	b383      	cbz	r3, 80096c4 <_svfprintf_r+0x8d4>
 8009662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009664:	4443      	add	r3, r8
 8009666:	441e      	add	r6, r3
 8009668:	2366      	movs	r3, #102	; 0x66
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	e02f      	b.n	80096ce <_svfprintf_r+0x8de>
 800966e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8009672:	f802 cb01 	strb.w	ip, [r2], #1
 8009676:	e681      	b.n	800937c <_svfprintf_r+0x58c>
 8009678:	b941      	cbnz	r1, 800968c <_svfprintf_r+0x89c>
 800967a:	2230      	movs	r2, #48	; 0x30
 800967c:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8009680:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8009684:	3330      	adds	r3, #48	; 0x30
 8009686:	f802 3b01 	strb.w	r3, [r2], #1
 800968a:	e683      	b.n	8009394 <_svfprintf_r+0x5a4>
 800968c:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8009690:	e7f8      	b.n	8009684 <_svfprintf_r+0x894>
 8009692:	b1cb      	cbz	r3, 80096c8 <_svfprintf_r+0x8d8>
 8009694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009696:	3301      	adds	r3, #1
 8009698:	e7e5      	b.n	8009666 <_svfprintf_r+0x876>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	4598      	cmp	r8, r3
 800969e:	db06      	blt.n	80096ae <_svfprintf_r+0x8be>
 80096a0:	07e9      	lsls	r1, r5, #31
 80096a2:	d52a      	bpl.n	80096fa <_svfprintf_r+0x90a>
 80096a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a6:	eb08 0603 	add.w	r6, r8, r3
 80096aa:	2367      	movs	r3, #103	; 0x67
 80096ac:	e7dd      	b.n	800966a <_svfprintf_r+0x87a>
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	eb03 0602 	add.w	r6, r3, r2
 80096ba:	dcf6      	bgt.n	80096aa <_svfprintf_r+0x8ba>
 80096bc:	f1c8 0301 	rsb	r3, r8, #1
 80096c0:	441e      	add	r6, r3
 80096c2:	e7f2      	b.n	80096aa <_svfprintf_r+0x8ba>
 80096c4:	4646      	mov	r6, r8
 80096c6:	e7cf      	b.n	8009668 <_svfprintf_r+0x878>
 80096c8:	2366      	movs	r3, #102	; 0x66
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	2601      	movs	r6, #1
 80096ce:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	d025      	beq.n	8009722 <_svfprintf_r+0x932>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f1b8 0f00 	cmp.w	r8, #0
 80096dc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80096e0:	f77f ae6d 	ble.w	80093be <_svfprintf_r+0x5ce>
 80096e4:	9b08      	ldr	r3, [sp, #32]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2bff      	cmp	r3, #255	; 0xff
 80096ea:	d108      	bne.n	80096fe <_svfprintf_r+0x90e>
 80096ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096f0:	4413      	add	r3, r2
 80096f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f4:	fb02 6603 	mla	r6, r2, r3, r6
 80096f8:	e661      	b.n	80093be <_svfprintf_r+0x5ce>
 80096fa:	4646      	mov	r6, r8
 80096fc:	e7d5      	b.n	80096aa <_svfprintf_r+0x8ba>
 80096fe:	4543      	cmp	r3, r8
 8009700:	daf4      	bge.n	80096ec <_svfprintf_r+0x8fc>
 8009702:	eba8 0803 	sub.w	r8, r8, r3
 8009706:	9b08      	ldr	r3, [sp, #32]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	b133      	cbz	r3, 800971a <_svfprintf_r+0x92a>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	3301      	adds	r3, #1
 8009710:	9307      	str	r3, [sp, #28]
 8009712:	9b08      	ldr	r3, [sp, #32]
 8009714:	3301      	adds	r3, #1
 8009716:	9308      	str	r3, [sp, #32]
 8009718:	e7e4      	b.n	80096e4 <_svfprintf_r+0x8f4>
 800971a:	9b06      	ldr	r3, [sp, #24]
 800971c:	3301      	adds	r3, #1
 800971e:	9306      	str	r3, [sp, #24]
 8009720:	e7e0      	b.n	80096e4 <_svfprintf_r+0x8f4>
 8009722:	9b07      	ldr	r3, [sp, #28]
 8009724:	9306      	str	r3, [sp, #24]
 8009726:	e64a      	b.n	80093be <_svfprintf_r+0x5ce>
 8009728:	f108 0304 	add.w	r3, r8, #4
 800972c:	06aa      	lsls	r2, r5, #26
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	d50c      	bpl.n	800974c <_svfprintf_r+0x95c>
 8009732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009734:	f8d8 3000 	ldr.w	r3, [r8]
 8009738:	990a      	ldr	r1, [sp, #40]	; 0x28
 800973a:	17d2      	asrs	r2, r2, #31
 800973c:	e9c3 1200 	strd	r1, r2, [r3]
 8009740:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009744:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009748:	f7ff bb8f 	b.w	8008e6a <_svfprintf_r+0x7a>
 800974c:	06eb      	lsls	r3, r5, #27
 800974e:	d504      	bpl.n	800975a <_svfprintf_r+0x96a>
 8009750:	f8d8 3000 	ldr.w	r3, [r8]
 8009754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	e7f2      	b.n	8009740 <_svfprintf_r+0x950>
 800975a:	066e      	lsls	r6, r5, #25
 800975c:	d504      	bpl.n	8009768 <_svfprintf_r+0x978>
 800975e:	f8d8 3000 	ldr.w	r3, [r8]
 8009762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	e7eb      	b.n	8009740 <_svfprintf_r+0x950>
 8009768:	05ad      	lsls	r5, r5, #22
 800976a:	d5f1      	bpl.n	8009750 <_svfprintf_r+0x960>
 800976c:	f8d8 3000 	ldr.w	r3, [r8]
 8009770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7e4      	b.n	8009740 <_svfprintf_r+0x950>
 8009776:	f045 0510 	orr.w	r5, r5, #16
 800977a:	f015 0320 	ands.w	r3, r5, #32
 800977e:	d020      	beq.n	80097c2 <_svfprintf_r+0x9d2>
 8009780:	f108 0307 	add.w	r3, r8, #7
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	461a      	mov	r2, r3
 800978a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800978e:	f852 8b08 	ldr.w	r8, [r2], #8
 8009792:	9205      	str	r2, [sp, #20]
 8009794:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8009798:	2300      	movs	r3, #0
 800979a:	2200      	movs	r2, #0
 800979c:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 80097a0:	1c72      	adds	r2, r6, #1
 80097a2:	f000 84c3 	beq.w	800a12c <_svfprintf_r+0x133c>
 80097a6:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80097aa:	9202      	str	r2, [sp, #8]
 80097ac:	ea58 0209 	orrs.w	r2, r8, r9
 80097b0:	f040 84c1 	bne.w	800a136 <_svfprintf_r+0x1346>
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	f000 810d 	beq.w	80099d4 <_svfprintf_r+0xbe4>
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	f040 84be 	bne.w	800a13c <_svfprintf_r+0x134c>
 80097c0:	e0ad      	b.n	800991e <_svfprintf_r+0xb2e>
 80097c2:	4642      	mov	r2, r8
 80097c4:	f015 0910 	ands.w	r9, r5, #16
 80097c8:	f852 8b04 	ldr.w	r8, [r2], #4
 80097cc:	9205      	str	r2, [sp, #20]
 80097ce:	d001      	beq.n	80097d4 <_svfprintf_r+0x9e4>
 80097d0:	4699      	mov	r9, r3
 80097d2:	e7df      	b.n	8009794 <_svfprintf_r+0x9a4>
 80097d4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80097d8:	d002      	beq.n	80097e0 <_svfprintf_r+0x9f0>
 80097da:	fa1f f888 	uxth.w	r8, r8
 80097de:	e7d9      	b.n	8009794 <_svfprintf_r+0x9a4>
 80097e0:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 80097e4:	d0d6      	beq.n	8009794 <_svfprintf_r+0x9a4>
 80097e6:	fa5f f888 	uxtb.w	r8, r8
 80097ea:	e7f1      	b.n	80097d0 <_svfprintf_r+0x9e0>
 80097ec:	4643      	mov	r3, r8
 80097ee:	2278      	movs	r2, #120	; 0x78
 80097f0:	f853 8b04 	ldr.w	r8, [r3], #4
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	2330      	movs	r3, #48	; 0x30
 80097f8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80097fc:	4bae      	ldr	r3, [pc, #696]	; (8009ab8 <_svfprintf_r+0xcc8>)
 80097fe:	9312      	str	r3, [sp, #72]	; 0x48
 8009800:	f04f 0900 	mov.w	r9, #0
 8009804:	f045 0502 	orr.w	r5, r5, #2
 8009808:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 800980c:	2302      	movs	r3, #2
 800980e:	9204      	str	r2, [sp, #16]
 8009810:	e7c3      	b.n	800979a <_svfprintf_r+0x9aa>
 8009812:	4643      	mov	r3, r8
 8009814:	1c70      	adds	r0, r6, #1
 8009816:	f853 ab04 	ldr.w	sl, [r3], #4
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	f04f 0800 	mov.w	r8, #0
 8009820:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8009824:	d010      	beq.n	8009848 <_svfprintf_r+0xa58>
 8009826:	4632      	mov	r2, r6
 8009828:	4641      	mov	r1, r8
 800982a:	4650      	mov	r0, sl
 800982c:	f7f6 fd58 	bl	80002e0 <memchr>
 8009830:	9002      	str	r0, [sp, #8]
 8009832:	2800      	cmp	r0, #0
 8009834:	f000 80e5 	beq.w	8009a02 <_svfprintf_r+0xc12>
 8009838:	e9cd 8806 	strd	r8, r8, [sp, #24]
 800983c:	eba0 060a 	sub.w	r6, r0, sl
 8009840:	f8cd 8008 	str.w	r8, [sp, #8]
 8009844:	46c1      	mov	r9, r8
 8009846:	e5c2      	b.n	80093ce <_svfprintf_r+0x5de>
 8009848:	4650      	mov	r0, sl
 800984a:	f7f6 fd99 	bl	8000380 <strlen>
 800984e:	46c1      	mov	r9, r8
 8009850:	4606      	mov	r6, r0
 8009852:	f8cd 8008 	str.w	r8, [sp, #8]
 8009856:	464b      	mov	r3, r9
 8009858:	e48a      	b.n	8009170 <_svfprintf_r+0x380>
 800985a:	f045 0510 	orr.w	r5, r5, #16
 800985e:	f015 0320 	ands.w	r3, r5, #32
 8009862:	d00b      	beq.n	800987c <_svfprintf_r+0xa8c>
 8009864:	f108 0307 	add.w	r3, r8, #7
 8009868:	f023 0307 	bic.w	r3, r3, #7
 800986c:	461a      	mov	r2, r3
 800986e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009872:	f852 8b08 	ldr.w	r8, [r2], #8
 8009876:	9205      	str	r2, [sp, #20]
 8009878:	2301      	movs	r3, #1
 800987a:	e78e      	b.n	800979a <_svfprintf_r+0x9aa>
 800987c:	4642      	mov	r2, r8
 800987e:	f015 0910 	ands.w	r9, r5, #16
 8009882:	f852 8b04 	ldr.w	r8, [r2], #4
 8009886:	9205      	str	r2, [sp, #20]
 8009888:	d001      	beq.n	800988e <_svfprintf_r+0xa9e>
 800988a:	4699      	mov	r9, r3
 800988c:	e7f4      	b.n	8009878 <_svfprintf_r+0xa88>
 800988e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8009892:	d002      	beq.n	800989a <_svfprintf_r+0xaaa>
 8009894:	fa1f f888 	uxth.w	r8, r8
 8009898:	e7ee      	b.n	8009878 <_svfprintf_r+0xa88>
 800989a:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800989e:	d0eb      	beq.n	8009878 <_svfprintf_r+0xa88>
 80098a0:	fa5f f888 	uxtb.w	r8, r8
 80098a4:	e7f1      	b.n	800988a <_svfprintf_r+0xa9a>
 80098a6:	4b85      	ldr	r3, [pc, #532]	; (8009abc <_svfprintf_r+0xccc>)
 80098a8:	9312      	str	r3, [sp, #72]	; 0x48
 80098aa:	f015 0320 	ands.w	r3, r5, #32
 80098ae:	d01c      	beq.n	80098ea <_svfprintf_r+0xafa>
 80098b0:	f108 0307 	add.w	r3, r8, #7
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80098be:	f852 8b08 	ldr.w	r8, [r2], #8
 80098c2:	9205      	str	r2, [sp, #20]
 80098c4:	07e9      	lsls	r1, r5, #31
 80098c6:	d50a      	bpl.n	80098de <_svfprintf_r+0xaee>
 80098c8:	ea58 0309 	orrs.w	r3, r8, r9
 80098cc:	d007      	beq.n	80098de <_svfprintf_r+0xaee>
 80098ce:	2330      	movs	r3, #48	; 0x30
 80098d0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80098da:	f045 0502 	orr.w	r5, r5, #2
 80098de:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80098e2:	2302      	movs	r3, #2
 80098e4:	e759      	b.n	800979a <_svfprintf_r+0x9aa>
 80098e6:	4b74      	ldr	r3, [pc, #464]	; (8009ab8 <_svfprintf_r+0xcc8>)
 80098e8:	e7de      	b.n	80098a8 <_svfprintf_r+0xab8>
 80098ea:	4642      	mov	r2, r8
 80098ec:	f015 0910 	ands.w	r9, r5, #16
 80098f0:	f852 8b04 	ldr.w	r8, [r2], #4
 80098f4:	9205      	str	r2, [sp, #20]
 80098f6:	d001      	beq.n	80098fc <_svfprintf_r+0xb0c>
 80098f8:	4699      	mov	r9, r3
 80098fa:	e7e3      	b.n	80098c4 <_svfprintf_r+0xad4>
 80098fc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8009900:	d002      	beq.n	8009908 <_svfprintf_r+0xb18>
 8009902:	fa1f f888 	uxth.w	r8, r8
 8009906:	e7dd      	b.n	80098c4 <_svfprintf_r+0xad4>
 8009908:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 800990c:	d0da      	beq.n	80098c4 <_svfprintf_r+0xad4>
 800990e:	fa5f f888 	uxtb.w	r8, r8
 8009912:	e7f1      	b.n	80098f8 <_svfprintf_r+0xb08>
 8009914:	f1b8 0f0a 	cmp.w	r8, #10
 8009918:	f179 0300 	sbcs.w	r3, r9, #0
 800991c:	d207      	bcs.n	800992e <_svfprintf_r+0xb3e>
 800991e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009922:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8009926:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 800992a:	f000 bc25 	b.w	800a178 <_svfprintf_r+0x1388>
 800992e:	2300      	movs	r3, #0
 8009930:	9303      	str	r3, [sp, #12]
 8009932:	9b02      	ldr	r3, [sp, #8]
 8009934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009938:	ad4a      	add	r5, sp, #296	; 0x128
 800993a:	9306      	str	r3, [sp, #24]
 800993c:	220a      	movs	r2, #10
 800993e:	2300      	movs	r3, #0
 8009940:	4640      	mov	r0, r8
 8009942:	4649      	mov	r1, r9
 8009944:	f7f6 fd24 	bl	8000390 <__aeabi_uldivmod>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	3301      	adds	r3, #1
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	3230      	adds	r2, #48	; 0x30
 8009952:	f105 3aff 	add.w	sl, r5, #4294967295
 8009956:	f805 2c01 	strb.w	r2, [r5, #-1]
 800995a:	b1db      	cbz	r3, 8009994 <_svfprintf_r+0xba4>
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	9a03      	ldr	r2, [sp, #12]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d116      	bne.n	8009994 <_svfprintf_r+0xba4>
 8009966:	2aff      	cmp	r2, #255	; 0xff
 8009968:	d014      	beq.n	8009994 <_svfprintf_r+0xba4>
 800996a:	f1b8 0f0a 	cmp.w	r8, #10
 800996e:	f179 0300 	sbcs.w	r3, r9, #0
 8009972:	d30f      	bcc.n	8009994 <_svfprintf_r+0xba4>
 8009974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009976:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009978:	ebaa 0a03 	sub.w	sl, sl, r3
 800997c:	461a      	mov	r2, r3
 800997e:	4650      	mov	r0, sl
 8009980:	f002 f916 	bl	800bbb0 <strncpy>
 8009984:	9b08      	ldr	r3, [sp, #32]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	b11b      	cbz	r3, 8009992 <_svfprintf_r+0xba2>
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	3301      	adds	r3, #1
 800998e:	9308      	str	r3, [sp, #32]
 8009990:	2300      	movs	r3, #0
 8009992:	9303      	str	r3, [sp, #12]
 8009994:	2300      	movs	r3, #0
 8009996:	220a      	movs	r2, #10
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f6 fcf8 	bl	8000390 <__aeabi_uldivmod>
 80099a0:	f1b8 0f0a 	cmp.w	r8, #10
 80099a4:	f179 0300 	sbcs.w	r3, r9, #0
 80099a8:	f0c0 83e6 	bcc.w	800a178 <_svfprintf_r+0x1388>
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	4655      	mov	r5, sl
 80099b2:	e7c3      	b.n	800993c <_svfprintf_r+0xb4c>
 80099b4:	f008 030f 	and.w	r3, r8, #15
 80099b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099ba:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80099be:	5cd3      	ldrb	r3, [r2, r3]
 80099c0:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 80099c4:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 80099c8:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80099cc:	ea58 0309 	orrs.w	r3, r8, r9
 80099d0:	d1f0      	bne.n	80099b4 <_svfprintf_r+0xbc4>
 80099d2:	e3d1      	b.n	800a178 <_svfprintf_r+0x1388>
 80099d4:	b92b      	cbnz	r3, 80099e2 <_svfprintf_r+0xbf2>
 80099d6:	07e8      	lsls	r0, r5, #31
 80099d8:	d503      	bpl.n	80099e2 <_svfprintf_r+0xbf2>
 80099da:	2330      	movs	r3, #48	; 0x30
 80099dc:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 80099e0:	e7a1      	b.n	8009926 <_svfprintf_r+0xb36>
 80099e2:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 80099e6:	e3c7      	b.n	800a178 <_svfprintf_r+0x1388>
 80099e8:	9b04      	ldr	r3, [sp, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 838e 	beq.w	800a10c <_svfprintf_r+0x131c>
 80099f0:	2000      	movs	r0, #0
 80099f2:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 80099f6:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 80099fa:	f8cd 8014 	str.w	r8, [sp, #20]
 80099fe:	f7ff bb4e 	b.w	800909e <_svfprintf_r+0x2ae>
 8009a02:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009a06:	e726      	b.n	8009856 <_svfprintf_r+0xa66>
 8009a08:	2110      	movs	r1, #16
 8009a0a:	6061      	str	r1, [r4, #4]
 8009a0c:	2a07      	cmp	r2, #7
 8009a0e:	4461      	add	r1, ip
 8009a10:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8009a14:	dd0a      	ble.n	8009a2c <_svfprintf_r+0xc3c>
 8009a16:	aa1e      	add	r2, sp, #120	; 0x78
 8009a18:	4659      	mov	r1, fp
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	9315      	str	r3, [sp, #84]	; 0x54
 8009a1e:	f002 f8da 	bl	800bbd6 <__ssprint_r>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	f040 834f 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a2a:	a821      	add	r0, sp, #132	; 0x84
 8009a2c:	3b10      	subs	r3, #16
 8009a2e:	4604      	mov	r4, r0
 8009a30:	e4e8      	b.n	8009404 <_svfprintf_r+0x614>
 8009a32:	4604      	mov	r4, r0
 8009a34:	e502      	b.n	800943c <_svfprintf_r+0x64c>
 8009a36:	aa1e      	add	r2, sp, #120	; 0x78
 8009a38:	4659      	mov	r1, fp
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	f002 f8cb 	bl	800bbd6 <__ssprint_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f040 8340 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009a46:	ac21      	add	r4, sp, #132	; 0x84
 8009a48:	e50a      	b.n	8009460 <_svfprintf_r+0x670>
 8009a4a:	aa1e      	add	r2, sp, #120	; 0x78
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f002 f8c1 	bl	800bbd6 <__ssprint_r>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f040 8336 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009a5a:	ac21      	add	r4, sp, #132	; 0x84
 8009a5c:	e510      	b.n	8009480 <_svfprintf_r+0x690>
 8009a5e:	2110      	movs	r1, #16
 8009a60:	6061      	str	r1, [r4, #4]
 8009a62:	2a07      	cmp	r2, #7
 8009a64:	4461      	add	r1, ip
 8009a66:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8009a6a:	dd0a      	ble.n	8009a82 <_svfprintf_r+0xc92>
 8009a6c:	aa1e      	add	r2, sp, #120	; 0x78
 8009a6e:	4659      	mov	r1, fp
 8009a70:	4638      	mov	r0, r7
 8009a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a74:	f002 f8af 	bl	800bbd6 <__ssprint_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f040 8324 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009a7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a80:	a821      	add	r0, sp, #132	; 0x84
 8009a82:	3b10      	subs	r3, #16
 8009a84:	4604      	mov	r4, r0
 8009a86:	e503      	b.n	8009490 <_svfprintf_r+0x6a0>
 8009a88:	4604      	mov	r4, r0
 8009a8a:	e51d      	b.n	80094c8 <_svfprintf_r+0x6d8>
 8009a8c:	2010      	movs	r0, #16
 8009a8e:	4403      	add	r3, r0
 8009a90:	2a07      	cmp	r2, #7
 8009a92:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8009a96:	6060      	str	r0, [r4, #4]
 8009a98:	dd08      	ble.n	8009aac <_svfprintf_r+0xcbc>
 8009a9a:	aa1e      	add	r2, sp, #120	; 0x78
 8009a9c:	4659      	mov	r1, fp
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f002 f899 	bl	800bbd6 <__ssprint_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f040 830e 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009aaa:	a921      	add	r1, sp, #132	; 0x84
 8009aac:	f1a9 0910 	sub.w	r9, r9, #16
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	e50e      	b.n	80094d2 <_svfprintf_r+0x6e2>
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	e529      	b.n	800950c <_svfprintf_r+0x71c>
 8009ab8:	0800d700 	.word	0x0800d700
 8009abc:	0800d711 	.word	0x0800d711
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	2b65      	cmp	r3, #101	; 0x65
 8009ac4:	f340 8252 	ble.w	8009f6c <_svfprintf_r+0x117c>
 8009ac8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad0:	d16b      	bne.n	8009baa <_svfprintf_r+0xdba>
 8009ad2:	4b74      	ldr	r3, [pc, #464]	; (8009ca4 <_svfprintf_r+0xeb4>)
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4418      	add	r0, r3
 8009ada:	6063      	str	r3, [r4, #4]
 8009adc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ade:	9020      	str	r0, [sp, #128]	; 0x80
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	2b07      	cmp	r3, #7
 8009ae4:	931f      	str	r3, [sp, #124]	; 0x7c
 8009ae6:	dc39      	bgt.n	8009b5c <_svfprintf_r+0xd6c>
 8009ae8:	3408      	adds	r4, #8
 8009aea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009aec:	9a03      	ldr	r2, [sp, #12]
 8009aee:	4293      	cmp	r3, r2
 8009af0:	db02      	blt.n	8009af8 <_svfprintf_r+0xd08>
 8009af2:	07ea      	lsls	r2, r5, #31
 8009af4:	f57f ad19 	bpl.w	800952a <_svfprintf_r+0x73a>
 8009af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b00:	6063      	str	r3, [r4, #4]
 8009b02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b04:	4413      	add	r3, r2
 8009b06:	9320      	str	r3, [sp, #128]	; 0x80
 8009b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	2b07      	cmp	r3, #7
 8009b0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b10:	dc2e      	bgt.n	8009b70 <_svfprintf_r+0xd80>
 8009b12:	3408      	adds	r4, #8
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	1e5e      	subs	r6, r3, #1
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	f77f ad06 	ble.w	800952a <_svfprintf_r+0x73a>
 8009b1e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8009ca8 <_svfprintf_r+0xeb8>
 8009b22:	f04f 0910 	mov.w	r9, #16
 8009b26:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009b2a:	2e10      	cmp	r6, #16
 8009b2c:	f103 0301 	add.w	r3, r3, #1
 8009b30:	f104 0108 	add.w	r1, r4, #8
 8009b34:	f8c4 8000 	str.w	r8, [r4]
 8009b38:	dc24      	bgt.n	8009b84 <_svfprintf_r+0xd94>
 8009b3a:	6066      	str	r6, [r4, #4]
 8009b3c:	2b07      	cmp	r3, #7
 8009b3e:	4416      	add	r6, r2
 8009b40:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8009b44:	f340 829d 	ble.w	800a082 <_svfprintf_r+0x1292>
 8009b48:	aa1e      	add	r2, sp, #120	; 0x78
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f002 f842 	bl	800bbd6 <__ssprint_r>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f040 82b7 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009b58:	ac21      	add	r4, sp, #132	; 0x84
 8009b5a:	e4e6      	b.n	800952a <_svfprintf_r+0x73a>
 8009b5c:	aa1e      	add	r2, sp, #120	; 0x78
 8009b5e:	4659      	mov	r1, fp
 8009b60:	4638      	mov	r0, r7
 8009b62:	f002 f838 	bl	800bbd6 <__ssprint_r>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f040 82ad 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009b6c:	ac21      	add	r4, sp, #132	; 0x84
 8009b6e:	e7bc      	b.n	8009aea <_svfprintf_r+0xcfa>
 8009b70:	aa1e      	add	r2, sp, #120	; 0x78
 8009b72:	4659      	mov	r1, fp
 8009b74:	4638      	mov	r0, r7
 8009b76:	f002 f82e 	bl	800bbd6 <__ssprint_r>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	f040 82a3 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009b80:	ac21      	add	r4, sp, #132	; 0x84
 8009b82:	e7c7      	b.n	8009b14 <_svfprintf_r+0xd24>
 8009b84:	3210      	adds	r2, #16
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8009b8c:	f8c4 9004 	str.w	r9, [r4, #4]
 8009b90:	dd08      	ble.n	8009ba4 <_svfprintf_r+0xdb4>
 8009b92:	aa1e      	add	r2, sp, #120	; 0x78
 8009b94:	4659      	mov	r1, fp
 8009b96:	4638      	mov	r0, r7
 8009b98:	f002 f81d 	bl	800bbd6 <__ssprint_r>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f040 8292 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009ba2:	a921      	add	r1, sp, #132	; 0x84
 8009ba4:	3e10      	subs	r6, #16
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	e7bd      	b.n	8009b26 <_svfprintf_r+0xd36>
 8009baa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dc7d      	bgt.n	8009cac <_svfprintf_r+0xebc>
 8009bb0:	4b3c      	ldr	r3, [pc, #240]	; (8009ca4 <_svfprintf_r+0xeb4>)
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4418      	add	r0, r3
 8009bb8:	6063      	str	r3, [r4, #4]
 8009bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bbc:	9020      	str	r0, [sp, #128]	; 0x80
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	2b07      	cmp	r3, #7
 8009bc2:	931f      	str	r3, [sp, #124]	; 0x7c
 8009bc4:	dc47      	bgt.n	8009c56 <_svfprintf_r+0xe66>
 8009bc6:	3408      	adds	r4, #8
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	f005 0101 	and.w	r1, r5, #1
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	f43f aca8 	beq.w	800952a <_svfprintf_r+0x73a>
 8009bda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009be0:	6062      	str	r2, [r4, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	9320      	str	r3, [sp, #128]	; 0x80
 8009be6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009be8:	3301      	adds	r3, #1
 8009bea:	2b07      	cmp	r3, #7
 8009bec:	931f      	str	r3, [sp, #124]	; 0x7c
 8009bee:	dc3c      	bgt.n	8009c6a <_svfprintf_r+0xe7a>
 8009bf0:	f104 0308 	add.w	r3, r4, #8
 8009bf4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	da1c      	bge.n	8009c34 <_svfprintf_r+0xe44>
 8009bfa:	4c2b      	ldr	r4, [pc, #172]	; (8009ca8 <_svfprintf_r+0xeb8>)
 8009bfc:	4276      	negs	r6, r6
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f04f 0810 	mov.w	r8, #16
 8009c04:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8009c08:	2e10      	cmp	r6, #16
 8009c0a:	f101 0101 	add.w	r1, r1, #1
 8009c0e:	f103 0308 	add.w	r3, r3, #8
 8009c12:	6014      	str	r4, [r2, #0]
 8009c14:	dc33      	bgt.n	8009c7e <_svfprintf_r+0xe8e>
 8009c16:	6056      	str	r6, [r2, #4]
 8009c18:	2907      	cmp	r1, #7
 8009c1a:	4406      	add	r6, r0
 8009c1c:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 8009c20:	dd08      	ble.n	8009c34 <_svfprintf_r+0xe44>
 8009c22:	aa1e      	add	r2, sp, #120	; 0x78
 8009c24:	4659      	mov	r1, fp
 8009c26:	4638      	mov	r0, r7
 8009c28:	f001 ffd5 	bl	800bbd6 <__ssprint_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f040 824a 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009c32:	ab21      	add	r3, sp, #132	; 0x84
 8009c34:	9a03      	ldr	r2, [sp, #12]
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	9903      	ldr	r1, [sp, #12]
 8009c3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c3c:	f8c3 a000 	str.w	sl, [r3]
 8009c40:	440a      	add	r2, r1
 8009c42:	9220      	str	r2, [sp, #128]	; 0x80
 8009c44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c46:	3201      	adds	r2, #1
 8009c48:	2a07      	cmp	r2, #7
 8009c4a:	921f      	str	r2, [sp, #124]	; 0x7c
 8009c4c:	f73f af7c 	bgt.w	8009b48 <_svfprintf_r+0xd58>
 8009c50:	f103 0408 	add.w	r4, r3, #8
 8009c54:	e469      	b.n	800952a <_svfprintf_r+0x73a>
 8009c56:	aa1e      	add	r2, sp, #120	; 0x78
 8009c58:	4659      	mov	r1, fp
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	f001 ffbb 	bl	800bbd6 <__ssprint_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	f040 8230 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009c66:	ac21      	add	r4, sp, #132	; 0x84
 8009c68:	e7ae      	b.n	8009bc8 <_svfprintf_r+0xdd8>
 8009c6a:	aa1e      	add	r2, sp, #120	; 0x78
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	4638      	mov	r0, r7
 8009c70:	f001 ffb1 	bl	800bbd6 <__ssprint_r>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f040 8226 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009c7a:	ab21      	add	r3, sp, #132	; 0x84
 8009c7c:	e7ba      	b.n	8009bf4 <_svfprintf_r+0xe04>
 8009c7e:	3010      	adds	r0, #16
 8009c80:	2907      	cmp	r1, #7
 8009c82:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 8009c86:	f8c2 8004 	str.w	r8, [r2, #4]
 8009c8a:	dd08      	ble.n	8009c9e <_svfprintf_r+0xeae>
 8009c8c:	aa1e      	add	r2, sp, #120	; 0x78
 8009c8e:	4659      	mov	r1, fp
 8009c90:	4638      	mov	r0, r7
 8009c92:	f001 ffa0 	bl	800bbd6 <__ssprint_r>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8215 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009c9c:	ab21      	add	r3, sp, #132	; 0x84
 8009c9e:	3e10      	subs	r6, #16
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	e7af      	b.n	8009c04 <_svfprintf_r+0xe14>
 8009ca4:	0800d722 	.word	0x0800d722
 8009ca8:	0800d734 	.word	0x0800d734
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	4543      	cmp	r3, r8
 8009cb0:	bfa8      	it	ge
 8009cb2:	4643      	movge	r3, r8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	4699      	mov	r9, r3
 8009cb8:	dd0a      	ble.n	8009cd0 <_svfprintf_r+0xee0>
 8009cba:	4418      	add	r0, r3
 8009cbc:	e9c4 a300 	strd	sl, r3, [r4]
 8009cc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cc2:	9020      	str	r0, [sp, #128]	; 0x80
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	2b07      	cmp	r3, #7
 8009cc8:	931f      	str	r3, [sp, #124]	; 0x7c
 8009cca:	f300 8094 	bgt.w	8009df6 <_svfprintf_r+0x1006>
 8009cce:	3408      	adds	r4, #8
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	bfac      	ite	ge
 8009cd6:	eba8 0609 	subge.w	r6, r8, r9
 8009cda:	4646      	movlt	r6, r8
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	dd1c      	ble.n	8009d1a <_svfprintf_r+0xf2a>
 8009ce0:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 800a124 <_svfprintf_r+0x1334>
 8009ce4:	f8c4 9000 	str.w	r9, [r4]
 8009ce8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009cec:	2e10      	cmp	r6, #16
 8009cee:	f103 0301 	add.w	r3, r3, #1
 8009cf2:	f104 0108 	add.w	r1, r4, #8
 8009cf6:	f300 8088 	bgt.w	8009e0a <_svfprintf_r+0x101a>
 8009cfa:	6066      	str	r6, [r4, #4]
 8009cfc:	2b07      	cmp	r3, #7
 8009cfe:	4416      	add	r6, r2
 8009d00:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 8009d04:	f340 8094 	ble.w	8009e30 <_svfprintf_r+0x1040>
 8009d08:	aa1e      	add	r2, sp, #120	; 0x78
 8009d0a:	4659      	mov	r1, fp
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f001 ff62 	bl	800bbd6 <__ssprint_r>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f040 81d7 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009d18:	ac21      	add	r4, sp, #132	; 0x84
 8009d1a:	056b      	lsls	r3, r5, #21
 8009d1c:	eb0a 0608 	add.w	r6, sl, r8
 8009d20:	d50c      	bpl.n	8009d3c <_svfprintf_r+0xf4c>
 8009d22:	9b07      	ldr	r3, [sp, #28]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 8085 	bne.w	8009e34 <_svfprintf_r+0x1044>
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8084 	bne.w	8009e3a <_svfprintf_r+0x104a>
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	4453      	add	r3, sl
 8009d36:	429e      	cmp	r6, r3
 8009d38:	bf28      	it	cs
 8009d3a:	461e      	movcs	r6, r3
 8009d3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d3e:	9a03      	ldr	r2, [sp, #12]
 8009d40:	4293      	cmp	r3, r2
 8009d42:	db01      	blt.n	8009d48 <_svfprintf_r+0xf58>
 8009d44:	07e8      	lsls	r0, r5, #31
 8009d46:	d50e      	bpl.n	8009d66 <_svfprintf_r+0xf76>
 8009d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d54:	4413      	add	r3, r2
 8009d56:	9320      	str	r3, [sp, #128]	; 0x80
 8009d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	2b07      	cmp	r3, #7
 8009d5e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d60:	f300 80f0 	bgt.w	8009f44 <_svfprintf_r+0x1154>
 8009d64:	3408      	adds	r4, #8
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	9903      	ldr	r1, [sp, #12]
 8009d6a:	eb0a 0203 	add.w	r2, sl, r3
 8009d6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009d70:	1b92      	subs	r2, r2, r6
 8009d72:	eba1 0803 	sub.w	r8, r1, r3
 8009d76:	4590      	cmp	r8, r2
 8009d78:	bfa8      	it	ge
 8009d7a:	4690      	movge	r8, r2
 8009d7c:	f1b8 0f00 	cmp.w	r8, #0
 8009d80:	dd0b      	ble.n	8009d9a <_svfprintf_r+0xfaa>
 8009d82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d84:	4443      	add	r3, r8
 8009d86:	9320      	str	r3, [sp, #128]	; 0x80
 8009d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	2b07      	cmp	r3, #7
 8009d8e:	e9c4 6800 	strd	r6, r8, [r4]
 8009d92:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d94:	f300 80e0 	bgt.w	8009f58 <_svfprintf_r+0x1168>
 8009d98:	3408      	adds	r4, #8
 8009d9a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	f1b8 0f00 	cmp.w	r8, #0
 8009da2:	eba3 0606 	sub.w	r6, r3, r6
 8009da6:	bfa8      	it	ge
 8009da8:	eba6 0608 	subge.w	r6, r6, r8
 8009dac:	2e00      	cmp	r6, #0
 8009dae:	f77f abbc 	ble.w	800952a <_svfprintf_r+0x73a>
 8009db2:	f8df 8370 	ldr.w	r8, [pc, #880]	; 800a124 <_svfprintf_r+0x1334>
 8009db6:	f04f 0910 	mov.w	r9, #16
 8009dba:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009dbe:	2e10      	cmp	r6, #16
 8009dc0:	f103 0301 	add.w	r3, r3, #1
 8009dc4:	f104 0108 	add.w	r1, r4, #8
 8009dc8:	f8c4 8000 	str.w	r8, [r4]
 8009dcc:	f77f aeb5 	ble.w	8009b3a <_svfprintf_r+0xd4a>
 8009dd0:	3210      	adds	r2, #16
 8009dd2:	2b07      	cmp	r3, #7
 8009dd4:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8009dd8:	f8c4 9004 	str.w	r9, [r4, #4]
 8009ddc:	dd08      	ble.n	8009df0 <_svfprintf_r+0x1000>
 8009dde:	aa1e      	add	r2, sp, #120	; 0x78
 8009de0:	4659      	mov	r1, fp
 8009de2:	4638      	mov	r0, r7
 8009de4:	f001 fef7 	bl	800bbd6 <__ssprint_r>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f040 816c 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009dee:	a921      	add	r1, sp, #132	; 0x84
 8009df0:	3e10      	subs	r6, #16
 8009df2:	460c      	mov	r4, r1
 8009df4:	e7e1      	b.n	8009dba <_svfprintf_r+0xfca>
 8009df6:	aa1e      	add	r2, sp, #120	; 0x78
 8009df8:	4659      	mov	r1, fp
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f001 feeb 	bl	800bbd6 <__ssprint_r>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f040 8160 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009e06:	ac21      	add	r4, sp, #132	; 0x84
 8009e08:	e762      	b.n	8009cd0 <_svfprintf_r+0xee0>
 8009e0a:	2010      	movs	r0, #16
 8009e0c:	4402      	add	r2, r0
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8009e14:	6060      	str	r0, [r4, #4]
 8009e16:	dd08      	ble.n	8009e2a <_svfprintf_r+0x103a>
 8009e18:	aa1e      	add	r2, sp, #120	; 0x78
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f001 feda 	bl	800bbd6 <__ssprint_r>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f040 814f 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009e28:	a921      	add	r1, sp, #132	; 0x84
 8009e2a:	3e10      	subs	r6, #16
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	e759      	b.n	8009ce4 <_svfprintf_r+0xef4>
 8009e30:	460c      	mov	r4, r1
 8009e32:	e772      	b.n	8009d1a <_svfprintf_r+0xf2a>
 8009e34:	9b06      	ldr	r3, [sp, #24]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d053      	beq.n	8009ee2 <_svfprintf_r+0x10f2>
 8009e3a:	9b06      	ldr	r3, [sp, #24]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	9306      	str	r3, [sp, #24]
 8009e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e48:	6063      	str	r3, [r4, #4]
 8009e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e4c:	4413      	add	r3, r2
 8009e4e:	9320      	str	r3, [sp, #128]	; 0x80
 8009e50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e52:	3301      	adds	r3, #1
 8009e54:	2b07      	cmp	r3, #7
 8009e56:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e58:	dc4a      	bgt.n	8009ef0 <_svfprintf_r+0x1100>
 8009e5a:	3408      	adds	r4, #8
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	9a08      	ldr	r2, [sp, #32]
 8009e60:	eb0a 0903 	add.w	r9, sl, r3
 8009e64:	eba9 0306 	sub.w	r3, r9, r6
 8009e68:	f892 9000 	ldrb.w	r9, [r2]
 8009e6c:	4599      	cmp	r9, r3
 8009e6e:	bfa8      	it	ge
 8009e70:	4699      	movge	r9, r3
 8009e72:	f1b9 0f00 	cmp.w	r9, #0
 8009e76:	dd0a      	ble.n	8009e8e <_svfprintf_r+0x109e>
 8009e78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e7a:	444b      	add	r3, r9
 8009e7c:	9320      	str	r3, [sp, #128]	; 0x80
 8009e7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e80:	3301      	adds	r3, #1
 8009e82:	2b07      	cmp	r3, #7
 8009e84:	e9c4 6900 	strd	r6, r9, [r4]
 8009e88:	931f      	str	r3, [sp, #124]	; 0x7c
 8009e8a:	dc3b      	bgt.n	8009f04 <_svfprintf_r+0x1114>
 8009e8c:	3408      	adds	r4, #8
 8009e8e:	9b08      	ldr	r3, [sp, #32]
 8009e90:	f893 8000 	ldrb.w	r8, [r3]
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	bfa8      	it	ge
 8009e9a:	eba8 0809 	subge.w	r8, r8, r9
 8009e9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ea2:	dd1a      	ble.n	8009eda <_svfprintf_r+0x10ea>
 8009ea4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009ea8:	489e      	ldr	r0, [pc, #632]	; (800a124 <_svfprintf_r+0x1334>)
 8009eaa:	6020      	str	r0, [r4, #0]
 8009eac:	f1b8 0f10 	cmp.w	r8, #16
 8009eb0:	f103 0301 	add.w	r3, r3, #1
 8009eb4:	f104 0108 	add.w	r1, r4, #8
 8009eb8:	dc2e      	bgt.n	8009f18 <_svfprintf_r+0x1128>
 8009eba:	4442      	add	r2, r8
 8009ebc:	2b07      	cmp	r3, #7
 8009ebe:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8009ec2:	f8c4 8004 	str.w	r8, [r4, #4]
 8009ec6:	dd3b      	ble.n	8009f40 <_svfprintf_r+0x1150>
 8009ec8:	aa1e      	add	r2, sp, #120	; 0x78
 8009eca:	4659      	mov	r1, fp
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f001 fe82 	bl	800bbd6 <__ssprint_r>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f040 80f7 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009ed8:	ac21      	add	r4, sp, #132	; 0x84
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	441e      	add	r6, r3
 8009ee0:	e71f      	b.n	8009d22 <_svfprintf_r+0xf32>
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	9308      	str	r3, [sp, #32]
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	e7a7      	b.n	8009e40 <_svfprintf_r+0x1050>
 8009ef0:	aa1e      	add	r2, sp, #120	; 0x78
 8009ef2:	4659      	mov	r1, fp
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f001 fe6e 	bl	800bbd6 <__ssprint_r>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	f040 80e3 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009f00:	ac21      	add	r4, sp, #132	; 0x84
 8009f02:	e7ab      	b.n	8009e5c <_svfprintf_r+0x106c>
 8009f04:	aa1e      	add	r2, sp, #120	; 0x78
 8009f06:	4659      	mov	r1, fp
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f001 fe64 	bl	800bbd6 <__ssprint_r>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f040 80d9 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009f14:	ac21      	add	r4, sp, #132	; 0x84
 8009f16:	e7ba      	b.n	8009e8e <_svfprintf_r+0x109e>
 8009f18:	2010      	movs	r0, #16
 8009f1a:	4402      	add	r2, r0
 8009f1c:	2b07      	cmp	r3, #7
 8009f1e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8009f22:	6060      	str	r0, [r4, #4]
 8009f24:	dd08      	ble.n	8009f38 <_svfprintf_r+0x1148>
 8009f26:	aa1e      	add	r2, sp, #120	; 0x78
 8009f28:	4659      	mov	r1, fp
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f001 fe53 	bl	800bbd6 <__ssprint_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f040 80c8 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009f36:	a921      	add	r1, sp, #132	; 0x84
 8009f38:	f1a8 0810 	sub.w	r8, r8, #16
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	e7b1      	b.n	8009ea4 <_svfprintf_r+0x10b4>
 8009f40:	460c      	mov	r4, r1
 8009f42:	e7ca      	b.n	8009eda <_svfprintf_r+0x10ea>
 8009f44:	aa1e      	add	r2, sp, #120	; 0x78
 8009f46:	4659      	mov	r1, fp
 8009f48:	4638      	mov	r0, r7
 8009f4a:	f001 fe44 	bl	800bbd6 <__ssprint_r>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f040 80b9 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009f54:	ac21      	add	r4, sp, #132	; 0x84
 8009f56:	e706      	b.n	8009d66 <_svfprintf_r+0xf76>
 8009f58:	aa1e      	add	r2, sp, #120	; 0x78
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f001 fe3a 	bl	800bbd6 <__ssprint_r>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f040 80af 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009f68:	ac21      	add	r4, sp, #132	; 0x84
 8009f6a:	e716      	b.n	8009d9a <_svfprintf_r+0xfaa>
 8009f6c:	9903      	ldr	r1, [sp, #12]
 8009f6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009f70:	2901      	cmp	r1, #1
 8009f72:	f100 0001 	add.w	r0, r0, #1
 8009f76:	f102 0201 	add.w	r2, r2, #1
 8009f7a:	f104 0308 	add.w	r3, r4, #8
 8009f7e:	dc01      	bgt.n	8009f84 <_svfprintf_r+0x1194>
 8009f80:	07e9      	lsls	r1, r5, #31
 8009f82:	d573      	bpl.n	800a06c <_svfprintf_r+0x127c>
 8009f84:	2101      	movs	r1, #1
 8009f86:	2a07      	cmp	r2, #7
 8009f88:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8009f8c:	f8c4 a000 	str.w	sl, [r4]
 8009f90:	6061      	str	r1, [r4, #4]
 8009f92:	dd08      	ble.n	8009fa6 <_svfprintf_r+0x11b6>
 8009f94:	aa1e      	add	r2, sp, #120	; 0x78
 8009f96:	4659      	mov	r1, fp
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f001 fe1c 	bl	800bbd6 <__ssprint_r>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f040 8091 	bne.w	800a0c6 <_svfprintf_r+0x12d6>
 8009fa4:	ab21      	add	r3, sp, #132	; 0x84
 8009fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fae:	605a      	str	r2, [r3, #4]
 8009fb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fb2:	440a      	add	r2, r1
 8009fb4:	9220      	str	r2, [sp, #128]	; 0x80
 8009fb6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009fb8:	3201      	adds	r2, #1
 8009fba:	2a07      	cmp	r2, #7
 8009fbc:	921f      	str	r2, [sp, #124]	; 0x7c
 8009fbe:	dc25      	bgt.n	800a00c <_svfprintf_r+0x121c>
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	9a03      	ldr	r2, [sp, #12]
 8009fc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fcc:	f102 34ff 	add.w	r4, r2, #4294967295
 8009fd0:	d025      	beq.n	800a01e <_svfprintf_r+0x122e>
 8009fd2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fd6:	f10a 0001 	add.w	r0, sl, #1
 8009fda:	e9c3 0400 	strd	r0, r4, [r3]
 8009fde:	9803      	ldr	r0, [sp, #12]
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	4402      	add	r2, r0
 8009fe6:	2907      	cmp	r1, #7
 8009fe8:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8009fec:	dd47      	ble.n	800a07e <_svfprintf_r+0x128e>
 8009fee:	aa1e      	add	r2, sp, #120	; 0x78
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f001 fdef 	bl	800bbd6 <__ssprint_r>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d164      	bne.n	800a0c6 <_svfprintf_r+0x12d6>
 8009ffc:	ab21      	add	r3, sp, #132	; 0x84
 8009ffe:	aa1a      	add	r2, sp, #104	; 0x68
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a004:	605a      	str	r2, [r3, #4]
 800a006:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a008:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a00a:	e619      	b.n	8009c40 <_svfprintf_r+0xe50>
 800a00c:	aa1e      	add	r2, sp, #120	; 0x78
 800a00e:	4659      	mov	r1, fp
 800a010:	4638      	mov	r0, r7
 800a012:	f001 fde0 	bl	800bbd6 <__ssprint_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	d155      	bne.n	800a0c6 <_svfprintf_r+0x12d6>
 800a01a:	ab21      	add	r3, sp, #132	; 0x84
 800a01c:	e7d1      	b.n	8009fc2 <_svfprintf_r+0x11d2>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	dded      	ble.n	8009ffe <_svfprintf_r+0x120e>
 800a022:	4e40      	ldr	r6, [pc, #256]	; (800a124 <_svfprintf_r+0x1334>)
 800a024:	f04f 0810 	mov.w	r8, #16
 800a028:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 800a02c:	2c10      	cmp	r4, #16
 800a02e:	f102 0201 	add.w	r2, r2, #1
 800a032:	f103 0008 	add.w	r0, r3, #8
 800a036:	601e      	str	r6, [r3, #0]
 800a038:	dc07      	bgt.n	800a04a <_svfprintf_r+0x125a>
 800a03a:	605c      	str	r4, [r3, #4]
 800a03c:	2a07      	cmp	r2, #7
 800a03e:	440c      	add	r4, r1
 800a040:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800a044:	dcd3      	bgt.n	8009fee <_svfprintf_r+0x11fe>
 800a046:	4603      	mov	r3, r0
 800a048:	e7d9      	b.n	8009ffe <_svfprintf_r+0x120e>
 800a04a:	3110      	adds	r1, #16
 800a04c:	2a07      	cmp	r2, #7
 800a04e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800a052:	f8c3 8004 	str.w	r8, [r3, #4]
 800a056:	dd06      	ble.n	800a066 <_svfprintf_r+0x1276>
 800a058:	aa1e      	add	r2, sp, #120	; 0x78
 800a05a:	4659      	mov	r1, fp
 800a05c:	4638      	mov	r0, r7
 800a05e:	f001 fdba 	bl	800bbd6 <__ssprint_r>
 800a062:	bb80      	cbnz	r0, 800a0c6 <_svfprintf_r+0x12d6>
 800a064:	a821      	add	r0, sp, #132	; 0x84
 800a066:	3c10      	subs	r4, #16
 800a068:	4603      	mov	r3, r0
 800a06a:	e7dd      	b.n	800a028 <_svfprintf_r+0x1238>
 800a06c:	2101      	movs	r1, #1
 800a06e:	2a07      	cmp	r2, #7
 800a070:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 800a074:	f8c4 a000 	str.w	sl, [r4]
 800a078:	6061      	str	r1, [r4, #4]
 800a07a:	ddc0      	ble.n	8009ffe <_svfprintf_r+0x120e>
 800a07c:	e7b7      	b.n	8009fee <_svfprintf_r+0x11fe>
 800a07e:	3308      	adds	r3, #8
 800a080:	e7bd      	b.n	8009ffe <_svfprintf_r+0x120e>
 800a082:	460c      	mov	r4, r1
 800a084:	f7ff ba51 	b.w	800952a <_svfprintf_r+0x73a>
 800a088:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800a08c:	1a9d      	subs	r5, r3, r2
 800a08e:	2d00      	cmp	r5, #0
 800a090:	f77f aa58 	ble.w	8009544 <_svfprintf_r+0x754>
 800a094:	4e24      	ldr	r6, [pc, #144]	; (800a128 <_svfprintf_r+0x1338>)
 800a096:	f04f 0810 	mov.w	r8, #16
 800a09a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800a09e:	2d10      	cmp	r5, #16
 800a0a0:	f103 0301 	add.w	r3, r3, #1
 800a0a4:	6026      	str	r6, [r4, #0]
 800a0a6:	dc18      	bgt.n	800a0da <_svfprintf_r+0x12ea>
 800a0a8:	6065      	str	r5, [r4, #4]
 800a0aa:	2b07      	cmp	r3, #7
 800a0ac:	4415      	add	r5, r2
 800a0ae:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 800a0b2:	f77f aa47 	ble.w	8009544 <_svfprintf_r+0x754>
 800a0b6:	aa1e      	add	r2, sp, #120	; 0x78
 800a0b8:	4659      	mov	r1, fp
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f001 fd8b 	bl	800bbd6 <__ssprint_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f43f aa3f 	beq.w	8009544 <_svfprintf_r+0x754>
 800a0c6:	9b02      	ldr	r3, [sp, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f43f a888 	beq.w	80091de <_svfprintf_r+0x3ee>
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f000 fed3 	bl	800ae7c <_free_r>
 800a0d6:	f7ff b882 	b.w	80091de <_svfprintf_r+0x3ee>
 800a0da:	3210      	adds	r2, #16
 800a0dc:	2b07      	cmp	r3, #7
 800a0de:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 800a0e2:	f8c4 8004 	str.w	r8, [r4, #4]
 800a0e6:	dc02      	bgt.n	800a0ee <_svfprintf_r+0x12fe>
 800a0e8:	3408      	adds	r4, #8
 800a0ea:	3d10      	subs	r5, #16
 800a0ec:	e7d5      	b.n	800a09a <_svfprintf_r+0x12aa>
 800a0ee:	aa1e      	add	r2, sp, #120	; 0x78
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f001 fd6f 	bl	800bbd6 <__ssprint_r>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d1e4      	bne.n	800a0c6 <_svfprintf_r+0x12d6>
 800a0fc:	ac21      	add	r4, sp, #132	; 0x84
 800a0fe:	e7f4      	b.n	800a0ea <_svfprintf_r+0x12fa>
 800a100:	9902      	ldr	r1, [sp, #8]
 800a102:	4638      	mov	r0, r7
 800a104:	f000 feba 	bl	800ae7c <_free_r>
 800a108:	f7ff ba34 	b.w	8009574 <_svfprintf_r+0x784>
 800a10c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f43f a865 	beq.w	80091de <_svfprintf_r+0x3ee>
 800a114:	aa1e      	add	r2, sp, #120	; 0x78
 800a116:	4659      	mov	r1, fp
 800a118:	4638      	mov	r0, r7
 800a11a:	f001 fd5c 	bl	800bbd6 <__ssprint_r>
 800a11e:	f7ff b85e 	b.w	80091de <_svfprintf_r+0x3ee>
 800a122:	bf00      	nop
 800a124:	0800d734 	.word	0x0800d734
 800a128:	0800d724 	.word	0x0800d724
 800a12c:	ea58 0209 	orrs.w	r2, r8, r9
 800a130:	9502      	str	r5, [sp, #8]
 800a132:	f43f ab42 	beq.w	80097ba <_svfprintf_r+0x9ca>
 800a136:	2b01      	cmp	r3, #1
 800a138:	f43f abec 	beq.w	8009914 <_svfprintf_r+0xb24>
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 800a142:	f43f ac37 	beq.w	80099b4 <_svfprintf_r+0xbc4>
 800a146:	f008 0307 	and.w	r3, r8, #7
 800a14a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800a14e:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 800a152:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800a156:	3330      	adds	r3, #48	; 0x30
 800a158:	ea58 0109 	orrs.w	r1, r8, r9
 800a15c:	4652      	mov	r2, sl
 800a15e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800a162:	d1f0      	bne.n	800a146 <_svfprintf_r+0x1356>
 800a164:	9902      	ldr	r1, [sp, #8]
 800a166:	07cd      	lsls	r5, r1, #31
 800a168:	d506      	bpl.n	800a178 <_svfprintf_r+0x1388>
 800a16a:	2b30      	cmp	r3, #48	; 0x30
 800a16c:	d004      	beq.n	800a178 <_svfprintf_r+0x1388>
 800a16e:	2330      	movs	r3, #48	; 0x30
 800a170:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800a174:	f1a2 0a02 	sub.w	sl, r2, #2
 800a178:	ab4a      	add	r3, sp, #296	; 0x128
 800a17a:	46b1      	mov	r9, r6
 800a17c:	eba3 060a 	sub.w	r6, r3, sl
 800a180:	2300      	movs	r3, #0
 800a182:	9d02      	ldr	r5, [sp, #8]
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	f7fe bff3 	b.w	8009170 <_svfprintf_r+0x380>
 800a18a:	bf00      	nop

0800a18c <__register_exitproc>:
 800a18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a190:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a20c <__register_exitproc+0x80>
 800a194:	4606      	mov	r6, r0
 800a196:	f8da 0000 	ldr.w	r0, [sl]
 800a19a:	4698      	mov	r8, r3
 800a19c:	460f      	mov	r7, r1
 800a19e:	4691      	mov	r9, r2
 800a1a0:	f7fe fe24 	bl	8008dec <__retarget_lock_acquire_recursive>
 800a1a4:	4b18      	ldr	r3, [pc, #96]	; (800a208 <__register_exitproc+0x7c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a1ac:	b91c      	cbnz	r4, 800a1b6 <__register_exitproc+0x2a>
 800a1ae:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a1b2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a1b6:	6865      	ldr	r5, [r4, #4]
 800a1b8:	f8da 0000 	ldr.w	r0, [sl]
 800a1bc:	2d1f      	cmp	r5, #31
 800a1be:	dd05      	ble.n	800a1cc <__register_exitproc+0x40>
 800a1c0:	f7fe fe15 	bl	8008dee <__retarget_lock_release_recursive>
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1cc:	b19e      	cbz	r6, 800a1f6 <__register_exitproc+0x6a>
 800a1ce:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a1d8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800a1dc:	40aa      	lsls	r2, r5
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800a1e4:	2e02      	cmp	r6, #2
 800a1e6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a1ea:	bf02      	ittt	eq
 800a1ec:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800a1f0:	4313      	orreq	r3, r2
 800a1f2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800a1f6:	1c6b      	adds	r3, r5, #1
 800a1f8:	3502      	adds	r5, #2
 800a1fa:	6063      	str	r3, [r4, #4]
 800a1fc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a200:	f7fe fdf5 	bl	8008dee <__retarget_lock_release_recursive>
 800a204:	2000      	movs	r0, #0
 800a206:	e7df      	b.n	800a1c8 <__register_exitproc+0x3c>
 800a208:	0800d6ec 	.word	0x0800d6ec
 800a20c:	24000530 	.word	0x24000530

0800a210 <quorem>:
 800a210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	6903      	ldr	r3, [r0, #16]
 800a216:	690c      	ldr	r4, [r1, #16]
 800a218:	42a3      	cmp	r3, r4
 800a21a:	4607      	mov	r7, r0
 800a21c:	f2c0 8081 	blt.w	800a322 <quorem+0x112>
 800a220:	3c01      	subs	r4, #1
 800a222:	f101 0814 	add.w	r8, r1, #20
 800a226:	f100 0514 	add.w	r5, r0, #20
 800a22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a238:	3301      	adds	r3, #1
 800a23a:	429a      	cmp	r2, r3
 800a23c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a240:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a244:	fbb2 f6f3 	udiv	r6, r2, r3
 800a248:	d331      	bcc.n	800a2ae <quorem+0x9e>
 800a24a:	f04f 0e00 	mov.w	lr, #0
 800a24e:	4640      	mov	r0, r8
 800a250:	46ac      	mov	ip, r5
 800a252:	46f2      	mov	sl, lr
 800a254:	f850 2b04 	ldr.w	r2, [r0], #4
 800a258:	b293      	uxth	r3, r2
 800a25a:	fb06 e303 	mla	r3, r6, r3, lr
 800a25e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a262:	b29b      	uxth	r3, r3
 800a264:	ebaa 0303 	sub.w	r3, sl, r3
 800a268:	f8dc a000 	ldr.w	sl, [ip]
 800a26c:	0c12      	lsrs	r2, r2, #16
 800a26e:	fa13 f38a 	uxtah	r3, r3, sl
 800a272:	fb06 e202 	mla	r2, r6, r2, lr
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	9b00      	ldr	r3, [sp, #0]
 800a27a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a27e:	b292      	uxth	r2, r2
 800a280:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a288:	f8bd 3000 	ldrh.w	r3, [sp]
 800a28c:	4581      	cmp	r9, r0
 800a28e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a292:	f84c 3b04 	str.w	r3, [ip], #4
 800a296:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a29a:	d2db      	bcs.n	800a254 <quorem+0x44>
 800a29c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2a0:	b92b      	cbnz	r3, 800a2ae <quorem+0x9e>
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	3b04      	subs	r3, #4
 800a2a6:	429d      	cmp	r5, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	d32e      	bcc.n	800a30a <quorem+0xfa>
 800a2ac:	613c      	str	r4, [r7, #16]
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f001 fb32 	bl	800b918 <__mcmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	db24      	blt.n	800a302 <quorem+0xf2>
 800a2b8:	3601      	adds	r6, #1
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f04f 0c00 	mov.w	ip, #0
 800a2c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2c4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2c8:	b293      	uxth	r3, r2
 800a2ca:	ebac 0303 	sub.w	r3, ip, r3
 800a2ce:	0c12      	lsrs	r2, r2, #16
 800a2d0:	fa13 f38e 	uxtah	r3, r3, lr
 800a2d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e2:	45c1      	cmp	r9, r8
 800a2e4:	f840 3b04 	str.w	r3, [r0], #4
 800a2e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2ec:	d2e8      	bcs.n	800a2c0 <quorem+0xb0>
 800a2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2f6:	b922      	cbnz	r2, 800a302 <quorem+0xf2>
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	d30a      	bcc.n	800a316 <quorem+0x106>
 800a300:	613c      	str	r4, [r7, #16]
 800a302:	4630      	mov	r0, r6
 800a304:	b003      	add	sp, #12
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	6812      	ldr	r2, [r2, #0]
 800a30c:	3b04      	subs	r3, #4
 800a30e:	2a00      	cmp	r2, #0
 800a310:	d1cc      	bne.n	800a2ac <quorem+0x9c>
 800a312:	3c01      	subs	r4, #1
 800a314:	e7c7      	b.n	800a2a6 <quorem+0x96>
 800a316:	6812      	ldr	r2, [r2, #0]
 800a318:	3b04      	subs	r3, #4
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d1f0      	bne.n	800a300 <quorem+0xf0>
 800a31e:	3c01      	subs	r4, #1
 800a320:	e7eb      	b.n	800a2fa <quorem+0xea>
 800a322:	2000      	movs	r0, #0
 800a324:	e7ee      	b.n	800a304 <quorem+0xf4>
	...

0800a328 <_dtoa_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	ed2d 8b02 	vpush	{d8}
 800a330:	b091      	sub	sp, #68	; 0x44
 800a332:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a336:	9106      	str	r1, [sp, #24]
 800a338:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a33a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a33c:	9208      	str	r2, [sp, #32]
 800a33e:	ec59 8b10 	vmov	r8, r9, d0
 800a342:	4606      	mov	r6, r0
 800a344:	930c      	str	r3, [sp, #48]	; 0x30
 800a346:	b141      	cbz	r1, 800a35a <_dtoa_r+0x32>
 800a348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a34a:	604a      	str	r2, [r1, #4]
 800a34c:	2301      	movs	r3, #1
 800a34e:	4093      	lsls	r3, r2
 800a350:	608b      	str	r3, [r1, #8]
 800a352:	f001 f8d2 	bl	800b4fa <_Bfree>
 800a356:	2300      	movs	r3, #0
 800a358:	6433      	str	r3, [r6, #64]	; 0x40
 800a35a:	f1b9 0300 	subs.w	r3, r9, #0
 800a35e:	bfbb      	ittet	lt
 800a360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a364:	9303      	strlt	r3, [sp, #12]
 800a366:	2300      	movge	r3, #0
 800a368:	2201      	movlt	r2, #1
 800a36a:	bfac      	ite	ge
 800a36c:	6023      	strge	r3, [r4, #0]
 800a36e:	6022      	strlt	r2, [r4, #0]
 800a370:	4b99      	ldr	r3, [pc, #612]	; (800a5d8 <_dtoa_r+0x2b0>)
 800a372:	9c03      	ldr	r4, [sp, #12]
 800a374:	43a3      	bics	r3, r4
 800a376:	d11c      	bne.n	800a3b2 <_dtoa_r+0x8a>
 800a378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a37a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a384:	ea53 0308 	orrs.w	r3, r3, r8
 800a388:	f000 84f8 	beq.w	800ad7c <_dtoa_r+0xa54>
 800a38c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a38e:	b90b      	cbnz	r3, 800a394 <_dtoa_r+0x6c>
 800a390:	4b92      	ldr	r3, [pc, #584]	; (800a5dc <_dtoa_r+0x2b4>)
 800a392:	e01f      	b.n	800a3d4 <_dtoa_r+0xac>
 800a394:	4b91      	ldr	r3, [pc, #580]	; (800a5dc <_dtoa_r+0x2b4>)
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	3303      	adds	r3, #3
 800a39a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	9801      	ldr	r0, [sp, #4]
 800a3a0:	b011      	add	sp, #68	; 0x44
 800a3a2:	ecbd 8b02 	vpop	{d8}
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	4b8d      	ldr	r3, [pc, #564]	; (800a5e0 <_dtoa_r+0x2b8>)
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	e7f3      	b.n	800a39a <_dtoa_r+0x72>
 800a3b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a3b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3be:	d10b      	bne.n	800a3d8 <_dtoa_r+0xb0>
 800a3c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 84d4 	beq.w	800ad76 <_dtoa_r+0xa4e>
 800a3ce:	4885      	ldr	r0, [pc, #532]	; (800a5e4 <_dtoa_r+0x2bc>)
 800a3d0:	6018      	str	r0, [r3, #0]
 800a3d2:	1e43      	subs	r3, r0, #1
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	e7e2      	b.n	800a39e <_dtoa_r+0x76>
 800a3d8:	a90f      	add	r1, sp, #60	; 0x3c
 800a3da:	aa0e      	add	r2, sp, #56	; 0x38
 800a3dc:	4630      	mov	r0, r6
 800a3de:	eeb0 0b48 	vmov.f64	d0, d8
 800a3e2:	f001 fb3f 	bl	800ba64 <__d2b>
 800a3e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	d046      	beq.n	800a480 <_dtoa_r+0x158>
 800a3f2:	ee18 4a90 	vmov	r4, s17
 800a3f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a3fa:	ec53 2b18 	vmov	r2, r3, d8
 800a3fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a40a:	2400      	movs	r4, #0
 800a40c:	ec43 2b16 	vmov	d6, r2, r3
 800a410:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a414:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a5c0 <_dtoa_r+0x298>
 800a418:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a41c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a5c8 <_dtoa_r+0x2a0>
 800a420:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a424:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a5d0 <_dtoa_r+0x2a8>
 800a428:	ee07 1a90 	vmov	s15, r1
 800a42c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a430:	eeb0 7b46 	vmov.f64	d7, d6
 800a434:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a438:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a43c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a444:	ee16 ba90 	vmov	fp, s13
 800a448:	940a      	str	r4, [sp, #40]	; 0x28
 800a44a:	d508      	bpl.n	800a45e <_dtoa_r+0x136>
 800a44c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a450:	eeb4 6b47 	vcmp.f64	d6, d7
 800a454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a458:	bf18      	it	ne
 800a45a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a45e:	f1bb 0f16 	cmp.w	fp, #22
 800a462:	d82f      	bhi.n	800a4c4 <_dtoa_r+0x19c>
 800a464:	4b60      	ldr	r3, [pc, #384]	; (800a5e8 <_dtoa_r+0x2c0>)
 800a466:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a46a:	ed93 7b00 	vldr	d7, [r3]
 800a46e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a476:	d501      	bpl.n	800a47c <_dtoa_r+0x154>
 800a478:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a47c:	2300      	movs	r3, #0
 800a47e:	e022      	b.n	800a4c6 <_dtoa_r+0x19e>
 800a480:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a482:	4401      	add	r1, r0
 800a484:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a488:	2b20      	cmp	r3, #32
 800a48a:	bfc1      	itttt	gt
 800a48c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a490:	fa04 f303 	lslgt.w	r3, r4, r3
 800a494:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a498:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a49c:	bfd6      	itet	le
 800a49e:	f1c3 0320 	rsble	r3, r3, #32
 800a4a2:	ea43 0808 	orrgt.w	r8, r3, r8
 800a4a6:	fa08 f803 	lslle.w	r8, r8, r3
 800a4aa:	ee07 8a90 	vmov	s15, r8
 800a4ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a4b2:	3901      	subs	r1, #1
 800a4b4:	ee17 4a90 	vmov	r4, s15
 800a4b8:	ec53 2b17 	vmov	r2, r3, d7
 800a4bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a4c0:	2401      	movs	r4, #1
 800a4c2:	e7a3      	b.n	800a40c <_dtoa_r+0xe4>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4c8:	1a43      	subs	r3, r0, r1
 800a4ca:	1e5a      	subs	r2, r3, #1
 800a4cc:	bf45      	ittet	mi
 800a4ce:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4d2:	9304      	strmi	r3, [sp, #16]
 800a4d4:	2300      	movpl	r3, #0
 800a4d6:	2300      	movmi	r3, #0
 800a4d8:	9205      	str	r2, [sp, #20]
 800a4da:	bf54      	ite	pl
 800a4dc:	9304      	strpl	r3, [sp, #16]
 800a4de:	9305      	strmi	r3, [sp, #20]
 800a4e0:	f1bb 0f00 	cmp.w	fp, #0
 800a4e4:	db18      	blt.n	800a518 <_dtoa_r+0x1f0>
 800a4e6:	9b05      	ldr	r3, [sp, #20]
 800a4e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a4ec:	445b      	add	r3, fp
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9a06      	ldr	r2, [sp, #24]
 800a4f4:	2a09      	cmp	r2, #9
 800a4f6:	d84a      	bhi.n	800a58e <_dtoa_r+0x266>
 800a4f8:	2a05      	cmp	r2, #5
 800a4fa:	bfc4      	itt	gt
 800a4fc:	3a04      	subgt	r2, #4
 800a4fe:	9206      	strgt	r2, [sp, #24]
 800a500:	9a06      	ldr	r2, [sp, #24]
 800a502:	f1a2 0202 	sub.w	r2, r2, #2
 800a506:	bfcc      	ite	gt
 800a508:	2400      	movgt	r4, #0
 800a50a:	2401      	movle	r4, #1
 800a50c:	2a03      	cmp	r2, #3
 800a50e:	d849      	bhi.n	800a5a4 <_dtoa_r+0x27c>
 800a510:	e8df f002 	tbb	[pc, r2]
 800a514:	3b2d2f0b 	.word	0x3b2d2f0b
 800a518:	9b04      	ldr	r3, [sp, #16]
 800a51a:	2200      	movs	r2, #0
 800a51c:	eba3 030b 	sub.w	r3, r3, fp
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9209      	str	r2, [sp, #36]	; 0x24
 800a524:	f1cb 0300 	rsb	r3, fp, #0
 800a528:	e7e3      	b.n	800a4f2 <_dtoa_r+0x1ca>
 800a52a:	2200      	movs	r2, #0
 800a52c:	9207      	str	r2, [sp, #28]
 800a52e:	9a08      	ldr	r2, [sp, #32]
 800a530:	2a00      	cmp	r2, #0
 800a532:	dc3a      	bgt.n	800a5aa <_dtoa_r+0x282>
 800a534:	f04f 0a01 	mov.w	sl, #1
 800a538:	46d1      	mov	r9, sl
 800a53a:	4652      	mov	r2, sl
 800a53c:	f8cd a020 	str.w	sl, [sp, #32]
 800a540:	2100      	movs	r1, #0
 800a542:	6471      	str	r1, [r6, #68]	; 0x44
 800a544:	2004      	movs	r0, #4
 800a546:	f100 0714 	add.w	r7, r0, #20
 800a54a:	4297      	cmp	r7, r2
 800a54c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800a54e:	d931      	bls.n	800a5b4 <_dtoa_r+0x28c>
 800a550:	4630      	mov	r0, r6
 800a552:	930d      	str	r3, [sp, #52]	; 0x34
 800a554:	f000 ffac 	bl	800b4b0 <_Balloc>
 800a558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a55a:	9001      	str	r0, [sp, #4]
 800a55c:	4602      	mov	r2, r0
 800a55e:	2800      	cmp	r0, #0
 800a560:	d148      	bne.n	800a5f4 <_dtoa_r+0x2cc>
 800a562:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <_dtoa_r+0x2c4>)
 800a564:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a568:	4821      	ldr	r0, [pc, #132]	; (800a5f0 <_dtoa_r+0x2c8>)
 800a56a:	f001 fbbd 	bl	800bce8 <__assert_func>
 800a56e:	2201      	movs	r2, #1
 800a570:	e7dc      	b.n	800a52c <_dtoa_r+0x204>
 800a572:	2200      	movs	r2, #0
 800a574:	9207      	str	r2, [sp, #28]
 800a576:	9a08      	ldr	r2, [sp, #32]
 800a578:	eb0b 0a02 	add.w	sl, fp, r2
 800a57c:	f10a 0901 	add.w	r9, sl, #1
 800a580:	464a      	mov	r2, r9
 800a582:	2a01      	cmp	r2, #1
 800a584:	bfb8      	it	lt
 800a586:	2201      	movlt	r2, #1
 800a588:	e7da      	b.n	800a540 <_dtoa_r+0x218>
 800a58a:	2201      	movs	r2, #1
 800a58c:	e7f2      	b.n	800a574 <_dtoa_r+0x24c>
 800a58e:	2401      	movs	r4, #1
 800a590:	2200      	movs	r2, #0
 800a592:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a596:	f04f 3aff 	mov.w	sl, #4294967295
 800a59a:	2100      	movs	r1, #0
 800a59c:	46d1      	mov	r9, sl
 800a59e:	2212      	movs	r2, #18
 800a5a0:	9108      	str	r1, [sp, #32]
 800a5a2:	e7cd      	b.n	800a540 <_dtoa_r+0x218>
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	9207      	str	r2, [sp, #28]
 800a5a8:	e7f5      	b.n	800a596 <_dtoa_r+0x26e>
 800a5aa:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5ae:	46d1      	mov	r9, sl
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	e7c5      	b.n	800a540 <_dtoa_r+0x218>
 800a5b4:	3101      	adds	r1, #1
 800a5b6:	6471      	str	r1, [r6, #68]	; 0x44
 800a5b8:	0040      	lsls	r0, r0, #1
 800a5ba:	e7c4      	b.n	800a546 <_dtoa_r+0x21e>
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	636f4361 	.word	0x636f4361
 800a5c4:	3fd287a7 	.word	0x3fd287a7
 800a5c8:	8b60c8b3 	.word	0x8b60c8b3
 800a5cc:	3fc68a28 	.word	0x3fc68a28
 800a5d0:	509f79fb 	.word	0x509f79fb
 800a5d4:	3fd34413 	.word	0x3fd34413
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	0800d744 	.word	0x0800d744
 800a5e0:	0800d748 	.word	0x0800d748
 800a5e4:	0800d723 	.word	0x0800d723
 800a5e8:	0800d848 	.word	0x0800d848
 800a5ec:	0800d751 	.word	0x0800d751
 800a5f0:	0800d762 	.word	0x0800d762
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	6432      	str	r2, [r6, #64]	; 0x40
 800a5f8:	f1b9 0f0e 	cmp.w	r9, #14
 800a5fc:	d86c      	bhi.n	800a6d8 <_dtoa_r+0x3b0>
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	d06a      	beq.n	800a6d8 <_dtoa_r+0x3b0>
 800a602:	f1bb 0f00 	cmp.w	fp, #0
 800a606:	f340 80a0 	ble.w	800a74a <_dtoa_r+0x422>
 800a60a:	49c1      	ldr	r1, [pc, #772]	; (800a910 <_dtoa_r+0x5e8>)
 800a60c:	f00b 020f 	and.w	r2, fp, #15
 800a610:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a614:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a618:	ed92 7b00 	vldr	d7, [r2]
 800a61c:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a620:	f000 8087 	beq.w	800a732 <_dtoa_r+0x40a>
 800a624:	4abb      	ldr	r2, [pc, #748]	; (800a914 <_dtoa_r+0x5ec>)
 800a626:	ed92 6b08 	vldr	d6, [r2, #32]
 800a62a:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a62e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a632:	f001 010f 	and.w	r1, r1, #15
 800a636:	2203      	movs	r2, #3
 800a638:	48b6      	ldr	r0, [pc, #728]	; (800a914 <_dtoa_r+0x5ec>)
 800a63a:	2900      	cmp	r1, #0
 800a63c:	d17b      	bne.n	800a736 <_dtoa_r+0x40e>
 800a63e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a642:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a646:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a64a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a64c:	2900      	cmp	r1, #0
 800a64e:	f000 80a2 	beq.w	800a796 <_dtoa_r+0x46e>
 800a652:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a65a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a662:	f140 8098 	bpl.w	800a796 <_dtoa_r+0x46e>
 800a666:	f1b9 0f00 	cmp.w	r9, #0
 800a66a:	f000 8094 	beq.w	800a796 <_dtoa_r+0x46e>
 800a66e:	f1ba 0f00 	cmp.w	sl, #0
 800a672:	dd2f      	ble.n	800a6d4 <_dtoa_r+0x3ac>
 800a674:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a67c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a680:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a684:	3201      	adds	r2, #1
 800a686:	4650      	mov	r0, sl
 800a688:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a68c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a690:	ee07 2a90 	vmov	s15, r2
 800a694:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a698:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a69c:	ee15 4a90 	vmov	r4, s11
 800a6a0:	ec52 1b15 	vmov	r1, r2, d5
 800a6a4:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d177      	bne.n	800a79c <_dtoa_r+0x474>
 800a6ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a6b4:	ec42 1b17 	vmov	d7, r1, r2
 800a6b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c0:	f300 8262 	bgt.w	800ab88 <_dtoa_r+0x860>
 800a6c4:	eeb1 7b47 	vneg.f64	d7, d7
 800a6c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	f100 8257 	bmi.w	800ab82 <_dtoa_r+0x85a>
 800a6d4:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	f2c0 811c 	blt.w	800a918 <_dtoa_r+0x5f0>
 800a6e0:	f1bb 0f0e 	cmp.w	fp, #14
 800a6e4:	f300 8118 	bgt.w	800a918 <_dtoa_r+0x5f0>
 800a6e8:	4b89      	ldr	r3, [pc, #548]	; (800a910 <_dtoa_r+0x5e8>)
 800a6ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6ee:	ed93 6b00 	vldr	d6, [r3]
 800a6f2:	9b08      	ldr	r3, [sp, #32]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f280 80b7 	bge.w	800a868 <_dtoa_r+0x540>
 800a6fa:	f1b9 0f00 	cmp.w	r9, #0
 800a6fe:	f300 80b3 	bgt.w	800a868 <_dtoa_r+0x540>
 800a702:	f040 823e 	bne.w	800ab82 <_dtoa_r+0x85a>
 800a706:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a70a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a70e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a712:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71a:	464c      	mov	r4, r9
 800a71c:	464f      	mov	r7, r9
 800a71e:	f280 8214 	bge.w	800ab4a <_dtoa_r+0x822>
 800a722:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a726:	2331      	movs	r3, #49	; 0x31
 800a728:	f808 3b01 	strb.w	r3, [r8], #1
 800a72c:	f10b 0b01 	add.w	fp, fp, #1
 800a730:	e210      	b.n	800ab54 <_dtoa_r+0x82c>
 800a732:	2202      	movs	r2, #2
 800a734:	e780      	b.n	800a638 <_dtoa_r+0x310>
 800a736:	07cc      	lsls	r4, r1, #31
 800a738:	d504      	bpl.n	800a744 <_dtoa_r+0x41c>
 800a73a:	ed90 6b00 	vldr	d6, [r0]
 800a73e:	3201      	adds	r2, #1
 800a740:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a744:	1049      	asrs	r1, r1, #1
 800a746:	3008      	adds	r0, #8
 800a748:	e777      	b.n	800a63a <_dtoa_r+0x312>
 800a74a:	d022      	beq.n	800a792 <_dtoa_r+0x46a>
 800a74c:	f1cb 0100 	rsb	r1, fp, #0
 800a750:	4a6f      	ldr	r2, [pc, #444]	; (800a910 <_dtoa_r+0x5e8>)
 800a752:	f001 000f 	and.w	r0, r1, #15
 800a756:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a75a:	ed92 7b00 	vldr	d7, [r2]
 800a75e:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a762:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a766:	486b      	ldr	r0, [pc, #428]	; (800a914 <_dtoa_r+0x5ec>)
 800a768:	1109      	asrs	r1, r1, #4
 800a76a:	2400      	movs	r4, #0
 800a76c:	2202      	movs	r2, #2
 800a76e:	b929      	cbnz	r1, 800a77c <_dtoa_r+0x454>
 800a770:	2c00      	cmp	r4, #0
 800a772:	f43f af6a 	beq.w	800a64a <_dtoa_r+0x322>
 800a776:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a77a:	e766      	b.n	800a64a <_dtoa_r+0x322>
 800a77c:	07cf      	lsls	r7, r1, #31
 800a77e:	d505      	bpl.n	800a78c <_dtoa_r+0x464>
 800a780:	ed90 6b00 	vldr	d6, [r0]
 800a784:	3201      	adds	r2, #1
 800a786:	2401      	movs	r4, #1
 800a788:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a78c:	1049      	asrs	r1, r1, #1
 800a78e:	3008      	adds	r0, #8
 800a790:	e7ed      	b.n	800a76e <_dtoa_r+0x446>
 800a792:	2202      	movs	r2, #2
 800a794:	e759      	b.n	800a64a <_dtoa_r+0x322>
 800a796:	465f      	mov	r7, fp
 800a798:	4648      	mov	r0, r9
 800a79a:	e775      	b.n	800a688 <_dtoa_r+0x360>
 800a79c:	ec42 1b17 	vmov	d7, r1, r2
 800a7a0:	4a5b      	ldr	r2, [pc, #364]	; (800a910 <_dtoa_r+0x5e8>)
 800a7a2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a7a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a7aa:	9a01      	ldr	r2, [sp, #4]
 800a7ac:	1814      	adds	r4, r2, r0
 800a7ae:	9a07      	ldr	r2, [sp, #28]
 800a7b0:	b352      	cbz	r2, 800a808 <_dtoa_r+0x4e0>
 800a7b2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a7b6:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a7ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a7be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a7c2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a7ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7ce:	ee14 2a90 	vmov	r2, s9
 800a7d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7d6:	3230      	adds	r2, #48	; 0x30
 800a7d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	f808 2b01 	strb.w	r2, [r8], #1
 800a7e8:	d439      	bmi.n	800a85e <_dtoa_r+0x536>
 800a7ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a7ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	d472      	bmi.n	800a8de <_dtoa_r+0x5b6>
 800a7f8:	45a0      	cmp	r8, r4
 800a7fa:	f43f af6b 	beq.w	800a6d4 <_dtoa_r+0x3ac>
 800a7fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a802:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a806:	e7e0      	b.n	800a7ca <_dtoa_r+0x4a2>
 800a808:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a80c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a810:	4621      	mov	r1, r4
 800a812:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a816:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a81a:	ee14 2a90 	vmov	r2, s9
 800a81e:	3230      	adds	r2, #48	; 0x30
 800a820:	f808 2b01 	strb.w	r2, [r8], #1
 800a824:	45a0      	cmp	r8, r4
 800a826:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a82a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a82e:	d118      	bne.n	800a862 <_dtoa_r+0x53a>
 800a830:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a834:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a838:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a840:	dc4d      	bgt.n	800a8de <_dtoa_r+0x5b6>
 800a842:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a846:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84e:	f57f af41 	bpl.w	800a6d4 <_dtoa_r+0x3ac>
 800a852:	4688      	mov	r8, r1
 800a854:	3901      	subs	r1, #1
 800a856:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a85a:	2b30      	cmp	r3, #48	; 0x30
 800a85c:	d0f9      	beq.n	800a852 <_dtoa_r+0x52a>
 800a85e:	46bb      	mov	fp, r7
 800a860:	e02a      	b.n	800a8b8 <_dtoa_r+0x590>
 800a862:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a866:	e7d6      	b.n	800a816 <_dtoa_r+0x4ee>
 800a868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a86c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a870:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a874:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a878:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a87c:	ee15 3a10 	vmov	r3, s10
 800a880:	3330      	adds	r3, #48	; 0x30
 800a882:	f808 3b01 	strb.w	r3, [r8], #1
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	eba8 0303 	sub.w	r3, r8, r3
 800a88c:	4599      	cmp	r9, r3
 800a88e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a892:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a896:	d133      	bne.n	800a900 <_dtoa_r+0x5d8>
 800a898:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a89c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	dc1a      	bgt.n	800a8dc <_dtoa_r+0x5b4>
 800a8a6:	eeb4 7b46 	vcmp.f64	d7, d6
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	d103      	bne.n	800a8b8 <_dtoa_r+0x590>
 800a8b0:	ee15 3a10 	vmov	r3, s10
 800a8b4:	07d9      	lsls	r1, r3, #31
 800a8b6:	d411      	bmi.n	800a8dc <_dtoa_r+0x5b4>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f000 fe1d 	bl	800b4fa <_Bfree>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8c4:	f888 3000 	strb.w	r3, [r8]
 800a8c8:	f10b 0301 	add.w	r3, fp, #1
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f43f ad64 	beq.w	800a39e <_dtoa_r+0x76>
 800a8d6:	f8c3 8000 	str.w	r8, [r3]
 800a8da:	e560      	b.n	800a39e <_dtoa_r+0x76>
 800a8dc:	465f      	mov	r7, fp
 800a8de:	4643      	mov	r3, r8
 800a8e0:	4698      	mov	r8, r3
 800a8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8e6:	2a39      	cmp	r2, #57	; 0x39
 800a8e8:	d106      	bne.n	800a8f8 <_dtoa_r+0x5d0>
 800a8ea:	9a01      	ldr	r2, [sp, #4]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d1f7      	bne.n	800a8e0 <_dtoa_r+0x5b8>
 800a8f0:	9901      	ldr	r1, [sp, #4]
 800a8f2:	2230      	movs	r2, #48	; 0x30
 800a8f4:	3701      	adds	r7, #1
 800a8f6:	700a      	strb	r2, [r1, #0]
 800a8f8:	781a      	ldrb	r2, [r3, #0]
 800a8fa:	3201      	adds	r2, #1
 800a8fc:	701a      	strb	r2, [r3, #0]
 800a8fe:	e7ae      	b.n	800a85e <_dtoa_r+0x536>
 800a900:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a904:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	d1b2      	bne.n	800a874 <_dtoa_r+0x54c>
 800a90e:	e7d3      	b.n	800a8b8 <_dtoa_r+0x590>
 800a910:	0800d848 	.word	0x0800d848
 800a914:	0800d820 	.word	0x0800d820
 800a918:	9907      	ldr	r1, [sp, #28]
 800a91a:	2900      	cmp	r1, #0
 800a91c:	f000 80d0 	beq.w	800aac0 <_dtoa_r+0x798>
 800a920:	9906      	ldr	r1, [sp, #24]
 800a922:	2901      	cmp	r1, #1
 800a924:	f300 80b4 	bgt.w	800aa90 <_dtoa_r+0x768>
 800a928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a92a:	2900      	cmp	r1, #0
 800a92c:	f000 80ac 	beq.w	800aa88 <_dtoa_r+0x760>
 800a930:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a934:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a938:	461c      	mov	r4, r3
 800a93a:	930a      	str	r3, [sp, #40]	; 0x28
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	4413      	add	r3, r2
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	2101      	movs	r1, #1
 800a946:	4413      	add	r3, r2
 800a948:	4630      	mov	r0, r6
 800a94a:	9305      	str	r3, [sp, #20]
 800a94c:	f000 fe74 	bl	800b638 <__i2b>
 800a950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a952:	4607      	mov	r7, r0
 800a954:	f1b8 0f00 	cmp.w	r8, #0
 800a958:	dd0d      	ble.n	800a976 <_dtoa_r+0x64e>
 800a95a:	9a05      	ldr	r2, [sp, #20]
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	dd0a      	ble.n	800a976 <_dtoa_r+0x64e>
 800a960:	4542      	cmp	r2, r8
 800a962:	9904      	ldr	r1, [sp, #16]
 800a964:	bfa8      	it	ge
 800a966:	4642      	movge	r2, r8
 800a968:	1a89      	subs	r1, r1, r2
 800a96a:	9104      	str	r1, [sp, #16]
 800a96c:	9905      	ldr	r1, [sp, #20]
 800a96e:	eba8 0802 	sub.w	r8, r8, r2
 800a972:	1a8a      	subs	r2, r1, r2
 800a974:	9205      	str	r2, [sp, #20]
 800a976:	b303      	cbz	r3, 800a9ba <_dtoa_r+0x692>
 800a978:	9a07      	ldr	r2, [sp, #28]
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	f000 80a5 	beq.w	800aaca <_dtoa_r+0x7a2>
 800a980:	2c00      	cmp	r4, #0
 800a982:	dd13      	ble.n	800a9ac <_dtoa_r+0x684>
 800a984:	4639      	mov	r1, r7
 800a986:	4622      	mov	r2, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	930d      	str	r3, [sp, #52]	; 0x34
 800a98c:	f000 ff14 	bl	800b7b8 <__pow5mult>
 800a990:	462a      	mov	r2, r5
 800a992:	4601      	mov	r1, r0
 800a994:	4607      	mov	r7, r0
 800a996:	4630      	mov	r0, r6
 800a998:	f000 fe64 	bl	800b664 <__multiply>
 800a99c:	4629      	mov	r1, r5
 800a99e:	900a      	str	r0, [sp, #40]	; 0x28
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 fdaa 	bl	800b4fa <_Bfree>
 800a9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	1b1a      	subs	r2, r3, r4
 800a9ae:	d004      	beq.n	800a9ba <_dtoa_r+0x692>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 ff00 	bl	800b7b8 <__pow5mult>
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f000 fe3b 	bl	800b638 <__i2b>
 800a9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	f340 8081 	ble.w	800aace <_dtoa_r+0x7a6>
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 fef1 	bl	800b7b8 <__pow5mult>
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	4604      	mov	r4, r0
 800a9dc:	dd7a      	ble.n	800aad4 <_dtoa_r+0x7ac>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a9e2:	6922      	ldr	r2, [r4, #16]
 800a9e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9e8:	6910      	ldr	r0, [r2, #16]
 800a9ea:	f000 fdd5 	bl	800b598 <__hi0bits>
 800a9ee:	f1c0 0020 	rsb	r0, r0, #32
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	4418      	add	r0, r3
 800a9f6:	f010 001f 	ands.w	r0, r0, #31
 800a9fa:	f000 808c 	beq.w	800ab16 <_dtoa_r+0x7ee>
 800a9fe:	f1c0 0220 	rsb	r2, r0, #32
 800aa02:	2a04      	cmp	r2, #4
 800aa04:	f340 8085 	ble.w	800ab12 <_dtoa_r+0x7ea>
 800aa08:	f1c0 001c 	rsb	r0, r0, #28
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	4403      	add	r3, r0
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	4403      	add	r3, r0
 800aa16:	4480      	add	r8, r0
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd05      	ble.n	800aa2c <_dtoa_r+0x704>
 800aa20:	4629      	mov	r1, r5
 800aa22:	461a      	mov	r2, r3
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 ff07 	bl	800b838 <__lshift>
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	9b05      	ldr	r3, [sp, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	dd05      	ble.n	800aa3e <_dtoa_r+0x716>
 800aa32:	4621      	mov	r1, r4
 800aa34:	461a      	mov	r2, r3
 800aa36:	4630      	mov	r0, r6
 800aa38:	f000 fefe 	bl	800b838 <__lshift>
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d06a      	beq.n	800ab1a <_dtoa_r+0x7f2>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 ff66 	bl	800b918 <__mcmp>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	da64      	bge.n	800ab1a <_dtoa_r+0x7f2>
 800aa50:	2300      	movs	r3, #0
 800aa52:	4629      	mov	r1, r5
 800aa54:	220a      	movs	r2, #10
 800aa56:	4630      	mov	r0, r6
 800aa58:	f000 fd58 	bl	800b50c <__multadd>
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa62:	4605      	mov	r5, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8190 	beq.w	800ad8a <_dtoa_r+0xa62>
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	220a      	movs	r2, #10
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 fd4b 	bl	800b50c <__multadd>
 800aa76:	f1ba 0f00 	cmp.w	sl, #0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	f300 808d 	bgt.w	800ab9a <_dtoa_r+0x872>
 800aa80:	9b06      	ldr	r3, [sp, #24]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	dc50      	bgt.n	800ab28 <_dtoa_r+0x800>
 800aa86:	e088      	b.n	800ab9a <_dtoa_r+0x872>
 800aa88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa8e:	e751      	b.n	800a934 <_dtoa_r+0x60c>
 800aa90:	f109 34ff 	add.w	r4, r9, #4294967295
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	bfbf      	itttt	lt
 800aa98:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800aa9a:	1ae3      	sublt	r3, r4, r3
 800aa9c:	18d2      	addlt	r2, r2, r3
 800aa9e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800aaa0:	bfb6      	itet	lt
 800aaa2:	4623      	movlt	r3, r4
 800aaa4:	1b1c      	subge	r4, r3, r4
 800aaa6:	2400      	movlt	r4, #0
 800aaa8:	f1b9 0f00 	cmp.w	r9, #0
 800aaac:	bfb5      	itete	lt
 800aaae:	9a04      	ldrlt	r2, [sp, #16]
 800aab0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800aab4:	eba2 0809 	sublt.w	r8, r2, r9
 800aab8:	464a      	movge	r2, r9
 800aaba:	bfb8      	it	lt
 800aabc:	2200      	movlt	r2, #0
 800aabe:	e73c      	b.n	800a93a <_dtoa_r+0x612>
 800aac0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aac4:	9f07      	ldr	r7, [sp, #28]
 800aac6:	461c      	mov	r4, r3
 800aac8:	e744      	b.n	800a954 <_dtoa_r+0x62c>
 800aaca:	461a      	mov	r2, r3
 800aacc:	e770      	b.n	800a9b0 <_dtoa_r+0x688>
 800aace:	9b06      	ldr	r3, [sp, #24]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	dc18      	bgt.n	800ab06 <_dtoa_r+0x7de>
 800aad4:	9b02      	ldr	r3, [sp, #8]
 800aad6:	b9b3      	cbnz	r3, 800ab06 <_dtoa_r+0x7de>
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800aade:	b9a2      	cbnz	r2, 800ab0a <_dtoa_r+0x7e2>
 800aae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aae4:	0d12      	lsrs	r2, r2, #20
 800aae6:	0512      	lsls	r2, r2, #20
 800aae8:	b18a      	cbz	r2, 800ab0e <_dtoa_r+0x7e6>
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	3301      	adds	r3, #1
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	9b05      	ldr	r3, [sp, #20]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	930a      	str	r3, [sp, #40]	; 0x28
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f47f af70 	bne.w	800a9e2 <_dtoa_r+0x6ba>
 800ab02:	2001      	movs	r0, #1
 800ab04:	e775      	b.n	800a9f2 <_dtoa_r+0x6ca>
 800ab06:	2300      	movs	r3, #0
 800ab08:	e7f6      	b.n	800aaf8 <_dtoa_r+0x7d0>
 800ab0a:	9b02      	ldr	r3, [sp, #8]
 800ab0c:	e7f4      	b.n	800aaf8 <_dtoa_r+0x7d0>
 800ab0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab10:	e7f3      	b.n	800aafa <_dtoa_r+0x7d2>
 800ab12:	d082      	beq.n	800aa1a <_dtoa_r+0x6f2>
 800ab14:	4610      	mov	r0, r2
 800ab16:	301c      	adds	r0, #28
 800ab18:	e778      	b.n	800aa0c <_dtoa_r+0x6e4>
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	dc37      	bgt.n	800ab90 <_dtoa_r+0x868>
 800ab20:	9b06      	ldr	r3, [sp, #24]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	dd34      	ble.n	800ab90 <_dtoa_r+0x868>
 800ab26:	46ca      	mov	sl, r9
 800ab28:	f1ba 0f00 	cmp.w	sl, #0
 800ab2c:	d10d      	bne.n	800ab4a <_dtoa_r+0x822>
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4653      	mov	r3, sl
 800ab32:	2205      	movs	r2, #5
 800ab34:	4630      	mov	r0, r6
 800ab36:	f000 fce9 	bl	800b50c <__multadd>
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 feea 	bl	800b918 <__mcmp>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f73f adec 	bgt.w	800a722 <_dtoa_r+0x3fa>
 800ab4a:	9b08      	ldr	r3, [sp, #32]
 800ab4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab50:	ea6f 0b03 	mvn.w	fp, r3
 800ab54:	f04f 0900 	mov.w	r9, #0
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 fccd 	bl	800b4fa <_Bfree>
 800ab60:	2f00      	cmp	r7, #0
 800ab62:	f43f aea9 	beq.w	800a8b8 <_dtoa_r+0x590>
 800ab66:	f1b9 0f00 	cmp.w	r9, #0
 800ab6a:	d005      	beq.n	800ab78 <_dtoa_r+0x850>
 800ab6c:	45b9      	cmp	r9, r7
 800ab6e:	d003      	beq.n	800ab78 <_dtoa_r+0x850>
 800ab70:	4649      	mov	r1, r9
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 fcc1 	bl	800b4fa <_Bfree>
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f000 fcbd 	bl	800b4fa <_Bfree>
 800ab80:	e69a      	b.n	800a8b8 <_dtoa_r+0x590>
 800ab82:	2400      	movs	r4, #0
 800ab84:	4627      	mov	r7, r4
 800ab86:	e7e0      	b.n	800ab4a <_dtoa_r+0x822>
 800ab88:	46bb      	mov	fp, r7
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	e5c8      	b.n	800a722 <_dtoa_r+0x3fa>
 800ab90:	9b07      	ldr	r3, [sp, #28]
 800ab92:	46ca      	mov	sl, r9
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80ff 	beq.w	800ad98 <_dtoa_r+0xa70>
 800ab9a:	f1b8 0f00 	cmp.w	r8, #0
 800ab9e:	dd05      	ble.n	800abac <_dtoa_r+0x884>
 800aba0:	4639      	mov	r1, r7
 800aba2:	4642      	mov	r2, r8
 800aba4:	4630      	mov	r0, r6
 800aba6:	f000 fe47 	bl	800b838 <__lshift>
 800abaa:	4607      	mov	r7, r0
 800abac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d05c      	beq.n	800ac6c <_dtoa_r+0x944>
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 fc7b 	bl	800b4b0 <_Balloc>
 800abba:	4680      	mov	r8, r0
 800abbc:	b920      	cbnz	r0, 800abc8 <_dtoa_r+0x8a0>
 800abbe:	4b82      	ldr	r3, [pc, #520]	; (800adc8 <_dtoa_r+0xaa0>)
 800abc0:	4602      	mov	r2, r0
 800abc2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abc6:	e4cf      	b.n	800a568 <_dtoa_r+0x240>
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	3202      	adds	r2, #2
 800abcc:	0092      	lsls	r2, r2, #2
 800abce:	f107 010c 	add.w	r1, r7, #12
 800abd2:	300c      	adds	r0, #12
 800abd4:	f000 fc52 	bl	800b47c <memcpy>
 800abd8:	2201      	movs	r2, #1
 800abda:	4641      	mov	r1, r8
 800abdc:	4630      	mov	r0, r6
 800abde:	f000 fe2b 	bl	800b838 <__lshift>
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	3301      	adds	r3, #1
 800abe6:	9304      	str	r3, [sp, #16]
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	4453      	add	r3, sl
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	46b9      	mov	r9, r7
 800abf6:	9307      	str	r3, [sp, #28]
 800abf8:	4607      	mov	r7, r0
 800abfa:	9b04      	ldr	r3, [sp, #16]
 800abfc:	4621      	mov	r1, r4
 800abfe:	3b01      	subs	r3, #1
 800ac00:	4628      	mov	r0, r5
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	f7ff fb04 	bl	800a210 <quorem>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	3330      	adds	r3, #48	; 0x30
 800ac0c:	9005      	str	r0, [sp, #20]
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4628      	mov	r0, r5
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	f000 fe80 	bl	800b918 <__mcmp>
 800ac18:	463a      	mov	r2, r7
 800ac1a:	4682      	mov	sl, r0
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f000 fe96 	bl	800b950 <__mdiff>
 800ac24:	68c2      	ldr	r2, [r0, #12]
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	4680      	mov	r8, r0
 800ac2a:	bb0a      	cbnz	r2, 800ac70 <_dtoa_r+0x948>
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 fe72 	bl	800b918 <__mcmp>
 800ac34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac36:	4602      	mov	r2, r0
 800ac38:	4641      	mov	r1, r8
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ac40:	f000 fc5b 	bl	800b4fa <_Bfree>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac48:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ac4c:	ea43 0102 	orr.w	r1, r3, r2
 800ac50:	9b07      	ldr	r3, [sp, #28]
 800ac52:	430b      	orrs	r3, r1
 800ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac56:	d10d      	bne.n	800ac74 <_dtoa_r+0x94c>
 800ac58:	2b39      	cmp	r3, #57	; 0x39
 800ac5a:	d029      	beq.n	800acb0 <_dtoa_r+0x988>
 800ac5c:	f1ba 0f00 	cmp.w	sl, #0
 800ac60:	dd01      	ble.n	800ac66 <_dtoa_r+0x93e>
 800ac62:	9b05      	ldr	r3, [sp, #20]
 800ac64:	3331      	adds	r3, #49	; 0x31
 800ac66:	9a02      	ldr	r2, [sp, #8]
 800ac68:	7013      	strb	r3, [r2, #0]
 800ac6a:	e775      	b.n	800ab58 <_dtoa_r+0x830>
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	e7b8      	b.n	800abe2 <_dtoa_r+0x8ba>
 800ac70:	2201      	movs	r2, #1
 800ac72:	e7e1      	b.n	800ac38 <_dtoa_r+0x910>
 800ac74:	f1ba 0f00 	cmp.w	sl, #0
 800ac78:	db06      	blt.n	800ac88 <_dtoa_r+0x960>
 800ac7a:	9906      	ldr	r1, [sp, #24]
 800ac7c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ac80:	9907      	ldr	r1, [sp, #28]
 800ac82:	ea5a 0101 	orrs.w	r1, sl, r1
 800ac86:	d120      	bne.n	800acca <_dtoa_r+0x9a2>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	ddec      	ble.n	800ac66 <_dtoa_r+0x93e>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4630      	mov	r0, r6
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	f000 fdd0 	bl	800b838 <__lshift>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	f000 fe3c 	bl	800b918 <__mcmp>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	dc02      	bgt.n	800acac <_dtoa_r+0x984>
 800aca6:	d1de      	bne.n	800ac66 <_dtoa_r+0x93e>
 800aca8:	07da      	lsls	r2, r3, #31
 800acaa:	d5dc      	bpl.n	800ac66 <_dtoa_r+0x93e>
 800acac:	2b39      	cmp	r3, #57	; 0x39
 800acae:	d1d8      	bne.n	800ac62 <_dtoa_r+0x93a>
 800acb0:	9a02      	ldr	r2, [sp, #8]
 800acb2:	2339      	movs	r3, #57	; 0x39
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	4643      	mov	r3, r8
 800acb8:	4698      	mov	r8, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800acc0:	2a39      	cmp	r2, #57	; 0x39
 800acc2:	d051      	beq.n	800ad68 <_dtoa_r+0xa40>
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e746      	b.n	800ab58 <_dtoa_r+0x830>
 800acca:	2a00      	cmp	r2, #0
 800accc:	dd03      	ble.n	800acd6 <_dtoa_r+0x9ae>
 800acce:	2b39      	cmp	r3, #57	; 0x39
 800acd0:	d0ee      	beq.n	800acb0 <_dtoa_r+0x988>
 800acd2:	3301      	adds	r3, #1
 800acd4:	e7c7      	b.n	800ac66 <_dtoa_r+0x93e>
 800acd6:	9a04      	ldr	r2, [sp, #16]
 800acd8:	9908      	ldr	r1, [sp, #32]
 800acda:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acde:	428a      	cmp	r2, r1
 800ace0:	d02b      	beq.n	800ad3a <_dtoa_r+0xa12>
 800ace2:	4629      	mov	r1, r5
 800ace4:	2300      	movs	r3, #0
 800ace6:	220a      	movs	r2, #10
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 fc0f 	bl	800b50c <__multadd>
 800acee:	45b9      	cmp	r9, r7
 800acf0:	4605      	mov	r5, r0
 800acf2:	f04f 0300 	mov.w	r3, #0
 800acf6:	f04f 020a 	mov.w	r2, #10
 800acfa:	4649      	mov	r1, r9
 800acfc:	4630      	mov	r0, r6
 800acfe:	d107      	bne.n	800ad10 <_dtoa_r+0x9e8>
 800ad00:	f000 fc04 	bl	800b50c <__multadd>
 800ad04:	4681      	mov	r9, r0
 800ad06:	4607      	mov	r7, r0
 800ad08:	9b04      	ldr	r3, [sp, #16]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	e774      	b.n	800abfa <_dtoa_r+0x8d2>
 800ad10:	f000 fbfc 	bl	800b50c <__multadd>
 800ad14:	4639      	mov	r1, r7
 800ad16:	4681      	mov	r9, r0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	220a      	movs	r2, #10
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 fbf5 	bl	800b50c <__multadd>
 800ad22:	4607      	mov	r7, r0
 800ad24:	e7f0      	b.n	800ad08 <_dtoa_r+0x9e0>
 800ad26:	f1ba 0f00 	cmp.w	sl, #0
 800ad2a:	9a01      	ldr	r2, [sp, #4]
 800ad2c:	bfcc      	ite	gt
 800ad2e:	46d0      	movgt	r8, sl
 800ad30:	f04f 0801 	movle.w	r8, #1
 800ad34:	4490      	add	r8, r2
 800ad36:	f04f 0900 	mov.w	r9, #0
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4630      	mov	r0, r6
 800ad40:	9302      	str	r3, [sp, #8]
 800ad42:	f000 fd79 	bl	800b838 <__lshift>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4605      	mov	r5, r0
 800ad4a:	f000 fde5 	bl	800b918 <__mcmp>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	dcb1      	bgt.n	800acb6 <_dtoa_r+0x98e>
 800ad52:	d102      	bne.n	800ad5a <_dtoa_r+0xa32>
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	07db      	lsls	r3, r3, #31
 800ad58:	d4ad      	bmi.n	800acb6 <_dtoa_r+0x98e>
 800ad5a:	4643      	mov	r3, r8
 800ad5c:	4698      	mov	r8, r3
 800ad5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad62:	2a30      	cmp	r2, #48	; 0x30
 800ad64:	d0fa      	beq.n	800ad5c <_dtoa_r+0xa34>
 800ad66:	e6f7      	b.n	800ab58 <_dtoa_r+0x830>
 800ad68:	9a01      	ldr	r2, [sp, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d1a4      	bne.n	800acb8 <_dtoa_r+0x990>
 800ad6e:	f10b 0b01 	add.w	fp, fp, #1
 800ad72:	2331      	movs	r3, #49	; 0x31
 800ad74:	e778      	b.n	800ac68 <_dtoa_r+0x940>
 800ad76:	4b15      	ldr	r3, [pc, #84]	; (800adcc <_dtoa_r+0xaa4>)
 800ad78:	f7ff bb2c 	b.w	800a3d4 <_dtoa_r+0xac>
 800ad7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f47f ab13 	bne.w	800a3aa <_dtoa_r+0x82>
 800ad84:	4b12      	ldr	r3, [pc, #72]	; (800add0 <_dtoa_r+0xaa8>)
 800ad86:	f7ff bb25 	b.w	800a3d4 <_dtoa_r+0xac>
 800ad8a:	f1ba 0f00 	cmp.w	sl, #0
 800ad8e:	dc03      	bgt.n	800ad98 <_dtoa_r+0xa70>
 800ad90:	9b06      	ldr	r3, [sp, #24]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	f73f aec8 	bgt.w	800ab28 <_dtoa_r+0x800>
 800ad98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f7ff fa36 	bl	800a210 <quorem>
 800ada4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ada8:	f808 3b01 	strb.w	r3, [r8], #1
 800adac:	9a01      	ldr	r2, [sp, #4]
 800adae:	eba8 0202 	sub.w	r2, r8, r2
 800adb2:	4592      	cmp	sl, r2
 800adb4:	ddb7      	ble.n	800ad26 <_dtoa_r+0x9fe>
 800adb6:	4629      	mov	r1, r5
 800adb8:	2300      	movs	r3, #0
 800adba:	220a      	movs	r2, #10
 800adbc:	4630      	mov	r0, r6
 800adbe:	f000 fba5 	bl	800b50c <__multadd>
 800adc2:	4605      	mov	r5, r0
 800adc4:	e7ea      	b.n	800ad9c <_dtoa_r+0xa74>
 800adc6:	bf00      	nop
 800adc8:	0800d751 	.word	0x0800d751
 800adcc:	0800d722 	.word	0x0800d722
 800add0:	0800d748 	.word	0x0800d748

0800add4 <_malloc_trim_r>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	4606      	mov	r6, r0
 800adda:	2008      	movs	r0, #8
 800addc:	460c      	mov	r4, r1
 800adde:	f000 ff75 	bl	800bccc <sysconf>
 800ade2:	4f23      	ldr	r7, [pc, #140]	; (800ae70 <_malloc_trim_r+0x9c>)
 800ade4:	4680      	mov	r8, r0
 800ade6:	4630      	mov	r0, r6
 800ade8:	f000 fb56 	bl	800b498 <__malloc_lock>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	685d      	ldr	r5, [r3, #4]
 800adf0:	f025 0503 	bic.w	r5, r5, #3
 800adf4:	1b2c      	subs	r4, r5, r4
 800adf6:	3c11      	subs	r4, #17
 800adf8:	4444      	add	r4, r8
 800adfa:	fbb4 f4f8 	udiv	r4, r4, r8
 800adfe:	3c01      	subs	r4, #1
 800ae00:	fb08 f404 	mul.w	r4, r8, r4
 800ae04:	45a0      	cmp	r8, r4
 800ae06:	dd05      	ble.n	800ae14 <_malloc_trim_r+0x40>
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 fb4b 	bl	800b4a4 <__malloc_unlock>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae14:	2100      	movs	r1, #0
 800ae16:	4630      	mov	r0, r6
 800ae18:	f000 feba 	bl	800bb90 <_sbrk_r>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	442b      	add	r3, r5
 800ae20:	4298      	cmp	r0, r3
 800ae22:	d1f1      	bne.n	800ae08 <_malloc_trim_r+0x34>
 800ae24:	4261      	negs	r1, r4
 800ae26:	4630      	mov	r0, r6
 800ae28:	f000 feb2 	bl	800bb90 <_sbrk_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d110      	bne.n	800ae52 <_malloc_trim_r+0x7e>
 800ae30:	2100      	movs	r1, #0
 800ae32:	4630      	mov	r0, r6
 800ae34:	f000 feac 	bl	800bb90 <_sbrk_r>
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	1a83      	subs	r3, r0, r2
 800ae3c:	2b0f      	cmp	r3, #15
 800ae3e:	dde3      	ble.n	800ae08 <_malloc_trim_r+0x34>
 800ae40:	490c      	ldr	r1, [pc, #48]	; (800ae74 <_malloc_trim_r+0xa0>)
 800ae42:	6809      	ldr	r1, [r1, #0]
 800ae44:	1a40      	subs	r0, r0, r1
 800ae46:	490c      	ldr	r1, [pc, #48]	; (800ae78 <_malloc_trim_r+0xa4>)
 800ae48:	f043 0301 	orr.w	r3, r3, #1
 800ae4c:	6008      	str	r0, [r1, #0]
 800ae4e:	6053      	str	r3, [r2, #4]
 800ae50:	e7da      	b.n	800ae08 <_malloc_trim_r+0x34>
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	4a08      	ldr	r2, [pc, #32]	; (800ae78 <_malloc_trim_r+0xa4>)
 800ae56:	1b2d      	subs	r5, r5, r4
 800ae58:	f045 0501 	orr.w	r5, r5, #1
 800ae5c:	605d      	str	r5, [r3, #4]
 800ae5e:	6813      	ldr	r3, [r2, #0]
 800ae60:	4630      	mov	r0, r6
 800ae62:	1b1b      	subs	r3, r3, r4
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	f000 fb1d 	bl	800b4a4 <__malloc_unlock>
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	e7d0      	b.n	800ae10 <_malloc_trim_r+0x3c>
 800ae6e:	bf00      	nop
 800ae70:	24000534 	.word	0x24000534
 800ae74:	2400093c 	.word	0x2400093c
 800ae78:	240026e4 	.word	0x240026e4

0800ae7c <_free_r>:
 800ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7e:	4605      	mov	r5, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	2900      	cmp	r1, #0
 800ae84:	f000 80b1 	beq.w	800afea <_free_r+0x16e>
 800ae88:	f000 fb06 	bl	800b498 <__malloc_lock>
 800ae8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ae90:	4856      	ldr	r0, [pc, #344]	; (800afec <_free_r+0x170>)
 800ae92:	f022 0401 	bic.w	r4, r2, #1
 800ae96:	f1a7 0308 	sub.w	r3, r7, #8
 800ae9a:	eb03 0c04 	add.w	ip, r3, r4
 800ae9e:	6881      	ldr	r1, [r0, #8]
 800aea0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800aea4:	4561      	cmp	r1, ip
 800aea6:	f026 0603 	bic.w	r6, r6, #3
 800aeaa:	f002 0201 	and.w	r2, r2, #1
 800aeae:	d11b      	bne.n	800aee8 <_free_r+0x6c>
 800aeb0:	4434      	add	r4, r6
 800aeb2:	b93a      	cbnz	r2, 800aec4 <_free_r+0x48>
 800aeb4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	4414      	add	r4, r2
 800aebc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800aec0:	60ca      	str	r2, [r1, #12]
 800aec2:	6091      	str	r1, [r2, #8]
 800aec4:	f044 0201 	orr.w	r2, r4, #1
 800aec8:	605a      	str	r2, [r3, #4]
 800aeca:	6083      	str	r3, [r0, #8]
 800aecc:	4b48      	ldr	r3, [pc, #288]	; (800aff0 <_free_r+0x174>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d804      	bhi.n	800aede <_free_r+0x62>
 800aed4:	4b47      	ldr	r3, [pc, #284]	; (800aff4 <_free_r+0x178>)
 800aed6:	4628      	mov	r0, r5
 800aed8:	6819      	ldr	r1, [r3, #0]
 800aeda:	f7ff ff7b 	bl	800add4 <_malloc_trim_r>
 800aede:	4628      	mov	r0, r5
 800aee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aee4:	f000 bade 	b.w	800b4a4 <__malloc_unlock>
 800aee8:	f8cc 6004 	str.w	r6, [ip, #4]
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	d138      	bne.n	800af62 <_free_r+0xe6>
 800aef0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800aef4:	1a5b      	subs	r3, r3, r1
 800aef6:	440c      	add	r4, r1
 800aef8:	6899      	ldr	r1, [r3, #8]
 800aefa:	f100 0708 	add.w	r7, r0, #8
 800aefe:	42b9      	cmp	r1, r7
 800af00:	d031      	beq.n	800af66 <_free_r+0xea>
 800af02:	68df      	ldr	r7, [r3, #12]
 800af04:	60cf      	str	r7, [r1, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	eb0c 0106 	add.w	r1, ip, r6
 800af0c:	6849      	ldr	r1, [r1, #4]
 800af0e:	07c9      	lsls	r1, r1, #31
 800af10:	d40b      	bmi.n	800af2a <_free_r+0xae>
 800af12:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800af16:	4434      	add	r4, r6
 800af18:	bb3a      	cbnz	r2, 800af6a <_free_r+0xee>
 800af1a:	4e37      	ldr	r6, [pc, #220]	; (800aff8 <_free_r+0x17c>)
 800af1c:	42b1      	cmp	r1, r6
 800af1e:	d124      	bne.n	800af6a <_free_r+0xee>
 800af20:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af24:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800af28:	2201      	movs	r2, #1
 800af2a:	f044 0101 	orr.w	r1, r4, #1
 800af2e:	6059      	str	r1, [r3, #4]
 800af30:	511c      	str	r4, [r3, r4]
 800af32:	2a00      	cmp	r2, #0
 800af34:	d1d3      	bne.n	800aede <_free_r+0x62>
 800af36:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800af3a:	d21b      	bcs.n	800af74 <_free_r+0xf8>
 800af3c:	0961      	lsrs	r1, r4, #5
 800af3e:	08e2      	lsrs	r2, r4, #3
 800af40:	2401      	movs	r4, #1
 800af42:	408c      	lsls	r4, r1
 800af44:	6841      	ldr	r1, [r0, #4]
 800af46:	3201      	adds	r2, #1
 800af48:	430c      	orrs	r4, r1
 800af4a:	6044      	str	r4, [r0, #4]
 800af4c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800af50:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800af54:	3908      	subs	r1, #8
 800af56:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800af5a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800af5e:	60e3      	str	r3, [r4, #12]
 800af60:	e7bd      	b.n	800aede <_free_r+0x62>
 800af62:	2200      	movs	r2, #0
 800af64:	e7d0      	b.n	800af08 <_free_r+0x8c>
 800af66:	2201      	movs	r2, #1
 800af68:	e7ce      	b.n	800af08 <_free_r+0x8c>
 800af6a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800af6e:	60ce      	str	r6, [r1, #12]
 800af70:	60b1      	str	r1, [r6, #8]
 800af72:	e7da      	b.n	800af2a <_free_r+0xae>
 800af74:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800af78:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800af7c:	d214      	bcs.n	800afa8 <_free_r+0x12c>
 800af7e:	09a2      	lsrs	r2, r4, #6
 800af80:	3238      	adds	r2, #56	; 0x38
 800af82:	1c51      	adds	r1, r2, #1
 800af84:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800af88:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800af8c:	428e      	cmp	r6, r1
 800af8e:	d125      	bne.n	800afdc <_free_r+0x160>
 800af90:	2401      	movs	r4, #1
 800af92:	1092      	asrs	r2, r2, #2
 800af94:	fa04 f202 	lsl.w	r2, r4, r2
 800af98:	6844      	ldr	r4, [r0, #4]
 800af9a:	4322      	orrs	r2, r4
 800af9c:	6042      	str	r2, [r0, #4]
 800af9e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800afa2:	60b3      	str	r3, [r6, #8]
 800afa4:	60cb      	str	r3, [r1, #12]
 800afa6:	e79a      	b.n	800aede <_free_r+0x62>
 800afa8:	2a14      	cmp	r2, #20
 800afaa:	d801      	bhi.n	800afb0 <_free_r+0x134>
 800afac:	325b      	adds	r2, #91	; 0x5b
 800afae:	e7e8      	b.n	800af82 <_free_r+0x106>
 800afb0:	2a54      	cmp	r2, #84	; 0x54
 800afb2:	d802      	bhi.n	800afba <_free_r+0x13e>
 800afb4:	0b22      	lsrs	r2, r4, #12
 800afb6:	326e      	adds	r2, #110	; 0x6e
 800afb8:	e7e3      	b.n	800af82 <_free_r+0x106>
 800afba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800afbe:	d802      	bhi.n	800afc6 <_free_r+0x14a>
 800afc0:	0be2      	lsrs	r2, r4, #15
 800afc2:	3277      	adds	r2, #119	; 0x77
 800afc4:	e7dd      	b.n	800af82 <_free_r+0x106>
 800afc6:	f240 5154 	movw	r1, #1364	; 0x554
 800afca:	428a      	cmp	r2, r1
 800afcc:	bf9a      	itte	ls
 800afce:	0ca2      	lsrls	r2, r4, #18
 800afd0:	327c      	addls	r2, #124	; 0x7c
 800afd2:	227e      	movhi	r2, #126	; 0x7e
 800afd4:	e7d5      	b.n	800af82 <_free_r+0x106>
 800afd6:	6889      	ldr	r1, [r1, #8]
 800afd8:	428e      	cmp	r6, r1
 800afda:	d004      	beq.n	800afe6 <_free_r+0x16a>
 800afdc:	684a      	ldr	r2, [r1, #4]
 800afde:	f022 0203 	bic.w	r2, r2, #3
 800afe2:	42a2      	cmp	r2, r4
 800afe4:	d8f7      	bhi.n	800afd6 <_free_r+0x15a>
 800afe6:	68ce      	ldr	r6, [r1, #12]
 800afe8:	e7d9      	b.n	800af9e <_free_r+0x122>
 800afea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afec:	24000534 	.word	0x24000534
 800aff0:	24000940 	.word	0x24000940
 800aff4:	24002714 	.word	0x24002714
 800aff8:	2400053c 	.word	0x2400053c

0800affc <_localeconv_r>:
 800affc:	4800      	ldr	r0, [pc, #0]	; (800b000 <_localeconv_r+0x4>)
 800affe:	4770      	bx	lr
 800b000:	24000a34 	.word	0x24000a34

0800b004 <_malloc_r>:
 800b004:	f101 030b 	add.w	r3, r1, #11
 800b008:	2b16      	cmp	r3, #22
 800b00a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00e:	4605      	mov	r5, r0
 800b010:	d906      	bls.n	800b020 <_malloc_r+0x1c>
 800b012:	f033 0707 	bics.w	r7, r3, #7
 800b016:	d504      	bpl.n	800b022 <_malloc_r+0x1e>
 800b018:	230c      	movs	r3, #12
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	2400      	movs	r4, #0
 800b01e:	e1a5      	b.n	800b36c <_malloc_r+0x368>
 800b020:	2710      	movs	r7, #16
 800b022:	42b9      	cmp	r1, r7
 800b024:	d8f8      	bhi.n	800b018 <_malloc_r+0x14>
 800b026:	4628      	mov	r0, r5
 800b028:	f000 fa36 	bl	800b498 <__malloc_lock>
 800b02c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800b030:	4eb0      	ldr	r6, [pc, #704]	; (800b2f4 <_malloc_r+0x2f0>)
 800b032:	d237      	bcs.n	800b0a4 <_malloc_r+0xa0>
 800b034:	f107 0208 	add.w	r2, r7, #8
 800b038:	4432      	add	r2, r6
 800b03a:	f1a2 0108 	sub.w	r1, r2, #8
 800b03e:	6854      	ldr	r4, [r2, #4]
 800b040:	428c      	cmp	r4, r1
 800b042:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800b046:	d102      	bne.n	800b04e <_malloc_r+0x4a>
 800b048:	68d4      	ldr	r4, [r2, #12]
 800b04a:	42a2      	cmp	r2, r4
 800b04c:	d010      	beq.n	800b070 <_malloc_r+0x6c>
 800b04e:	6863      	ldr	r3, [r4, #4]
 800b050:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	60ca      	str	r2, [r1, #12]
 800b05a:	4423      	add	r3, r4
 800b05c:	6091      	str	r1, [r2, #8]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	f042 0201 	orr.w	r2, r2, #1
 800b064:	605a      	str	r2, [r3, #4]
 800b066:	4628      	mov	r0, r5
 800b068:	f000 fa1c 	bl	800b4a4 <__malloc_unlock>
 800b06c:	3408      	adds	r4, #8
 800b06e:	e17d      	b.n	800b36c <_malloc_r+0x368>
 800b070:	3302      	adds	r3, #2
 800b072:	6934      	ldr	r4, [r6, #16]
 800b074:	49a0      	ldr	r1, [pc, #640]	; (800b2f8 <_malloc_r+0x2f4>)
 800b076:	428c      	cmp	r4, r1
 800b078:	d077      	beq.n	800b16a <_malloc_r+0x166>
 800b07a:	6862      	ldr	r2, [r4, #4]
 800b07c:	f022 0c03 	bic.w	ip, r2, #3
 800b080:	ebac 0007 	sub.w	r0, ip, r7
 800b084:	280f      	cmp	r0, #15
 800b086:	dd48      	ble.n	800b11a <_malloc_r+0x116>
 800b088:	19e2      	adds	r2, r4, r7
 800b08a:	f040 0301 	orr.w	r3, r0, #1
 800b08e:	f047 0701 	orr.w	r7, r7, #1
 800b092:	6067      	str	r7, [r4, #4]
 800b094:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b098:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b09c:	6053      	str	r3, [r2, #4]
 800b09e:	f844 000c 	str.w	r0, [r4, ip]
 800b0a2:	e7e0      	b.n	800b066 <_malloc_r+0x62>
 800b0a4:	0a7b      	lsrs	r3, r7, #9
 800b0a6:	d02a      	beq.n	800b0fe <_malloc_r+0xfa>
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d812      	bhi.n	800b0d2 <_malloc_r+0xce>
 800b0ac:	09bb      	lsrs	r3, r7, #6
 800b0ae:	3338      	adds	r3, #56	; 0x38
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800b0b6:	f1a2 0c08 	sub.w	ip, r2, #8
 800b0ba:	6854      	ldr	r4, [r2, #4]
 800b0bc:	4564      	cmp	r4, ip
 800b0be:	d006      	beq.n	800b0ce <_malloc_r+0xca>
 800b0c0:	6862      	ldr	r2, [r4, #4]
 800b0c2:	f022 0203 	bic.w	r2, r2, #3
 800b0c6:	1bd0      	subs	r0, r2, r7
 800b0c8:	280f      	cmp	r0, #15
 800b0ca:	dd1c      	ble.n	800b106 <_malloc_r+0x102>
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	e7cf      	b.n	800b072 <_malloc_r+0x6e>
 800b0d2:	2b14      	cmp	r3, #20
 800b0d4:	d801      	bhi.n	800b0da <_malloc_r+0xd6>
 800b0d6:	335b      	adds	r3, #91	; 0x5b
 800b0d8:	e7ea      	b.n	800b0b0 <_malloc_r+0xac>
 800b0da:	2b54      	cmp	r3, #84	; 0x54
 800b0dc:	d802      	bhi.n	800b0e4 <_malloc_r+0xe0>
 800b0de:	0b3b      	lsrs	r3, r7, #12
 800b0e0:	336e      	adds	r3, #110	; 0x6e
 800b0e2:	e7e5      	b.n	800b0b0 <_malloc_r+0xac>
 800b0e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b0e8:	d802      	bhi.n	800b0f0 <_malloc_r+0xec>
 800b0ea:	0bfb      	lsrs	r3, r7, #15
 800b0ec:	3377      	adds	r3, #119	; 0x77
 800b0ee:	e7df      	b.n	800b0b0 <_malloc_r+0xac>
 800b0f0:	f240 5254 	movw	r2, #1364	; 0x554
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d804      	bhi.n	800b102 <_malloc_r+0xfe>
 800b0f8:	0cbb      	lsrs	r3, r7, #18
 800b0fa:	337c      	adds	r3, #124	; 0x7c
 800b0fc:	e7d8      	b.n	800b0b0 <_malloc_r+0xac>
 800b0fe:	233f      	movs	r3, #63	; 0x3f
 800b100:	e7d6      	b.n	800b0b0 <_malloc_r+0xac>
 800b102:	237e      	movs	r3, #126	; 0x7e
 800b104:	e7d4      	b.n	800b0b0 <_malloc_r+0xac>
 800b106:	2800      	cmp	r0, #0
 800b108:	68e1      	ldr	r1, [r4, #12]
 800b10a:	db04      	blt.n	800b116 <_malloc_r+0x112>
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	60d9      	str	r1, [r3, #12]
 800b110:	608b      	str	r3, [r1, #8]
 800b112:	18a3      	adds	r3, r4, r2
 800b114:	e7a3      	b.n	800b05e <_malloc_r+0x5a>
 800b116:	460c      	mov	r4, r1
 800b118:	e7d0      	b.n	800b0bc <_malloc_r+0xb8>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800b120:	db07      	blt.n	800b132 <_malloc_r+0x12e>
 800b122:	44a4      	add	ip, r4
 800b124:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b128:	f043 0301 	orr.w	r3, r3, #1
 800b12c:	f8cc 3004 	str.w	r3, [ip, #4]
 800b130:	e799      	b.n	800b066 <_malloc_r+0x62>
 800b132:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800b136:	6870      	ldr	r0, [r6, #4]
 800b138:	f080 8096 	bcs.w	800b268 <_malloc_r+0x264>
 800b13c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800b140:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800b144:	f04f 0c01 	mov.w	ip, #1
 800b148:	3201      	adds	r2, #1
 800b14a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b14e:	ea4c 0000 	orr.w	r0, ip, r0
 800b152:	6070      	str	r0, [r6, #4]
 800b154:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800b158:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800b15c:	3808      	subs	r0, #8
 800b15e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800b162:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800b166:	f8cc 400c 	str.w	r4, [ip, #12]
 800b16a:	2001      	movs	r0, #1
 800b16c:	109a      	asrs	r2, r3, #2
 800b16e:	fa00 f202 	lsl.w	r2, r0, r2
 800b172:	6870      	ldr	r0, [r6, #4]
 800b174:	4290      	cmp	r0, r2
 800b176:	d326      	bcc.n	800b1c6 <_malloc_r+0x1c2>
 800b178:	4210      	tst	r0, r2
 800b17a:	d106      	bne.n	800b18a <_malloc_r+0x186>
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	0052      	lsls	r2, r2, #1
 800b182:	4210      	tst	r0, r2
 800b184:	f103 0304 	add.w	r3, r3, #4
 800b188:	d0fa      	beq.n	800b180 <_malloc_r+0x17c>
 800b18a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800b18e:	46c1      	mov	r9, r8
 800b190:	469e      	mov	lr, r3
 800b192:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b196:	454c      	cmp	r4, r9
 800b198:	f040 80ba 	bne.w	800b310 <_malloc_r+0x30c>
 800b19c:	f10e 0e01 	add.w	lr, lr, #1
 800b1a0:	f01e 0f03 	tst.w	lr, #3
 800b1a4:	f109 0908 	add.w	r9, r9, #8
 800b1a8:	d1f3      	bne.n	800b192 <_malloc_r+0x18e>
 800b1aa:	0798      	lsls	r0, r3, #30
 800b1ac:	f040 80e4 	bne.w	800b378 <_malloc_r+0x374>
 800b1b0:	6873      	ldr	r3, [r6, #4]
 800b1b2:	ea23 0302 	bic.w	r3, r3, r2
 800b1b6:	6073      	str	r3, [r6, #4]
 800b1b8:	6870      	ldr	r0, [r6, #4]
 800b1ba:	0052      	lsls	r2, r2, #1
 800b1bc:	4290      	cmp	r0, r2
 800b1be:	d302      	bcc.n	800b1c6 <_malloc_r+0x1c2>
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	f040 80e6 	bne.w	800b392 <_malloc_r+0x38e>
 800b1c6:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800b1ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b1ce:	f023 0903 	bic.w	r9, r3, #3
 800b1d2:	45b9      	cmp	r9, r7
 800b1d4:	d304      	bcc.n	800b1e0 <_malloc_r+0x1dc>
 800b1d6:	eba9 0207 	sub.w	r2, r9, r7
 800b1da:	2a0f      	cmp	r2, #15
 800b1dc:	f300 8142 	bgt.w	800b464 <_malloc_r+0x460>
 800b1e0:	4b46      	ldr	r3, [pc, #280]	; (800b2fc <_malloc_r+0x2f8>)
 800b1e2:	6819      	ldr	r1, [r3, #0]
 800b1e4:	3110      	adds	r1, #16
 800b1e6:	4439      	add	r1, r7
 800b1e8:	2008      	movs	r0, #8
 800b1ea:	9101      	str	r1, [sp, #4]
 800b1ec:	f000 fd6e 	bl	800bccc <sysconf>
 800b1f0:	4a43      	ldr	r2, [pc, #268]	; (800b300 <_malloc_r+0x2fc>)
 800b1f2:	9901      	ldr	r1, [sp, #4]
 800b1f4:	6813      	ldr	r3, [r2, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	bf1f      	itttt	ne
 800b1fa:	f101 31ff 	addne.w	r1, r1, #4294967295
 800b1fe:	1809      	addne	r1, r1, r0
 800b200:	4243      	negne	r3, r0
 800b202:	4019      	andne	r1, r3
 800b204:	4680      	mov	r8, r0
 800b206:	4628      	mov	r0, r5
 800b208:	9101      	str	r1, [sp, #4]
 800b20a:	f000 fcc1 	bl	800bb90 <_sbrk_r>
 800b20e:	1c42      	adds	r2, r0, #1
 800b210:	eb0a 0b09 	add.w	fp, sl, r9
 800b214:	4604      	mov	r4, r0
 800b216:	f000 80f8 	beq.w	800b40a <_malloc_r+0x406>
 800b21a:	4583      	cmp	fp, r0
 800b21c:	9901      	ldr	r1, [sp, #4]
 800b21e:	4a38      	ldr	r2, [pc, #224]	; (800b300 <_malloc_r+0x2fc>)
 800b220:	d902      	bls.n	800b228 <_malloc_r+0x224>
 800b222:	45b2      	cmp	sl, r6
 800b224:	f040 80f1 	bne.w	800b40a <_malloc_r+0x406>
 800b228:	4b36      	ldr	r3, [pc, #216]	; (800b304 <_malloc_r+0x300>)
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	45a3      	cmp	fp, r4
 800b22e:	eb00 0e01 	add.w	lr, r0, r1
 800b232:	f8c3 e000 	str.w	lr, [r3]
 800b236:	f108 3cff 	add.w	ip, r8, #4294967295
 800b23a:	f040 80ac 	bne.w	800b396 <_malloc_r+0x392>
 800b23e:	ea1b 0f0c 	tst.w	fp, ip
 800b242:	f040 80a8 	bne.w	800b396 <_malloc_r+0x392>
 800b246:	68b2      	ldr	r2, [r6, #8]
 800b248:	4449      	add	r1, r9
 800b24a:	f041 0101 	orr.w	r1, r1, #1
 800b24e:	6051      	str	r1, [r2, #4]
 800b250:	4a2d      	ldr	r2, [pc, #180]	; (800b308 <_malloc_r+0x304>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6811      	ldr	r1, [r2, #0]
 800b256:	428b      	cmp	r3, r1
 800b258:	bf88      	it	hi
 800b25a:	6013      	strhi	r3, [r2, #0]
 800b25c:	4a2b      	ldr	r2, [pc, #172]	; (800b30c <_malloc_r+0x308>)
 800b25e:	6811      	ldr	r1, [r2, #0]
 800b260:	428b      	cmp	r3, r1
 800b262:	bf88      	it	hi
 800b264:	6013      	strhi	r3, [r2, #0]
 800b266:	e0d0      	b.n	800b40a <_malloc_r+0x406>
 800b268:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800b26c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b270:	d218      	bcs.n	800b2a4 <_malloc_r+0x2a0>
 800b272:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b276:	3238      	adds	r2, #56	; 0x38
 800b278:	f102 0e01 	add.w	lr, r2, #1
 800b27c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800b280:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800b284:	45f0      	cmp	r8, lr
 800b286:	d12b      	bne.n	800b2e0 <_malloc_r+0x2dc>
 800b288:	1092      	asrs	r2, r2, #2
 800b28a:	f04f 0c01 	mov.w	ip, #1
 800b28e:	fa0c f202 	lsl.w	r2, ip, r2
 800b292:	4310      	orrs	r0, r2
 800b294:	6070      	str	r0, [r6, #4]
 800b296:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b29a:	f8c8 4008 	str.w	r4, [r8, #8]
 800b29e:	f8ce 400c 	str.w	r4, [lr, #12]
 800b2a2:	e762      	b.n	800b16a <_malloc_r+0x166>
 800b2a4:	2a14      	cmp	r2, #20
 800b2a6:	d801      	bhi.n	800b2ac <_malloc_r+0x2a8>
 800b2a8:	325b      	adds	r2, #91	; 0x5b
 800b2aa:	e7e5      	b.n	800b278 <_malloc_r+0x274>
 800b2ac:	2a54      	cmp	r2, #84	; 0x54
 800b2ae:	d803      	bhi.n	800b2b8 <_malloc_r+0x2b4>
 800b2b0:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b2b4:	326e      	adds	r2, #110	; 0x6e
 800b2b6:	e7df      	b.n	800b278 <_malloc_r+0x274>
 800b2b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b2bc:	d803      	bhi.n	800b2c6 <_malloc_r+0x2c2>
 800b2be:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b2c2:	3277      	adds	r2, #119	; 0x77
 800b2c4:	e7d8      	b.n	800b278 <_malloc_r+0x274>
 800b2c6:	f240 5e54 	movw	lr, #1364	; 0x554
 800b2ca:	4572      	cmp	r2, lr
 800b2cc:	bf9a      	itte	ls
 800b2ce:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b2d2:	327c      	addls	r2, #124	; 0x7c
 800b2d4:	227e      	movhi	r2, #126	; 0x7e
 800b2d6:	e7cf      	b.n	800b278 <_malloc_r+0x274>
 800b2d8:	f8de e008 	ldr.w	lr, [lr, #8]
 800b2dc:	45f0      	cmp	r8, lr
 800b2de:	d005      	beq.n	800b2ec <_malloc_r+0x2e8>
 800b2e0:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b2e4:	f022 0203 	bic.w	r2, r2, #3
 800b2e8:	4562      	cmp	r2, ip
 800b2ea:	d8f5      	bhi.n	800b2d8 <_malloc_r+0x2d4>
 800b2ec:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b2f0:	e7d1      	b.n	800b296 <_malloc_r+0x292>
 800b2f2:	bf00      	nop
 800b2f4:	24000534 	.word	0x24000534
 800b2f8:	2400053c 	.word	0x2400053c
 800b2fc:	24002714 	.word	0x24002714
 800b300:	2400093c 	.word	0x2400093c
 800b304:	240026e4 	.word	0x240026e4
 800b308:	2400270c 	.word	0x2400270c
 800b30c:	24002710 	.word	0x24002710
 800b310:	6860      	ldr	r0, [r4, #4]
 800b312:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b316:	f020 0003 	bic.w	r0, r0, #3
 800b31a:	eba0 0a07 	sub.w	sl, r0, r7
 800b31e:	f1ba 0f0f 	cmp.w	sl, #15
 800b322:	dd12      	ble.n	800b34a <_malloc_r+0x346>
 800b324:	68a3      	ldr	r3, [r4, #8]
 800b326:	19e2      	adds	r2, r4, r7
 800b328:	f047 0701 	orr.w	r7, r7, #1
 800b32c:	6067      	str	r7, [r4, #4]
 800b32e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b332:	f8cc 3008 	str.w	r3, [ip, #8]
 800b336:	f04a 0301 	orr.w	r3, sl, #1
 800b33a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800b33e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800b342:	6053      	str	r3, [r2, #4]
 800b344:	f844 a000 	str.w	sl, [r4, r0]
 800b348:	e68d      	b.n	800b066 <_malloc_r+0x62>
 800b34a:	f1ba 0f00 	cmp.w	sl, #0
 800b34e:	db11      	blt.n	800b374 <_malloc_r+0x370>
 800b350:	4420      	add	r0, r4
 800b352:	6843      	ldr	r3, [r0, #4]
 800b354:	f043 0301 	orr.w	r3, r3, #1
 800b358:	6043      	str	r3, [r0, #4]
 800b35a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b35e:	4628      	mov	r0, r5
 800b360:	f8c3 c00c 	str.w	ip, [r3, #12]
 800b364:	f8cc 3008 	str.w	r3, [ip, #8]
 800b368:	f000 f89c 	bl	800b4a4 <__malloc_unlock>
 800b36c:	4620      	mov	r0, r4
 800b36e:	b003      	add	sp, #12
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4664      	mov	r4, ip
 800b376:	e70e      	b.n	800b196 <_malloc_r+0x192>
 800b378:	f858 0908 	ldr.w	r0, [r8], #-8
 800b37c:	4540      	cmp	r0, r8
 800b37e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b382:	f43f af12 	beq.w	800b1aa <_malloc_r+0x1a6>
 800b386:	e717      	b.n	800b1b8 <_malloc_r+0x1b4>
 800b388:	3304      	adds	r3, #4
 800b38a:	0052      	lsls	r2, r2, #1
 800b38c:	4210      	tst	r0, r2
 800b38e:	d0fb      	beq.n	800b388 <_malloc_r+0x384>
 800b390:	e6fb      	b.n	800b18a <_malloc_r+0x186>
 800b392:	4673      	mov	r3, lr
 800b394:	e7fa      	b.n	800b38c <_malloc_r+0x388>
 800b396:	6810      	ldr	r0, [r2, #0]
 800b398:	3001      	adds	r0, #1
 800b39a:	bf1b      	ittet	ne
 800b39c:	eba4 0b0b 	subne.w	fp, r4, fp
 800b3a0:	eb0b 020e 	addne.w	r2, fp, lr
 800b3a4:	6014      	streq	r4, [r2, #0]
 800b3a6:	601a      	strne	r2, [r3, #0]
 800b3a8:	f014 0b07 	ands.w	fp, r4, #7
 800b3ac:	bf1a      	itte	ne
 800b3ae:	f1cb 0008 	rsbne	r0, fp, #8
 800b3b2:	1824      	addne	r4, r4, r0
 800b3b4:	4658      	moveq	r0, fp
 800b3b6:	1862      	adds	r2, r4, r1
 800b3b8:	ea02 010c 	and.w	r1, r2, ip
 800b3bc:	4480      	add	r8, r0
 800b3be:	eba8 0801 	sub.w	r8, r8, r1
 800b3c2:	ea08 080c 	and.w	r8, r8, ip
 800b3c6:	4641      	mov	r1, r8
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	9201      	str	r2, [sp, #4]
 800b3cc:	f000 fbe0 	bl	800bb90 <_sbrk_r>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	9a01      	ldr	r2, [sp, #4]
 800b3d4:	4b28      	ldr	r3, [pc, #160]	; (800b478 <_malloc_r+0x474>)
 800b3d6:	d107      	bne.n	800b3e8 <_malloc_r+0x3e4>
 800b3d8:	f1bb 0f00 	cmp.w	fp, #0
 800b3dc:	d023      	beq.n	800b426 <_malloc_r+0x422>
 800b3de:	f1ab 0008 	sub.w	r0, fp, #8
 800b3e2:	4410      	add	r0, r2
 800b3e4:	f04f 0800 	mov.w	r8, #0
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	60b4      	str	r4, [r6, #8]
 800b3ec:	1b00      	subs	r0, r0, r4
 800b3ee:	4440      	add	r0, r8
 800b3f0:	4442      	add	r2, r8
 800b3f2:	f040 0001 	orr.w	r0, r0, #1
 800b3f6:	45b2      	cmp	sl, r6
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	6060      	str	r0, [r4, #4]
 800b3fc:	f43f af28 	beq.w	800b250 <_malloc_r+0x24c>
 800b400:	f1b9 0f0f 	cmp.w	r9, #15
 800b404:	d812      	bhi.n	800b42c <_malloc_r+0x428>
 800b406:	2301      	movs	r3, #1
 800b408:	6063      	str	r3, [r4, #4]
 800b40a:	68b3      	ldr	r3, [r6, #8]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f023 0303 	bic.w	r3, r3, #3
 800b412:	42bb      	cmp	r3, r7
 800b414:	eba3 0207 	sub.w	r2, r3, r7
 800b418:	d301      	bcc.n	800b41e <_malloc_r+0x41a>
 800b41a:	2a0f      	cmp	r2, #15
 800b41c:	dc22      	bgt.n	800b464 <_malloc_r+0x460>
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f840 	bl	800b4a4 <__malloc_unlock>
 800b424:	e5fa      	b.n	800b01c <_malloc_r+0x18>
 800b426:	4610      	mov	r0, r2
 800b428:	46d8      	mov	r8, fp
 800b42a:	e7dd      	b.n	800b3e8 <_malloc_r+0x3e4>
 800b42c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b430:	f1a9 090c 	sub.w	r9, r9, #12
 800b434:	f029 0907 	bic.w	r9, r9, #7
 800b438:	f002 0201 	and.w	r2, r2, #1
 800b43c:	ea42 0209 	orr.w	r2, r2, r9
 800b440:	f8ca 2004 	str.w	r2, [sl, #4]
 800b444:	2105      	movs	r1, #5
 800b446:	eb0a 0209 	add.w	r2, sl, r9
 800b44a:	f1b9 0f0f 	cmp.w	r9, #15
 800b44e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800b452:	f67f aefd 	bls.w	800b250 <_malloc_r+0x24c>
 800b456:	f10a 0108 	add.w	r1, sl, #8
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7ff fd0e 	bl	800ae7c <_free_r>
 800b460:	4b05      	ldr	r3, [pc, #20]	; (800b478 <_malloc_r+0x474>)
 800b462:	e6f5      	b.n	800b250 <_malloc_r+0x24c>
 800b464:	68b4      	ldr	r4, [r6, #8]
 800b466:	f047 0301 	orr.w	r3, r7, #1
 800b46a:	4427      	add	r7, r4
 800b46c:	f042 0201 	orr.w	r2, r2, #1
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	60b7      	str	r7, [r6, #8]
 800b474:	607a      	str	r2, [r7, #4]
 800b476:	e5f6      	b.n	800b066 <_malloc_r+0x62>
 800b478:	240026e4 	.word	0x240026e4

0800b47c <memcpy>:
 800b47c:	440a      	add	r2, r1
 800b47e:	4291      	cmp	r1, r2
 800b480:	f100 33ff 	add.w	r3, r0, #4294967295
 800b484:	d100      	bne.n	800b488 <memcpy+0xc>
 800b486:	4770      	bx	lr
 800b488:	b510      	push	{r4, lr}
 800b48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b492:	4291      	cmp	r1, r2
 800b494:	d1f9      	bne.n	800b48a <memcpy+0xe>
 800b496:	bd10      	pop	{r4, pc}

0800b498 <__malloc_lock>:
 800b498:	4801      	ldr	r0, [pc, #4]	; (800b4a0 <__malloc_lock+0x8>)
 800b49a:	f7fd bca7 	b.w	8008dec <__retarget_lock_acquire_recursive>
 800b49e:	bf00      	nop
 800b4a0:	240026e1 	.word	0x240026e1

0800b4a4 <__malloc_unlock>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	; (800b4ac <__malloc_unlock+0x8>)
 800b4a6:	f7fd bca2 	b.w	8008dee <__retarget_lock_release_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	240026e1 	.word	0x240026e1

0800b4b0 <_Balloc>:
 800b4b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b4b2:	b570      	push	{r4, r5, r6, lr}
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	b17b      	cbz	r3, 800b4da <_Balloc+0x2a>
 800b4ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b4bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b4c0:	b9a0      	cbnz	r0, 800b4ec <_Balloc+0x3c>
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	fa01 f604 	lsl.w	r6, r1, r4
 800b4c8:	1d72      	adds	r2, r6, #5
 800b4ca:	0092      	lsls	r2, r2, #2
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f000 fc29 	bl	800bd24 <_calloc_r>
 800b4d2:	b148      	cbz	r0, 800b4e8 <_Balloc+0x38>
 800b4d4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800b4d8:	e00b      	b.n	800b4f2 <_Balloc+0x42>
 800b4da:	2221      	movs	r2, #33	; 0x21
 800b4dc:	2104      	movs	r1, #4
 800b4de:	f000 fc21 	bl	800bd24 <_calloc_r>
 800b4e2:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1e8      	bne.n	800b4ba <_Balloc+0xa>
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	6802      	ldr	r2, [r0, #0]
 800b4ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4f8:	e7f7      	b.n	800b4ea <_Balloc+0x3a>

0800b4fa <_Bfree>:
 800b4fa:	b131      	cbz	r1, 800b50a <_Bfree+0x10>
 800b4fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b4fe:	684a      	ldr	r2, [r1, #4]
 800b500:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b504:	6008      	str	r0, [r1, #0]
 800b506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b50a:	4770      	bx	lr

0800b50c <__multadd>:
 800b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b510:	690d      	ldr	r5, [r1, #16]
 800b512:	4607      	mov	r7, r0
 800b514:	460c      	mov	r4, r1
 800b516:	461e      	mov	r6, r3
 800b518:	f101 0c14 	add.w	ip, r1, #20
 800b51c:	2000      	movs	r0, #0
 800b51e:	f8dc 3000 	ldr.w	r3, [ip]
 800b522:	b299      	uxth	r1, r3
 800b524:	fb02 6101 	mla	r1, r2, r1, r6
 800b528:	0c1e      	lsrs	r6, r3, #16
 800b52a:	0c0b      	lsrs	r3, r1, #16
 800b52c:	fb02 3306 	mla	r3, r2, r6, r3
 800b530:	b289      	uxth	r1, r1
 800b532:	3001      	adds	r0, #1
 800b534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b538:	4285      	cmp	r5, r0
 800b53a:	f84c 1b04 	str.w	r1, [ip], #4
 800b53e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b542:	dcec      	bgt.n	800b51e <__multadd+0x12>
 800b544:	b30e      	cbz	r6, 800b58a <__multadd+0x7e>
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	42ab      	cmp	r3, r5
 800b54a:	dc19      	bgt.n	800b580 <__multadd+0x74>
 800b54c:	6861      	ldr	r1, [r4, #4]
 800b54e:	4638      	mov	r0, r7
 800b550:	3101      	adds	r1, #1
 800b552:	f7ff ffad 	bl	800b4b0 <_Balloc>
 800b556:	4680      	mov	r8, r0
 800b558:	b928      	cbnz	r0, 800b566 <__multadd+0x5a>
 800b55a:	4602      	mov	r2, r0
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <__multadd+0x84>)
 800b55e:	480d      	ldr	r0, [pc, #52]	; (800b594 <__multadd+0x88>)
 800b560:	21b5      	movs	r1, #181	; 0xb5
 800b562:	f000 fbc1 	bl	800bce8 <__assert_func>
 800b566:	6922      	ldr	r2, [r4, #16]
 800b568:	3202      	adds	r2, #2
 800b56a:	f104 010c 	add.w	r1, r4, #12
 800b56e:	0092      	lsls	r2, r2, #2
 800b570:	300c      	adds	r0, #12
 800b572:	f7ff ff83 	bl	800b47c <memcpy>
 800b576:	4621      	mov	r1, r4
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff ffbe 	bl	800b4fa <_Bfree>
 800b57e:	4644      	mov	r4, r8
 800b580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b584:	3501      	adds	r5, #1
 800b586:	615e      	str	r6, [r3, #20]
 800b588:	6125      	str	r5, [r4, #16]
 800b58a:	4620      	mov	r0, r4
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	0800d751 	.word	0x0800d751
 800b594:	0800d7bd 	.word	0x0800d7bd

0800b598 <__hi0bits>:
 800b598:	0c03      	lsrs	r3, r0, #16
 800b59a:	041b      	lsls	r3, r3, #16
 800b59c:	b9d3      	cbnz	r3, 800b5d4 <__hi0bits+0x3c>
 800b59e:	0400      	lsls	r0, r0, #16
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5a6:	bf04      	itt	eq
 800b5a8:	0200      	lsleq	r0, r0, #8
 800b5aa:	3308      	addeq	r3, #8
 800b5ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5b0:	bf04      	itt	eq
 800b5b2:	0100      	lsleq	r0, r0, #4
 800b5b4:	3304      	addeq	r3, #4
 800b5b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5ba:	bf04      	itt	eq
 800b5bc:	0080      	lsleq	r0, r0, #2
 800b5be:	3302      	addeq	r3, #2
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	db05      	blt.n	800b5d0 <__hi0bits+0x38>
 800b5c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5c8:	f103 0301 	add.w	r3, r3, #1
 800b5cc:	bf08      	it	eq
 800b5ce:	2320      	moveq	r3, #32
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	4770      	bx	lr
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e7e4      	b.n	800b5a2 <__hi0bits+0xa>

0800b5d8 <__lo0bits>:
 800b5d8:	6803      	ldr	r3, [r0, #0]
 800b5da:	f013 0207 	ands.w	r2, r3, #7
 800b5de:	4601      	mov	r1, r0
 800b5e0:	d00b      	beq.n	800b5fa <__lo0bits+0x22>
 800b5e2:	07da      	lsls	r2, r3, #31
 800b5e4:	d423      	bmi.n	800b62e <__lo0bits+0x56>
 800b5e6:	0798      	lsls	r0, r3, #30
 800b5e8:	bf49      	itett	mi
 800b5ea:	085b      	lsrmi	r3, r3, #1
 800b5ec:	089b      	lsrpl	r3, r3, #2
 800b5ee:	2001      	movmi	r0, #1
 800b5f0:	600b      	strmi	r3, [r1, #0]
 800b5f2:	bf5c      	itt	pl
 800b5f4:	600b      	strpl	r3, [r1, #0]
 800b5f6:	2002      	movpl	r0, #2
 800b5f8:	4770      	bx	lr
 800b5fa:	b298      	uxth	r0, r3
 800b5fc:	b9a8      	cbnz	r0, 800b62a <__lo0bits+0x52>
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	2010      	movs	r0, #16
 800b602:	b2da      	uxtb	r2, r3
 800b604:	b90a      	cbnz	r2, 800b60a <__lo0bits+0x32>
 800b606:	3008      	adds	r0, #8
 800b608:	0a1b      	lsrs	r3, r3, #8
 800b60a:	071a      	lsls	r2, r3, #28
 800b60c:	bf04      	itt	eq
 800b60e:	091b      	lsreq	r3, r3, #4
 800b610:	3004      	addeq	r0, #4
 800b612:	079a      	lsls	r2, r3, #30
 800b614:	bf04      	itt	eq
 800b616:	089b      	lsreq	r3, r3, #2
 800b618:	3002      	addeq	r0, #2
 800b61a:	07da      	lsls	r2, r3, #31
 800b61c:	d403      	bmi.n	800b626 <__lo0bits+0x4e>
 800b61e:	085b      	lsrs	r3, r3, #1
 800b620:	f100 0001 	add.w	r0, r0, #1
 800b624:	d005      	beq.n	800b632 <__lo0bits+0x5a>
 800b626:	600b      	str	r3, [r1, #0]
 800b628:	4770      	bx	lr
 800b62a:	4610      	mov	r0, r2
 800b62c:	e7e9      	b.n	800b602 <__lo0bits+0x2a>
 800b62e:	2000      	movs	r0, #0
 800b630:	4770      	bx	lr
 800b632:	2020      	movs	r0, #32
 800b634:	4770      	bx	lr
	...

0800b638 <__i2b>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	460c      	mov	r4, r1
 800b63c:	2101      	movs	r1, #1
 800b63e:	f7ff ff37 	bl	800b4b0 <_Balloc>
 800b642:	4602      	mov	r2, r0
 800b644:	b928      	cbnz	r0, 800b652 <__i2b+0x1a>
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <__i2b+0x24>)
 800b648:	4805      	ldr	r0, [pc, #20]	; (800b660 <__i2b+0x28>)
 800b64a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b64e:	f000 fb4b 	bl	800bce8 <__assert_func>
 800b652:	2301      	movs	r3, #1
 800b654:	6144      	str	r4, [r0, #20]
 800b656:	6103      	str	r3, [r0, #16]
 800b658:	bd10      	pop	{r4, pc}
 800b65a:	bf00      	nop
 800b65c:	0800d751 	.word	0x0800d751
 800b660:	0800d7bd 	.word	0x0800d7bd

0800b664 <__multiply>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4691      	mov	r9, r2
 800b66a:	690a      	ldr	r2, [r1, #16]
 800b66c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b670:	429a      	cmp	r2, r3
 800b672:	bfb8      	it	lt
 800b674:	460b      	movlt	r3, r1
 800b676:	460c      	mov	r4, r1
 800b678:	bfbc      	itt	lt
 800b67a:	464c      	movlt	r4, r9
 800b67c:	4699      	movlt	r9, r3
 800b67e:	6927      	ldr	r7, [r4, #16]
 800b680:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b684:	68a3      	ldr	r3, [r4, #8]
 800b686:	6861      	ldr	r1, [r4, #4]
 800b688:	eb07 060a 	add.w	r6, r7, sl
 800b68c:	42b3      	cmp	r3, r6
 800b68e:	b085      	sub	sp, #20
 800b690:	bfb8      	it	lt
 800b692:	3101      	addlt	r1, #1
 800b694:	f7ff ff0c 	bl	800b4b0 <_Balloc>
 800b698:	b930      	cbnz	r0, 800b6a8 <__multiply+0x44>
 800b69a:	4602      	mov	r2, r0
 800b69c:	4b44      	ldr	r3, [pc, #272]	; (800b7b0 <__multiply+0x14c>)
 800b69e:	4845      	ldr	r0, [pc, #276]	; (800b7b4 <__multiply+0x150>)
 800b6a0:	f240 115d 	movw	r1, #349	; 0x15d
 800b6a4:	f000 fb20 	bl	800bce8 <__assert_func>
 800b6a8:	f100 0514 	add.w	r5, r0, #20
 800b6ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4543      	cmp	r3, r8
 800b6b6:	d321      	bcc.n	800b6fc <__multiply+0x98>
 800b6b8:	f104 0314 	add.w	r3, r4, #20
 800b6bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6c0:	f109 0314 	add.w	r3, r9, #20
 800b6c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6c8:	9202      	str	r2, [sp, #8]
 800b6ca:	1b3a      	subs	r2, r7, r4
 800b6cc:	3a15      	subs	r2, #21
 800b6ce:	f022 0203 	bic.w	r2, r2, #3
 800b6d2:	3204      	adds	r2, #4
 800b6d4:	f104 0115 	add.w	r1, r4, #21
 800b6d8:	428f      	cmp	r7, r1
 800b6da:	bf38      	it	cc
 800b6dc:	2204      	movcc	r2, #4
 800b6de:	9201      	str	r2, [sp, #4]
 800b6e0:	9a02      	ldr	r2, [sp, #8]
 800b6e2:	9303      	str	r3, [sp, #12]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d80c      	bhi.n	800b702 <__multiply+0x9e>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	dd03      	ble.n	800b6f4 <__multiply+0x90>
 800b6ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d05a      	beq.n	800b7aa <__multiply+0x146>
 800b6f4:	6106      	str	r6, [r0, #16]
 800b6f6:	b005      	add	sp, #20
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	f843 2b04 	str.w	r2, [r3], #4
 800b700:	e7d8      	b.n	800b6b4 <__multiply+0x50>
 800b702:	f8b3 a000 	ldrh.w	sl, [r3]
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	d024      	beq.n	800b756 <__multiply+0xf2>
 800b70c:	f104 0e14 	add.w	lr, r4, #20
 800b710:	46a9      	mov	r9, r5
 800b712:	f04f 0c00 	mov.w	ip, #0
 800b716:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b71a:	f8d9 1000 	ldr.w	r1, [r9]
 800b71e:	fa1f fb82 	uxth.w	fp, r2
 800b722:	b289      	uxth	r1, r1
 800b724:	fb0a 110b 	mla	r1, sl, fp, r1
 800b728:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b72c:	f8d9 2000 	ldr.w	r2, [r9]
 800b730:	4461      	add	r1, ip
 800b732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b736:	fb0a c20b 	mla	r2, sl, fp, ip
 800b73a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b73e:	b289      	uxth	r1, r1
 800b740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b744:	4577      	cmp	r7, lr
 800b746:	f849 1b04 	str.w	r1, [r9], #4
 800b74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b74e:	d8e2      	bhi.n	800b716 <__multiply+0xb2>
 800b750:	9a01      	ldr	r2, [sp, #4]
 800b752:	f845 c002 	str.w	ip, [r5, r2]
 800b756:	9a03      	ldr	r2, [sp, #12]
 800b758:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b75c:	3304      	adds	r3, #4
 800b75e:	f1b9 0f00 	cmp.w	r9, #0
 800b762:	d020      	beq.n	800b7a6 <__multiply+0x142>
 800b764:	6829      	ldr	r1, [r5, #0]
 800b766:	f104 0c14 	add.w	ip, r4, #20
 800b76a:	46ae      	mov	lr, r5
 800b76c:	f04f 0a00 	mov.w	sl, #0
 800b770:	f8bc b000 	ldrh.w	fp, [ip]
 800b774:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b778:	fb09 220b 	mla	r2, r9, fp, r2
 800b77c:	4492      	add	sl, r2
 800b77e:	b289      	uxth	r1, r1
 800b780:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b784:	f84e 1b04 	str.w	r1, [lr], #4
 800b788:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b78c:	f8be 1000 	ldrh.w	r1, [lr]
 800b790:	0c12      	lsrs	r2, r2, #16
 800b792:	fb09 1102 	mla	r1, r9, r2, r1
 800b796:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b79a:	4567      	cmp	r7, ip
 800b79c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7a0:	d8e6      	bhi.n	800b770 <__multiply+0x10c>
 800b7a2:	9a01      	ldr	r2, [sp, #4]
 800b7a4:	50a9      	str	r1, [r5, r2]
 800b7a6:	3504      	adds	r5, #4
 800b7a8:	e79a      	b.n	800b6e0 <__multiply+0x7c>
 800b7aa:	3e01      	subs	r6, #1
 800b7ac:	e79c      	b.n	800b6e8 <__multiply+0x84>
 800b7ae:	bf00      	nop
 800b7b0:	0800d751 	.word	0x0800d751
 800b7b4:	0800d7bd 	.word	0x0800d7bd

0800b7b8 <__pow5mult>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4615      	mov	r5, r2
 800b7be:	f012 0203 	ands.w	r2, r2, #3
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	460f      	mov	r7, r1
 800b7c6:	d007      	beq.n	800b7d8 <__pow5mult+0x20>
 800b7c8:	4c1a      	ldr	r4, [pc, #104]	; (800b834 <__pow5mult+0x7c>)
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7d2:	f7ff fe9b 	bl	800b50c <__multadd>
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	10ad      	asrs	r5, r5, #2
 800b7da:	d027      	beq.n	800b82c <__pow5mult+0x74>
 800b7dc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b7de:	b944      	cbnz	r4, 800b7f2 <__pow5mult+0x3a>
 800b7e0:	f240 2171 	movw	r1, #625	; 0x271
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ff27 	bl	800b638 <__i2b>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	64b0      	str	r0, [r6, #72]	; 0x48
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	6003      	str	r3, [r0, #0]
 800b7f2:	f04f 0900 	mov.w	r9, #0
 800b7f6:	07eb      	lsls	r3, r5, #31
 800b7f8:	d50a      	bpl.n	800b810 <__pow5mult+0x58>
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ff30 	bl	800b664 <__multiply>
 800b804:	4639      	mov	r1, r7
 800b806:	4680      	mov	r8, r0
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff fe76 	bl	800b4fa <_Bfree>
 800b80e:	4647      	mov	r7, r8
 800b810:	106d      	asrs	r5, r5, #1
 800b812:	d00b      	beq.n	800b82c <__pow5mult+0x74>
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	b938      	cbnz	r0, 800b828 <__pow5mult+0x70>
 800b818:	4622      	mov	r2, r4
 800b81a:	4621      	mov	r1, r4
 800b81c:	4630      	mov	r0, r6
 800b81e:	f7ff ff21 	bl	800b664 <__multiply>
 800b822:	6020      	str	r0, [r4, #0]
 800b824:	f8c0 9000 	str.w	r9, [r0]
 800b828:	4604      	mov	r4, r0
 800b82a:	e7e4      	b.n	800b7f6 <__pow5mult+0x3e>
 800b82c:	4638      	mov	r0, r7
 800b82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b832:	bf00      	nop
 800b834:	0800d910 	.word	0x0800d910

0800b838 <__lshift>:
 800b838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b83c:	460c      	mov	r4, r1
 800b83e:	6849      	ldr	r1, [r1, #4]
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	4607      	mov	r7, r0
 800b84a:	4691      	mov	r9, r2
 800b84c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b850:	f108 0601 	add.w	r6, r8, #1
 800b854:	42b3      	cmp	r3, r6
 800b856:	db0b      	blt.n	800b870 <__lshift+0x38>
 800b858:	4638      	mov	r0, r7
 800b85a:	f7ff fe29 	bl	800b4b0 <_Balloc>
 800b85e:	4605      	mov	r5, r0
 800b860:	b948      	cbnz	r0, 800b876 <__lshift+0x3e>
 800b862:	4602      	mov	r2, r0
 800b864:	4b2a      	ldr	r3, [pc, #168]	; (800b910 <__lshift+0xd8>)
 800b866:	482b      	ldr	r0, [pc, #172]	; (800b914 <__lshift+0xdc>)
 800b868:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b86c:	f000 fa3c 	bl	800bce8 <__assert_func>
 800b870:	3101      	adds	r1, #1
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	e7ee      	b.n	800b854 <__lshift+0x1c>
 800b876:	2300      	movs	r3, #0
 800b878:	f100 0114 	add.w	r1, r0, #20
 800b87c:	f100 0210 	add.w	r2, r0, #16
 800b880:	4618      	mov	r0, r3
 800b882:	4553      	cmp	r3, sl
 800b884:	db37      	blt.n	800b8f6 <__lshift+0xbe>
 800b886:	6920      	ldr	r0, [r4, #16]
 800b888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b88c:	f104 0314 	add.w	r3, r4, #20
 800b890:	f019 091f 	ands.w	r9, r9, #31
 800b894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b898:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b89c:	d02f      	beq.n	800b8fe <__lshift+0xc6>
 800b89e:	f1c9 0e20 	rsb	lr, r9, #32
 800b8a2:	468a      	mov	sl, r1
 800b8a4:	f04f 0c00 	mov.w	ip, #0
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	fa02 f209 	lsl.w	r2, r2, r9
 800b8ae:	ea42 020c 	orr.w	r2, r2, ip
 800b8b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ba:	4298      	cmp	r0, r3
 800b8bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b8c0:	d8f2      	bhi.n	800b8a8 <__lshift+0x70>
 800b8c2:	1b03      	subs	r3, r0, r4
 800b8c4:	3b15      	subs	r3, #21
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	f104 0215 	add.w	r2, r4, #21
 800b8d0:	4290      	cmp	r0, r2
 800b8d2:	bf38      	it	cc
 800b8d4:	2304      	movcc	r3, #4
 800b8d6:	f841 c003 	str.w	ip, [r1, r3]
 800b8da:	f1bc 0f00 	cmp.w	ip, #0
 800b8de:	d001      	beq.n	800b8e4 <__lshift+0xac>
 800b8e0:	f108 0602 	add.w	r6, r8, #2
 800b8e4:	3e01      	subs	r6, #1
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	612e      	str	r6, [r5, #16]
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	f7ff fe05 	bl	800b4fa <_Bfree>
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	e7c1      	b.n	800b882 <__lshift+0x4a>
 800b8fe:	3904      	subs	r1, #4
 800b900:	f853 2b04 	ldr.w	r2, [r3], #4
 800b904:	f841 2f04 	str.w	r2, [r1, #4]!
 800b908:	4298      	cmp	r0, r3
 800b90a:	d8f9      	bhi.n	800b900 <__lshift+0xc8>
 800b90c:	e7ea      	b.n	800b8e4 <__lshift+0xac>
 800b90e:	bf00      	nop
 800b910:	0800d751 	.word	0x0800d751
 800b914:	0800d7bd 	.word	0x0800d7bd

0800b918 <__mcmp>:
 800b918:	b530      	push	{r4, r5, lr}
 800b91a:	6902      	ldr	r2, [r0, #16]
 800b91c:	690c      	ldr	r4, [r1, #16]
 800b91e:	1b12      	subs	r2, r2, r4
 800b920:	d10e      	bne.n	800b940 <__mcmp+0x28>
 800b922:	f100 0314 	add.w	r3, r0, #20
 800b926:	3114      	adds	r1, #20
 800b928:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b92c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b930:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b934:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b938:	42a5      	cmp	r5, r4
 800b93a:	d003      	beq.n	800b944 <__mcmp+0x2c>
 800b93c:	d305      	bcc.n	800b94a <__mcmp+0x32>
 800b93e:	2201      	movs	r2, #1
 800b940:	4610      	mov	r0, r2
 800b942:	bd30      	pop	{r4, r5, pc}
 800b944:	4283      	cmp	r3, r0
 800b946:	d3f3      	bcc.n	800b930 <__mcmp+0x18>
 800b948:	e7fa      	b.n	800b940 <__mcmp+0x28>
 800b94a:	f04f 32ff 	mov.w	r2, #4294967295
 800b94e:	e7f7      	b.n	800b940 <__mcmp+0x28>

0800b950 <__mdiff>:
 800b950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	4606      	mov	r6, r0
 800b958:	4611      	mov	r1, r2
 800b95a:	4620      	mov	r0, r4
 800b95c:	4690      	mov	r8, r2
 800b95e:	f7ff ffdb 	bl	800b918 <__mcmp>
 800b962:	1e05      	subs	r5, r0, #0
 800b964:	d110      	bne.n	800b988 <__mdiff+0x38>
 800b966:	4629      	mov	r1, r5
 800b968:	4630      	mov	r0, r6
 800b96a:	f7ff fda1 	bl	800b4b0 <_Balloc>
 800b96e:	b930      	cbnz	r0, 800b97e <__mdiff+0x2e>
 800b970:	4b3a      	ldr	r3, [pc, #232]	; (800ba5c <__mdiff+0x10c>)
 800b972:	4602      	mov	r2, r0
 800b974:	f240 2132 	movw	r1, #562	; 0x232
 800b978:	4839      	ldr	r0, [pc, #228]	; (800ba60 <__mdiff+0x110>)
 800b97a:	f000 f9b5 	bl	800bce8 <__assert_func>
 800b97e:	2301      	movs	r3, #1
 800b980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	bfa4      	itt	ge
 800b98a:	4643      	movge	r3, r8
 800b98c:	46a0      	movge	r8, r4
 800b98e:	4630      	mov	r0, r6
 800b990:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b994:	bfa6      	itte	ge
 800b996:	461c      	movge	r4, r3
 800b998:	2500      	movge	r5, #0
 800b99a:	2501      	movlt	r5, #1
 800b99c:	f7ff fd88 	bl	800b4b0 <_Balloc>
 800b9a0:	b920      	cbnz	r0, 800b9ac <__mdiff+0x5c>
 800b9a2:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <__mdiff+0x10c>)
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b9aa:	e7e5      	b.n	800b978 <__mdiff+0x28>
 800b9ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9b0:	6926      	ldr	r6, [r4, #16]
 800b9b2:	60c5      	str	r5, [r0, #12]
 800b9b4:	f104 0914 	add.w	r9, r4, #20
 800b9b8:	f108 0514 	add.w	r5, r8, #20
 800b9bc:	f100 0e14 	add.w	lr, r0, #20
 800b9c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9c8:	f108 0210 	add.w	r2, r8, #16
 800b9cc:	46f2      	mov	sl, lr
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9d8:	fa1f f883 	uxth.w	r8, r3
 800b9dc:	fa11 f18b 	uxtah	r1, r1, fp
 800b9e0:	0c1b      	lsrs	r3, r3, #16
 800b9e2:	eba1 0808 	sub.w	r8, r1, r8
 800b9e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9ee:	fa1f f888 	uxth.w	r8, r8
 800b9f2:	1419      	asrs	r1, r3, #16
 800b9f4:	454e      	cmp	r6, r9
 800b9f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9fa:	f84a 3b04 	str.w	r3, [sl], #4
 800b9fe:	d8e7      	bhi.n	800b9d0 <__mdiff+0x80>
 800ba00:	1b33      	subs	r3, r6, r4
 800ba02:	3b15      	subs	r3, #21
 800ba04:	f023 0303 	bic.w	r3, r3, #3
 800ba08:	3304      	adds	r3, #4
 800ba0a:	3415      	adds	r4, #21
 800ba0c:	42a6      	cmp	r6, r4
 800ba0e:	bf38      	it	cc
 800ba10:	2304      	movcc	r3, #4
 800ba12:	441d      	add	r5, r3
 800ba14:	4473      	add	r3, lr
 800ba16:	469e      	mov	lr, r3
 800ba18:	462e      	mov	r6, r5
 800ba1a:	4566      	cmp	r6, ip
 800ba1c:	d30e      	bcc.n	800ba3c <__mdiff+0xec>
 800ba1e:	f10c 0203 	add.w	r2, ip, #3
 800ba22:	1b52      	subs	r2, r2, r5
 800ba24:	f022 0203 	bic.w	r2, r2, #3
 800ba28:	3d03      	subs	r5, #3
 800ba2a:	45ac      	cmp	ip, r5
 800ba2c:	bf38      	it	cc
 800ba2e:	2200      	movcc	r2, #0
 800ba30:	441a      	add	r2, r3
 800ba32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ba36:	b17b      	cbz	r3, 800ba58 <__mdiff+0x108>
 800ba38:	6107      	str	r7, [r0, #16]
 800ba3a:	e7a3      	b.n	800b984 <__mdiff+0x34>
 800ba3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba40:	fa11 f288 	uxtah	r2, r1, r8
 800ba44:	1414      	asrs	r4, r2, #16
 800ba46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba4a:	b292      	uxth	r2, r2
 800ba4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba50:	f84e 2b04 	str.w	r2, [lr], #4
 800ba54:	1421      	asrs	r1, r4, #16
 800ba56:	e7e0      	b.n	800ba1a <__mdiff+0xca>
 800ba58:	3f01      	subs	r7, #1
 800ba5a:	e7ea      	b.n	800ba32 <__mdiff+0xe2>
 800ba5c:	0800d751 	.word	0x0800d751
 800ba60:	0800d7bd 	.word	0x0800d7bd

0800ba64 <__d2b>:
 800ba64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba68:	4689      	mov	r9, r1
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	ec57 6b10 	vmov	r6, r7, d0
 800ba70:	4690      	mov	r8, r2
 800ba72:	f7ff fd1d 	bl	800b4b0 <_Balloc>
 800ba76:	4604      	mov	r4, r0
 800ba78:	b930      	cbnz	r0, 800ba88 <__d2b+0x24>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4b25      	ldr	r3, [pc, #148]	; (800bb14 <__d2b+0xb0>)
 800ba7e:	4826      	ldr	r0, [pc, #152]	; (800bb18 <__d2b+0xb4>)
 800ba80:	f240 310a 	movw	r1, #778	; 0x30a
 800ba84:	f000 f930 	bl	800bce8 <__assert_func>
 800ba88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba90:	bb35      	cbnz	r5, 800bae0 <__d2b+0x7c>
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	d028      	beq.n	800baea <__d2b+0x86>
 800ba98:	4668      	mov	r0, sp
 800ba9a:	9600      	str	r6, [sp, #0]
 800ba9c:	f7ff fd9c 	bl	800b5d8 <__lo0bits>
 800baa0:	9900      	ldr	r1, [sp, #0]
 800baa2:	b300      	cbz	r0, 800bae6 <__d2b+0x82>
 800baa4:	9a01      	ldr	r2, [sp, #4]
 800baa6:	f1c0 0320 	rsb	r3, r0, #32
 800baaa:	fa02 f303 	lsl.w	r3, r2, r3
 800baae:	430b      	orrs	r3, r1
 800bab0:	40c2      	lsrs	r2, r0
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	9201      	str	r2, [sp, #4]
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	61a3      	str	r3, [r4, #24]
 800baba:	2b00      	cmp	r3, #0
 800babc:	bf14      	ite	ne
 800babe:	2202      	movne	r2, #2
 800bac0:	2201      	moveq	r2, #1
 800bac2:	6122      	str	r2, [r4, #16]
 800bac4:	b1d5      	cbz	r5, 800bafc <__d2b+0x98>
 800bac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800baca:	4405      	add	r5, r0
 800bacc:	f8c9 5000 	str.w	r5, [r9]
 800bad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bad4:	f8c8 0000 	str.w	r0, [r8]
 800bad8:	4620      	mov	r0, r4
 800bada:	b003      	add	sp, #12
 800badc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bae4:	e7d5      	b.n	800ba92 <__d2b+0x2e>
 800bae6:	6161      	str	r1, [r4, #20]
 800bae8:	e7e5      	b.n	800bab6 <__d2b+0x52>
 800baea:	a801      	add	r0, sp, #4
 800baec:	f7ff fd74 	bl	800b5d8 <__lo0bits>
 800baf0:	9b01      	ldr	r3, [sp, #4]
 800baf2:	6163      	str	r3, [r4, #20]
 800baf4:	2201      	movs	r2, #1
 800baf6:	6122      	str	r2, [r4, #16]
 800baf8:	3020      	adds	r0, #32
 800bafa:	e7e3      	b.n	800bac4 <__d2b+0x60>
 800bafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb04:	f8c9 0000 	str.w	r0, [r9]
 800bb08:	6918      	ldr	r0, [r3, #16]
 800bb0a:	f7ff fd45 	bl	800b598 <__hi0bits>
 800bb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb12:	e7df      	b.n	800bad4 <__d2b+0x70>
 800bb14:	0800d751 	.word	0x0800d751
 800bb18:	0800d7bd 	.word	0x0800d7bd
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <frexp>:
 800bb20:	2200      	movs	r2, #0
 800bb22:	ee10 1a90 	vmov	r1, s1
 800bb26:	6002      	str	r2, [r0, #0]
 800bb28:	4a17      	ldr	r2, [pc, #92]	; (800bb88 <frexp+0x68>)
 800bb2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	dc23      	bgt.n	800bb7a <frexp+0x5a>
 800bb32:	ee10 2a10 	vmov	r2, s0
 800bb36:	431a      	orrs	r2, r3
 800bb38:	d01f      	beq.n	800bb7a <frexp+0x5a>
 800bb3a:	4a14      	ldr	r2, [pc, #80]	; (800bb8c <frexp+0x6c>)
 800bb3c:	400a      	ands	r2, r1
 800bb3e:	b952      	cbnz	r2, 800bb56 <frexp+0x36>
 800bb40:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800bb80 <frexp+0x60>
 800bb44:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bb48:	ee10 1a90 	vmov	r1, s1
 800bb4c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800bb50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb54:	6002      	str	r2, [r0, #0]
 800bb56:	6802      	ldr	r2, [r0, #0]
 800bb58:	151b      	asrs	r3, r3, #20
 800bb5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb5e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bb62:	4413      	add	r3, r2
 800bb64:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	ec53 2b10 	vmov	r2, r3, d0
 800bb6e:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800bb72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb76:	ec43 2b10 	vmov	d0, r2, r3
 800bb7a:	4770      	bx	lr
 800bb7c:	f3af 8000 	nop.w
 800bb80:	00000000 	.word	0x00000000
 800bb84:	43500000 	.word	0x43500000
 800bb88:	7fefffff 	.word	0x7fefffff
 800bb8c:	7ff00000 	.word	0x7ff00000

0800bb90 <_sbrk_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	; (800bbac <_sbrk_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f4 ff28 	bl	80009f0 <_sbrk>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_sbrk_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_sbrk_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	24002718 	.word	0x24002718

0800bbb0 <strncpy>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	3901      	subs	r1, #1
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	b132      	cbz	r2, 800bbc6 <strncpy+0x16>
 800bbb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbbc:	f803 4b01 	strb.w	r4, [r3], #1
 800bbc0:	3a01      	subs	r2, #1
 800bbc2:	2c00      	cmp	r4, #0
 800bbc4:	d1f7      	bne.n	800bbb6 <strncpy+0x6>
 800bbc6:	441a      	add	r2, r3
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d100      	bne.n	800bbd0 <strncpy+0x20>
 800bbce:	bd10      	pop	{r4, pc}
 800bbd0:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd4:	e7f9      	b.n	800bbca <strncpy+0x1a>

0800bbd6 <__ssprint_r>:
 800bbd6:	6893      	ldr	r3, [r2, #8]
 800bbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	4680      	mov	r8, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	4617      	mov	r7, r2
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d061      	beq.n	800bcaa <__ssprint_r+0xd4>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f8d2 a000 	ldr.w	sl, [r2]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	469b      	mov	fp, r3
 800bbf0:	f1bb 0f00 	cmp.w	fp, #0
 800bbf4:	d02b      	beq.n	800bc4e <__ssprint_r+0x78>
 800bbf6:	68a6      	ldr	r6, [r4, #8]
 800bbf8:	455e      	cmp	r6, fp
 800bbfa:	d844      	bhi.n	800bc86 <__ssprint_r+0xb0>
 800bbfc:	89a2      	ldrh	r2, [r4, #12]
 800bbfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc02:	d03e      	beq.n	800bc82 <__ssprint_r+0xac>
 800bc04:	6820      	ldr	r0, [r4, #0]
 800bc06:	6921      	ldr	r1, [r4, #16]
 800bc08:	6965      	ldr	r5, [r4, #20]
 800bc0a:	eba0 0901 	sub.w	r9, r0, r1
 800bc0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc16:	f109 0001 	add.w	r0, r9, #1
 800bc1a:	106d      	asrs	r5, r5, #1
 800bc1c:	4458      	add	r0, fp
 800bc1e:	4285      	cmp	r5, r0
 800bc20:	bf38      	it	cc
 800bc22:	4605      	movcc	r5, r0
 800bc24:	0553      	lsls	r3, r2, #21
 800bc26:	d545      	bpl.n	800bcb4 <__ssprint_r+0xde>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f7ff f9ea 	bl	800b004 <_malloc_r>
 800bc30:	4606      	mov	r6, r0
 800bc32:	b9a0      	cbnz	r0, 800bc5e <__ssprint_r+0x88>
 800bc34:	230c      	movs	r3, #12
 800bc36:	f8c8 3000 	str.w	r3, [r8]
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	2300      	movs	r3, #0
 800bc44:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	e02f      	b.n	800bcae <__ssprint_r+0xd8>
 800bc4e:	f8da 3000 	ldr.w	r3, [sl]
 800bc52:	f8da b004 	ldr.w	fp, [sl, #4]
 800bc56:	9301      	str	r3, [sp, #4]
 800bc58:	f10a 0a08 	add.w	sl, sl, #8
 800bc5c:	e7c8      	b.n	800bbf0 <__ssprint_r+0x1a>
 800bc5e:	464a      	mov	r2, r9
 800bc60:	6921      	ldr	r1, [r4, #16]
 800bc62:	f7ff fc0b 	bl	800b47c <memcpy>
 800bc66:	89a2      	ldrh	r2, [r4, #12]
 800bc68:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bc6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc70:	81a2      	strh	r2, [r4, #12]
 800bc72:	6126      	str	r6, [r4, #16]
 800bc74:	6165      	str	r5, [r4, #20]
 800bc76:	444e      	add	r6, r9
 800bc78:	eba5 0509 	sub.w	r5, r5, r9
 800bc7c:	6026      	str	r6, [r4, #0]
 800bc7e:	60a5      	str	r5, [r4, #8]
 800bc80:	465e      	mov	r6, fp
 800bc82:	455e      	cmp	r6, fp
 800bc84:	d900      	bls.n	800bc88 <__ssprint_r+0xb2>
 800bc86:	465e      	mov	r6, fp
 800bc88:	4632      	mov	r2, r6
 800bc8a:	9901      	ldr	r1, [sp, #4]
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	f000 f8a9 	bl	800bde4 <memmove>
 800bc92:	68a2      	ldr	r2, [r4, #8]
 800bc94:	1b92      	subs	r2, r2, r6
 800bc96:	60a2      	str	r2, [r4, #8]
 800bc98:	6822      	ldr	r2, [r4, #0]
 800bc9a:	4432      	add	r2, r6
 800bc9c:	6022      	str	r2, [r4, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	eba2 030b 	sub.w	r3, r2, fp
 800bca4:	60bb      	str	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1d1      	bne.n	800bc4e <__ssprint_r+0x78>
 800bcaa:	2000      	movs	r0, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	b003      	add	sp, #12
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	f000 f8ae 	bl	800be18 <_realloc_r>
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d1d7      	bne.n	800bc72 <__ssprint_r+0x9c>
 800bcc2:	6921      	ldr	r1, [r4, #16]
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	f7ff f8d9 	bl	800ae7c <_free_r>
 800bcca:	e7b3      	b.n	800bc34 <__ssprint_r+0x5e>

0800bccc <sysconf>:
 800bccc:	2808      	cmp	r0, #8
 800bcce:	b508      	push	{r3, lr}
 800bcd0:	d006      	beq.n	800bce0 <sysconf+0x14>
 800bcd2:	f7fc fff9 	bl	8008cc8 <__errno>
 800bcd6:	2316      	movs	r3, #22
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	bd08      	pop	{r3, pc}
 800bce0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bce4:	e7fb      	b.n	800bcde <sysconf+0x12>
	...

0800bce8 <__assert_func>:
 800bce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcea:	4614      	mov	r4, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <__assert_func+0x2c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	68d8      	ldr	r0, [r3, #12]
 800bcf6:	b14c      	cbz	r4, 800bd0c <__assert_func+0x24>
 800bcf8:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <__assert_func+0x30>)
 800bcfa:	9100      	str	r1, [sp, #0]
 800bcfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd00:	4906      	ldr	r1, [pc, #24]	; (800bd1c <__assert_func+0x34>)
 800bd02:	462b      	mov	r3, r5
 800bd04:	f000 f844 	bl	800bd90 <fiprintf>
 800bd08:	f000 ff98 	bl	800cc3c <abort>
 800bd0c:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <__assert_func+0x38>)
 800bd0e:	461c      	mov	r4, r3
 800bd10:	e7f3      	b.n	800bcfa <__assert_func+0x12>
 800bd12:	bf00      	nop
 800bd14:	24000100 	.word	0x24000100
 800bd18:	0800d91c 	.word	0x0800d91c
 800bd1c:	0800d929 	.word	0x0800d929
 800bd20:	0800d957 	.word	0x0800d957

0800bd24 <_calloc_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	fba1 1502 	umull	r1, r5, r1, r2
 800bd2a:	b92d      	cbnz	r5, 800bd38 <_calloc_r+0x14>
 800bd2c:	f7ff f96a 	bl	800b004 <_malloc_r>
 800bd30:	4604      	mov	r4, r0
 800bd32:	b938      	cbnz	r0, 800bd44 <_calloc_r+0x20>
 800bd34:	4620      	mov	r0, r4
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	f7fc ffc6 	bl	8008cc8 <__errno>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	6003      	str	r3, [r0, #0]
 800bd40:	2400      	movs	r4, #0
 800bd42:	e7f7      	b.n	800bd34 <_calloc_r+0x10>
 800bd44:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800bd48:	f022 0203 	bic.w	r2, r2, #3
 800bd4c:	3a04      	subs	r2, #4
 800bd4e:	2a24      	cmp	r2, #36	; 0x24
 800bd50:	d819      	bhi.n	800bd86 <_calloc_r+0x62>
 800bd52:	2a13      	cmp	r2, #19
 800bd54:	d915      	bls.n	800bd82 <_calloc_r+0x5e>
 800bd56:	2a1b      	cmp	r2, #27
 800bd58:	e9c0 5500 	strd	r5, r5, [r0]
 800bd5c:	d806      	bhi.n	800bd6c <_calloc_r+0x48>
 800bd5e:	f100 0308 	add.w	r3, r0, #8
 800bd62:	2200      	movs	r2, #0
 800bd64:	e9c3 2200 	strd	r2, r2, [r3]
 800bd68:	609a      	str	r2, [r3, #8]
 800bd6a:	e7e3      	b.n	800bd34 <_calloc_r+0x10>
 800bd6c:	2a24      	cmp	r2, #36	; 0x24
 800bd6e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800bd72:	bf11      	iteee	ne
 800bd74:	f100 0310 	addne.w	r3, r0, #16
 800bd78:	6105      	streq	r5, [r0, #16]
 800bd7a:	f100 0318 	addeq.w	r3, r0, #24
 800bd7e:	6145      	streq	r5, [r0, #20]
 800bd80:	e7ef      	b.n	800bd62 <_calloc_r+0x3e>
 800bd82:	4603      	mov	r3, r0
 800bd84:	e7ed      	b.n	800bd62 <_calloc_r+0x3e>
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7fc ffc8 	bl	8008d1c <memset>
 800bd8c:	e7d2      	b.n	800bd34 <_calloc_r+0x10>
	...

0800bd90 <fiprintf>:
 800bd90:	b40e      	push	{r1, r2, r3}
 800bd92:	b503      	push	{r0, r1, lr}
 800bd94:	4601      	mov	r1, r0
 800bd96:	ab03      	add	r3, sp, #12
 800bd98:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <fiprintf+0x20>)
 800bd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9e:	6800      	ldr	r0, [r0, #0]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f000 fa0f 	bl	800c1c4 <_vfiprintf_r>
 800bda6:	b002      	add	sp, #8
 800bda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdac:	b003      	add	sp, #12
 800bdae:	4770      	bx	lr
 800bdb0:	24000100 	.word	0x24000100

0800bdb4 <__locale_mb_cur_max>:
 800bdb4:	4b01      	ldr	r3, [pc, #4]	; (800bdbc <__locale_mb_cur_max+0x8>)
 800bdb6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800bdba:	4770      	bx	lr
 800bdbc:	24000944 	.word	0x24000944

0800bdc0 <__ascii_mbtowc>:
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	b901      	cbnz	r1, 800bdc6 <__ascii_mbtowc+0x6>
 800bdc4:	a901      	add	r1, sp, #4
 800bdc6:	b142      	cbz	r2, 800bdda <__ascii_mbtowc+0x1a>
 800bdc8:	b14b      	cbz	r3, 800bdde <__ascii_mbtowc+0x1e>
 800bdca:	7813      	ldrb	r3, [r2, #0]
 800bdcc:	600b      	str	r3, [r1, #0]
 800bdce:	7812      	ldrb	r2, [r2, #0]
 800bdd0:	1e10      	subs	r0, r2, #0
 800bdd2:	bf18      	it	ne
 800bdd4:	2001      	movne	r0, #1
 800bdd6:	b002      	add	sp, #8
 800bdd8:	4770      	bx	lr
 800bdda:	4610      	mov	r0, r2
 800bddc:	e7fb      	b.n	800bdd6 <__ascii_mbtowc+0x16>
 800bdde:	f06f 0001 	mvn.w	r0, #1
 800bde2:	e7f8      	b.n	800bdd6 <__ascii_mbtowc+0x16>

0800bde4 <memmove>:
 800bde4:	4288      	cmp	r0, r1
 800bde6:	b510      	push	{r4, lr}
 800bde8:	eb01 0402 	add.w	r4, r1, r2
 800bdec:	d902      	bls.n	800bdf4 <memmove+0x10>
 800bdee:	4284      	cmp	r4, r0
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	d807      	bhi.n	800be04 <memmove+0x20>
 800bdf4:	1e43      	subs	r3, r0, #1
 800bdf6:	42a1      	cmp	r1, r4
 800bdf8:	d008      	beq.n	800be0c <memmove+0x28>
 800bdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be02:	e7f8      	b.n	800bdf6 <memmove+0x12>
 800be04:	4402      	add	r2, r0
 800be06:	4601      	mov	r1, r0
 800be08:	428a      	cmp	r2, r1
 800be0a:	d100      	bne.n	800be0e <memmove+0x2a>
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be16:	e7f7      	b.n	800be08 <memmove+0x24>

0800be18 <_realloc_r>:
 800be18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4681      	mov	r9, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	b929      	cbnz	r1, 800be2e <_realloc_r+0x16>
 800be22:	4611      	mov	r1, r2
 800be24:	b003      	add	sp, #12
 800be26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2a:	f7ff b8eb 	b.w	800b004 <_malloc_r>
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	f7ff fb32 	bl	800b498 <__malloc_lock>
 800be34:	9a01      	ldr	r2, [sp, #4]
 800be36:	f102 080b 	add.w	r8, r2, #11
 800be3a:	f1b8 0f16 	cmp.w	r8, #22
 800be3e:	d90b      	bls.n	800be58 <_realloc_r+0x40>
 800be40:	f038 0807 	bics.w	r8, r8, #7
 800be44:	d50a      	bpl.n	800be5c <_realloc_r+0x44>
 800be46:	230c      	movs	r3, #12
 800be48:	f8c9 3000 	str.w	r3, [r9]
 800be4c:	f04f 0b00 	mov.w	fp, #0
 800be50:	4658      	mov	r0, fp
 800be52:	b003      	add	sp, #12
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	f04f 0810 	mov.w	r8, #16
 800be5c:	4590      	cmp	r8, r2
 800be5e:	d3f2      	bcc.n	800be46 <_realloc_r+0x2e>
 800be60:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800be64:	f025 0603 	bic.w	r6, r5, #3
 800be68:	45b0      	cmp	r8, r6
 800be6a:	f1a4 0a08 	sub.w	sl, r4, #8
 800be6e:	f340 816e 	ble.w	800c14e <_realloc_r+0x336>
 800be72:	499b      	ldr	r1, [pc, #620]	; (800c0e0 <_realloc_r+0x2c8>)
 800be74:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800be78:	eb0a 0306 	add.w	r3, sl, r6
 800be7c:	459c      	cmp	ip, r3
 800be7e:	6859      	ldr	r1, [r3, #4]
 800be80:	d005      	beq.n	800be8e <_realloc_r+0x76>
 800be82:	f021 0001 	bic.w	r0, r1, #1
 800be86:	4418      	add	r0, r3
 800be88:	6840      	ldr	r0, [r0, #4]
 800be8a:	07c7      	lsls	r7, r0, #31
 800be8c:	d427      	bmi.n	800bede <_realloc_r+0xc6>
 800be8e:	f021 0103 	bic.w	r1, r1, #3
 800be92:	459c      	cmp	ip, r3
 800be94:	eb06 0701 	add.w	r7, r6, r1
 800be98:	d119      	bne.n	800bece <_realloc_r+0xb6>
 800be9a:	f108 0010 	add.w	r0, r8, #16
 800be9e:	42b8      	cmp	r0, r7
 800bea0:	dc1f      	bgt.n	800bee2 <_realloc_r+0xca>
 800bea2:	eb0a 0308 	add.w	r3, sl, r8
 800bea6:	4a8e      	ldr	r2, [pc, #568]	; (800c0e0 <_realloc_r+0x2c8>)
 800bea8:	eba7 0708 	sub.w	r7, r7, r8
 800beac:	f047 0701 	orr.w	r7, r7, #1
 800beb0:	6093      	str	r3, [r2, #8]
 800beb2:	605f      	str	r7, [r3, #4]
 800beb4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	ea43 0308 	orr.w	r3, r3, r8
 800bec0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bec4:	4648      	mov	r0, r9
 800bec6:	f7ff faed 	bl	800b4a4 <__malloc_unlock>
 800beca:	46a3      	mov	fp, r4
 800becc:	e7c0      	b.n	800be50 <_realloc_r+0x38>
 800bece:	45b8      	cmp	r8, r7
 800bed0:	dc07      	bgt.n	800bee2 <_realloc_r+0xca>
 800bed2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bed6:	60da      	str	r2, [r3, #12]
 800bed8:	6093      	str	r3, [r2, #8]
 800beda:	4655      	mov	r5, sl
 800bedc:	e07f      	b.n	800bfde <_realloc_r+0x1c6>
 800bede:	2100      	movs	r1, #0
 800bee0:	460b      	mov	r3, r1
 800bee2:	07e8      	lsls	r0, r5, #31
 800bee4:	f100 80e5 	bmi.w	800c0b2 <_realloc_r+0x29a>
 800bee8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800beec:	ebaa 0505 	sub.w	r5, sl, r5
 800bef0:	6868      	ldr	r0, [r5, #4]
 800bef2:	f020 0003 	bic.w	r0, r0, #3
 800bef6:	eb00 0b06 	add.w	fp, r0, r6
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 80a5 	beq.w	800c04a <_realloc_r+0x232>
 800bf00:	459c      	cmp	ip, r3
 800bf02:	eb01 070b 	add.w	r7, r1, fp
 800bf06:	d14a      	bne.n	800bf9e <_realloc_r+0x186>
 800bf08:	f108 0310 	add.w	r3, r8, #16
 800bf0c:	42bb      	cmp	r3, r7
 800bf0e:	f300 809c 	bgt.w	800c04a <_realloc_r+0x232>
 800bf12:	46ab      	mov	fp, r5
 800bf14:	68eb      	ldr	r3, [r5, #12]
 800bf16:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800bf1a:	60d3      	str	r3, [r2, #12]
 800bf1c:	609a      	str	r2, [r3, #8]
 800bf1e:	1f32      	subs	r2, r6, #4
 800bf20:	2a24      	cmp	r2, #36	; 0x24
 800bf22:	d837      	bhi.n	800bf94 <_realloc_r+0x17c>
 800bf24:	2a13      	cmp	r2, #19
 800bf26:	d933      	bls.n	800bf90 <_realloc_r+0x178>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	60ab      	str	r3, [r5, #8]
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	60eb      	str	r3, [r5, #12]
 800bf30:	2a1b      	cmp	r2, #27
 800bf32:	d81b      	bhi.n	800bf6c <_realloc_r+0x154>
 800bf34:	3408      	adds	r4, #8
 800bf36:	f105 0310 	add.w	r3, r5, #16
 800bf3a:	6822      	ldr	r2, [r4, #0]
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	6862      	ldr	r2, [r4, #4]
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	68a2      	ldr	r2, [r4, #8]
 800bf44:	609a      	str	r2, [r3, #8]
 800bf46:	eb05 0308 	add.w	r3, r5, r8
 800bf4a:	4a65      	ldr	r2, [pc, #404]	; (800c0e0 <_realloc_r+0x2c8>)
 800bf4c:	eba7 0708 	sub.w	r7, r7, r8
 800bf50:	f047 0701 	orr.w	r7, r7, #1
 800bf54:	6093      	str	r3, [r2, #8]
 800bf56:	605f      	str	r7, [r3, #4]
 800bf58:	686b      	ldr	r3, [r5, #4]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	ea43 0308 	orr.w	r3, r3, r8
 800bf62:	606b      	str	r3, [r5, #4]
 800bf64:	4648      	mov	r0, r9
 800bf66:	f7ff fa9d 	bl	800b4a4 <__malloc_unlock>
 800bf6a:	e771      	b.n	800be50 <_realloc_r+0x38>
 800bf6c:	68a3      	ldr	r3, [r4, #8]
 800bf6e:	612b      	str	r3, [r5, #16]
 800bf70:	68e3      	ldr	r3, [r4, #12]
 800bf72:	616b      	str	r3, [r5, #20]
 800bf74:	2a24      	cmp	r2, #36	; 0x24
 800bf76:	bf01      	itttt	eq
 800bf78:	6923      	ldreq	r3, [r4, #16]
 800bf7a:	61ab      	streq	r3, [r5, #24]
 800bf7c:	6962      	ldreq	r2, [r4, #20]
 800bf7e:	61ea      	streq	r2, [r5, #28]
 800bf80:	bf19      	ittee	ne
 800bf82:	3410      	addne	r4, #16
 800bf84:	f105 0318 	addne.w	r3, r5, #24
 800bf88:	f105 0320 	addeq.w	r3, r5, #32
 800bf8c:	3418      	addeq	r4, #24
 800bf8e:	e7d4      	b.n	800bf3a <_realloc_r+0x122>
 800bf90:	465b      	mov	r3, fp
 800bf92:	e7d2      	b.n	800bf3a <_realloc_r+0x122>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4658      	mov	r0, fp
 800bf98:	f7ff ff24 	bl	800bde4 <memmove>
 800bf9c:	e7d3      	b.n	800bf46 <_realloc_r+0x12e>
 800bf9e:	45b8      	cmp	r8, r7
 800bfa0:	dc53      	bgt.n	800c04a <_realloc_r+0x232>
 800bfa2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	60da      	str	r2, [r3, #12]
 800bfaa:	6093      	str	r3, [r2, #8]
 800bfac:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bfb0:	68eb      	ldr	r3, [r5, #12]
 800bfb2:	60d3      	str	r3, [r2, #12]
 800bfb4:	609a      	str	r2, [r3, #8]
 800bfb6:	1f32      	subs	r2, r6, #4
 800bfb8:	2a24      	cmp	r2, #36	; 0x24
 800bfba:	d842      	bhi.n	800c042 <_realloc_r+0x22a>
 800bfbc:	2a13      	cmp	r2, #19
 800bfbe:	d908      	bls.n	800bfd2 <_realloc_r+0x1ba>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	60ab      	str	r3, [r5, #8]
 800bfc4:	6863      	ldr	r3, [r4, #4]
 800bfc6:	60eb      	str	r3, [r5, #12]
 800bfc8:	2a1b      	cmp	r2, #27
 800bfca:	d828      	bhi.n	800c01e <_realloc_r+0x206>
 800bfcc:	3408      	adds	r4, #8
 800bfce:	f105 0010 	add.w	r0, r5, #16
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	6003      	str	r3, [r0, #0]
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	6043      	str	r3, [r0, #4]
 800bfda:	68a3      	ldr	r3, [r4, #8]
 800bfdc:	6083      	str	r3, [r0, #8]
 800bfde:	686b      	ldr	r3, [r5, #4]
 800bfe0:	eba7 0008 	sub.w	r0, r7, r8
 800bfe4:	280f      	cmp	r0, #15
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	eb05 0207 	add.w	r2, r5, r7
 800bfee:	f240 80b0 	bls.w	800c152 <_realloc_r+0x33a>
 800bff2:	eb05 0108 	add.w	r1, r5, r8
 800bff6:	ea48 0303 	orr.w	r3, r8, r3
 800bffa:	f040 0001 	orr.w	r0, r0, #1
 800bffe:	606b      	str	r3, [r5, #4]
 800c000:	6048      	str	r0, [r1, #4]
 800c002:	6853      	ldr	r3, [r2, #4]
 800c004:	f043 0301 	orr.w	r3, r3, #1
 800c008:	6053      	str	r3, [r2, #4]
 800c00a:	3108      	adds	r1, #8
 800c00c:	4648      	mov	r0, r9
 800c00e:	f7fe ff35 	bl	800ae7c <_free_r>
 800c012:	4648      	mov	r0, r9
 800c014:	f7ff fa46 	bl	800b4a4 <__malloc_unlock>
 800c018:	f105 0b08 	add.w	fp, r5, #8
 800c01c:	e718      	b.n	800be50 <_realloc_r+0x38>
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	612b      	str	r3, [r5, #16]
 800c022:	68e3      	ldr	r3, [r4, #12]
 800c024:	616b      	str	r3, [r5, #20]
 800c026:	2a24      	cmp	r2, #36	; 0x24
 800c028:	bf01      	itttt	eq
 800c02a:	6923      	ldreq	r3, [r4, #16]
 800c02c:	61ab      	streq	r3, [r5, #24]
 800c02e:	6963      	ldreq	r3, [r4, #20]
 800c030:	61eb      	streq	r3, [r5, #28]
 800c032:	bf19      	ittee	ne
 800c034:	3410      	addne	r4, #16
 800c036:	f105 0018 	addne.w	r0, r5, #24
 800c03a:	f105 0020 	addeq.w	r0, r5, #32
 800c03e:	3418      	addeq	r4, #24
 800c040:	e7c7      	b.n	800bfd2 <_realloc_r+0x1ba>
 800c042:	4621      	mov	r1, r4
 800c044:	f7ff fece 	bl	800bde4 <memmove>
 800c048:	e7c9      	b.n	800bfde <_realloc_r+0x1c6>
 800c04a:	45d8      	cmp	r8, fp
 800c04c:	dc31      	bgt.n	800c0b2 <_realloc_r+0x29a>
 800c04e:	4628      	mov	r0, r5
 800c050:	68eb      	ldr	r3, [r5, #12]
 800c052:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c056:	60d3      	str	r3, [r2, #12]
 800c058:	609a      	str	r2, [r3, #8]
 800c05a:	1f32      	subs	r2, r6, #4
 800c05c:	2a24      	cmp	r2, #36	; 0x24
 800c05e:	d824      	bhi.n	800c0aa <_realloc_r+0x292>
 800c060:	2a13      	cmp	r2, #19
 800c062:	d908      	bls.n	800c076 <_realloc_r+0x25e>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	60ab      	str	r3, [r5, #8]
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	60eb      	str	r3, [r5, #12]
 800c06c:	2a1b      	cmp	r2, #27
 800c06e:	d80a      	bhi.n	800c086 <_realloc_r+0x26e>
 800c070:	3408      	adds	r4, #8
 800c072:	f105 0010 	add.w	r0, r5, #16
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	6863      	ldr	r3, [r4, #4]
 800c07c:	6043      	str	r3, [r0, #4]
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	6083      	str	r3, [r0, #8]
 800c082:	465f      	mov	r7, fp
 800c084:	e7ab      	b.n	800bfde <_realloc_r+0x1c6>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	612b      	str	r3, [r5, #16]
 800c08a:	68e3      	ldr	r3, [r4, #12]
 800c08c:	616b      	str	r3, [r5, #20]
 800c08e:	2a24      	cmp	r2, #36	; 0x24
 800c090:	bf01      	itttt	eq
 800c092:	6923      	ldreq	r3, [r4, #16]
 800c094:	61ab      	streq	r3, [r5, #24]
 800c096:	6963      	ldreq	r3, [r4, #20]
 800c098:	61eb      	streq	r3, [r5, #28]
 800c09a:	bf19      	ittee	ne
 800c09c:	3410      	addne	r4, #16
 800c09e:	f105 0018 	addne.w	r0, r5, #24
 800c0a2:	f105 0020 	addeq.w	r0, r5, #32
 800c0a6:	3418      	addeq	r4, #24
 800c0a8:	e7e5      	b.n	800c076 <_realloc_r+0x25e>
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	f7ff fe9a 	bl	800bde4 <memmove>
 800c0b0:	e7e7      	b.n	800c082 <_realloc_r+0x26a>
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4648      	mov	r0, r9
 800c0b6:	f7fe ffa5 	bl	800b004 <_malloc_r>
 800c0ba:	4683      	mov	fp, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	f43f af51 	beq.w	800bf64 <_realloc_r+0x14c>
 800c0c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	4453      	add	r3, sl
 800c0cc:	f1a0 0208 	sub.w	r2, r0, #8
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d107      	bne.n	800c0e4 <_realloc_r+0x2cc>
 800c0d4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c0d8:	f027 0703 	bic.w	r7, r7, #3
 800c0dc:	4437      	add	r7, r6
 800c0de:	e6fc      	b.n	800beda <_realloc_r+0xc2>
 800c0e0:	24000534 	.word	0x24000534
 800c0e4:	1f32      	subs	r2, r6, #4
 800c0e6:	2a24      	cmp	r2, #36	; 0x24
 800c0e8:	d82d      	bhi.n	800c146 <_realloc_r+0x32e>
 800c0ea:	2a13      	cmp	r2, #19
 800c0ec:	d928      	bls.n	800c140 <_realloc_r+0x328>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	6003      	str	r3, [r0, #0]
 800c0f2:	6863      	ldr	r3, [r4, #4]
 800c0f4:	6043      	str	r3, [r0, #4]
 800c0f6:	2a1b      	cmp	r2, #27
 800c0f8:	d80e      	bhi.n	800c118 <_realloc_r+0x300>
 800c0fa:	f104 0208 	add.w	r2, r4, #8
 800c0fe:	f100 0308 	add.w	r3, r0, #8
 800c102:	6811      	ldr	r1, [r2, #0]
 800c104:	6019      	str	r1, [r3, #0]
 800c106:	6851      	ldr	r1, [r2, #4]
 800c108:	6059      	str	r1, [r3, #4]
 800c10a:	6892      	ldr	r2, [r2, #8]
 800c10c:	609a      	str	r2, [r3, #8]
 800c10e:	4621      	mov	r1, r4
 800c110:	4648      	mov	r0, r9
 800c112:	f7fe feb3 	bl	800ae7c <_free_r>
 800c116:	e725      	b.n	800bf64 <_realloc_r+0x14c>
 800c118:	68a3      	ldr	r3, [r4, #8]
 800c11a:	6083      	str	r3, [r0, #8]
 800c11c:	68e3      	ldr	r3, [r4, #12]
 800c11e:	60c3      	str	r3, [r0, #12]
 800c120:	2a24      	cmp	r2, #36	; 0x24
 800c122:	bf01      	itttt	eq
 800c124:	6923      	ldreq	r3, [r4, #16]
 800c126:	6103      	streq	r3, [r0, #16]
 800c128:	6961      	ldreq	r1, [r4, #20]
 800c12a:	6141      	streq	r1, [r0, #20]
 800c12c:	bf19      	ittee	ne
 800c12e:	f104 0210 	addne.w	r2, r4, #16
 800c132:	f100 0310 	addne.w	r3, r0, #16
 800c136:	f104 0218 	addeq.w	r2, r4, #24
 800c13a:	f100 0318 	addeq.w	r3, r0, #24
 800c13e:	e7e0      	b.n	800c102 <_realloc_r+0x2ea>
 800c140:	4603      	mov	r3, r0
 800c142:	4622      	mov	r2, r4
 800c144:	e7dd      	b.n	800c102 <_realloc_r+0x2ea>
 800c146:	4621      	mov	r1, r4
 800c148:	f7ff fe4c 	bl	800bde4 <memmove>
 800c14c:	e7df      	b.n	800c10e <_realloc_r+0x2f6>
 800c14e:	4637      	mov	r7, r6
 800c150:	e6c3      	b.n	800beda <_realloc_r+0xc2>
 800c152:	431f      	orrs	r7, r3
 800c154:	606f      	str	r7, [r5, #4]
 800c156:	6853      	ldr	r3, [r2, #4]
 800c158:	f043 0301 	orr.w	r3, r3, #1
 800c15c:	6053      	str	r3, [r2, #4]
 800c15e:	e758      	b.n	800c012 <_realloc_r+0x1fa>

0800c160 <__sprint_r>:
 800c160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	6893      	ldr	r3, [r2, #8]
 800c166:	4680      	mov	r8, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	4614      	mov	r4, r2
 800c16c:	b91b      	cbnz	r3, 800c176 <__sprint_r+0x16>
 800c16e:	6053      	str	r3, [r2, #4]
 800c170:	4618      	mov	r0, r3
 800c172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c178:	049d      	lsls	r5, r3, #18
 800c17a:	d520      	bpl.n	800c1be <__sprint_r+0x5e>
 800c17c:	6815      	ldr	r5, [r2, #0]
 800c17e:	3508      	adds	r5, #8
 800c180:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800c184:	f04f 0900 	mov.w	r9, #0
 800c188:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800c18c:	45ca      	cmp	sl, r9
 800c18e:	dc0b      	bgt.n	800c1a8 <__sprint_r+0x48>
 800c190:	68a3      	ldr	r3, [r4, #8]
 800c192:	f026 0003 	bic.w	r0, r6, #3
 800c196:	1a18      	subs	r0, r3, r0
 800c198:	60a0      	str	r0, [r4, #8]
 800c19a:	3508      	adds	r5, #8
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d1ef      	bne.n	800c180 <__sprint_r+0x20>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800c1a6:	e7e4      	b.n	800c172 <__sprint_r+0x12>
 800c1a8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c1ac:	463a      	mov	r2, r7
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f000 feaf 	bl	800cf12 <_fputwc_r>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d0f3      	beq.n	800c1a0 <__sprint_r+0x40>
 800c1b8:	f109 0901 	add.w	r9, r9, #1
 800c1bc:	e7e6      	b.n	800c18c <__sprint_r+0x2c>
 800c1be:	f000 fed3 	bl	800cf68 <__sfvwrite_r>
 800c1c2:	e7ed      	b.n	800c1a0 <__sprint_r+0x40>

0800c1c4 <_vfiprintf_r>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	ed2d 8b02 	vpush	{d8}
 800c1cc:	b0b9      	sub	sp, #228	; 0xe4
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	9201      	str	r2, [sp, #4]
 800c1d2:	461d      	mov	r5, r3
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	4681      	mov	r9, r0
 800c1d8:	b118      	cbz	r0, 800c1e2 <_vfiprintf_r+0x1e>
 800c1da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c1dc:	b90b      	cbnz	r3, 800c1e2 <_vfiprintf_r+0x1e>
 800c1de:	f000 fe2f 	bl	800ce40 <__sinit>
 800c1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1e4:	07d8      	lsls	r0, r3, #31
 800c1e6:	d405      	bmi.n	800c1f4 <_vfiprintf_r+0x30>
 800c1e8:	89bb      	ldrh	r3, [r7, #12]
 800c1ea:	0599      	lsls	r1, r3, #22
 800c1ec:	d402      	bmi.n	800c1f4 <_vfiprintf_r+0x30>
 800c1ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c1f0:	f7fc fdfc 	bl	8008dec <__retarget_lock_acquire_recursive>
 800c1f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1f8:	049a      	lsls	r2, r3, #18
 800c1fa:	d406      	bmi.n	800c20a <_vfiprintf_r+0x46>
 800c1fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c200:	81bb      	strh	r3, [r7, #12]
 800c202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c208:	667b      	str	r3, [r7, #100]	; 0x64
 800c20a:	89bb      	ldrh	r3, [r7, #12]
 800c20c:	071e      	lsls	r6, r3, #28
 800c20e:	d501      	bpl.n	800c214 <_vfiprintf_r+0x50>
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	b9bb      	cbnz	r3, 800c244 <_vfiprintf_r+0x80>
 800c214:	4639      	mov	r1, r7
 800c216:	4648      	mov	r0, r9
 800c218:	f000 fcb8 	bl	800cb8c <__swsetup_r>
 800c21c:	b190      	cbz	r0, 800c244 <_vfiprintf_r+0x80>
 800c21e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c220:	07d8      	lsls	r0, r3, #31
 800c222:	d508      	bpl.n	800c236 <_vfiprintf_r+0x72>
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	9802      	ldr	r0, [sp, #8]
 800c22c:	b039      	add	sp, #228	; 0xe4
 800c22e:	ecbd 8b02 	vpop	{d8}
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	89bb      	ldrh	r3, [r7, #12]
 800c238:	0599      	lsls	r1, r3, #22
 800c23a:	d4f3      	bmi.n	800c224 <_vfiprintf_r+0x60>
 800c23c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c23e:	f7fc fdd6 	bl	8008dee <__retarget_lock_release_recursive>
 800c242:	e7ef      	b.n	800c224 <_vfiprintf_r+0x60>
 800c244:	89bb      	ldrh	r3, [r7, #12]
 800c246:	f003 021a 	and.w	r2, r3, #26
 800c24a:	2a0a      	cmp	r2, #10
 800c24c:	d116      	bne.n	800c27c <_vfiprintf_r+0xb8>
 800c24e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c252:	2a00      	cmp	r2, #0
 800c254:	db12      	blt.n	800c27c <_vfiprintf_r+0xb8>
 800c256:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c258:	07d2      	lsls	r2, r2, #31
 800c25a:	d404      	bmi.n	800c266 <_vfiprintf_r+0xa2>
 800c25c:	059e      	lsls	r6, r3, #22
 800c25e:	d402      	bmi.n	800c266 <_vfiprintf_r+0xa2>
 800c260:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c262:	f7fc fdc4 	bl	8008dee <__retarget_lock_release_recursive>
 800c266:	9a01      	ldr	r2, [sp, #4]
 800c268:	462b      	mov	r3, r5
 800c26a:	4639      	mov	r1, r7
 800c26c:	4648      	mov	r0, r9
 800c26e:	b039      	add	sp, #228	; 0xe4
 800c270:	ecbd 8b02 	vpop	{d8}
 800c274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	f000 bc3a 	b.w	800caf0 <__sbprintf>
 800c27c:	2300      	movs	r3, #0
 800c27e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800c282:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c286:	ae0f      	add	r6, sp, #60	; 0x3c
 800c288:	ee08 3a10 	vmov	s16, r3
 800c28c:	960c      	str	r6, [sp, #48]	; 0x30
 800c28e:	9307      	str	r3, [sp, #28]
 800c290:	9302      	str	r3, [sp, #8]
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	461d      	mov	r5, r3
 800c296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c29a:	b10a      	cbz	r2, 800c2a0 <_vfiprintf_r+0xdc>
 800c29c:	2a25      	cmp	r2, #37	; 0x25
 800c29e:	d1f9      	bne.n	800c294 <_vfiprintf_r+0xd0>
 800c2a0:	9b01      	ldr	r3, [sp, #4]
 800c2a2:	ebb5 0803 	subs.w	r8, r5, r3
 800c2a6:	d00d      	beq.n	800c2c4 <_vfiprintf_r+0x100>
 800c2a8:	e9c6 3800 	strd	r3, r8, [r6]
 800c2ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2ae:	4443      	add	r3, r8
 800c2b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	2b07      	cmp	r3, #7
 800c2b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c2ba:	dc75      	bgt.n	800c3a8 <_vfiprintf_r+0x1e4>
 800c2bc:	3608      	adds	r6, #8
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	4443      	add	r3, r8
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	782b      	ldrb	r3, [r5, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f000 83d6 	beq.w	800ca78 <_vfiprintf_r+0x8b4>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f04f 31ff 	mov.w	r1, #4294967295
 800c2d2:	1c6a      	adds	r2, r5, #1
 800c2d4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800c2d8:	9100      	str	r1, [sp, #0]
 800c2da:	9303      	str	r3, [sp, #12]
 800c2dc:	469a      	mov	sl, r3
 800c2de:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c2e2:	9201      	str	r2, [sp, #4]
 800c2e4:	f1a3 0220 	sub.w	r2, r3, #32
 800c2e8:	2a5a      	cmp	r2, #90	; 0x5a
 800c2ea:	f200 831f 	bhi.w	800c92c <_vfiprintf_r+0x768>
 800c2ee:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c2f2:	009b      	.short	0x009b
 800c2f4:	031d031d 	.word	0x031d031d
 800c2f8:	031d00a3 	.word	0x031d00a3
 800c2fc:	031d031d 	.word	0x031d031d
 800c300:	031d0082 	.word	0x031d0082
 800c304:	00a6031d 	.word	0x00a6031d
 800c308:	031d00b0 	.word	0x031d00b0
 800c30c:	00b200ad 	.word	0x00b200ad
 800c310:	00cd031d 	.word	0x00cd031d
 800c314:	00d000d0 	.word	0x00d000d0
 800c318:	00d000d0 	.word	0x00d000d0
 800c31c:	00d000d0 	.word	0x00d000d0
 800c320:	00d000d0 	.word	0x00d000d0
 800c324:	031d00d0 	.word	0x031d00d0
 800c328:	031d031d 	.word	0x031d031d
 800c32c:	031d031d 	.word	0x031d031d
 800c330:	031d031d 	.word	0x031d031d
 800c334:	031d031d 	.word	0x031d031d
 800c338:	010800fa 	.word	0x010800fa
 800c33c:	031d031d 	.word	0x031d031d
 800c340:	031d031d 	.word	0x031d031d
 800c344:	031d031d 	.word	0x031d031d
 800c348:	031d031d 	.word	0x031d031d
 800c34c:	031d031d 	.word	0x031d031d
 800c350:	031d0158 	.word	0x031d0158
 800c354:	031d031d 	.word	0x031d031d
 800c358:	031d01a1 	.word	0x031d01a1
 800c35c:	031d027e 	.word	0x031d027e
 800c360:	029e031d 	.word	0x029e031d
 800c364:	031d031d 	.word	0x031d031d
 800c368:	031d031d 	.word	0x031d031d
 800c36c:	031d031d 	.word	0x031d031d
 800c370:	031d031d 	.word	0x031d031d
 800c374:	031d031d 	.word	0x031d031d
 800c378:	010a00fa 	.word	0x010a00fa
 800c37c:	031d031d 	.word	0x031d031d
 800c380:	00e0031d 	.word	0x00e0031d
 800c384:	00f4010a 	.word	0x00f4010a
 800c388:	00ed031d 	.word	0x00ed031d
 800c38c:	0136031d 	.word	0x0136031d
 800c390:	018f015a 	.word	0x018f015a
 800c394:	031d00f4 	.word	0x031d00f4
 800c398:	009901a1 	.word	0x009901a1
 800c39c:	031d0280 	.word	0x031d0280
 800c3a0:	0065031d 	.word	0x0065031d
 800c3a4:	0099031d 	.word	0x0099031d
 800c3a8:	aa0c      	add	r2, sp, #48	; 0x30
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f7ff fed7 	bl	800c160 <__sprint_r>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f040 833f 	bne.w	800ca36 <_vfiprintf_r+0x872>
 800c3b8:	ae0f      	add	r6, sp, #60	; 0x3c
 800c3ba:	e780      	b.n	800c2be <_vfiprintf_r+0xfa>
 800c3bc:	4a9c      	ldr	r2, [pc, #624]	; (800c630 <_vfiprintf_r+0x46c>)
 800c3be:	9205      	str	r2, [sp, #20]
 800c3c0:	f01a 0220 	ands.w	r2, sl, #32
 800c3c4:	f000 8235 	beq.w	800c832 <_vfiprintf_r+0x66e>
 800c3c8:	3407      	adds	r4, #7
 800c3ca:	f024 0207 	bic.w	r2, r4, #7
 800c3ce:	4693      	mov	fp, r2
 800c3d0:	6855      	ldr	r5, [r2, #4]
 800c3d2:	f85b 4b08 	ldr.w	r4, [fp], #8
 800c3d6:	f01a 0f01 	tst.w	sl, #1
 800c3da:	d009      	beq.n	800c3f0 <_vfiprintf_r+0x22c>
 800c3dc:	ea54 0205 	orrs.w	r2, r4, r5
 800c3e0:	bf1f      	itttt	ne
 800c3e2:	2230      	movne	r2, #48	; 0x30
 800c3e4:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800c3e8:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800c3ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3f0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c3f4:	e11a      	b.n	800c62c <_vfiprintf_r+0x468>
 800c3f6:	4648      	mov	r0, r9
 800c3f8:	f7fe fe00 	bl	800affc <_localeconv_r>
 800c3fc:	6843      	ldr	r3, [r0, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	ee08 3a10 	vmov	s16, r3
 800c404:	f7f3 ffbc 	bl	8000380 <strlen>
 800c408:	9007      	str	r0, [sp, #28]
 800c40a:	4648      	mov	r0, r9
 800c40c:	f7fe fdf6 	bl	800affc <_localeconv_r>
 800c410:	6883      	ldr	r3, [r0, #8]
 800c412:	9306      	str	r3, [sp, #24]
 800c414:	9b07      	ldr	r3, [sp, #28]
 800c416:	b12b      	cbz	r3, 800c424 <_vfiprintf_r+0x260>
 800c418:	9b06      	ldr	r3, [sp, #24]
 800c41a:	b11b      	cbz	r3, 800c424 <_vfiprintf_r+0x260>
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b10b      	cbz	r3, 800c424 <_vfiprintf_r+0x260>
 800c420:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800c424:	9a01      	ldr	r2, [sp, #4]
 800c426:	e75a      	b.n	800c2de <_vfiprintf_r+0x11a>
 800c428:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1f9      	bne.n	800c424 <_vfiprintf_r+0x260>
 800c430:	2320      	movs	r3, #32
 800c432:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800c436:	e7f5      	b.n	800c424 <_vfiprintf_r+0x260>
 800c438:	f04a 0a01 	orr.w	sl, sl, #1
 800c43c:	e7f2      	b.n	800c424 <_vfiprintf_r+0x260>
 800c43e:	f854 3b04 	ldr.w	r3, [r4], #4
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	daed      	bge.n	800c424 <_vfiprintf_r+0x260>
 800c448:	425b      	negs	r3, r3
 800c44a:	9303      	str	r3, [sp, #12]
 800c44c:	f04a 0a04 	orr.w	sl, sl, #4
 800c450:	e7e8      	b.n	800c424 <_vfiprintf_r+0x260>
 800c452:	232b      	movs	r3, #43	; 0x2b
 800c454:	e7ed      	b.n	800c432 <_vfiprintf_r+0x26e>
 800c456:	9a01      	ldr	r2, [sp, #4]
 800c458:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c45c:	2b2a      	cmp	r3, #42	; 0x2a
 800c45e:	d112      	bne.n	800c486 <_vfiprintf_r+0x2c2>
 800c460:	f854 0b04 	ldr.w	r0, [r4], #4
 800c464:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800c468:	e9cd 3200 	strd	r3, r2, [sp]
 800c46c:	e7da      	b.n	800c424 <_vfiprintf_r+0x260>
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	200a      	movs	r0, #10
 800c472:	fb00 1303 	mla	r3, r0, r3, r1
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c47c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c480:	2909      	cmp	r1, #9
 800c482:	d9f4      	bls.n	800c46e <_vfiprintf_r+0x2aa>
 800c484:	e72d      	b.n	800c2e2 <_vfiprintf_r+0x11e>
 800c486:	2100      	movs	r1, #0
 800c488:	9100      	str	r1, [sp, #0]
 800c48a:	e7f7      	b.n	800c47c <_vfiprintf_r+0x2b8>
 800c48c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800c490:	e7c8      	b.n	800c424 <_vfiprintf_r+0x260>
 800c492:	2100      	movs	r1, #0
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	9103      	str	r1, [sp, #12]
 800c498:	9903      	ldr	r1, [sp, #12]
 800c49a:	3b30      	subs	r3, #48	; 0x30
 800c49c:	200a      	movs	r0, #10
 800c49e:	fb00 3301 	mla	r3, r0, r1, r3
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c4a8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c4ac:	2909      	cmp	r1, #9
 800c4ae:	d9f3      	bls.n	800c498 <_vfiprintf_r+0x2d4>
 800c4b0:	e717      	b.n	800c2e2 <_vfiprintf_r+0x11e>
 800c4b2:	9b01      	ldr	r3, [sp, #4]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b68      	cmp	r3, #104	; 0x68
 800c4b8:	bf01      	itttt	eq
 800c4ba:	9b01      	ldreq	r3, [sp, #4]
 800c4bc:	3301      	addeq	r3, #1
 800c4be:	9301      	streq	r3, [sp, #4]
 800c4c0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800c4c4:	bf18      	it	ne
 800c4c6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800c4ca:	e7ab      	b.n	800c424 <_vfiprintf_r+0x260>
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b6c      	cmp	r3, #108	; 0x6c
 800c4d2:	d105      	bne.n	800c4e0 <_vfiprintf_r+0x31c>
 800c4d4:	9b01      	ldr	r3, [sp, #4]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	f04a 0a20 	orr.w	sl, sl, #32
 800c4de:	e7a1      	b.n	800c424 <_vfiprintf_r+0x260>
 800c4e0:	f04a 0a10 	orr.w	sl, sl, #16
 800c4e4:	e79e      	b.n	800c424 <_vfiprintf_r+0x260>
 800c4e6:	46a3      	mov	fp, r4
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f85b 3b04 	ldr.w	r3, [fp], #4
 800c4ee:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c4f2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800c500:	e0ad      	b.n	800c65e <_vfiprintf_r+0x49a>
 800c502:	f04a 0a10 	orr.w	sl, sl, #16
 800c506:	f01a 0f20 	tst.w	sl, #32
 800c50a:	d011      	beq.n	800c530 <_vfiprintf_r+0x36c>
 800c50c:	3407      	adds	r4, #7
 800c50e:	f024 0307 	bic.w	r3, r4, #7
 800c512:	469b      	mov	fp, r3
 800c514:	685d      	ldr	r5, [r3, #4]
 800c516:	f85b 4b08 	ldr.w	r4, [fp], #8
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	da06      	bge.n	800c52c <_vfiprintf_r+0x368>
 800c51e:	4264      	negs	r4, r4
 800c520:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800c524:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800c528:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800c52c:	2301      	movs	r3, #1
 800c52e:	e04a      	b.n	800c5c6 <_vfiprintf_r+0x402>
 800c530:	46a3      	mov	fp, r4
 800c532:	f01a 0f10 	tst.w	sl, #16
 800c536:	f85b 5b04 	ldr.w	r5, [fp], #4
 800c53a:	d002      	beq.n	800c542 <_vfiprintf_r+0x37e>
 800c53c:	462c      	mov	r4, r5
 800c53e:	17ed      	asrs	r5, r5, #31
 800c540:	e7eb      	b.n	800c51a <_vfiprintf_r+0x356>
 800c542:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c546:	d003      	beq.n	800c550 <_vfiprintf_r+0x38c>
 800c548:	b22c      	sxth	r4, r5
 800c54a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800c54e:	e7e4      	b.n	800c51a <_vfiprintf_r+0x356>
 800c550:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c554:	d0f2      	beq.n	800c53c <_vfiprintf_r+0x378>
 800c556:	b26c      	sxtb	r4, r5
 800c558:	f345 15c0 	sbfx	r5, r5, #7, #1
 800c55c:	e7dd      	b.n	800c51a <_vfiprintf_r+0x356>
 800c55e:	f01a 0f20 	tst.w	sl, #32
 800c562:	f104 0b04 	add.w	fp, r4, #4
 800c566:	d007      	beq.n	800c578 <_vfiprintf_r+0x3b4>
 800c568:	9a02      	ldr	r2, [sp, #8]
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	9902      	ldr	r1, [sp, #8]
 800c56e:	17d2      	asrs	r2, r2, #31
 800c570:	e9c3 1200 	strd	r1, r2, [r3]
 800c574:	465c      	mov	r4, fp
 800c576:	e68c      	b.n	800c292 <_vfiprintf_r+0xce>
 800c578:	f01a 0f10 	tst.w	sl, #16
 800c57c:	d003      	beq.n	800c586 <_vfiprintf_r+0x3c2>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	9a02      	ldr	r2, [sp, #8]
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	e7f6      	b.n	800c574 <_vfiprintf_r+0x3b0>
 800c586:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c58a:	d003      	beq.n	800c594 <_vfiprintf_r+0x3d0>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	9a02      	ldr	r2, [sp, #8]
 800c590:	801a      	strh	r2, [r3, #0]
 800c592:	e7ef      	b.n	800c574 <_vfiprintf_r+0x3b0>
 800c594:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c598:	d0f1      	beq.n	800c57e <_vfiprintf_r+0x3ba>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	9a02      	ldr	r2, [sp, #8]
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	e7e8      	b.n	800c574 <_vfiprintf_r+0x3b0>
 800c5a2:	f04a 0a10 	orr.w	sl, sl, #16
 800c5a6:	f01a 0320 	ands.w	r3, sl, #32
 800c5aa:	d01f      	beq.n	800c5ec <_vfiprintf_r+0x428>
 800c5ac:	3407      	adds	r4, #7
 800c5ae:	f024 0307 	bic.w	r3, r4, #7
 800c5b2:	469b      	mov	fp, r3
 800c5b4:	685d      	ldr	r5, [r3, #4]
 800c5b6:	f85b 4b08 	ldr.w	r4, [fp], #8
 800c5ba:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800c5c6:	9a00      	ldr	r2, [sp, #0]
 800c5c8:	3201      	adds	r2, #1
 800c5ca:	f000 8262 	beq.w	800ca92 <_vfiprintf_r+0x8ce>
 800c5ce:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800c5d2:	9204      	str	r2, [sp, #16]
 800c5d4:	ea54 0205 	orrs.w	r2, r4, r5
 800c5d8:	f040 8261 	bne.w	800ca9e <_vfiprintf_r+0x8da>
 800c5dc:	9a00      	ldr	r2, [sp, #0]
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	f000 8199 	beq.w	800c916 <_vfiprintf_r+0x752>
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	f040 825d 	bne.w	800caa4 <_vfiprintf_r+0x8e0>
 800c5ea:	e139      	b.n	800c860 <_vfiprintf_r+0x69c>
 800c5ec:	46a3      	mov	fp, r4
 800c5ee:	f01a 0510 	ands.w	r5, sl, #16
 800c5f2:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c5f6:	d001      	beq.n	800c5fc <_vfiprintf_r+0x438>
 800c5f8:	461d      	mov	r5, r3
 800c5fa:	e7de      	b.n	800c5ba <_vfiprintf_r+0x3f6>
 800c5fc:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800c600:	d001      	beq.n	800c606 <_vfiprintf_r+0x442>
 800c602:	b2a4      	uxth	r4, r4
 800c604:	e7d9      	b.n	800c5ba <_vfiprintf_r+0x3f6>
 800c606:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800c60a:	d0d6      	beq.n	800c5ba <_vfiprintf_r+0x3f6>
 800c60c:	b2e4      	uxtb	r4, r4
 800c60e:	e7f3      	b.n	800c5f8 <_vfiprintf_r+0x434>
 800c610:	2330      	movs	r3, #48	; 0x30
 800c612:	46a3      	mov	fp, r4
 800c614:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c618:	2378      	movs	r3, #120	; 0x78
 800c61a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800c61e:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c622:	4b03      	ldr	r3, [pc, #12]	; (800c630 <_vfiprintf_r+0x46c>)
 800c624:	9305      	str	r3, [sp, #20]
 800c626:	2500      	movs	r5, #0
 800c628:	f04a 0a02 	orr.w	sl, sl, #2
 800c62c:	2302      	movs	r3, #2
 800c62e:	e7c7      	b.n	800c5c0 <_vfiprintf_r+0x3fc>
 800c630:	0800d700 	.word	0x0800d700
 800c634:	9b00      	ldr	r3, [sp, #0]
 800c636:	46a3      	mov	fp, r4
 800c638:	2500      	movs	r5, #0
 800c63a:	1c5c      	adds	r4, r3, #1
 800c63c:	f85b 8b04 	ldr.w	r8, [fp], #4
 800c640:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800c644:	f000 80ce 	beq.w	800c7e4 <_vfiprintf_r+0x620>
 800c648:	461a      	mov	r2, r3
 800c64a:	4629      	mov	r1, r5
 800c64c:	4640      	mov	r0, r8
 800c64e:	f7f3 fe47 	bl	80002e0 <memchr>
 800c652:	2800      	cmp	r0, #0
 800c654:	f000 8174 	beq.w	800c940 <_vfiprintf_r+0x77c>
 800c658:	eba0 0308 	sub.w	r3, r0, r8
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	9b00      	ldr	r3, [sp, #0]
 800c660:	42ab      	cmp	r3, r5
 800c662:	bfb8      	it	lt
 800c664:	462b      	movlt	r3, r5
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800c66c:	b113      	cbz	r3, 800c674 <_vfiprintf_r+0x4b0>
 800c66e:	9b04      	ldr	r3, [sp, #16]
 800c670:	3301      	adds	r3, #1
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	f01a 0302 	ands.w	r3, sl, #2
 800c678:	9308      	str	r3, [sp, #32]
 800c67a:	bf1e      	ittt	ne
 800c67c:	9b04      	ldrne	r3, [sp, #16]
 800c67e:	3302      	addne	r3, #2
 800c680:	9304      	strne	r3, [sp, #16]
 800c682:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800c686:	9309      	str	r3, [sp, #36]	; 0x24
 800c688:	d11f      	bne.n	800c6ca <_vfiprintf_r+0x506>
 800c68a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c68e:	1a9c      	subs	r4, r3, r2
 800c690:	2c00      	cmp	r4, #0
 800c692:	dd1a      	ble.n	800c6ca <_vfiprintf_r+0x506>
 800c694:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800c698:	48aa      	ldr	r0, [pc, #680]	; (800c944 <_vfiprintf_r+0x780>)
 800c69a:	6030      	str	r0, [r6, #0]
 800c69c:	2c10      	cmp	r4, #16
 800c69e:	f103 0301 	add.w	r3, r3, #1
 800c6a2:	f106 0108 	add.w	r1, r6, #8
 800c6a6:	f300 8153 	bgt.w	800c950 <_vfiprintf_r+0x78c>
 800c6aa:	6074      	str	r4, [r6, #4]
 800c6ac:	2b07      	cmp	r3, #7
 800c6ae:	4414      	add	r4, r2
 800c6b0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c6b4:	f340 815e 	ble.w	800c974 <_vfiprintf_r+0x7b0>
 800c6b8:	aa0c      	add	r2, sp, #48	; 0x30
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	4648      	mov	r0, r9
 800c6be:	f7ff fd4f 	bl	800c160 <__sprint_r>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f040 81b7 	bne.w	800ca36 <_vfiprintf_r+0x872>
 800c6c8:	ae0f      	add	r6, sp, #60	; 0x3c
 800c6ca:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800c6ce:	b173      	cbz	r3, 800c6ee <_vfiprintf_r+0x52a>
 800c6d0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800c6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d6:	6032      	str	r2, [r6, #0]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	6072      	str	r2, [r6, #4]
 800c6dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6de:	3301      	adds	r3, #1
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	2b07      	cmp	r3, #7
 800c6e4:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c6e8:	f300 8146 	bgt.w	800c978 <_vfiprintf_r+0x7b4>
 800c6ec:	3608      	adds	r6, #8
 800c6ee:	9b08      	ldr	r3, [sp, #32]
 800c6f0:	b16b      	cbz	r3, 800c70e <_vfiprintf_r+0x54a>
 800c6f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6f6:	6032      	str	r2, [r6, #0]
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	6072      	str	r2, [r6, #4]
 800c6fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6fe:	3301      	adds	r3, #1
 800c700:	3202      	adds	r2, #2
 800c702:	2b07      	cmp	r3, #7
 800c704:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c708:	f300 813f 	bgt.w	800c98a <_vfiprintf_r+0x7c6>
 800c70c:	3608      	adds	r6, #8
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	2b80      	cmp	r3, #128	; 0x80
 800c712:	d11f      	bne.n	800c754 <_vfiprintf_r+0x590>
 800c714:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c718:	1a9c      	subs	r4, r3, r2
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	dd1a      	ble.n	800c754 <_vfiprintf_r+0x590>
 800c71e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800c722:	4889      	ldr	r0, [pc, #548]	; (800c948 <_vfiprintf_r+0x784>)
 800c724:	6030      	str	r0, [r6, #0]
 800c726:	2c10      	cmp	r4, #16
 800c728:	f103 0301 	add.w	r3, r3, #1
 800c72c:	f106 0108 	add.w	r1, r6, #8
 800c730:	f300 8134 	bgt.w	800c99c <_vfiprintf_r+0x7d8>
 800c734:	6074      	str	r4, [r6, #4]
 800c736:	2b07      	cmp	r3, #7
 800c738:	4414      	add	r4, r2
 800c73a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c73e:	f340 813f 	ble.w	800c9c0 <_vfiprintf_r+0x7fc>
 800c742:	aa0c      	add	r2, sp, #48	; 0x30
 800c744:	4639      	mov	r1, r7
 800c746:	4648      	mov	r0, r9
 800c748:	f7ff fd0a 	bl	800c160 <__sprint_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	f040 8172 	bne.w	800ca36 <_vfiprintf_r+0x872>
 800c752:	ae0f      	add	r6, sp, #60	; 0x3c
 800c754:	9b00      	ldr	r3, [sp, #0]
 800c756:	1aec      	subs	r4, r5, r3
 800c758:	2c00      	cmp	r4, #0
 800c75a:	dd1a      	ble.n	800c792 <_vfiprintf_r+0x5ce>
 800c75c:	4d7a      	ldr	r5, [pc, #488]	; (800c948 <_vfiprintf_r+0x784>)
 800c75e:	6035      	str	r5, [r6, #0]
 800c760:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800c764:	2c10      	cmp	r4, #16
 800c766:	f103 0301 	add.w	r3, r3, #1
 800c76a:	f106 0208 	add.w	r2, r6, #8
 800c76e:	f300 8129 	bgt.w	800c9c4 <_vfiprintf_r+0x800>
 800c772:	6074      	str	r4, [r6, #4]
 800c774:	2b07      	cmp	r3, #7
 800c776:	440c      	add	r4, r1
 800c778:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c77c:	f340 8133 	ble.w	800c9e6 <_vfiprintf_r+0x822>
 800c780:	aa0c      	add	r2, sp, #48	; 0x30
 800c782:	4639      	mov	r1, r7
 800c784:	4648      	mov	r0, r9
 800c786:	f7ff fceb 	bl	800c160 <__sprint_r>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	f040 8153 	bne.w	800ca36 <_vfiprintf_r+0x872>
 800c790:	ae0f      	add	r6, sp, #60	; 0x3c
 800c792:	9b00      	ldr	r3, [sp, #0]
 800c794:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c796:	6073      	str	r3, [r6, #4]
 800c798:	4418      	add	r0, r3
 800c79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c79c:	f8c6 8000 	str.w	r8, [r6]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	2b07      	cmp	r3, #7
 800c7a4:	900e      	str	r0, [sp, #56]	; 0x38
 800c7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7a8:	f300 811f 	bgt.w	800c9ea <_vfiprintf_r+0x826>
 800c7ac:	f106 0308 	add.w	r3, r6, #8
 800c7b0:	f01a 0f04 	tst.w	sl, #4
 800c7b4:	f040 8121 	bne.w	800c9fa <_vfiprintf_r+0x836>
 800c7b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c7bc:	9904      	ldr	r1, [sp, #16]
 800c7be:	428a      	cmp	r2, r1
 800c7c0:	bfac      	ite	ge
 800c7c2:	189b      	addge	r3, r3, r2
 800c7c4:	185b      	addlt	r3, r3, r1
 800c7c6:	9302      	str	r3, [sp, #8]
 800c7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ca:	b13b      	cbz	r3, 800c7dc <_vfiprintf_r+0x618>
 800c7cc:	aa0c      	add	r2, sp, #48	; 0x30
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	4648      	mov	r0, r9
 800c7d2:	f7ff fcc5 	bl	800c160 <__sprint_r>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f040 812d 	bne.w	800ca36 <_vfiprintf_r+0x872>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	930d      	str	r3, [sp, #52]	; 0x34
 800c7e0:	ae0f      	add	r6, sp, #60	; 0x3c
 800c7e2:	e6c7      	b.n	800c574 <_vfiprintf_r+0x3b0>
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	f7f3 fdcb 	bl	8000380 <strlen>
 800c7ea:	9000      	str	r0, [sp, #0]
 800c7ec:	e737      	b.n	800c65e <_vfiprintf_r+0x49a>
 800c7ee:	f04a 0a10 	orr.w	sl, sl, #16
 800c7f2:	f01a 0320 	ands.w	r3, sl, #32
 800c7f6:	d008      	beq.n	800c80a <_vfiprintf_r+0x646>
 800c7f8:	3407      	adds	r4, #7
 800c7fa:	f024 0307 	bic.w	r3, r4, #7
 800c7fe:	469b      	mov	fp, r3
 800c800:	685d      	ldr	r5, [r3, #4]
 800c802:	f85b 4b08 	ldr.w	r4, [fp], #8
 800c806:	2301      	movs	r3, #1
 800c808:	e6da      	b.n	800c5c0 <_vfiprintf_r+0x3fc>
 800c80a:	46a3      	mov	fp, r4
 800c80c:	f01a 0510 	ands.w	r5, sl, #16
 800c810:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c814:	d001      	beq.n	800c81a <_vfiprintf_r+0x656>
 800c816:	461d      	mov	r5, r3
 800c818:	e7f5      	b.n	800c806 <_vfiprintf_r+0x642>
 800c81a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800c81e:	d001      	beq.n	800c824 <_vfiprintf_r+0x660>
 800c820:	b2a4      	uxth	r4, r4
 800c822:	e7f0      	b.n	800c806 <_vfiprintf_r+0x642>
 800c824:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800c828:	d0ed      	beq.n	800c806 <_vfiprintf_r+0x642>
 800c82a:	b2e4      	uxtb	r4, r4
 800c82c:	e7f3      	b.n	800c816 <_vfiprintf_r+0x652>
 800c82e:	4a47      	ldr	r2, [pc, #284]	; (800c94c <_vfiprintf_r+0x788>)
 800c830:	e5c5      	b.n	800c3be <_vfiprintf_r+0x1fa>
 800c832:	46a3      	mov	fp, r4
 800c834:	f01a 0510 	ands.w	r5, sl, #16
 800c838:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c83c:	d001      	beq.n	800c842 <_vfiprintf_r+0x67e>
 800c83e:	4615      	mov	r5, r2
 800c840:	e5c9      	b.n	800c3d6 <_vfiprintf_r+0x212>
 800c842:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800c846:	d001      	beq.n	800c84c <_vfiprintf_r+0x688>
 800c848:	b2a4      	uxth	r4, r4
 800c84a:	e5c4      	b.n	800c3d6 <_vfiprintf_r+0x212>
 800c84c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800c850:	f43f adc1 	beq.w	800c3d6 <_vfiprintf_r+0x212>
 800c854:	b2e4      	uxtb	r4, r4
 800c856:	e7f2      	b.n	800c83e <_vfiprintf_r+0x67a>
 800c858:	2c0a      	cmp	r4, #10
 800c85a:	f175 0300 	sbcs.w	r3, r5, #0
 800c85e:	d205      	bcs.n	800c86c <_vfiprintf_r+0x6a8>
 800c860:	3430      	adds	r4, #48	; 0x30
 800c862:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800c866:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800c86a:	e137      	b.n	800cadc <_vfiprintf_r+0x918>
 800c86c:	ab38      	add	r3, sp, #224	; 0xe0
 800c86e:	9308      	str	r3, [sp, #32]
 800c870:	9b04      	ldr	r3, [sp, #16]
 800c872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c876:	f04f 0a00 	mov.w	sl, #0
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
 800c87c:	9b08      	ldr	r3, [sp, #32]
 800c87e:	220a      	movs	r2, #10
 800c880:	f103 38ff 	add.w	r8, r3, #4294967295
 800c884:	4620      	mov	r0, r4
 800c886:	2300      	movs	r3, #0
 800c888:	4629      	mov	r1, r5
 800c88a:	f7f3 fd81 	bl	8000390 <__aeabi_uldivmod>
 800c88e:	9b08      	ldr	r3, [sp, #32]
 800c890:	3230      	adds	r2, #48	; 0x30
 800c892:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c898:	f10a 0a01 	add.w	sl, sl, #1
 800c89c:	b1db      	cbz	r3, 800c8d6 <_vfiprintf_r+0x712>
 800c89e:	9b06      	ldr	r3, [sp, #24]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	4553      	cmp	r3, sl
 800c8a4:	d117      	bne.n	800c8d6 <_vfiprintf_r+0x712>
 800c8a6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c8aa:	d014      	beq.n	800c8d6 <_vfiprintf_r+0x712>
 800c8ac:	2c0a      	cmp	r4, #10
 800c8ae:	f175 0300 	sbcs.w	r3, r5, #0
 800c8b2:	d310      	bcc.n	800c8d6 <_vfiprintf_r+0x712>
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	eba8 0803 	sub.w	r8, r8, r3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	ee18 1a10 	vmov	r1, s16
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	f7ff f975 	bl	800bbb0 <strncpy>
 800c8c6:	9b06      	ldr	r3, [sp, #24]
 800c8c8:	785b      	ldrb	r3, [r3, #1]
 800c8ca:	b1a3      	cbz	r3, 800c8f6 <_vfiprintf_r+0x732>
 800c8cc:	9b06      	ldr	r3, [sp, #24]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	9306      	str	r3, [sp, #24]
 800c8d2:	f04f 0a00 	mov.w	sl, #0
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	220a      	movs	r2, #10
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4629      	mov	r1, r5
 800c8de:	f7f3 fd57 	bl	8000390 <__aeabi_uldivmod>
 800c8e2:	2c0a      	cmp	r4, #10
 800c8e4:	f175 0300 	sbcs.w	r3, r5, #0
 800c8e8:	f0c0 80f8 	bcc.w	800cadc <_vfiprintf_r+0x918>
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	f8cd 8020 	str.w	r8, [sp, #32]
 800c8f4:	e7c2      	b.n	800c87c <_vfiprintf_r+0x6b8>
 800c8f6:	469a      	mov	sl, r3
 800c8f8:	e7ed      	b.n	800c8d6 <_vfiprintf_r+0x712>
 800c8fa:	f004 030f 	and.w	r3, r4, #15
 800c8fe:	9a05      	ldr	r2, [sp, #20]
 800c900:	0924      	lsrs	r4, r4, #4
 800c902:	5cd3      	ldrb	r3, [r2, r3]
 800c904:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c908:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800c90c:	092d      	lsrs	r5, r5, #4
 800c90e:	ea54 0305 	orrs.w	r3, r4, r5
 800c912:	d1f2      	bne.n	800c8fa <_vfiprintf_r+0x736>
 800c914:	e0e2      	b.n	800cadc <_vfiprintf_r+0x918>
 800c916:	b933      	cbnz	r3, 800c926 <_vfiprintf_r+0x762>
 800c918:	f01a 0f01 	tst.w	sl, #1
 800c91c:	d003      	beq.n	800c926 <_vfiprintf_r+0x762>
 800c91e:	2330      	movs	r3, #48	; 0x30
 800c920:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800c924:	e79f      	b.n	800c866 <_vfiprintf_r+0x6a2>
 800c926:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c92a:	e0d7      	b.n	800cadc <_vfiprintf_r+0x918>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 80a3 	beq.w	800ca78 <_vfiprintf_r+0x8b4>
 800c932:	2100      	movs	r1, #0
 800c934:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c938:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800c93c:	46a3      	mov	fp, r4
 800c93e:	e5da      	b.n	800c4f6 <_vfiprintf_r+0x332>
 800c940:	4605      	mov	r5, r0
 800c942:	e68c      	b.n	800c65e <_vfiprintf_r+0x49a>
 800c944:	0800d962 	.word	0x0800d962
 800c948:	0800d972 	.word	0x0800d972
 800c94c:	0800d711 	.word	0x0800d711
 800c950:	2010      	movs	r0, #16
 800c952:	4402      	add	r2, r0
 800c954:	2b07      	cmp	r3, #7
 800c956:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c95a:	6070      	str	r0, [r6, #4]
 800c95c:	dd07      	ble.n	800c96e <_vfiprintf_r+0x7aa>
 800c95e:	aa0c      	add	r2, sp, #48	; 0x30
 800c960:	4639      	mov	r1, r7
 800c962:	4648      	mov	r0, r9
 800c964:	f7ff fbfc 	bl	800c160 <__sprint_r>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d164      	bne.n	800ca36 <_vfiprintf_r+0x872>
 800c96c:	a90f      	add	r1, sp, #60	; 0x3c
 800c96e:	3c10      	subs	r4, #16
 800c970:	460e      	mov	r6, r1
 800c972:	e68f      	b.n	800c694 <_vfiprintf_r+0x4d0>
 800c974:	460e      	mov	r6, r1
 800c976:	e6a8      	b.n	800c6ca <_vfiprintf_r+0x506>
 800c978:	aa0c      	add	r2, sp, #48	; 0x30
 800c97a:	4639      	mov	r1, r7
 800c97c:	4648      	mov	r0, r9
 800c97e:	f7ff fbef 	bl	800c160 <__sprint_r>
 800c982:	2800      	cmp	r0, #0
 800c984:	d157      	bne.n	800ca36 <_vfiprintf_r+0x872>
 800c986:	ae0f      	add	r6, sp, #60	; 0x3c
 800c988:	e6b1      	b.n	800c6ee <_vfiprintf_r+0x52a>
 800c98a:	aa0c      	add	r2, sp, #48	; 0x30
 800c98c:	4639      	mov	r1, r7
 800c98e:	4648      	mov	r0, r9
 800c990:	f7ff fbe6 	bl	800c160 <__sprint_r>
 800c994:	2800      	cmp	r0, #0
 800c996:	d14e      	bne.n	800ca36 <_vfiprintf_r+0x872>
 800c998:	ae0f      	add	r6, sp, #60	; 0x3c
 800c99a:	e6b8      	b.n	800c70e <_vfiprintf_r+0x54a>
 800c99c:	2010      	movs	r0, #16
 800c99e:	4402      	add	r2, r0
 800c9a0:	2b07      	cmp	r3, #7
 800c9a2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c9a6:	6070      	str	r0, [r6, #4]
 800c9a8:	dd07      	ble.n	800c9ba <_vfiprintf_r+0x7f6>
 800c9aa:	aa0c      	add	r2, sp, #48	; 0x30
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	4648      	mov	r0, r9
 800c9b0:	f7ff fbd6 	bl	800c160 <__sprint_r>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d13e      	bne.n	800ca36 <_vfiprintf_r+0x872>
 800c9b8:	a90f      	add	r1, sp, #60	; 0x3c
 800c9ba:	3c10      	subs	r4, #16
 800c9bc:	460e      	mov	r6, r1
 800c9be:	e6ae      	b.n	800c71e <_vfiprintf_r+0x55a>
 800c9c0:	460e      	mov	r6, r1
 800c9c2:	e6c7      	b.n	800c754 <_vfiprintf_r+0x590>
 800c9c4:	2010      	movs	r0, #16
 800c9c6:	4401      	add	r1, r0
 800c9c8:	2b07      	cmp	r3, #7
 800c9ca:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c9ce:	6070      	str	r0, [r6, #4]
 800c9d0:	dd06      	ble.n	800c9e0 <_vfiprintf_r+0x81c>
 800c9d2:	aa0c      	add	r2, sp, #48	; 0x30
 800c9d4:	4639      	mov	r1, r7
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	f7ff fbc2 	bl	800c160 <__sprint_r>
 800c9dc:	bb58      	cbnz	r0, 800ca36 <_vfiprintf_r+0x872>
 800c9de:	aa0f      	add	r2, sp, #60	; 0x3c
 800c9e0:	3c10      	subs	r4, #16
 800c9e2:	4616      	mov	r6, r2
 800c9e4:	e6bb      	b.n	800c75e <_vfiprintf_r+0x59a>
 800c9e6:	4616      	mov	r6, r2
 800c9e8:	e6d3      	b.n	800c792 <_vfiprintf_r+0x5ce>
 800c9ea:	aa0c      	add	r2, sp, #48	; 0x30
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4648      	mov	r0, r9
 800c9f0:	f7ff fbb6 	bl	800c160 <__sprint_r>
 800c9f4:	b9f8      	cbnz	r0, 800ca36 <_vfiprintf_r+0x872>
 800c9f6:	ab0f      	add	r3, sp, #60	; 0x3c
 800c9f8:	e6da      	b.n	800c7b0 <_vfiprintf_r+0x5ec>
 800c9fa:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c9fe:	1a54      	subs	r4, r2, r1
 800ca00:	2c00      	cmp	r4, #0
 800ca02:	f77f aed9 	ble.w	800c7b8 <_vfiprintf_r+0x5f4>
 800ca06:	4d39      	ldr	r5, [pc, #228]	; (800caec <_vfiprintf_r+0x928>)
 800ca08:	2610      	movs	r6, #16
 800ca0a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ca0e:	2c10      	cmp	r4, #16
 800ca10:	f102 0201 	add.w	r2, r2, #1
 800ca14:	601d      	str	r5, [r3, #0]
 800ca16:	dc1d      	bgt.n	800ca54 <_vfiprintf_r+0x890>
 800ca18:	605c      	str	r4, [r3, #4]
 800ca1a:	2a07      	cmp	r2, #7
 800ca1c:	440c      	add	r4, r1
 800ca1e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800ca22:	f77f aec9 	ble.w	800c7b8 <_vfiprintf_r+0x5f4>
 800ca26:	aa0c      	add	r2, sp, #48	; 0x30
 800ca28:	4639      	mov	r1, r7
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	f7ff fb98 	bl	800c160 <__sprint_r>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	f43f aec1 	beq.w	800c7b8 <_vfiprintf_r+0x5f4>
 800ca36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca38:	07d9      	lsls	r1, r3, #31
 800ca3a:	d405      	bmi.n	800ca48 <_vfiprintf_r+0x884>
 800ca3c:	89bb      	ldrh	r3, [r7, #12]
 800ca3e:	059a      	lsls	r2, r3, #22
 800ca40:	d402      	bmi.n	800ca48 <_vfiprintf_r+0x884>
 800ca42:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ca44:	f7fc f9d3 	bl	8008dee <__retarget_lock_release_recursive>
 800ca48:	89bb      	ldrh	r3, [r7, #12]
 800ca4a:	065b      	lsls	r3, r3, #25
 800ca4c:	f57f abed 	bpl.w	800c22a <_vfiprintf_r+0x66>
 800ca50:	f7ff bbe8 	b.w	800c224 <_vfiprintf_r+0x60>
 800ca54:	3110      	adds	r1, #16
 800ca56:	2a07      	cmp	r2, #7
 800ca58:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800ca5c:	605e      	str	r6, [r3, #4]
 800ca5e:	dc02      	bgt.n	800ca66 <_vfiprintf_r+0x8a2>
 800ca60:	3308      	adds	r3, #8
 800ca62:	3c10      	subs	r4, #16
 800ca64:	e7d1      	b.n	800ca0a <_vfiprintf_r+0x846>
 800ca66:	aa0c      	add	r2, sp, #48	; 0x30
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4648      	mov	r0, r9
 800ca6c:	f7ff fb78 	bl	800c160 <__sprint_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1e0      	bne.n	800ca36 <_vfiprintf_r+0x872>
 800ca74:	ab0f      	add	r3, sp, #60	; 0x3c
 800ca76:	e7f4      	b.n	800ca62 <_vfiprintf_r+0x89e>
 800ca78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca7a:	b913      	cbnz	r3, 800ca82 <_vfiprintf_r+0x8be>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca80:	e7d9      	b.n	800ca36 <_vfiprintf_r+0x872>
 800ca82:	aa0c      	add	r2, sp, #48	; 0x30
 800ca84:	4639      	mov	r1, r7
 800ca86:	4648      	mov	r0, r9
 800ca88:	f7ff fb6a 	bl	800c160 <__sprint_r>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d0f5      	beq.n	800ca7c <_vfiprintf_r+0x8b8>
 800ca90:	e7d1      	b.n	800ca36 <_vfiprintf_r+0x872>
 800ca92:	ea54 0205 	orrs.w	r2, r4, r5
 800ca96:	f8cd a010 	str.w	sl, [sp, #16]
 800ca9a:	f43f ada3 	beq.w	800c5e4 <_vfiprintf_r+0x420>
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	f43f aeda 	beq.w	800c858 <_vfiprintf_r+0x694>
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800caaa:	f43f af26 	beq.w	800c8fa <_vfiprintf_r+0x736>
 800caae:	f004 0307 	and.w	r3, r4, #7
 800cab2:	08e4      	lsrs	r4, r4, #3
 800cab4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800cab8:	08ed      	lsrs	r5, r5, #3
 800caba:	3330      	adds	r3, #48	; 0x30
 800cabc:	ea54 0105 	orrs.w	r1, r4, r5
 800cac0:	4642      	mov	r2, r8
 800cac2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800cac6:	d1f2      	bne.n	800caae <_vfiprintf_r+0x8ea>
 800cac8:	9904      	ldr	r1, [sp, #16]
 800caca:	07c8      	lsls	r0, r1, #31
 800cacc:	d506      	bpl.n	800cadc <_vfiprintf_r+0x918>
 800cace:	2b30      	cmp	r3, #48	; 0x30
 800cad0:	d004      	beq.n	800cadc <_vfiprintf_r+0x918>
 800cad2:	2330      	movs	r3, #48	; 0x30
 800cad4:	f808 3c01 	strb.w	r3, [r8, #-1]
 800cad8:	f1a2 0802 	sub.w	r8, r2, #2
 800cadc:	ab38      	add	r3, sp, #224	; 0xe0
 800cade:	eba3 0308 	sub.w	r3, r3, r8
 800cae2:	9d00      	ldr	r5, [sp, #0]
 800cae4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	e5b8      	b.n	800c65e <_vfiprintf_r+0x49a>
 800caec:	0800d962 	.word	0x0800d962

0800caf0 <__sbprintf>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	460c      	mov	r4, r1
 800caf4:	8989      	ldrh	r1, [r1, #12]
 800caf6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800cafa:	f021 0102 	bic.w	r1, r1, #2
 800cafe:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cb02:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cb04:	911b      	str	r1, [sp, #108]	; 0x6c
 800cb06:	89e1      	ldrh	r1, [r4, #14]
 800cb08:	f8ad 1016 	strh.w	r1, [sp, #22]
 800cb0c:	69e1      	ldr	r1, [r4, #28]
 800cb0e:	9109      	str	r1, [sp, #36]	; 0x24
 800cb10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb12:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb14:	a91c      	add	r1, sp, #112	; 0x70
 800cb16:	9102      	str	r1, [sp, #8]
 800cb18:	9106      	str	r1, [sp, #24]
 800cb1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb1e:	4606      	mov	r6, r0
 800cb20:	9104      	str	r1, [sp, #16]
 800cb22:	9107      	str	r1, [sp, #28]
 800cb24:	a818      	add	r0, sp, #96	; 0x60
 800cb26:	2100      	movs	r1, #0
 800cb28:	e9cd 3200 	strd	r3, r2, [sp]
 800cb2c:	9108      	str	r1, [sp, #32]
 800cb2e:	f7fc f95b 	bl	8008de8 <__retarget_lock_init_recursive>
 800cb32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb36:	a902      	add	r1, sp, #8
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff fb43 	bl	800c1c4 <_vfiprintf_r>
 800cb3e:	1e05      	subs	r5, r0, #0
 800cb40:	db07      	blt.n	800cb52 <__sbprintf+0x62>
 800cb42:	a902      	add	r1, sp, #8
 800cb44:	4630      	mov	r0, r6
 800cb46:	f000 f90f 	bl	800cd68 <_fflush_r>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	bf18      	it	ne
 800cb4e:	f04f 35ff 	movne.w	r5, #4294967295
 800cb52:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800cb56:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cb58:	065b      	lsls	r3, r3, #25
 800cb5a:	bf42      	ittt	mi
 800cb5c:	89a3      	ldrhmi	r3, [r4, #12]
 800cb5e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800cb62:	81a3      	strhmi	r3, [r4, #12]
 800cb64:	f7fc f941 	bl	8008dea <__retarget_lock_close_recursive>
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}

0800cb70 <__ascii_wctomb>:
 800cb70:	b149      	cbz	r1, 800cb86 <__ascii_wctomb+0x16>
 800cb72:	2aff      	cmp	r2, #255	; 0xff
 800cb74:	bf85      	ittet	hi
 800cb76:	238a      	movhi	r3, #138	; 0x8a
 800cb78:	6003      	strhi	r3, [r0, #0]
 800cb7a:	700a      	strbls	r2, [r1, #0]
 800cb7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb80:	bf98      	it	ls
 800cb82:	2001      	movls	r0, #1
 800cb84:	4770      	bx	lr
 800cb86:	4608      	mov	r0, r1
 800cb88:	4770      	bx	lr
	...

0800cb8c <__swsetup_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4b2a      	ldr	r3, [pc, #168]	; (800cc38 <__swsetup_r+0xac>)
 800cb90:	4605      	mov	r5, r0
 800cb92:	6818      	ldr	r0, [r3, #0]
 800cb94:	460c      	mov	r4, r1
 800cb96:	b118      	cbz	r0, 800cba0 <__swsetup_r+0x14>
 800cb98:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cb9a:	b90b      	cbnz	r3, 800cba0 <__swsetup_r+0x14>
 800cb9c:	f000 f950 	bl	800ce40 <__sinit>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cba6:	0718      	lsls	r0, r3, #28
 800cba8:	d422      	bmi.n	800cbf0 <__swsetup_r+0x64>
 800cbaa:	06d9      	lsls	r1, r3, #27
 800cbac:	d407      	bmi.n	800cbbe <__swsetup_r+0x32>
 800cbae:	2309      	movs	r3, #9
 800cbb0:	602b      	str	r3, [r5, #0]
 800cbb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbc:	e034      	b.n	800cc28 <__swsetup_r+0x9c>
 800cbbe:	0758      	lsls	r0, r3, #29
 800cbc0:	d512      	bpl.n	800cbe8 <__swsetup_r+0x5c>
 800cbc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cbc4:	b141      	cbz	r1, 800cbd8 <__swsetup_r+0x4c>
 800cbc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cbca:	4299      	cmp	r1, r3
 800cbcc:	d002      	beq.n	800cbd4 <__swsetup_r+0x48>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f7fe f954 	bl	800ae7c <_free_r>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6323      	str	r3, [r4, #48]	; 0x30
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	6023      	str	r3, [r4, #0]
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f043 0308 	orr.w	r3, r3, #8
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	b94b      	cbnz	r3, 800cc08 <__swsetup_r+0x7c>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbfe:	d003      	beq.n	800cc08 <__swsetup_r+0x7c>
 800cc00:	4621      	mov	r1, r4
 800cc02:	4628      	mov	r0, r5
 800cc04:	f000 fb46 	bl	800d294 <__smakebuf_r>
 800cc08:	89a0      	ldrh	r0, [r4, #12]
 800cc0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc0e:	f010 0301 	ands.w	r3, r0, #1
 800cc12:	d00a      	beq.n	800cc2a <__swsetup_r+0x9e>
 800cc14:	2300      	movs	r3, #0
 800cc16:	60a3      	str	r3, [r4, #8]
 800cc18:	6963      	ldr	r3, [r4, #20]
 800cc1a:	425b      	negs	r3, r3
 800cc1c:	61a3      	str	r3, [r4, #24]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	b943      	cbnz	r3, 800cc34 <__swsetup_r+0xa8>
 800cc22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc26:	d1c4      	bne.n	800cbb2 <__swsetup_r+0x26>
 800cc28:	bd38      	pop	{r3, r4, r5, pc}
 800cc2a:	0781      	lsls	r1, r0, #30
 800cc2c:	bf58      	it	pl
 800cc2e:	6963      	ldrpl	r3, [r4, #20]
 800cc30:	60a3      	str	r3, [r4, #8]
 800cc32:	e7f4      	b.n	800cc1e <__swsetup_r+0x92>
 800cc34:	2000      	movs	r0, #0
 800cc36:	e7f7      	b.n	800cc28 <__swsetup_r+0x9c>
 800cc38:	24000100 	.word	0x24000100

0800cc3c <abort>:
 800cc3c:	b508      	push	{r3, lr}
 800cc3e:	2006      	movs	r0, #6
 800cc40:	f000 fb92 	bl	800d368 <raise>
 800cc44:	2001      	movs	r0, #1
 800cc46:	f7f3 fe5b 	bl	8000900 <_exit>
	...

0800cc4c <__sflush_r>:
 800cc4c:	898b      	ldrh	r3, [r1, #12]
 800cc4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc56:	4605      	mov	r5, r0
 800cc58:	0718      	lsls	r0, r3, #28
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	d45f      	bmi.n	800cd1e <__sflush_r+0xd2>
 800cc5e:	684b      	ldr	r3, [r1, #4]
 800cc60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	818a      	strh	r2, [r1, #12]
 800cc68:	dc05      	bgt.n	800cc76 <__sflush_r+0x2a>
 800cc6a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	dc02      	bgt.n	800cc76 <__sflush_r+0x2a>
 800cc70:	2000      	movs	r0, #0
 800cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc78:	2e00      	cmp	r6, #0
 800cc7a:	d0f9      	beq.n	800cc70 <__sflush_r+0x24>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc82:	682f      	ldr	r7, [r5, #0]
 800cc84:	602b      	str	r3, [r5, #0]
 800cc86:	d036      	beq.n	800ccf6 <__sflush_r+0xaa>
 800cc88:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cc8a:	89a3      	ldrh	r3, [r4, #12]
 800cc8c:	075a      	lsls	r2, r3, #29
 800cc8e:	d505      	bpl.n	800cc9c <__sflush_r+0x50>
 800cc90:	6863      	ldr	r3, [r4, #4]
 800cc92:	1ac0      	subs	r0, r0, r3
 800cc94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc96:	b10b      	cbz	r3, 800cc9c <__sflush_r+0x50>
 800cc98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cc9a:	1ac0      	subs	r0, r0, r3
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4602      	mov	r2, r0
 800cca0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cca2:	69e1      	ldr	r1, [r4, #28]
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b0      	blx	r6
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	d106      	bne.n	800ccbc <__sflush_r+0x70>
 800ccae:	6829      	ldr	r1, [r5, #0]
 800ccb0:	291d      	cmp	r1, #29
 800ccb2:	d830      	bhi.n	800cd16 <__sflush_r+0xca>
 800ccb4:	4a2b      	ldr	r2, [pc, #172]	; (800cd64 <__sflush_r+0x118>)
 800ccb6:	40ca      	lsrs	r2, r1
 800ccb8:	07d6      	lsls	r6, r2, #31
 800ccba:	d52c      	bpl.n	800cd16 <__sflush_r+0xca>
 800ccbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccc0:	b21b      	sxth	r3, r3
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	6062      	str	r2, [r4, #4]
 800ccc6:	04d9      	lsls	r1, r3, #19
 800ccc8:	6922      	ldr	r2, [r4, #16]
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	6022      	str	r2, [r4, #0]
 800ccce:	d504      	bpl.n	800ccda <__sflush_r+0x8e>
 800ccd0:	1c42      	adds	r2, r0, #1
 800ccd2:	d101      	bne.n	800ccd8 <__sflush_r+0x8c>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b903      	cbnz	r3, 800ccda <__sflush_r+0x8e>
 800ccd8:	6520      	str	r0, [r4, #80]	; 0x50
 800ccda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ccdc:	602f      	str	r7, [r5, #0]
 800ccde:	2900      	cmp	r1, #0
 800cce0:	d0c6      	beq.n	800cc70 <__sflush_r+0x24>
 800cce2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cce6:	4299      	cmp	r1, r3
 800cce8:	d002      	beq.n	800ccf0 <__sflush_r+0xa4>
 800ccea:	4628      	mov	r0, r5
 800ccec:	f7fe f8c6 	bl	800ae7c <_free_r>
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	6320      	str	r0, [r4, #48]	; 0x30
 800ccf4:	e7bd      	b.n	800cc72 <__sflush_r+0x26>
 800ccf6:	69e1      	ldr	r1, [r4, #28]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	47b0      	blx	r6
 800ccfe:	1c41      	adds	r1, r0, #1
 800cd00:	d1c3      	bne.n	800cc8a <__sflush_r+0x3e>
 800cd02:	682b      	ldr	r3, [r5, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d0c0      	beq.n	800cc8a <__sflush_r+0x3e>
 800cd08:	2b1d      	cmp	r3, #29
 800cd0a:	d001      	beq.n	800cd10 <__sflush_r+0xc4>
 800cd0c:	2b16      	cmp	r3, #22
 800cd0e:	d101      	bne.n	800cd14 <__sflush_r+0xc8>
 800cd10:	602f      	str	r7, [r5, #0]
 800cd12:	e7ad      	b.n	800cc70 <__sflush_r+0x24>
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	e7a9      	b.n	800cc72 <__sflush_r+0x26>
 800cd1e:	690f      	ldr	r7, [r1, #16]
 800cd20:	2f00      	cmp	r7, #0
 800cd22:	d0a5      	beq.n	800cc70 <__sflush_r+0x24>
 800cd24:	079b      	lsls	r3, r3, #30
 800cd26:	680e      	ldr	r6, [r1, #0]
 800cd28:	bf08      	it	eq
 800cd2a:	694b      	ldreq	r3, [r1, #20]
 800cd2c:	600f      	str	r7, [r1, #0]
 800cd2e:	bf18      	it	ne
 800cd30:	2300      	movne	r3, #0
 800cd32:	eba6 0807 	sub.w	r8, r6, r7
 800cd36:	608b      	str	r3, [r1, #8]
 800cd38:	f1b8 0f00 	cmp.w	r8, #0
 800cd3c:	dd98      	ble.n	800cc70 <__sflush_r+0x24>
 800cd3e:	69e1      	ldr	r1, [r4, #28]
 800cd40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd42:	4643      	mov	r3, r8
 800cd44:	463a      	mov	r2, r7
 800cd46:	4628      	mov	r0, r5
 800cd48:	47b0      	blx	r6
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	dc06      	bgt.n	800cd5c <__sflush_r+0x110>
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5a:	e78a      	b.n	800cc72 <__sflush_r+0x26>
 800cd5c:	4407      	add	r7, r0
 800cd5e:	eba8 0800 	sub.w	r8, r8, r0
 800cd62:	e7e9      	b.n	800cd38 <__sflush_r+0xec>
 800cd64:	20400001 	.word	0x20400001

0800cd68 <_fflush_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	b118      	cbz	r0, 800cd78 <_fflush_r+0x10>
 800cd70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd72:	b90b      	cbnz	r3, 800cd78 <_fflush_r+0x10>
 800cd74:	f000 f864 	bl	800ce40 <__sinit>
 800cd78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7c:	b1bb      	cbz	r3, 800cdae <_fflush_r+0x46>
 800cd7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd80:	07d0      	lsls	r0, r2, #31
 800cd82:	d404      	bmi.n	800cd8e <_fflush_r+0x26>
 800cd84:	0599      	lsls	r1, r3, #22
 800cd86:	d402      	bmi.n	800cd8e <_fflush_r+0x26>
 800cd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd8a:	f7fc f82f 	bl	8008dec <__retarget_lock_acquire_recursive>
 800cd8e:	4628      	mov	r0, r5
 800cd90:	4621      	mov	r1, r4
 800cd92:	f7ff ff5b 	bl	800cc4c <__sflush_r>
 800cd96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd98:	07da      	lsls	r2, r3, #31
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	d405      	bmi.n	800cdaa <_fflush_r+0x42>
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	059b      	lsls	r3, r3, #22
 800cda2:	d402      	bmi.n	800cdaa <_fflush_r+0x42>
 800cda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cda6:	f7fc f822 	bl	8008dee <__retarget_lock_release_recursive>
 800cdaa:	4628      	mov	r0, r5
 800cdac:	bd38      	pop	{r3, r4, r5, pc}
 800cdae:	461d      	mov	r5, r3
 800cdb0:	e7fb      	b.n	800cdaa <_fflush_r+0x42>
	...

0800cdb4 <std>:
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	b510      	push	{r4, lr}
 800cdb8:	4604      	mov	r4, r0
 800cdba:	e9c0 3300 	strd	r3, r3, [r0]
 800cdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdc2:	6083      	str	r3, [r0, #8]
 800cdc4:	8181      	strh	r1, [r0, #12]
 800cdc6:	6643      	str	r3, [r0, #100]	; 0x64
 800cdc8:	81c2      	strh	r2, [r0, #14]
 800cdca:	6183      	str	r3, [r0, #24]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	2208      	movs	r2, #8
 800cdd0:	305c      	adds	r0, #92	; 0x5c
 800cdd2:	f7fb ffa3 	bl	8008d1c <memset>
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <std+0x40>)
 800cdd8:	6223      	str	r3, [r4, #32]
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <std+0x44>)
 800cddc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdde:	4b07      	ldr	r3, [pc, #28]	; (800cdfc <std+0x48>)
 800cde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cde2:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <std+0x4c>)
 800cde4:	61e4      	str	r4, [r4, #28]
 800cde6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cde8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdf0:	f7fb bffa 	b.w	8008de8 <__retarget_lock_init_recursive>
 800cdf4:	0800d3a1 	.word	0x0800d3a1
 800cdf8:	0800d3c3 	.word	0x0800d3c3
 800cdfc:	0800d3fb 	.word	0x0800d3fb
 800ce00:	0800d41f 	.word	0x0800d41f

0800ce04 <_cleanup_r>:
 800ce04:	4901      	ldr	r1, [pc, #4]	; (800ce0c <_cleanup_r+0x8>)
 800ce06:	f000 b9f9 	b.w	800d1fc <_fwalk_reent>
 800ce0a:	bf00      	nop
 800ce0c:	0800d529 	.word	0x0800d529

0800ce10 <__sfp_lock_acquire>:
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <__sfp_lock_acquire+0x8>)
 800ce12:	f7fb bfeb 	b.w	8008dec <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	240026e2 	.word	0x240026e2

0800ce1c <__sfp_lock_release>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__sfp_lock_release+0x8>)
 800ce1e:	f7fb bfe6 	b.w	8008dee <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	240026e2 	.word	0x240026e2

0800ce28 <__sinit_lock_acquire>:
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <__sinit_lock_acquire+0x8>)
 800ce2a:	f7fb bfdf 	b.w	8008dec <__retarget_lock_acquire_recursive>
 800ce2e:	bf00      	nop
 800ce30:	240026e3 	.word	0x240026e3

0800ce34 <__sinit_lock_release>:
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <__sinit_lock_release+0x8>)
 800ce36:	f7fb bfda 	b.w	8008dee <__retarget_lock_release_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	240026e3 	.word	0x240026e3

0800ce40 <__sinit>:
 800ce40:	b510      	push	{r4, lr}
 800ce42:	4604      	mov	r4, r0
 800ce44:	f7ff fff0 	bl	800ce28 <__sinit_lock_acquire>
 800ce48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce4a:	b11a      	cbz	r2, 800ce54 <__sinit+0x14>
 800ce4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce50:	f7ff bff0 	b.w	800ce34 <__sinit_lock_release>
 800ce54:	4b0d      	ldr	r3, [pc, #52]	; (800ce8c <__sinit+0x4c>)
 800ce56:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ce58:	2303      	movs	r3, #3
 800ce5a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800ce5e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800ce62:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800ce66:	6860      	ldr	r0, [r4, #4]
 800ce68:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800ce6c:	2104      	movs	r1, #4
 800ce6e:	f7ff ffa1 	bl	800cdb4 <std>
 800ce72:	68a0      	ldr	r0, [r4, #8]
 800ce74:	2201      	movs	r2, #1
 800ce76:	2109      	movs	r1, #9
 800ce78:	f7ff ff9c 	bl	800cdb4 <std>
 800ce7c:	68e0      	ldr	r0, [r4, #12]
 800ce7e:	2202      	movs	r2, #2
 800ce80:	2112      	movs	r1, #18
 800ce82:	f7ff ff97 	bl	800cdb4 <std>
 800ce86:	2301      	movs	r3, #1
 800ce88:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce8a:	e7df      	b.n	800ce4c <__sinit+0xc>
 800ce8c:	0800ce05 	.word	0x0800ce05

0800ce90 <__fputwc>:
 800ce90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	4680      	mov	r8, r0
 800ce96:	460e      	mov	r6, r1
 800ce98:	4615      	mov	r5, r2
 800ce9a:	f7fe ff8b 	bl	800bdb4 <__locale_mb_cur_max>
 800ce9e:	2801      	cmp	r0, #1
 800cea0:	d11c      	bne.n	800cedc <__fputwc+0x4c>
 800cea2:	1e73      	subs	r3, r6, #1
 800cea4:	2bfe      	cmp	r3, #254	; 0xfe
 800cea6:	d819      	bhi.n	800cedc <__fputwc+0x4c>
 800cea8:	f88d 6004 	strb.w	r6, [sp, #4]
 800ceac:	4604      	mov	r4, r0
 800ceae:	2700      	movs	r7, #0
 800ceb0:	f10d 0904 	add.w	r9, sp, #4
 800ceb4:	42a7      	cmp	r7, r4
 800ceb6:	d020      	beq.n	800cefa <__fputwc+0x6a>
 800ceb8:	68ab      	ldr	r3, [r5, #8]
 800ceba:	f817 1009 	ldrb.w	r1, [r7, r9]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	60ab      	str	r3, [r5, #8]
 800cec4:	da04      	bge.n	800ced0 <__fputwc+0x40>
 800cec6:	69aa      	ldr	r2, [r5, #24]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	db1a      	blt.n	800cf02 <__fputwc+0x72>
 800cecc:	290a      	cmp	r1, #10
 800cece:	d018      	beq.n	800cf02 <__fputwc+0x72>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	7019      	strb	r1, [r3, #0]
 800ced8:	3701      	adds	r7, #1
 800ceda:	e7eb      	b.n	800ceb4 <__fputwc+0x24>
 800cedc:	a901      	add	r1, sp, #4
 800cede:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800cee2:	4632      	mov	r2, r6
 800cee4:	4640      	mov	r0, r8
 800cee6:	f000 fae7 	bl	800d4b8 <_wcrtomb_r>
 800ceea:	1c41      	adds	r1, r0, #1
 800ceec:	4604      	mov	r4, r0
 800ceee:	d1de      	bne.n	800ceae <__fputwc+0x1e>
 800cef0:	89ab      	ldrh	r3, [r5, #12]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef6:	81ab      	strh	r3, [r5, #12]
 800cef8:	4606      	mov	r6, r0
 800cefa:	4630      	mov	r0, r6
 800cefc:	b003      	add	sp, #12
 800cefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf02:	462a      	mov	r2, r5
 800cf04:	4640      	mov	r0, r8
 800cf06:	f000 fa8e 	bl	800d426 <__swbuf_r>
 800cf0a:	1c42      	adds	r2, r0, #1
 800cf0c:	d1e4      	bne.n	800ced8 <__fputwc+0x48>
 800cf0e:	4606      	mov	r6, r0
 800cf10:	e7f3      	b.n	800cefa <__fputwc+0x6a>

0800cf12 <_fputwc_r>:
 800cf12:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800cf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf16:	4614      	mov	r4, r2
 800cf18:	07da      	lsls	r2, r3, #31
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	d407      	bmi.n	800cf2e <_fputwc_r+0x1c>
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	059b      	lsls	r3, r3, #22
 800cf22:	d404      	bmi.n	800cf2e <_fputwc_r+0x1c>
 800cf24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf26:	9101      	str	r1, [sp, #4]
 800cf28:	f7fb ff60 	bl	8008dec <__retarget_lock_acquire_recursive>
 800cf2c:	9901      	ldr	r1, [sp, #4]
 800cf2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf32:	0498      	lsls	r0, r3, #18
 800cf34:	d406      	bmi.n	800cf44 <_fputwc_r+0x32>
 800cf36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf42:	6663      	str	r3, [r4, #100]	; 0x64
 800cf44:	4622      	mov	r2, r4
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7ff ffa2 	bl	800ce90 <__fputwc>
 800cf4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf4e:	07da      	lsls	r2, r3, #31
 800cf50:	4605      	mov	r5, r0
 800cf52:	d405      	bmi.n	800cf60 <_fputwc_r+0x4e>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	059b      	lsls	r3, r3, #22
 800cf58:	d402      	bmi.n	800cf60 <_fputwc_r+0x4e>
 800cf5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5c:	f7fb ff47 	bl	8008dee <__retarget_lock_release_recursive>
 800cf60:	4628      	mov	r0, r5
 800cf62:	b003      	add	sp, #12
 800cf64:	bd30      	pop	{r4, r5, pc}
	...

0800cf68 <__sfvwrite_r>:
 800cf68:	6893      	ldr	r3, [r2, #8]
 800cf6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460c      	mov	r4, r1
 800cf72:	4690      	mov	r8, r2
 800cf74:	b91b      	cbnz	r3, 800cf7e <__sfvwrite_r+0x16>
 800cf76:	2000      	movs	r0, #0
 800cf78:	b003      	add	sp, #12
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	898b      	ldrh	r3, [r1, #12]
 800cf80:	0718      	lsls	r0, r3, #28
 800cf82:	d550      	bpl.n	800d026 <__sfvwrite_r+0xbe>
 800cf84:	690b      	ldr	r3, [r1, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d04d      	beq.n	800d026 <__sfvwrite_r+0xbe>
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	f8d8 7000 	ldr.w	r7, [r8]
 800cf90:	f013 0902 	ands.w	r9, r3, #2
 800cf94:	d16c      	bne.n	800d070 <__sfvwrite_r+0x108>
 800cf96:	f013 0301 	ands.w	r3, r3, #1
 800cf9a:	f000 809c 	beq.w	800d0d6 <__sfvwrite_r+0x16e>
 800cf9e:	4648      	mov	r0, r9
 800cfa0:	46ca      	mov	sl, r9
 800cfa2:	46cb      	mov	fp, r9
 800cfa4:	f1bb 0f00 	cmp.w	fp, #0
 800cfa8:	f000 8103 	beq.w	800d1b2 <__sfvwrite_r+0x24a>
 800cfac:	b950      	cbnz	r0, 800cfc4 <__sfvwrite_r+0x5c>
 800cfae:	465a      	mov	r2, fp
 800cfb0:	210a      	movs	r1, #10
 800cfb2:	4650      	mov	r0, sl
 800cfb4:	f7f3 f994 	bl	80002e0 <memchr>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	f000 80ff 	beq.w	800d1bc <__sfvwrite_r+0x254>
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	eba0 090a 	sub.w	r9, r0, sl
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	6921      	ldr	r1, [r4, #16]
 800cfc8:	6963      	ldr	r3, [r4, #20]
 800cfca:	45d9      	cmp	r9, fp
 800cfcc:	464a      	mov	r2, r9
 800cfce:	bf28      	it	cs
 800cfd0:	465a      	movcs	r2, fp
 800cfd2:	4288      	cmp	r0, r1
 800cfd4:	f240 80f5 	bls.w	800d1c2 <__sfvwrite_r+0x25a>
 800cfd8:	68a5      	ldr	r5, [r4, #8]
 800cfda:	441d      	add	r5, r3
 800cfdc:	42aa      	cmp	r2, r5
 800cfde:	f340 80f0 	ble.w	800d1c2 <__sfvwrite_r+0x25a>
 800cfe2:	4651      	mov	r1, sl
 800cfe4:	462a      	mov	r2, r5
 800cfe6:	f7fe fefd 	bl	800bde4 <memmove>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	442b      	add	r3, r5
 800cfee:	6023      	str	r3, [r4, #0]
 800cff0:	4621      	mov	r1, r4
 800cff2:	4630      	mov	r0, r6
 800cff4:	f7ff feb8 	bl	800cd68 <_fflush_r>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d167      	bne.n	800d0cc <__sfvwrite_r+0x164>
 800cffc:	ebb9 0905 	subs.w	r9, r9, r5
 800d000:	f040 80f7 	bne.w	800d1f2 <__sfvwrite_r+0x28a>
 800d004:	4621      	mov	r1, r4
 800d006:	4630      	mov	r0, r6
 800d008:	f7ff feae 	bl	800cd68 <_fflush_r>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d15d      	bne.n	800d0cc <__sfvwrite_r+0x164>
 800d010:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d014:	44aa      	add	sl, r5
 800d016:	ebab 0b05 	sub.w	fp, fp, r5
 800d01a:	1b55      	subs	r5, r2, r5
 800d01c:	f8c8 5008 	str.w	r5, [r8, #8]
 800d020:	2d00      	cmp	r5, #0
 800d022:	d1bf      	bne.n	800cfa4 <__sfvwrite_r+0x3c>
 800d024:	e7a7      	b.n	800cf76 <__sfvwrite_r+0xe>
 800d026:	4621      	mov	r1, r4
 800d028:	4630      	mov	r0, r6
 800d02a:	f7ff fdaf 	bl	800cb8c <__swsetup_r>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d0ab      	beq.n	800cf8a <__sfvwrite_r+0x22>
 800d032:	f04f 30ff 	mov.w	r0, #4294967295
 800d036:	e79f      	b.n	800cf78 <__sfvwrite_r+0x10>
 800d038:	e9d7 b900 	ldrd	fp, r9, [r7]
 800d03c:	3708      	adds	r7, #8
 800d03e:	f1b9 0f00 	cmp.w	r9, #0
 800d042:	d0f9      	beq.n	800d038 <__sfvwrite_r+0xd0>
 800d044:	45d1      	cmp	r9, sl
 800d046:	464b      	mov	r3, r9
 800d048:	69e1      	ldr	r1, [r4, #28]
 800d04a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d04c:	bf28      	it	cs
 800d04e:	4653      	movcs	r3, sl
 800d050:	465a      	mov	r2, fp
 800d052:	4630      	mov	r0, r6
 800d054:	47a8      	blx	r5
 800d056:	2800      	cmp	r0, #0
 800d058:	dd38      	ble.n	800d0cc <__sfvwrite_r+0x164>
 800d05a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d05e:	4483      	add	fp, r0
 800d060:	eba9 0900 	sub.w	r9, r9, r0
 800d064:	1a18      	subs	r0, r3, r0
 800d066:	f8c8 0008 	str.w	r0, [r8, #8]
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d1e7      	bne.n	800d03e <__sfvwrite_r+0xd6>
 800d06e:	e782      	b.n	800cf76 <__sfvwrite_r+0xe>
 800d070:	f04f 0b00 	mov.w	fp, #0
 800d074:	f8df a180 	ldr.w	sl, [pc, #384]	; 800d1f8 <__sfvwrite_r+0x290>
 800d078:	46d9      	mov	r9, fp
 800d07a:	e7e0      	b.n	800d03e <__sfvwrite_r+0xd6>
 800d07c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800d080:	3708      	adds	r7, #8
 800d082:	f1ba 0f00 	cmp.w	sl, #0
 800d086:	d0f9      	beq.n	800d07c <__sfvwrite_r+0x114>
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	6820      	ldr	r0, [r4, #0]
 800d08c:	68a2      	ldr	r2, [r4, #8]
 800d08e:	0599      	lsls	r1, r3, #22
 800d090:	d563      	bpl.n	800d15a <__sfvwrite_r+0x1f2>
 800d092:	4552      	cmp	r2, sl
 800d094:	d836      	bhi.n	800d104 <__sfvwrite_r+0x19c>
 800d096:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d09a:	d033      	beq.n	800d104 <__sfvwrite_r+0x19c>
 800d09c:	6921      	ldr	r1, [r4, #16]
 800d09e:	6965      	ldr	r5, [r4, #20]
 800d0a0:	eba0 0b01 	sub.w	fp, r0, r1
 800d0a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0ac:	f10b 0201 	add.w	r2, fp, #1
 800d0b0:	106d      	asrs	r5, r5, #1
 800d0b2:	4452      	add	r2, sl
 800d0b4:	4295      	cmp	r5, r2
 800d0b6:	bf38      	it	cc
 800d0b8:	4615      	movcc	r5, r2
 800d0ba:	055b      	lsls	r3, r3, #21
 800d0bc:	d53d      	bpl.n	800d13a <__sfvwrite_r+0x1d2>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7fd ff9f 	bl	800b004 <_malloc_r>
 800d0c6:	b948      	cbnz	r0, 800d0dc <__sfvwrite_r+0x174>
 800d0c8:	230c      	movs	r3, #12
 800d0ca:	6033      	str	r3, [r6, #0]
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	e7ad      	b.n	800d032 <__sfvwrite_r+0xca>
 800d0d6:	4699      	mov	r9, r3
 800d0d8:	469a      	mov	sl, r3
 800d0da:	e7d2      	b.n	800d082 <__sfvwrite_r+0x11a>
 800d0dc:	465a      	mov	r2, fp
 800d0de:	6921      	ldr	r1, [r4, #16]
 800d0e0:	9001      	str	r0, [sp, #4]
 800d0e2:	f7fe f9cb 	bl	800b47c <memcpy>
 800d0e6:	89a2      	ldrh	r2, [r4, #12]
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d0ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d0f2:	81a2      	strh	r2, [r4, #12]
 800d0f4:	6123      	str	r3, [r4, #16]
 800d0f6:	6165      	str	r5, [r4, #20]
 800d0f8:	445b      	add	r3, fp
 800d0fa:	eba5 050b 	sub.w	r5, r5, fp
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	4652      	mov	r2, sl
 800d102:	60a5      	str	r5, [r4, #8]
 800d104:	4552      	cmp	r2, sl
 800d106:	bf28      	it	cs
 800d108:	4652      	movcs	r2, sl
 800d10a:	6820      	ldr	r0, [r4, #0]
 800d10c:	9201      	str	r2, [sp, #4]
 800d10e:	4649      	mov	r1, r9
 800d110:	f7fe fe68 	bl	800bde4 <memmove>
 800d114:	68a3      	ldr	r3, [r4, #8]
 800d116:	9a01      	ldr	r2, [sp, #4]
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	60a3      	str	r3, [r4, #8]
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	441a      	add	r2, r3
 800d120:	4655      	mov	r5, sl
 800d122:	6022      	str	r2, [r4, #0]
 800d124:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d128:	44a9      	add	r9, r5
 800d12a:	ebaa 0a05 	sub.w	sl, sl, r5
 800d12e:	1b45      	subs	r5, r0, r5
 800d130:	f8c8 5008 	str.w	r5, [r8, #8]
 800d134:	2d00      	cmp	r5, #0
 800d136:	d1a4      	bne.n	800d082 <__sfvwrite_r+0x11a>
 800d138:	e71d      	b.n	800cf76 <__sfvwrite_r+0xe>
 800d13a:	462a      	mov	r2, r5
 800d13c:	4630      	mov	r0, r6
 800d13e:	f7fe fe6b 	bl	800be18 <_realloc_r>
 800d142:	4603      	mov	r3, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	d1d5      	bne.n	800d0f4 <__sfvwrite_r+0x18c>
 800d148:	6921      	ldr	r1, [r4, #16]
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7fd fe96 	bl	800ae7c <_free_r>
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d156:	81a3      	strh	r3, [r4, #12]
 800d158:	e7b6      	b.n	800d0c8 <__sfvwrite_r+0x160>
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	4283      	cmp	r3, r0
 800d15e:	d302      	bcc.n	800d166 <__sfvwrite_r+0x1fe>
 800d160:	6961      	ldr	r1, [r4, #20]
 800d162:	4551      	cmp	r1, sl
 800d164:	d915      	bls.n	800d192 <__sfvwrite_r+0x22a>
 800d166:	4552      	cmp	r2, sl
 800d168:	bf28      	it	cs
 800d16a:	4652      	movcs	r2, sl
 800d16c:	4649      	mov	r1, r9
 800d16e:	4615      	mov	r5, r2
 800d170:	f7fe fe38 	bl	800bde4 <memmove>
 800d174:	68a3      	ldr	r3, [r4, #8]
 800d176:	6822      	ldr	r2, [r4, #0]
 800d178:	1b5b      	subs	r3, r3, r5
 800d17a:	442a      	add	r2, r5
 800d17c:	60a3      	str	r3, [r4, #8]
 800d17e:	6022      	str	r2, [r4, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1cf      	bne.n	800d124 <__sfvwrite_r+0x1bc>
 800d184:	4621      	mov	r1, r4
 800d186:	4630      	mov	r0, r6
 800d188:	f7ff fdee 	bl	800cd68 <_fflush_r>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d0c9      	beq.n	800d124 <__sfvwrite_r+0x1bc>
 800d190:	e79c      	b.n	800d0cc <__sfvwrite_r+0x164>
 800d192:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d196:	459a      	cmp	sl, r3
 800d198:	bf38      	it	cc
 800d19a:	4653      	movcc	r3, sl
 800d19c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d19e:	fb93 f3f1 	sdiv	r3, r3, r1
 800d1a2:	464a      	mov	r2, r9
 800d1a4:	434b      	muls	r3, r1
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	69e1      	ldr	r1, [r4, #28]
 800d1aa:	47a8      	blx	r5
 800d1ac:	1e05      	subs	r5, r0, #0
 800d1ae:	dcb9      	bgt.n	800d124 <__sfvwrite_r+0x1bc>
 800d1b0:	e78c      	b.n	800d0cc <__sfvwrite_r+0x164>
 800d1b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	e6f3      	b.n	800cfa4 <__sfvwrite_r+0x3c>
 800d1bc:	f10b 0901 	add.w	r9, fp, #1
 800d1c0:	e700      	b.n	800cfc4 <__sfvwrite_r+0x5c>
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	dc08      	bgt.n	800d1d8 <__sfvwrite_r+0x270>
 800d1c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d1c8:	69e1      	ldr	r1, [r4, #28]
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	47a8      	blx	r5
 800d1d0:	1e05      	subs	r5, r0, #0
 800d1d2:	f73f af13 	bgt.w	800cffc <__sfvwrite_r+0x94>
 800d1d6:	e779      	b.n	800d0cc <__sfvwrite_r+0x164>
 800d1d8:	4651      	mov	r1, sl
 800d1da:	9201      	str	r2, [sp, #4]
 800d1dc:	f7fe fe02 	bl	800bde4 <memmove>
 800d1e0:	9a01      	ldr	r2, [sp, #4]
 800d1e2:	68a3      	ldr	r3, [r4, #8]
 800d1e4:	1a9b      	subs	r3, r3, r2
 800d1e6:	60a3      	str	r3, [r4, #8]
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	4615      	mov	r5, r2
 800d1f0:	e704      	b.n	800cffc <__sfvwrite_r+0x94>
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	e70c      	b.n	800d010 <__sfvwrite_r+0xa8>
 800d1f6:	bf00      	nop
 800d1f8:	7ffffc00 	.word	0x7ffffc00

0800d1fc <_fwalk_reent>:
 800d1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d200:	4606      	mov	r6, r0
 800d202:	4688      	mov	r8, r1
 800d204:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800d208:	2700      	movs	r7, #0
 800d20a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d20e:	f1b9 0901 	subs.w	r9, r9, #1
 800d212:	d505      	bpl.n	800d220 <_fwalk_reent+0x24>
 800d214:	6824      	ldr	r4, [r4, #0]
 800d216:	2c00      	cmp	r4, #0
 800d218:	d1f7      	bne.n	800d20a <_fwalk_reent+0xe>
 800d21a:	4638      	mov	r0, r7
 800d21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d220:	89ab      	ldrh	r3, [r5, #12]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d907      	bls.n	800d236 <_fwalk_reent+0x3a>
 800d226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d22a:	3301      	adds	r3, #1
 800d22c:	d003      	beq.n	800d236 <_fwalk_reent+0x3a>
 800d22e:	4629      	mov	r1, r5
 800d230:	4630      	mov	r0, r6
 800d232:	47c0      	blx	r8
 800d234:	4307      	orrs	r7, r0
 800d236:	3568      	adds	r5, #104	; 0x68
 800d238:	e7e9      	b.n	800d20e <_fwalk_reent+0x12>

0800d23a <__swhatbuf_r>:
 800d23a:	b570      	push	{r4, r5, r6, lr}
 800d23c:	460e      	mov	r6, r1
 800d23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d242:	2900      	cmp	r1, #0
 800d244:	b096      	sub	sp, #88	; 0x58
 800d246:	4614      	mov	r4, r2
 800d248:	461d      	mov	r5, r3
 800d24a:	da0a      	bge.n	800d262 <__swhatbuf_r+0x28>
 800d24c:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800d250:	2300      	movs	r3, #0
 800d252:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	d116      	bne.n	800d288 <__swhatbuf_r+0x4e>
 800d25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	e015      	b.n	800d28e <__swhatbuf_r+0x54>
 800d262:	466a      	mov	r2, sp
 800d264:	f000 f9b8 	bl	800d5d8 <_fstat_r>
 800d268:	2800      	cmp	r0, #0
 800d26a:	dbef      	blt.n	800d24c <__swhatbuf_r+0x12>
 800d26c:	9a01      	ldr	r2, [sp, #4]
 800d26e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d276:	425a      	negs	r2, r3
 800d278:	415a      	adcs	r2, r3
 800d27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d27e:	602a      	str	r2, [r5, #0]
 800d280:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	e002      	b.n	800d28e <__swhatbuf_r+0x54>
 800d288:	2240      	movs	r2, #64	; 0x40
 800d28a:	6022      	str	r2, [r4, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	b016      	add	sp, #88	; 0x58
 800d290:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d294 <__smakebuf_r>:
 800d294:	898b      	ldrh	r3, [r1, #12]
 800d296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d298:	079d      	lsls	r5, r3, #30
 800d29a:	4606      	mov	r6, r0
 800d29c:	460c      	mov	r4, r1
 800d29e:	d507      	bpl.n	800d2b0 <__smakebuf_r+0x1c>
 800d2a0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	6123      	str	r3, [r4, #16]
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	6163      	str	r3, [r4, #20]
 800d2ac:	b002      	add	sp, #8
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}
 800d2b0:	ab01      	add	r3, sp, #4
 800d2b2:	466a      	mov	r2, sp
 800d2b4:	f7ff ffc1 	bl	800d23a <__swhatbuf_r>
 800d2b8:	9900      	ldr	r1, [sp, #0]
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	4630      	mov	r0, r6
 800d2be:	f7fd fea1 	bl	800b004 <_malloc_r>
 800d2c2:	b948      	cbnz	r0, 800d2d8 <__smakebuf_r+0x44>
 800d2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c8:	059a      	lsls	r2, r3, #22
 800d2ca:	d4ef      	bmi.n	800d2ac <__smakebuf_r+0x18>
 800d2cc:	f023 0303 	bic.w	r3, r3, #3
 800d2d0:	f043 0302 	orr.w	r3, r3, #2
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	e7e3      	b.n	800d2a0 <__smakebuf_r+0xc>
 800d2d8:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <__smakebuf_r+0x7c>)
 800d2da:	63f3      	str	r3, [r6, #60]	; 0x3c
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	6020      	str	r0, [r4, #0]
 800d2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e4:	81a3      	strh	r3, [r4, #12]
 800d2e6:	9b00      	ldr	r3, [sp, #0]
 800d2e8:	6163      	str	r3, [r4, #20]
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	6120      	str	r0, [r4, #16]
 800d2ee:	b15b      	cbz	r3, 800d308 <__smakebuf_r+0x74>
 800d2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f000 f981 	bl	800d5fc <_isatty_r>
 800d2fa:	b128      	cbz	r0, 800d308 <__smakebuf_r+0x74>
 800d2fc:	89a3      	ldrh	r3, [r4, #12]
 800d2fe:	f023 0303 	bic.w	r3, r3, #3
 800d302:	f043 0301 	orr.w	r3, r3, #1
 800d306:	81a3      	strh	r3, [r4, #12]
 800d308:	89a0      	ldrh	r0, [r4, #12]
 800d30a:	4305      	orrs	r5, r0
 800d30c:	81a5      	strh	r5, [r4, #12]
 800d30e:	e7cd      	b.n	800d2ac <__smakebuf_r+0x18>
 800d310:	0800ce05 	.word	0x0800ce05

0800d314 <_raise_r>:
 800d314:	291f      	cmp	r1, #31
 800d316:	b538      	push	{r3, r4, r5, lr}
 800d318:	4604      	mov	r4, r0
 800d31a:	460d      	mov	r5, r1
 800d31c:	d904      	bls.n	800d328 <_raise_r+0x14>
 800d31e:	2316      	movs	r3, #22
 800d320:	6003      	str	r3, [r0, #0]
 800d322:	f04f 30ff 	mov.w	r0, #4294967295
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800d32c:	b112      	cbz	r2, 800d334 <_raise_r+0x20>
 800d32e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d332:	b94b      	cbnz	r3, 800d348 <_raise_r+0x34>
 800d334:	4620      	mov	r0, r4
 800d336:	f000 f831 	bl	800d39c <_getpid_r>
 800d33a:	462a      	mov	r2, r5
 800d33c:	4601      	mov	r1, r0
 800d33e:	4620      	mov	r0, r4
 800d340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d344:	f000 b818 	b.w	800d378 <_kill_r>
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d00a      	beq.n	800d362 <_raise_r+0x4e>
 800d34c:	1c59      	adds	r1, r3, #1
 800d34e:	d103      	bne.n	800d358 <_raise_r+0x44>
 800d350:	2316      	movs	r3, #22
 800d352:	6003      	str	r3, [r0, #0]
 800d354:	2001      	movs	r0, #1
 800d356:	e7e6      	b.n	800d326 <_raise_r+0x12>
 800d358:	2400      	movs	r4, #0
 800d35a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d35e:	4628      	mov	r0, r5
 800d360:	4798      	blx	r3
 800d362:	2000      	movs	r0, #0
 800d364:	e7df      	b.n	800d326 <_raise_r+0x12>
	...

0800d368 <raise>:
 800d368:	4b02      	ldr	r3, [pc, #8]	; (800d374 <raise+0xc>)
 800d36a:	4601      	mov	r1, r0
 800d36c:	6818      	ldr	r0, [r3, #0]
 800d36e:	f7ff bfd1 	b.w	800d314 <_raise_r>
 800d372:	bf00      	nop
 800d374:	24000100 	.word	0x24000100

0800d378 <_kill_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d07      	ldr	r5, [pc, #28]	; (800d398 <_kill_r+0x20>)
 800d37c:	2300      	movs	r3, #0
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	4611      	mov	r1, r2
 800d384:	602b      	str	r3, [r5, #0]
 800d386:	f7f3 faab 	bl	80008e0 <_kill>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	d102      	bne.n	800d394 <_kill_r+0x1c>
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	b103      	cbz	r3, 800d394 <_kill_r+0x1c>
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	bf00      	nop
 800d398:	24002718 	.word	0x24002718

0800d39c <_getpid_r>:
 800d39c:	f7f3 ba98 	b.w	80008d0 <_getpid>

0800d3a0 <__sread>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a8:	f000 f94a 	bl	800d640 <_read_r>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	bfab      	itete	ge
 800d3b0:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800d3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3b4:	181b      	addge	r3, r3, r0
 800d3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3ba:	bfac      	ite	ge
 800d3bc:	6523      	strge	r3, [r4, #80]	; 0x50
 800d3be:	81a3      	strhlt	r3, [r4, #12]
 800d3c0:	bd10      	pop	{r4, pc}

0800d3c2 <__swrite>:
 800d3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c6:	461f      	mov	r7, r3
 800d3c8:	898b      	ldrh	r3, [r1, #12]
 800d3ca:	05db      	lsls	r3, r3, #23
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	4616      	mov	r6, r2
 800d3d2:	d505      	bpl.n	800d3e0 <__swrite+0x1e>
 800d3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d8:	2302      	movs	r3, #2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f000 f91e 	bl	800d61c <_lseek_r>
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3ea:	81a3      	strh	r3, [r4, #12]
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	463b      	mov	r3, r7
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f6:	f000 b875 	b.w	800d4e4 <_write_r>

0800d3fa <__sseek>:
 800d3fa:	b510      	push	{r4, lr}
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d402:	f000 f90b 	bl	800d61c <_lseek_r>
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	bf15      	itete	ne
 800d40c:	6520      	strne	r0, [r4, #80]	; 0x50
 800d40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d416:	81a3      	strheq	r3, [r4, #12]
 800d418:	bf18      	it	ne
 800d41a:	81a3      	strhne	r3, [r4, #12]
 800d41c:	bd10      	pop	{r4, pc}

0800d41e <__sclose>:
 800d41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d422:	f000 b871 	b.w	800d508 <_close_r>

0800d426 <__swbuf_r>:
 800d426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d428:	460e      	mov	r6, r1
 800d42a:	4614      	mov	r4, r2
 800d42c:	4605      	mov	r5, r0
 800d42e:	b118      	cbz	r0, 800d438 <__swbuf_r+0x12>
 800d430:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d432:	b90b      	cbnz	r3, 800d438 <__swbuf_r+0x12>
 800d434:	f7ff fd04 	bl	800ce40 <__sinit>
 800d438:	69a3      	ldr	r3, [r4, #24]
 800d43a:	60a3      	str	r3, [r4, #8]
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	0719      	lsls	r1, r3, #28
 800d440:	d529      	bpl.n	800d496 <__swbuf_r+0x70>
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	b33b      	cbz	r3, 800d496 <__swbuf_r+0x70>
 800d446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44a:	b2f6      	uxtb	r6, r6
 800d44c:	049a      	lsls	r2, r3, #18
 800d44e:	4637      	mov	r7, r6
 800d450:	d52a      	bpl.n	800d4a8 <__swbuf_r+0x82>
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	6920      	ldr	r0, [r4, #16]
 800d456:	1a18      	subs	r0, r3, r0
 800d458:	6963      	ldr	r3, [r4, #20]
 800d45a:	4283      	cmp	r3, r0
 800d45c:	dc04      	bgt.n	800d468 <__swbuf_r+0x42>
 800d45e:	4621      	mov	r1, r4
 800d460:	4628      	mov	r0, r5
 800d462:	f7ff fc81 	bl	800cd68 <_fflush_r>
 800d466:	b9e0      	cbnz	r0, 800d4a2 <__swbuf_r+0x7c>
 800d468:	68a3      	ldr	r3, [r4, #8]
 800d46a:	3b01      	subs	r3, #1
 800d46c:	60a3      	str	r3, [r4, #8]
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	6022      	str	r2, [r4, #0]
 800d474:	701e      	strb	r6, [r3, #0]
 800d476:	6962      	ldr	r2, [r4, #20]
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d004      	beq.n	800d488 <__swbuf_r+0x62>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	07db      	lsls	r3, r3, #31
 800d482:	d506      	bpl.n	800d492 <__swbuf_r+0x6c>
 800d484:	2e0a      	cmp	r6, #10
 800d486:	d104      	bne.n	800d492 <__swbuf_r+0x6c>
 800d488:	4621      	mov	r1, r4
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7ff fc6c 	bl	800cd68 <_fflush_r>
 800d490:	b938      	cbnz	r0, 800d4a2 <__swbuf_r+0x7c>
 800d492:	4638      	mov	r0, r7
 800d494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d496:	4621      	mov	r1, r4
 800d498:	4628      	mov	r0, r5
 800d49a:	f7ff fb77 	bl	800cb8c <__swsetup_r>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0d1      	beq.n	800d446 <__swbuf_r+0x20>
 800d4a2:	f04f 37ff 	mov.w	r7, #4294967295
 800d4a6:	e7f4      	b.n	800d492 <__swbuf_r+0x6c>
 800d4a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4b4:	6663      	str	r3, [r4, #100]	; 0x64
 800d4b6:	e7cc      	b.n	800d452 <__swbuf_r+0x2c>

0800d4b8 <_wcrtomb_r>:
 800d4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ba:	4c09      	ldr	r4, [pc, #36]	; (800d4e0 <_wcrtomb_r+0x28>)
 800d4bc:	b085      	sub	sp, #20
 800d4be:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	461e      	mov	r6, r3
 800d4c6:	b909      	cbnz	r1, 800d4cc <_wcrtomb_r+0x14>
 800d4c8:	460a      	mov	r2, r1
 800d4ca:	a901      	add	r1, sp, #4
 800d4cc:	47b8      	blx	r7
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	bf01      	itttt	eq
 800d4d2:	2300      	moveq	r3, #0
 800d4d4:	6033      	streq	r3, [r6, #0]
 800d4d6:	238a      	moveq	r3, #138	; 0x8a
 800d4d8:	602b      	streq	r3, [r5, #0]
 800d4da:	b005      	add	sp, #20
 800d4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	24000944 	.word	0x24000944

0800d4e4 <_write_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4d07      	ldr	r5, [pc, #28]	; (800d504 <_write_r+0x20>)
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	4608      	mov	r0, r1
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	602a      	str	r2, [r5, #0]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f7f3 fa2b 	bl	800094e <_write>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d102      	bne.n	800d502 <_write_r+0x1e>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b103      	cbz	r3, 800d502 <_write_r+0x1e>
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	bd38      	pop	{r3, r4, r5, pc}
 800d504:	24002718 	.word	0x24002718

0800d508 <_close_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d06      	ldr	r5, [pc, #24]	; (800d524 <_close_r+0x1c>)
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	f7f3 fa37 	bl	8000986 <_close>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d102      	bne.n	800d522 <_close_r+0x1a>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	b103      	cbz	r3, 800d522 <_close_r+0x1a>
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	24002718 	.word	0x24002718

0800d528 <_fclose_r>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	4606      	mov	r6, r0
 800d52c:	460c      	mov	r4, r1
 800d52e:	b911      	cbnz	r1, 800d536 <_fclose_r+0xe>
 800d530:	2500      	movs	r5, #0
 800d532:	4628      	mov	r0, r5
 800d534:	bd70      	pop	{r4, r5, r6, pc}
 800d536:	b118      	cbz	r0, 800d540 <_fclose_r+0x18>
 800d538:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d53a:	b90b      	cbnz	r3, 800d540 <_fclose_r+0x18>
 800d53c:	f7ff fc80 	bl	800ce40 <__sinit>
 800d540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d542:	07d8      	lsls	r0, r3, #31
 800d544:	d405      	bmi.n	800d552 <_fclose_r+0x2a>
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	0599      	lsls	r1, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_fclose_r+0x2a>
 800d54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54e:	f7fb fc4d 	bl	8008dec <__retarget_lock_acquire_recursive>
 800d552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d556:	b93b      	cbnz	r3, 800d568 <_fclose_r+0x40>
 800d558:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d55a:	f015 0501 	ands.w	r5, r5, #1
 800d55e:	d1e7      	bne.n	800d530 <_fclose_r+0x8>
 800d560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d562:	f7fb fc44 	bl	8008dee <__retarget_lock_release_recursive>
 800d566:	e7e4      	b.n	800d532 <_fclose_r+0xa>
 800d568:	4621      	mov	r1, r4
 800d56a:	4630      	mov	r0, r6
 800d56c:	f7ff fb6e 	bl	800cc4c <__sflush_r>
 800d570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d572:	4605      	mov	r5, r0
 800d574:	b133      	cbz	r3, 800d584 <_fclose_r+0x5c>
 800d576:	69e1      	ldr	r1, [r4, #28]
 800d578:	4630      	mov	r0, r6
 800d57a:	4798      	blx	r3
 800d57c:	2800      	cmp	r0, #0
 800d57e:	bfb8      	it	lt
 800d580:	f04f 35ff 	movlt.w	r5, #4294967295
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	061a      	lsls	r2, r3, #24
 800d588:	d503      	bpl.n	800d592 <_fclose_r+0x6a>
 800d58a:	6921      	ldr	r1, [r4, #16]
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7fd fc75 	bl	800ae7c <_free_r>
 800d592:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d594:	b141      	cbz	r1, 800d5a8 <_fclose_r+0x80>
 800d596:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d59a:	4299      	cmp	r1, r3
 800d59c:	d002      	beq.n	800d5a4 <_fclose_r+0x7c>
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7fd fc6c 	bl	800ae7c <_free_r>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d5a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d5aa:	b121      	cbz	r1, 800d5b6 <_fclose_r+0x8e>
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f7fd fc65 	bl	800ae7c <_free_r>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	6463      	str	r3, [r4, #68]	; 0x44
 800d5b6:	f7ff fc2b 	bl	800ce10 <__sfp_lock_acquire>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5c0:	07db      	lsls	r3, r3, #31
 800d5c2:	d402      	bmi.n	800d5ca <_fclose_r+0xa2>
 800d5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5c6:	f7fb fc12 	bl	8008dee <__retarget_lock_release_recursive>
 800d5ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5cc:	f7fb fc0d 	bl	8008dea <__retarget_lock_close_recursive>
 800d5d0:	f7ff fc24 	bl	800ce1c <__sfp_lock_release>
 800d5d4:	e7ad      	b.n	800d532 <_fclose_r+0xa>
	...

0800d5d8 <_fstat_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	4d07      	ldr	r5, [pc, #28]	; (800d5f8 <_fstat_r+0x20>)
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	602b      	str	r3, [r5, #0]
 800d5e6:	f7f3 f9da 	bl	800099e <_fstat>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	d102      	bne.n	800d5f4 <_fstat_r+0x1c>
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	b103      	cbz	r3, 800d5f4 <_fstat_r+0x1c>
 800d5f2:	6023      	str	r3, [r4, #0]
 800d5f4:	bd38      	pop	{r3, r4, r5, pc}
 800d5f6:	bf00      	nop
 800d5f8:	24002718 	.word	0x24002718

0800d5fc <_isatty_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4d06      	ldr	r5, [pc, #24]	; (800d618 <_isatty_r+0x1c>)
 800d600:	2300      	movs	r3, #0
 800d602:	4604      	mov	r4, r0
 800d604:	4608      	mov	r0, r1
 800d606:	602b      	str	r3, [r5, #0]
 800d608:	f7f3 f9d9 	bl	80009be <_isatty>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d102      	bne.n	800d616 <_isatty_r+0x1a>
 800d610:	682b      	ldr	r3, [r5, #0]
 800d612:	b103      	cbz	r3, 800d616 <_isatty_r+0x1a>
 800d614:	6023      	str	r3, [r4, #0]
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	24002718 	.word	0x24002718

0800d61c <_lseek_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d07      	ldr	r5, [pc, #28]	; (800d63c <_lseek_r+0x20>)
 800d620:	4604      	mov	r4, r0
 800d622:	4608      	mov	r0, r1
 800d624:	4611      	mov	r1, r2
 800d626:	2200      	movs	r2, #0
 800d628:	602a      	str	r2, [r5, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	f7f3 f9d2 	bl	80009d4 <_lseek>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	d102      	bne.n	800d63a <_lseek_r+0x1e>
 800d634:	682b      	ldr	r3, [r5, #0]
 800d636:	b103      	cbz	r3, 800d63a <_lseek_r+0x1e>
 800d638:	6023      	str	r3, [r4, #0]
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	24002718 	.word	0x24002718

0800d640 <_read_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4d07      	ldr	r5, [pc, #28]	; (800d660 <_read_r+0x20>)
 800d644:	4604      	mov	r4, r0
 800d646:	4608      	mov	r0, r1
 800d648:	4611      	mov	r1, r2
 800d64a:	2200      	movs	r2, #0
 800d64c:	602a      	str	r2, [r5, #0]
 800d64e:	461a      	mov	r2, r3
 800d650:	f7f3 f960 	bl	8000914 <_read>
 800d654:	1c43      	adds	r3, r0, #1
 800d656:	d102      	bne.n	800d65e <_read_r+0x1e>
 800d658:	682b      	ldr	r3, [r5, #0]
 800d65a:	b103      	cbz	r3, 800d65e <_read_r+0x1e>
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	bd38      	pop	{r3, r4, r5, pc}
 800d660:	24002718 	.word	0x24002718

0800d664 <_init>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	bf00      	nop
 800d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66a:	bc08      	pop	{r3}
 800d66c:	469e      	mov	lr, r3
 800d66e:	4770      	bx	lr

0800d670 <_fini>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	bf00      	nop
 800d674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d676:	bc08      	pop	{r3}
 800d678:	469e      	mov	lr, r3
 800d67a:	4770      	bx	lr
