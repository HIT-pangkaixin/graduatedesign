
fft_range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000554  24000000  08008cb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c34  24000554  08009208  00020554  2**2
                  ALLOC
  7 ._user_heap_stack 00003400  24002188  08009208  00022188  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020554  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013ecd  00000000  00000000  00020582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000031ae  00000000  00000000  0003444f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000eb8  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d40  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038bd1  00000000  00000000  000391f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000136bd  00000000  00000000  00071dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154e57  00000000  00000000  00085486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001da2dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003bf4  00000000  00000000  001da330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000554 	.word	0x24000554
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008b94 	.word	0x08008b94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000558 	.word	0x24000558
 80002d4:	08008b94 	.word	0x08008b94

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <MX_GPIO_Init+0x6c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_GPIO_Init+0x6c>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x6c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	58024400 	.word	0x58024400

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 f996 	bl	800067c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f808 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f7ff ffc0 	bl	80002d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000358:	f007 fe14 	bl	8007f84 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	usb_debug_test();
 800035c:	f007 fdd6 	bl	8007f0c <usb_debug_test>
 8000360:	e7fc      	b.n	800035c <main+0x14>
	...

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b09c      	sub	sp, #112	; 0x70
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800036e:	224c      	movs	r2, #76	; 0x4c
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f008 fb9e 	bl	8008ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2220      	movs	r2, #32
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f008 fb98 	bl	8008ab4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000384:	2002      	movs	r0, #2
 8000386:	f001 ffd1 	bl	800232c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	4b35      	ldr	r3, [pc, #212]	; (8000464 <SystemClock_Config+0x100>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a34      	ldr	r2, [pc, #208]	; (8000464 <SystemClock_Config+0x100>)
 8000394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b32      	ldr	r3, [pc, #200]	; (8000464 <SystemClock_Config+0x100>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	4b30      	ldr	r3, [pc, #192]	; (8000468 <SystemClock_Config+0x104>)
 80003a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a8:	4a2f      	ldr	r2, [pc, #188]	; (8000468 <SystemClock_Config+0x104>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <SystemClock_Config+0x104>)
 80003b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003bc:	bf00      	nop
 80003be:	4b29      	ldr	r3, [pc, #164]	; (8000464 <SystemClock_Config+0x100>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ca:	d1f8      	bne.n	80003be <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003cc:	4b27      	ldr	r3, [pc, #156]	; (800046c <SystemClock_Config+0x108>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	f023 0303 	bic.w	r3, r3, #3
 80003d4:	4a25      	ldr	r2, [pc, #148]	; (800046c <SystemClock_Config+0x108>)
 80003d6:	f043 0302 	orr.w	r3, r3, #2
 80003da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003dc:	2301      	movs	r3, #1
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ea:	2302      	movs	r3, #2
 80003ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80003f2:	2350      	movs	r3, #80	; 0x50
 80003f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003fe:	2302      	movs	r3, #2
 8000400:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000402:	230c      	movs	r3, #12
 8000404:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000406:	2300      	movs	r3, #0
 8000408:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000412:	4618      	mov	r0, r3
 8000414:	f001 ffd4 	bl	80023c0 <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800041e:	f000 f827 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	233f      	movs	r3, #63	; 0x3f
 8000424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2303      	movs	r3, #3
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800042e:	2308      	movs	r3, #8
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000432:	2340      	movs	r3, #64	; 0x40
 8000434:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2104      	movs	r1, #4
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fbe7 	bl	8002c1c <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000454:	f000 f80c 	bl	8000470 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000458:	f002 fd96 	bl	8002f88 <HAL_RCC_EnableCSS>
}
 800045c:	bf00      	nop
 800045e:	3770      	adds	r7, #112	; 0x70
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	58024800 	.word	0x58024800
 8000468:	58000400 	.word	0x58000400
 800046c:	58024400 	.word	0x58024400

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x30>)
 8000484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000488:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x30>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x30>)
 8000494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000498:	f003 0302 	and.w	r3, r3, #2
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	58024400 	.word	0x58024400

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 f930 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <OTG_FS_IRQHandler+0x10>)
 800050a:	f000 fd90 	bl	800102e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	24001a58 	.word	0x24001a58

08000518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <SystemInit+0xe4>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000522:	4a36      	ldr	r2, [pc, #216]	; (80005fc <SystemInit+0xe4>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800052c:	4b34      	ldr	r3, [pc, #208]	; (8000600 <SystemInit+0xe8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 030f 	and.w	r3, r3, #15
 8000534:	2b06      	cmp	r3, #6
 8000536:	d807      	bhi.n	8000548 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <SystemInit+0xe8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f023 030f 	bic.w	r3, r3, #15
 8000540:	4a2f      	ldr	r2, [pc, #188]	; (8000600 <SystemInit+0xe8>)
 8000542:	f043 0307 	orr.w	r3, r3, #7
 8000546:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <SystemInit+0xec>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <SystemInit+0xec>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <SystemInit+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <SystemInit+0xec>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4929      	ldr	r1, [pc, #164]	; (8000604 <SystemInit+0xec>)
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SystemInit+0xf0>)
 8000562:	4013      	ands	r3, r2
 8000564:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SystemInit+0xe8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	2b00      	cmp	r3, #0
 8000570:	d007      	beq.n	8000582 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemInit+0xe8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f023 030f 	bic.w	r3, r3, #15
 800057a:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemInit+0xe8>)
 800057c:	f043 0307 	orr.w	r3, r3, #7
 8000580:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <SystemInit+0xec>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemInit+0xec>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemInit+0xec>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <SystemInit+0xec>)
 8000596:	4a1d      	ldr	r2, [pc, #116]	; (800060c <SystemInit+0xf4>)
 8000598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <SystemInit+0xec>)
 800059c:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <SystemInit+0xf8>)
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <SystemInit+0xec>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <SystemInit+0xfc>)
 80005a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <SystemInit+0xec>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <SystemInit+0xec>)
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <SystemInit+0xfc>)
 80005b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <SystemInit+0xec>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <SystemInit+0xec>)
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <SystemInit+0xfc>)
 80005bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <SystemInit+0xec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <SystemInit+0xec>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <SystemInit+0xec>)
 80005ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <SystemInit+0xec>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <SystemInit+0x100>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <SystemInit+0x104>)
 80005dc:	4013      	ands	r3, r2
 80005de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e2:	d202      	bcs.n	80005ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <SystemInit+0x108>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <SystemInit+0x10c>)
 80005ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80005f0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	52002000 	.word	0x52002000
 8000604:	58024400 	.word	0x58024400
 8000608:	eaf6ed7f 	.word	0xeaf6ed7f
 800060c:	02020200 	.word	0x02020200
 8000610:	01ff0000 	.word	0x01ff0000
 8000614:	01010280 	.word	0x01010280
 8000618:	5c001000 	.word	0x5c001000
 800061c:	ffff0000 	.word	0xffff0000
 8000620:	51008108 	.word	0x51008108
 8000624:	52004000 	.word	0x52004000

08000628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000660 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f7ff ff74 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f008 fa09 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065a:	f7ff fe75 	bl	8000348 <main>
  bx  lr
 800065e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000660:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000668:	24000554 	.word	0x24000554
  ldr r2, =_sidata
 800066c:	08008cb4 	.word	0x08008cb4
  ldr r2, =_sbss
 8000670:	24000554 	.word	0x24000554
  ldr r4, =_ebss
 8000674:	24002188 	.word	0x24002188

08000678 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC3_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000682:	2003      	movs	r0, #3
 8000684:	f000 f98c 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000688:	f002 fc8e 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 800068c:	4602      	mov	r2, r0
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_Init+0x68>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	4913      	ldr	r1, [pc, #76]	; (80006e8 <HAL_Init+0x6c>)
 800069a:	5ccb      	ldrb	r3, [r1, r3]
 800069c:	f003 031f 	and.w	r3, r3, #31
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
 80006a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_Init+0x68>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_Init+0x6c>)
 80006b0:	5cd3      	ldrb	r3, [r2, r3]
 80006b2:	f003 031f 	and.w	r3, r3, #31
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	fa22 f303 	lsr.w	r3, r2, r3
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <HAL_Init+0x70>)
 80006be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_Init+0x74>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f814 	bl	80006f4 <HAL_InitTick>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e002      	b.n	80006dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006d6:	f7ff fed1 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024400 	.word	0x58024400
 80006e8:	08008c94 	.word	0x08008c94
 80006ec:	24000004 	.word	0x24000004
 80006f0:	24000000 	.word	0x24000000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_InitTick+0x60>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	e021      	b.n	800074c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_InitTick+0x64>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_InitTick+0x60>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f971 	bl	8000a06 <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e00e      	b.n	800074c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d80a      	bhi.n	800074a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f000 f93b 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_InitTick+0x68>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2400000c 	.word	0x2400000c
 8000758:	24000000 	.word	0x24000000
 800075c:	24000008 	.word	0x24000008

08000760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_IncTick+0x20>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x24>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_IncTick+0x24>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	2400000c 	.word	0x2400000c
 8000784:	24000570 	.word	0x24000570

08000788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_GetTick+0x14>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	24000570 	.word	0x24000570

080007a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff ffee 	bl	8000788 <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_Delay+0x44>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffde 	bl	8000788 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2400000c 	.word	0x2400000c

080007e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetREVID+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0c1b      	lsrs	r3, r3, #16
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	5c001000 	.word	0x5c001000

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <__NVIC_SetPriorityGrouping+0x40>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	4313      	orrs	r3, r2
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x40>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00
 8000844:	05fa0000 	.word	0x05fa0000

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff8e 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff29 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff40 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff90 	bl	80008f4 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5f 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff33 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa4 	bl	800095c <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a2e:	4b89      	ldr	r3, [pc, #548]	; (8000c54 <HAL_GPIO_Init+0x234>)
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a32:	e194      	b.n	8000d5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 8186 	beq.w	8000d58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x44>
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	69b9      	ldr	r1, [r7, #24]
 8000b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0203 	and.w	r2, r3, #3
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80e0 	beq.w	8000d58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_GPIO_Init+0x238>)
 8000b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9e:	4a2e      	ldr	r2, [pc, #184]	; (8000c58 <HAL_GPIO_Init+0x238>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_GPIO_Init+0x238>)
 8000baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bb6:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <HAL_GPIO_Init+0x23c>)
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <HAL_GPIO_Init+0x240>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d052      	beq.n	8000c88 <HAL_GPIO_Init+0x268>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_GPIO_Init+0x244>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d031      	beq.n	8000c4e <HAL_GPIO_Init+0x22e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_GPIO_Init+0x248>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d02b      	beq.n	8000c4a <HAL_GPIO_Init+0x22a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_GPIO_Init+0x24c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d025      	beq.n	8000c46 <HAL_GPIO_Init+0x226>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x250>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d01f      	beq.n	8000c42 <HAL_GPIO_Init+0x222>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <HAL_GPIO_Init+0x254>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d019      	beq.n	8000c3e <HAL_GPIO_Init+0x21e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <HAL_GPIO_Init+0x258>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0x21a>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_GPIO_Init+0x25c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d00d      	beq.n	8000c36 <HAL_GPIO_Init+0x216>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <HAL_GPIO_Init+0x260>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d007      	beq.n	8000c32 <HAL_GPIO_Init+0x212>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_GPIO_Init+0x264>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_GPIO_Init+0x20e>
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	e02d      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c2e:	230a      	movs	r3, #10
 8000c30:	e02b      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c32:	2308      	movs	r3, #8
 8000c34:	e029      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c36:	2307      	movs	r3, #7
 8000c38:	e027      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	e025      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c3e:	2305      	movs	r3, #5
 8000c40:	e023      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e021      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e01f      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e01d      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e01b      	b.n	8000c8a <HAL_GPIO_Init+0x26a>
 8000c52:	bf00      	nop
 8000c54:	58000080 	.word	0x58000080
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	58000400 	.word	0x58000400
 8000c60:	58020000 	.word	0x58020000
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58021000 	.word	0x58021000
 8000c74:	58021400 	.word	0x58021400
 8000c78:	58021800 	.word	0x58021800
 8000c7c:	58021c00 	.word	0x58021c00
 8000c80:	58022000 	.word	0x58022000
 8000c84:	58022400 	.word	0x58022400
 8000c88:	2300      	movs	r3, #0
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9a:	4938      	ldr	r1, [pc, #224]	; (8000d7c <HAL_GPIO_Init+0x35c>)
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f47f ae63 	bne.w	8000a34 <HAL_GPIO_Init+0x14>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3724      	adds	r7, #36	; 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	58000400 	.word	0x58000400

08000d80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b08f      	sub	sp, #60	; 0x3c
 8000d84:	af0a      	add	r7, sp, #40	; 0x28
 8000d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e116      	b.n	8000fc0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d106      	bne.n	8000db2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f007 fb19 	bl	80083e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fc5e 	bl	8004692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	687e      	ldr	r6, [r7, #4]
 8000dde:	466d      	mov	r5, sp
 8000de0:	f106 0410 	add.w	r4, r6, #16
 8000de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000df0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df4:	1d33      	adds	r3, r6, #4
 8000df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f003 fb29 	bl	8004450 <USB_CoreInit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2202      	movs	r2, #2
 8000e08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e0d7      	b.n	8000fc0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fc4c 	bl	80046b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e04a      	b.n	8000eb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e22:	7bfa      	ldrb	r2, [r7, #15]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	333d      	adds	r3, #61	; 0x3d
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	333c      	adds	r3, #60	; 0x3c
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4413      	add	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3344      	adds	r3, #68	; 0x44
 8000e5e:	4602      	mov	r2, r0
 8000e60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3340      	adds	r3, #64	; 0x40
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3348      	adds	r3, #72	; 0x48
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	334c      	adds	r3, #76	; 0x4c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3354      	adds	r3, #84	; 0x54
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3af      	bcc.n	8000e22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e044      	b.n	8000f52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3b5      	bcc.n	8000ec8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	687e      	ldr	r6, [r7, #4]
 8000f64:	466d      	mov	r5, sp
 8000f66:	f106 0410 	add.w	r4, r6, #16
 8000f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f76:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f7a:	1d33      	adds	r3, r6, #4
 8000f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f003 fbe4 	bl	800474c <USB_DevInit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e014      	b.n	8000fc0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f98c 	bl	80022cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fd32 	bl	8005a22 <USB_DevDisconnect>

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_PCD_Start+0x1c>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e020      	b.n	8001026 <HAL_PCD_Start+0x5e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d109      	bne.n	8001008 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fb2f 	bl	8004670 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fce2 	bl	80059e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800102e:	b590      	push	{r4, r7, lr}
 8001030:	b08d      	sub	sp, #52	; 0x34
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fda0 	bl	8005b8a <USB_GetMode>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 84b7 	bne.w	80019c0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fd04 	bl	8005a64 <USB_ReadInterrupts>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 84ad 	beq.w	80019be <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fcf1 	bl	8005a64 <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d107      	bne.n	800109c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f002 0202 	and.w	r2, r2, #2
 800109a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fcdf 	bl	8005a64 <USB_ReadInterrupts>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d161      	bne.n	8001174 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0210 	bic.w	r2, r2, #16
 80010be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	f003 020f 	and.w	r2, r3, #15
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	3304      	adds	r3, #4
 80010de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	0c5b      	lsrs	r3, r3, #17
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d124      	bne.n	8001136 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d035      	beq.n	8001164 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	6a38      	ldr	r0, [r7, #32]
 800110c:	f004 fb16 	bl	800573c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	441a      	add	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	6a1a      	ldr	r2, [r3, #32]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800112e:	441a      	add	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	621a      	str	r2, [r3, #32]
 8001134:	e016      	b.n	8001164 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	0c5b      	lsrs	r3, r3, #17
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	2b06      	cmp	r3, #6
 8001140:	d110      	bne.n	8001164 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001148:	2208      	movs	r2, #8
 800114a:	4619      	mov	r1, r3
 800114c:	6a38      	ldr	r0, [r7, #32]
 800114e:	f004 faf5 	bl	800573c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	6a1a      	ldr	r2, [r3, #32]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115e:	441a      	add	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0210 	orr.w	r2, r2, #16
 8001172:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fc73 	bl	8005a64 <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001184:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001188:	f040 80a7 	bne.w	80012da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fc78 	bl	8005a8a <USB_ReadDevAllOutEpInterrupt>
 800119a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800119c:	e099      	b.n	80012d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 808e 	beq.w	80012c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fc9c 	bl	8005af2 <USB_ReadDevOutEPInterrupt>
 80011ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	015a      	lsls	r2, r3, #5
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	4413      	add	r3, r2
 80011ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011d2:	461a      	mov	r2, r3
 80011d4:	2301      	movs	r3, #1
 80011d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fef0 	bl	8001fc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	015a      	lsls	r2, r3, #5
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f6:	461a      	mov	r2, r3
 80011f8:	2308      	movs	r3, #8
 80011fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 ffc6 	bl	8002190 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800121a:	461a      	mov	r2, r3
 800121c:	2310      	movs	r3, #16
 800121e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d030      	beq.n	800128c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	2b80      	cmp	r3, #128	; 0x80
 8001234:	d109      	bne.n	800124a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001248:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	3304      	adds	r3, #4
 800125e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	78db      	ldrb	r3, [r3, #3]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f007 f9e7 	bl	8008648 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	015a      	lsls	r2, r3, #5
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4413      	add	r3, r2
 8001282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001286:	461a      	mov	r2, r3
 8001288:	2302      	movs	r3, #2
 800128a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a2:	461a      	mov	r2, r3
 80012a4:	2320      	movs	r3, #32
 80012a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	015a      	lsls	r2, r3, #5
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012be:	461a      	mov	r2, r3
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f af62 	bne.w	800119e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fbc0 	bl	8005a64 <USB_ReadInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012ee:	f040 80db 	bne.w	80014a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fbe1 	bl	8005abe <USB_ReadDevAllInEpInterrupt>
 80012fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001302:	e0cd      	b.n	80014a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80c2 	beq.w	8001494 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fc07 	bl	8005b2e <USB_ReadDevInEPInterrupt>
 8001320:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d057      	beq.n	80013dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	2201      	movs	r2, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	69f9      	ldr	r1, [r7, #28]
 8001348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800134c:	4013      	ands	r3, r2
 800134e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800135c:	461a      	mov	r2, r3
 800135e:	2301      	movs	r3, #1
 8001360:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d132      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	334c      	adds	r3, #76	; 0x4c
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4403      	add	r3, r0
 800138a:	3348      	adds	r3, #72	; 0x48
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4419      	add	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	334c      	adds	r3, #76	; 0x4c
 80013a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d113      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x3a2>
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3354      	adds	r3, #84	; 0x54
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d108      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013c8:	461a      	mov	r2, r3
 80013ca:	2101      	movs	r1, #1
 80013cc:	f004 fc10 	bl	8005bf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f007 f8b1 	bl	800853e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f2:	461a      	mov	r2, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140e:	461a      	mov	r2, r3
 8001410:	2310      	movs	r3, #16
 8001412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800142a:	461a      	mov	r2, r3
 800142c:	2340      	movs	r3, #64	; 0x40
 800142e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d023      	beq.n	8001482 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800143a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143c:	6a38      	ldr	r0, [r7, #32]
 800143e:	f003 fae3 	bl	8004a08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	3338      	adds	r3, #56	; 0x38
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	3304      	adds	r3, #4
 8001454:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f007 f8fe 	bl	800866c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147c:	461a      	mov	r2, r3
 800147e:	2302      	movs	r3, #2
 8001480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800148c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fd08 	bl	8001ea4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	3301      	adds	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f af2e 	bne.w	8001304 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fad9 	bl	8005a64 <USB_ReadInterrupts>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014bc:	d122      	bne.n	8001504 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 ff14 	bl	8002314 <HAL_PCDEx_LPM_Callback>
 80014ec:	e002      	b.n	80014f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f007 f89c 	bl	800862c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f004 faab 	bl	8005a64 <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001518:	d112      	bne.n	8001540 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f007 f858 	bl	80085e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800153e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fa8d 	bl	8005a64 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001554:	d121      	bne.n	800159a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001564:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	f003 020f 	and.w	r2, r3, #15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800158a:	2101      	movs	r1, #1
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fec1 	bl	8002314 <HAL_PCDEx_LPM_Callback>
 8001592:	e002      	b.n	800159a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f007 f823 	bl	80085e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fa60 	bl	8005a64 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ae:	f040 80b7 	bne.w	8001720 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2110      	movs	r1, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fa1b 	bl	8004a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e046      	b.n	8001666 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e4:	461a      	mov	r2, r3
 80015e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fc:	0151      	lsls	r1, r2, #5
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	440a      	add	r2, r1
 8001602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800160a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001618:	461a      	mov	r2, r3
 800161a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800161e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001630:	0151      	lsls	r1, r2, #5
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	440a      	add	r2, r1
 8001636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800163a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800163e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001650:	0151      	lsls	r1, r2, #5
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	440a      	add	r2, r1
 8001656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800165a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800165e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	3301      	adds	r3, #1
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d3b3      	bcc.n	80015d8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001682:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169c:	f043 030b 	orr.w	r3, r3, #11
 80016a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b2:	f043 030b 	orr.w	r3, r3, #11
 80016b6:	6453      	str	r3, [r2, #68]	; 0x44
 80016b8:	e015      	b.n	80016e6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c8:	4619      	mov	r1, r3
 80016ca:	f242 032b 	movw	r3, #8235	; 0x202b
 80016ce:	4313      	orrs	r3, r2
 80016d0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e0:	f043 030b 	orr.w	r3, r3, #11
 80016e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800170a:	461a      	mov	r2, r3
 800170c:	f004 fa70 	bl	8005bf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 f99d 	bl	8005a64 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001734:	d124      	bne.n	8001780 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fa34 	bl	8005ba8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f003 f9dc 	bl	8004b02 <USB_GetDevSpeed>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681c      	ldr	r4, [r3, #0]
 8001756:	f001 fda1 	bl	800329c <HAL_RCC_GetHCLKFreq>
 800175a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	4620      	mov	r0, r4
 8001766:	f002 fee1 	bl	800452c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f006 ff0f 	bl	800858e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800177e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f004 f96d 	bl	8005a64 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b08      	cmp	r3, #8
 8001792:	d10a      	bne.n	80017aa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f006 feec 	bl	8008572 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 0208 	and.w	r2, r2, #8
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 f958 	bl	8005a64 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	2b80      	cmp	r3, #128	; 0x80
 80017bc:	d122      	bne.n	8001804 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	e014      	b.n	80017fa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fb27 	bl	8001e42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3301      	adds	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	429a      	cmp	r2, r3
 8001802:	d3e5      	bcc.n	80017d0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f004 f92b 	bl	8005a64 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001818:	d13b      	bne.n	8001892 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	e02b      	b.n	8001878 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d115      	bne.n	8001872 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001846:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	da12      	bge.n	8001872 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	333f      	adds	r3, #63	; 0x3f
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fae8 	bl	8001e42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	429a      	cmp	r2, r3
 8001880:	d3ce      	bcc.n	8001820 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f004 f8e4 	bl	8005a64 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018a6:	d155      	bne.n	8001954 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	e045      	b.n	800193a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d12e      	bne.n	8001934 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da2b      	bge.n	8001934 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d121      	bne.n	8001934 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800192c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001930:	6053      	str	r3, [r2, #4]
            break;
 8001932:	e007      	b.n	8001944 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3301      	adds	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	429a      	cmp	r2, r3
 8001942:	d3b4      	bcc.n	80018ae <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f004 f883 	bl	8005a64 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d10a      	bne.n	8001980 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f006 fe90 	bl	8008690 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800197e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f004 f86d 	bl	8005a64 <USB_ReadInterrupts>
 800198a:	4603      	mov	r3, r0
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b04      	cmp	r3, #4
 8001992:	d115      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f006 fe80 	bl	80086ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	e000      	b.n	80019c0 <HAL_PCD_IRQHandler+0x992>
      return;
 80019be:	bf00      	nop
    }
  }
}
 80019c0:	3734      	adds	r7, #52	; 0x34
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}

080019c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_SetAddress+0x1a>
 80019dc:	2302      	movs	r3, #2
 80019de:	e013      	b.n	8001a08 <HAL_PCD_SetAddress+0x42>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 ffcb 	bl	8005994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	70fb      	strb	r3, [r7, #3]
 8001a22:	460b      	mov	r3, r1
 8001a24:	803b      	strh	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da0f      	bge.n	8001a56 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 020f 	and.w	r2, r3, #15
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	3338      	adds	r3, #56	; 0x38
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
 8001a54:	e00f      	b.n	8001a76 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 020f 	and.w	r2, r3, #15
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a82:	883a      	ldrh	r2, [r7, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	78ba      	ldrb	r2, [r7, #2]
 8001a8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	785b      	ldrb	r3, [r3, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aa0:	78bb      	ldrb	r3, [r7, #2]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d102      	bne.n	8001aac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_EP_Open+0xaa>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e00e      	b.n	8001ad8 <HAL_PCD_EP_Open+0xc8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f83f 	bl	8004b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da0f      	bge.n	8001b14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3338      	adds	r3, #56	; 0x38
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
 8001b12:	e00f      	b.n	8001b34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 020f 	and.w	r2, r3, #15
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_EP_Close+0x6e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e00e      	b.n	8001b6c <HAL_PCD_EP_Close+0x8c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 f87d 	bl	8004c5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	460b      	mov	r3, r1
 8001b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	f003 fb64 	bl	80052b4 <USB_EP0StartXfer>
 8001bec:	e008      	b.n	8001c00 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	f003 f90a 	bl	8004e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c2c:	681b      	ldr	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	460b      	mov	r3, r1
 8001c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	3338      	adds	r3, #56	; 0x38
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6979      	ldr	r1, [r7, #20]
 8001cac:	f003 fb02 	bl	80052b4 <USB_EP0StartXfer>
 8001cb0:	e008      	b.n	8001cc4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6979      	ldr	r1, [r7, #20]
 8001cc0:	f003 f8a8 	bl	8004e14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d901      	bls.n	8001cec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e050      	b.n	8001d8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da0f      	bge.n	8001d14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 020f 	and.w	r2, r3, #15
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	705a      	strb	r2, [r3, #1]
 8001d12:	e00d      	b.n	8001d30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_PCD_EP_SetStall+0x82>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e01e      	b.n	8001d8e <HAL_PCD_EP_SetStall+0xc0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fd44 	bl	80057ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f003 ff36 	bl	8005bf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d901      	bls.n	8001db4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e042      	b.n	8001e3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	da0f      	bge.n	8001ddc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	3338      	adds	r3, #56	; 0x38
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	705a      	strb	r2, [r3, #1]
 8001dda:	e00f      	b.n	8001dfc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_PCD_EP_ClrStall+0x86>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00e      	b.n	8001e3a <HAL_PCD_EP_ClrStall+0xa4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fd4c 	bl	80058c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da0c      	bge.n	8001e70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	3338      	adds	r3, #56	; 0x38
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e00c      	b.n	8001e8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 020f 	and.w	r2, r3, #15
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	3304      	adds	r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fb6b 	bl	800556c <USB_EPStopXfer>
 8001e96:	4603      	mov	r3, r0
 8001e98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d901      	bls.n	8001edc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e06c      	b.n	8001fb6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d902      	bls.n	8001ef8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3303      	adds	r3, #3
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f00:	e02b      	b.n	8001f5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d902      	bls.n	8001f1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3303      	adds	r3, #3
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6978      	ldr	r0, [r7, #20]
 8001f3e:	f003 fbbf 	bl	80056c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	441a      	add	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d809      	bhi.n	8001f84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d203      	bcs.n	8001f84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1be      	bne.n	8001f02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d811      	bhi.n	8001fb4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	2201      	movs	r2, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	333c      	adds	r3, #60	; 0x3c
 8001fd8:	3304      	adds	r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d17b      	bne.n	80020ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4a61      	ldr	r2, [pc, #388]	; (8002188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	f240 80b9 	bls.w	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80b3 	beq.w	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002028:	6093      	str	r3, [r2, #8]
 800202a:	e0a7      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	461a      	mov	r2, r3
 8002044:	2320      	movs	r3, #32
 8002046:	6093      	str	r3, [r2, #8]
 8002048:	e098      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8093 	bne.w	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4a4b      	ldr	r2, [pc, #300]	; (8002188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d90f      	bls.n	800207e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002074:	461a      	mov	r2, r3
 8002076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800207a:	6093      	str	r3, [r2, #8]
 800207c:	e07e      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	0159      	lsls	r1, r3, #5
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	440b      	add	r3, r1
 80020a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	1ad2      	subs	r2, r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d114      	bne.n	80020e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020c8:	461a      	mov	r2, r3
 80020ca:	2101      	movs	r1, #1
 80020cc:	f003 fd90 	bl	8005bf0 <USB_EP0_OutStart>
 80020d0:	e006      	b.n	80020e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f006 fa0e 	bl	8008508 <HAL_PCD_DataOutStageCallback>
 80020ec:	e046      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d124      	bne.n	8002140 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	6093      	str	r3, [r2, #8]
 8002114:	e032      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212c:	461a      	mov	r2, r3
 800212e:	2320      	movs	r3, #32
 8002130:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 f9e5 	bl	8008508 <HAL_PCD_DataOutStageCallback>
 800213e:	e01d      	b.n	800217c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d114      	bne.n	8002170 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002168:	461a      	mov	r2, r3
 800216a:	2100      	movs	r1, #0
 800216c:	f003 fd40 	bl	8005bf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f006 f9c6 	bl	8008508 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	4f54300a 	.word	0x4f54300a
 800218c:	4f54310a 	.word	0x4f54310a

08002190 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <PCD_EP_OutSetupPacket_int+0x88>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d90e      	bls.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f006 f97d 	bl	80084e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d90c      	bls.n	800220c <PCD_EP_OutSetupPacket_int+0x7c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002204:	461a      	mov	r2, r3
 8002206:	2101      	movs	r1, #1
 8002208:	f003 fcf2 	bl	8005bf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	4f54300a 	.word	0x4f54300a

0800221c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
 8002228:	4613      	mov	r3, r2
 800222a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800223a:	883b      	ldrh	r3, [r7, #0]
 800223c:	0419      	lsls	r1, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	430a      	orrs	r2, r1
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
 8002248:	e028      	b.n	800229c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e00d      	b.n	800227a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	3340      	adds	r3, #64	; 0x40
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	3b01      	subs	r3, #1
 8002280:	429a      	cmp	r2, r3
 8002282:	d3ec      	bcc.n	800225e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002284:	883b      	ldrh	r3, [r7, #0]
 8002286:	0418      	lsls	r0, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	3b01      	subs	r3, #1
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4302      	orrs	r2, r0
 8002294:	3340      	adds	r3, #64	; 0x40
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PCDEx_ActivateLPM+0x44>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	10000003 	.word	0x10000003

08002314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_PWREx_ConfigSupply+0x70>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d00a      	beq.n	8002356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_PWREx_ConfigSupply+0x70>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e01f      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e01d      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_PWREx_ConfigSupply+0x70>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	490f      	ldr	r1, [pc, #60]	; (800239c <HAL_PWREx_ConfigSupply+0x70>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4313      	orrs	r3, r2
 8002364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002366:	f7fe fa0f 	bl	8000788 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800236c:	e009      	b.n	8002382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800236e:	f7fe fa0b 	bl	8000788 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237c:	d901      	bls.n	8002382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_PWREx_ConfigSupply+0x70>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238e:	d1ee      	bne.n	800236e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	58024800 	.word	0x58024800

080023a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	58024800 	.word	0x58024800

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 bc1d 	b.w	8002c0e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8087 	beq.w	80024f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e2:	4b99      	ldr	r3, [pc, #612]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d007      	beq.n	8002408 <HAL_RCC_OscConfig+0x48>
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	2b18      	cmp	r3, #24
 80023fc:	d110      	bne.n	8002420 <HAL_RCC_OscConfig+0x60>
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d06c      	beq.n	80024ee <HAL_RCC_OscConfig+0x12e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d168      	bne.n	80024ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e3f6      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x78>
 800242a:	4b87      	ldr	r3, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a86      	ldr	r2, [pc, #536]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e02e      	b.n	8002496 <HAL_RCC_OscConfig+0xd6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x9a>
 8002440:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a80      	ldr	r2, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b7e      	ldr	r3, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e01d      	b.n	8002496 <HAL_RCC_OscConfig+0xd6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0xbe>
 8002464:	4b78      	ldr	r3, [pc, #480]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a77      	ldr	r2, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800246a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0xd6>
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a71      	ldr	r2, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d013      	beq.n	80024c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe f973 	bl	8000788 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a6:	f7fe f96f 	bl	8000788 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e3aa      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b8:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0xe6>
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe f95f 	bl	8000788 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ce:	f7fe f95b 	bl	8000788 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	; 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e396      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x10e>
 80024ec:	e000      	b.n	80024f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80cb 	beq.w	8002694 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002508:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_RCC_OscConfig+0x164>
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	2b18      	cmp	r3, #24
 8002518:	d156      	bne.n	80025c8 <HAL_RCC_OscConfig+0x208>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d151      	bne.n	80025c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b48      	ldr	r3, [pc, #288]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x17c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e368      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253c:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0219 	bic.w	r2, r3, #25
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	493f      	ldr	r1, [pc, #252]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800254e:	f7fe f91b 	bl	8000788 <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe f917 	bl	8000788 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e352      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	f7fe f938 	bl	80007e8 <HAL_GetREVID>
 8002578:	4603      	mov	r3, r0
 800257a:	f241 0203 	movw	r2, #4099	; 0x1003
 800257e:	4293      	cmp	r3, r2
 8002580:	d817      	bhi.n	80025b2 <HAL_RCC_OscConfig+0x1f2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x1dc>
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259a:	e07b      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	031b      	lsls	r3, r3, #12
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e070      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	4921      	ldr	r1, [pc, #132]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c6:	e065      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d048      	beq.n	8002662 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0219 	bic.w	r2, r3, #25
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	491a      	ldr	r1, [pc, #104]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe f8d1 	bl	8000788 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ea:	f7fe f8cd 	bl	8000788 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e308      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	f7fe f8ee 	bl	80007e8 <HAL_GetREVID>
 800260c:	4603      	mov	r3, r0
 800260e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002612:	4293      	cmp	r3, r2
 8002614:	d81a      	bhi.n	800264c <HAL_RCC_OscConfig+0x28c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d108      	bne.n	8002630 <HAL_RCC_OscConfig+0x270>
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	6053      	str	r3, [r2, #4]
 800262e:	e031      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	031b      	lsls	r3, r3, #12
 800263e:	4902      	ldr	r1, [pc, #8]	; (8002648 <HAL_RCC_OscConfig+0x288>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
 8002646:	bf00      	nop
 8002648:	58024400 	.word	0x58024400
 800264c:	4b9a      	ldr	r3, [pc, #616]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	4997      	ldr	r1, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b95      	ldr	r3, [pc, #596]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a94      	ldr	r2, [pc, #592]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe f88b 	bl	8000788 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002676:	f7fe f887 	bl	8000788 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e2c2      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002688:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a9 	beq.w	80027f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ac:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d007      	beq.n	80026c8 <HAL_RCC_OscConfig+0x308>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b18      	cmp	r3, #24
 80026bc:	d13a      	bne.n	8002734 <HAL_RCC_OscConfig+0x374>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d135      	bne.n	8002734 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c8:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_OscConfig+0x320>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e296      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e0:	f7fe f882 	bl	80007e8 <HAL_GetREVID>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d817      	bhi.n	800271e <HAL_RCC_OscConfig+0x35e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_OscConfig+0x348>
 80026f6:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002704:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002706:	e075      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	069b      	lsls	r3, r3, #26
 8002716:	4968      	ldr	r1, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271c:	e06a      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800271e:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	4962      	ldr	r1, [pc, #392]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002732:	e05f      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d042      	beq.n	80027c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800273c:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5d      	ldr	r2, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe f81e 	bl	8000788 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002750:	f7fe f81a 	bl	8000788 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e255      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800276e:	f7fe f83b 	bl	80007e8 <HAL_GetREVID>
 8002772:	4603      	mov	r3, r0
 8002774:	f241 0203 	movw	r2, #4099	; 0x1003
 8002778:	4293      	cmp	r3, r2
 800277a:	d817      	bhi.n	80027ac <HAL_RCC_OscConfig+0x3ec>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	2b20      	cmp	r3, #32
 8002782:	d108      	bne.n	8002796 <HAL_RCC_OscConfig+0x3d6>
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002792:	6053      	str	r3, [r2, #4]
 8002794:	e02e      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	4944      	ldr	r1, [pc, #272]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e023      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	493f      	ldr	r1, [pc, #252]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
 80027c0:	e018      	b.n	80027f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fd ffdb 	bl	8000788 <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027d6:	f7fd ffd7 	bl	8000788 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e212      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e8:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d036      	beq.n	800286e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d019      	beq.n	800283c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	4a2a      	ldr	r2, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fd ffb8 	bl	8000788 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7fd ffb4 	bl	8000788 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1ef      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x45c>
 800283a:	e018      	b.n	800286e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fd ff9e 	bl	8000788 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002850:	f7fd ff9a 	bl	8000788 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1d5      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d039      	beq.n	80028ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01c      	beq.n	80028bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800288c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800288e:	f7fd ff7b 	bl	8000788 <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002896:	f7fd ff77 	bl	8000788 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1b2      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x4d6>
 80028b4:	e01b      	b.n	80028ee <HAL_RCC_OscConfig+0x52e>
 80028b6:	bf00      	nop
 80028b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028bc:	4b9b      	ldr	r3, [pc, #620]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a9a      	ldr	r2, [pc, #616]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 80028c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028c8:	f7fd ff5e 	bl	8000788 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028d0:	f7fd ff5a 	bl	8000788 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e195      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e2:	4b92      	ldr	r3, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8081 	beq.w	80029fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028fc:	4b8c      	ldr	r3, [pc, #560]	; (8002b30 <HAL_RCC_OscConfig+0x770>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a8b      	ldr	r2, [pc, #556]	; (8002b30 <HAL_RCC_OscConfig+0x770>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002908:	f7fd ff3e 	bl	8000788 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fd ff3a 	bl	8000788 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e175      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002922:	4b83      	ldr	r3, [pc, #524]	; (8002b30 <HAL_RCC_OscConfig+0x770>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d106      	bne.n	8002944 <HAL_RCC_OscConfig+0x584>
 8002936:	4b7d      	ldr	r3, [pc, #500]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a7c      	ldr	r2, [pc, #496]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	e02d      	b.n	80029a0 <HAL_RCC_OscConfig+0x5e0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x5a6>
 800294c:	4b77      	ldr	r3, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a76      	ldr	r2, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a73      	ldr	r2, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x5e0>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x5c8>
 800296e:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b6c      	ldr	r3, [pc, #432]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a6b      	ldr	r2, [pc, #428]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x5e0>
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a67      	ldr	r2, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a64      	ldr	r2, [pc, #400]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fd feee 	bl	8000788 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fd feea 	bl	8000788 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e123      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c6:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ee      	beq.n	80029b0 <HAL_RCC_OscConfig+0x5f0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fd fed8 	bl	8000788 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fd fed4 	bl	8000788 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e10d      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029f2:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ee      	bne.n	80029dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8102 	beq.w	8002c0c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a08:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a10:	2b18      	cmp	r3, #24
 8002a12:	f000 80bd 	beq.w	8002b90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f040 809e 	bne.w	8002b5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fd feac 	bl	8000788 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fd fea8 	bl	8000788 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0e3      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a52:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x774>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4931      	ldr	r1, [pc, #196]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	3b01      	subs	r3, #1
 8002a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	3b01      	subs	r3, #1
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	3b01      	subs	r3, #1
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a9c:	4923      	ldr	r1, [pc, #140]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_RCC_OscConfig+0x778>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aba:	00d2      	lsls	r2, r2, #3
 8002abc:	491b      	ldr	r1, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f023 020c 	bic.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4917      	ldr	r1, [pc, #92]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	f023 0202 	bic.w	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	4912      	ldr	r1, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fd fe31 	bl	8000788 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b28:	e011      	b.n	8002b4e <HAL_RCC_OscConfig+0x78e>
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	58024800 	.word	0x58024800
 8002b34:	fffffc0c 	.word	0xfffffc0c
 8002b38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fd fe24 	bl	8000788 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e05f      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x77c>
 8002b5a:	e057      	b.n	8002c0c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fd fe0e 	bl	8000788 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fd fe0a 	bl	8000788 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e045      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x7b0>
 8002b8e:	e03d      	b.n	8002c0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_OscConfig+0x858>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d031      	beq.n	8002c08 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f003 0203 	and.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d12a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d122      	bne.n	8002c08 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d11a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d111      	bne.n	8002c08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d108      	bne.n	8002c08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0e1b      	lsrs	r3, r3, #24
 8002bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400

08002c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e19c      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b8a      	ldr	r3, [pc, #552]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b87      	ldr	r3, [pc, #540]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	4985      	ldr	r1, [pc, #532]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e184      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b7b      	ldr	r3, [pc, #492]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c7c:	4b78      	ldr	r3, [pc, #480]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4975      	ldr	r1, [pc, #468]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	496a      	ldr	r1, [pc, #424]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	495e      	ldr	r1, [pc, #376]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d06:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4953      	ldr	r1, [pc, #332]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d908      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 020f 	bic.w	r2, r3, #15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4947      	ldr	r1, [pc, #284]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d055      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4940      	ldr	r1, [pc, #256]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0f6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d115      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0ea      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0de      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4925      	ldr	r1, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fd fcdb 	bl	8000788 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd6:	f7fd fcd7 	bl	8000788 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0be      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d1eb      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d208      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f023 020f 	bic.w	r2, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d214      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4906      	ldr	r1, [pc, #24]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e086      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
 8002e5c:	52002000 	.word	0x52002000
 8002e60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e80:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4939      	ldr	r1, [pc, #228]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	492e      	ldr	r1, [pc, #184]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4922      	ldr	r1, [pc, #136]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d208      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4917      	ldr	r1, [pc, #92]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f1c:	f000 f844 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4912      	ldr	r1, [pc, #72]	; (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x360>)
 8002f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x364>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x368>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fbc8 	bl	80006f4 <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
 8002f78:	08008c94 	.word	0x08008c94
 8002f7c:	24000004 	.word	0x24000004
 8002f80:	24000000 	.word	0x24000000
 8002f84:	24000008 	.word	0x24000008

08002f88 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_EnableCSS+0x1c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_RCC_EnableCSS+0x1c>)
 8002f92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	58024400 	.word	0x58024400

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4bb3      	ldr	r3, [pc, #716]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb6:	2b18      	cmp	r3, #24
 8002fb8:	f200 8155 	bhi.w	8003266 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08003029 	.word	0x08003029
 8002fc8:	08003267 	.word	0x08003267
 8002fcc:	08003267 	.word	0x08003267
 8002fd0:	08003267 	.word	0x08003267
 8002fd4:	08003267 	.word	0x08003267
 8002fd8:	08003267 	.word	0x08003267
 8002fdc:	08003267 	.word	0x08003267
 8002fe0:	08003267 	.word	0x08003267
 8002fe4:	0800304f 	.word	0x0800304f
 8002fe8:	08003267 	.word	0x08003267
 8002fec:	08003267 	.word	0x08003267
 8002ff0:	08003267 	.word	0x08003267
 8002ff4:	08003267 	.word	0x08003267
 8002ff8:	08003267 	.word	0x08003267
 8002ffc:	08003267 	.word	0x08003267
 8003000:	08003267 	.word	0x08003267
 8003004:	08003055 	.word	0x08003055
 8003008:	08003267 	.word	0x08003267
 800300c:	08003267 	.word	0x08003267
 8003010:	08003267 	.word	0x08003267
 8003014:	08003267 	.word	0x08003267
 8003018:	08003267 	.word	0x08003267
 800301c:	08003267 	.word	0x08003267
 8003020:	08003267 	.word	0x08003267
 8003024:	0800305b 	.word	0x0800305b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003028:	4b94      	ldr	r3, [pc, #592]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003034:	4b91      	ldr	r3, [pc, #580]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	4a90      	ldr	r2, [pc, #576]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003046:	e111      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003048:	4b8d      	ldr	r3, [pc, #564]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800304a:	61bb      	str	r3, [r7, #24]
    break;
 800304c:	e10e      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800304e:	4b8d      	ldr	r3, [pc, #564]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003050:	61bb      	str	r3, [r7, #24]
    break;
 8003052:	e10b      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b8c      	ldr	r3, [pc, #560]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003056:	61bb      	str	r3, [r7, #24]
    break;
 8003058:	e108      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800305a:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003064:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003070:	4b82      	ldr	r3, [pc, #520]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800307a:	4b80      	ldr	r3, [pc, #512]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80e1 	beq.w	8003260 <HAL_RCC_GetSysClockFreq+0x2b8>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f000 8083 	beq.w	80031ac <HAL_RCC_GetSysClockFreq+0x204>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f200 80a1 	bhi.w	80031f0 <HAL_RCC_GetSysClockFreq+0x248>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x114>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d056      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030c8:	4b6c      	ldr	r3, [pc, #432]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f2:	4b62      	ldr	r3, [pc, #392]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003102:	ed97 6a02 	vldr	s12, [r7, #8]
 8003106:	eddf 5a61 	vldr	s11, [pc, #388]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003122:	e087      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003136:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	ed97 6a02 	vldr	s12, [r7, #8]
 800314a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003166:	e065      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b40      	ldr	r3, [pc, #256]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a02 	vldr	s12, [r7, #8]
 800318e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031aa:	e043      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003298 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ee:	e021      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	ed97 6a02 	vldr	s12, [r7, #8]
 8003216:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800328c <HAL_RCC_GetSysClockFreq+0x2e4>
 800321a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003232:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323e:	3301      	adds	r3, #1
 8003240:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800324c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003258:	ee17 3a90 	vmov	r3, s15
 800325c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800325e:	e005      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003268:	61bb      	str	r3, [r7, #24]
    break;
 800326a:	bf00      	nop
  }

  return sysclockfreq;
 800326c:	69bb      	ldr	r3, [r7, #24]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	03d09000 	.word	0x03d09000
 8003284:	003d0900 	.word	0x003d0900
 8003288:	00b71b00 	.word	0x00b71b00
 800328c:	46000000 	.word	0x46000000
 8003290:	4c742400 	.word	0x4c742400
 8003294:	4a742400 	.word	0x4a742400
 8003298:	4b371b00 	.word	0x4b371b00

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032a2:	f7ff fe81 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_RCC_GetHCLKFreq+0x50>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490f      	ldr	r1, [pc, #60]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_GetHCLKFreq+0x50>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	58024400 	.word	0x58024400
 80032f0:	08008c94 	.word	0x08008c94
 80032f4:	24000004 	.word	0x24000004
 80032f8:	24000000 	.word	0x24000000

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003308:	2300      	movs	r3, #0
 800330a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03f      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003320:	d02a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003326:	d824      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800332c:	d018      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800332e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003332:	d81e      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333c:	d007      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800333e:	e018      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003340:	4ba3      	ldr	r3, [pc, #652]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	4aa2      	ldr	r2, [pc, #648]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800334c:	e015      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 ff17 	bl	8004188 <RCCEx_PLL2_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800335e:	e00c      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 ffc0 	bl	80042ec <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
      break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003380:	4b93      	ldr	r3, [pc, #588]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338c:	4990      	ldr	r1, [pc, #576]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	650b      	str	r3, [r1, #80]	; 0x50
 8003392:	e001      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03d      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d826      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033d7 	.word	0x080033d7
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003401 	.word	0x08003401
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033d4:	e015      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fed3 	bl	8004188 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e6:	e00c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ff7c 	bl	80042ec <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003408:	4b71      	ldr	r3, [pc, #452]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	f023 0207 	bic.w	r2, r3, #7
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	496e      	ldr	r1, [pc, #440]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	650b      	str	r3, [r1, #80]	; 0x50
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003428:	2b00      	cmp	r3, #0
 800342a:	d042      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	d02b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d825      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800343c:	2bc0      	cmp	r3, #192	; 0xc0
 800343e:	d028      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003440:	2bc0      	cmp	r3, #192	; 0xc0
 8003442:	d821      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d016      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d81d      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d007      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003454:	e018      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003462:	e017      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fe8c 	bl	8004188 <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003474:	e00e      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3324      	adds	r3, #36	; 0x24
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f000 ff35 	bl	80042ec <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003486:	e005      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
      break;
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800349a:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	494a      	ldr	r1, [pc, #296]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	650b      	str	r3, [r1, #80]	; 0x50
 80034ac:	e001      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d049      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c8:	d030      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80034ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ce:	d82a      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034d4:	d02c      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80034d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034da:	d824      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d81e      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80034ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f0:	d007      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80034f2:	e018      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003500:	e017      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fe3d 	bl	8004188 <RCCEx_PLL2_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003512:	e00e      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fee6 	bl	80042ec <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003524:	e005      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003546:	4922      	ldr	r1, [pc, #136]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	658b      	str	r3, [r1, #88]	; 0x58
 800354c:	e001      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355a:	2b00      	cmp	r3, #0
 800355c:	d04b      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003568:	d030      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800356a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356e:	d82a      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003570:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003574:	d02e      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800357a:	d824      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800357c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003580:	d018      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003586:	d81e      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d007      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003592:	e018      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800359a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a0:	e019      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fded 	bl	8004188 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035b2:	e010      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fe96 	bl	80042ec <RCCEx_PLL3_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035c4:	e007      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035d0:	58024400 	.word	0x58024400
      break;
 80035d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035dc:	4b99      	ldr	r3, [pc, #612]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035ea:	4996      	ldr	r1, [pc, #600]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	658b      	str	r3, [r1, #88]	; 0x58
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d032      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	2b30      	cmp	r3, #48	; 0x30
 8003608:	d01c      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800360a:	2b30      	cmp	r3, #48	; 0x30
 800360c:	d817      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d00c      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d813      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d10f      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a88      	ldr	r2, [pc, #544]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800362a:	e00e      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fda8 	bl	8004188 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800363c:	e005      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
      break;
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003650:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	4979      	ldr	r1, [pc, #484]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800365e:	4313      	orrs	r3, r2
 8003660:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d047      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367c:	d030      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800367e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003682:	d82a      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003684:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003688:	d02c      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800368a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800368e:	d824      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d018      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	d81e      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d007      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80036a6:	e018      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036b4:	e017      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd63 	bl	8004188 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fe0c 	bl	80042ec <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e002      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80036e0:	bf00      	nop
 80036e2:	e000      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80036e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036ec:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	4952      	ldr	r1, [pc, #328]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	650b      	str	r3, [r1, #80]	; 0x50
 80036fe:	e001      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d049      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d02e      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371e:	d828      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003724:	d02a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372a:	d822      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800372c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003730:	d026      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003736:	d81c      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800373c:	d010      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800373e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003742:	d816      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d111      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fd17 	bl	8004188 <RCCEx_PLL2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800375e:	e012      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3324      	adds	r3, #36	; 0x24
 8003764:	2101      	movs	r1, #1
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fdc0 	bl	80042ec <RCCEx_PLL3_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003770:	e009      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
      break;
 8003776:	e006      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003778:	bf00      	nop
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	492a      	ldr	r1, [pc, #168]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800379a:	4313      	orrs	r3, r2
 800379c:	650b      	str	r3, [r1, #80]	; 0x50
 800379e:	e001      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ba:	d02e      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80037bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c0:	d828      	bhi.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d02a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d822      	bhi.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037d2:	d026      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80037d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037d8:	d81c      	bhi.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037de:	d010      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e4:	d816      	bhi.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01d      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80037ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ee:	d111      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fcc6 	bl	8004188 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003800:	e012      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3324      	adds	r3, #36	; 0x24
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fd6f 	bl	80042ec <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
      break;
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800381a:	bf00      	nop
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10c      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800383c:	4901      	ldr	r1, [pc, #4]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800383e:	4313      	orrs	r3, r2
 8003840:	658b      	str	r3, [r1, #88]	; 0x58
 8003842:	e003      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003860:	d00e      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003866:	d814      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800386c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003870:	d10f      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003872:	4baf      	ldr	r3, [pc, #700]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4aae      	ldr	r2, [pc, #696]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800387e:	e00c      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fc7e 	bl	8004188 <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
      break;
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038a0:	4ba3      	ldr	r3, [pc, #652]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ac:	49a0      	ldr	r1, [pc, #640]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	650b      	str	r3, [r1, #80]	; 0x50
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d032      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d81b      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	080038e5 	.word	0x080038e5
 80038dc:	080038f3 	.word	0x080038f3
 80038e0:	0800390b 	.word	0x0800390b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b92      	ldr	r3, [pc, #584]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4a91      	ldr	r2, [pc, #580]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038f0:	e00c      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fc45 	bl	8004188 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003902:	e003      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
      break;
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800390a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003912:	4b87      	ldr	r3, [pc, #540]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4984      	ldr	r1, [pc, #528]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003920:	4313      	orrs	r3, r2
 8003922:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8086 	beq.w	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003944:	f7fc ff20 	bl	8000788 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800394a:	e009      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394c:	f7fc ff1c 	bl	8000788 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d902      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	75fb      	strb	r3, [r7, #23]
        break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003960:	4b74      	ldr	r3, [pc, #464]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d166      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003972:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800397c:	4053      	eors	r3, r2
 800397e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d013      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003990:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a66      	ldr	r2, [pc, #408]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800399c:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a63      	ldr	r2, [pc, #396]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039a8:	4a61      	ldr	r2, [pc, #388]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b8:	d115      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fc fee5 	bl	8000788 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c0:	e00b      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fc fee1 	bl	8000788 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d902      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	75fb      	strb	r3, [r7, #23]
            break;
 80039d8:	e005      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039da:	4b55      	ldr	r3, [pc, #340]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ed      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d126      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a0a:	0919      	lsrs	r1, r3, #4
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003a0e:	400b      	ands	r3, r1
 8003a10:	4947      	ldr	r1, [pc, #284]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	610b      	str	r3, [r1, #16]
 8003a16:	e005      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003a18:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a44      	ldr	r2, [pc, #272]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a22:	6113      	str	r3, [r2, #16]
 8003a24:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	493f      	ldr	r1, [pc, #252]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	670b      	str	r3, [r1, #112]	; 0x70
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	75bb      	strb	r3, [r7, #22]
 8003a3e:	e001      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8085 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a56:	2b28      	cmp	r3, #40	; 0x28
 8003a58:	d866      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003b3d 	.word	0x08003b3d
 8003a64:	08003b29 	.word	0x08003b29
 8003a68:	08003b29 	.word	0x08003b29
 8003a6c:	08003b29 	.word	0x08003b29
 8003a70:	08003b29 	.word	0x08003b29
 8003a74:	08003b29 	.word	0x08003b29
 8003a78:	08003b29 	.word	0x08003b29
 8003a7c:	08003b29 	.word	0x08003b29
 8003a80:	08003b05 	.word	0x08003b05
 8003a84:	08003b29 	.word	0x08003b29
 8003a88:	08003b29 	.word	0x08003b29
 8003a8c:	08003b29 	.word	0x08003b29
 8003a90:	08003b29 	.word	0x08003b29
 8003a94:	08003b29 	.word	0x08003b29
 8003a98:	08003b29 	.word	0x08003b29
 8003a9c:	08003b29 	.word	0x08003b29
 8003aa0:	08003b17 	.word	0x08003b17
 8003aa4:	08003b29 	.word	0x08003b29
 8003aa8:	08003b29 	.word	0x08003b29
 8003aac:	08003b29 	.word	0x08003b29
 8003ab0:	08003b29 	.word	0x08003b29
 8003ab4:	08003b29 	.word	0x08003b29
 8003ab8:	08003b29 	.word	0x08003b29
 8003abc:	08003b29 	.word	0x08003b29
 8003ac0:	08003b3d 	.word	0x08003b3d
 8003ac4:	08003b29 	.word	0x08003b29
 8003ac8:	08003b29 	.word	0x08003b29
 8003acc:	08003b29 	.word	0x08003b29
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b29 	.word	0x08003b29
 8003ae0:	08003b3d 	.word	0x08003b3d
 8003ae4:	08003b29 	.word	0x08003b29
 8003ae8:	08003b29 	.word	0x08003b29
 8003aec:	08003b29 	.word	0x08003b29
 8003af0:	08003b29 	.word	0x08003b29
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b29 	.word	0x08003b29
 8003afc:	08003b29 	.word	0x08003b29
 8003b00:	08003b3d 	.word	0x08003b3d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fb3c 	bl	8004188 <RCCEx_PLL2_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b14:	e013      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3324      	adds	r3, #36	; 0x24
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fbe5 	bl	80042ec <RCCEx_PLL3_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b26:	e00a      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2c:	e007      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58024800 	.word	0x58024800
 8003b38:	00ffffcf 	.word	0x00ffffcf
      break;
 8003b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b44:	4b96      	ldr	r3, [pc, #600]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b50:	4993      	ldr	r1, [pc, #588]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	654b      	str	r3, [r1, #84]	; 0x54
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d038      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d821      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003bbb 	.word	0x08003bbb
 8003b7c:	08003b91 	.word	0x08003b91
 8003b80:	08003ba3 	.word	0x08003ba3
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bbb 	.word	0x08003bbb
 8003b8c:	08003bbb 	.word	0x08003bbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 faf6 	bl	8004188 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ba0:	e00c      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3324      	adds	r3, #36	; 0x24
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fb9f 	bl	80042ec <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bb2:	e003      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bc2:	4b77      	ldr	r3, [pc, #476]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	4974      	ldr	r1, [pc, #464]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	654b      	str	r3, [r1, #84]	; 0x54
 8003bd4:	e001      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d821      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c3b 	.word	0x08003c3b
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c3b 	.word	0x08003c3b
 8003c0c:	08003c3b 	.word	0x08003c3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fab6 	bl	8004188 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c20:	e00c      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fb5f 	bl	80042ec <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c32:	e003      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c42:	4b57      	ldr	r3, [pc, #348]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	4953      	ldr	r1, [pc, #332]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	658b      	str	r3, [r1, #88]	; 0x58
 8003c56:	e001      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d04b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c72:	d02e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c78:	d828      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d02a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d822      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8a:	d026      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c90:	d81c      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c96:	d010      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9c:	d816      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01d      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa6a 	bl	8004188 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cb8:	e012      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3324      	adds	r3, #36	; 0x24
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb13 	bl	80042ec <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cca:	e009      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	e006      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce6:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf4:	492a      	ldr	r1, [pc, #168]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	654b      	str	r3, [r1, #84]	; 0x54
 8003cfa:	e001      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d04d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d16:	d02e      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d1c:	d828      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d02a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d822      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d2e:	d026      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d34:	d81c      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d816      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01d      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d111      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa18 	bl	8004188 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d5c:	e012      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	2102      	movs	r1, #2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fac1 	bl	80042ec <RCCEx_PLL3_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
      break;
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d76:	bf00      	nop
 8003d78:	e004      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d9e:	e003      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d04b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dbe:	d02e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003dc0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dc4:	d828      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d02a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d822      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003dd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dd6:	d026      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003dd8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ddc:	d81c      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de2:	d010      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de8:	d816      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01d      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d111      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f9c4 	bl	8004188 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e04:	e012      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3324      	adds	r3, #36	; 0x24
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fa6d 	bl	80042ec <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e16:	e009      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e32:	4b9d      	ldr	r3, [pc, #628]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e40:	4999      	ldr	r1, [pc, #612]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	658b      	str	r3, [r1, #88]	; 0x58
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3324      	adds	r3, #36	; 0x24
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fa3e 	bl	80042ec <RCCEx_PLL3_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e7a:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e88:	4987      	ldr	r1, [pc, #540]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d10a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fa1d 	bl	80042ec <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ebc:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eca:	4977      	ldr	r1, [pc, #476]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d034      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee6:	d01d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eec:	d817      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ef8:	e011      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f941 	bl	8004188 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f0a:	e00c      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3324      	adds	r3, #36	; 0x24
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f9ea 	bl	80042ec <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
      break;
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f3a:	495b      	ldr	r1, [pc, #364]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f40:	e001      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d033      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f5c:	d01c      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003f5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f62:	d816      	bhi.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d003      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f6e:	d007      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003f70:	e00f      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f72:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f9b0 	bl	80042ec <RCCEx_PLL3_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
      break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fae:	493e      	ldr	r1, [pc, #248]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	654b      	str	r3, [r1, #84]	; 0x54
 8003fb4:	e001      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d029      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d007      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f8cc 	bl	8004188 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	4926      	ldr	r1, [pc, #152]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004010:	4313      	orrs	r3, r2
 8004012:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004014:	e001      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f95d 	bl	80042ec <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d033      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004050:	d017      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004056:	d811      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d013      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800405e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004062:	d80b      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406c:	d106      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800407a:	e007      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004082:	bf00      	nop
 8004084:	e002      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800408a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800409e:	4902      	ldr	r1, [pc, #8]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	654b      	str	r3, [r1, #84]	; 0x54
 80040a4:	e004      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80040a6:	bf00      	nop
 80040a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	492e      	ldr	r1, [pc, #184]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040e8:	4926      	ldr	r1, [pc, #152]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004108:	4313      	orrs	r3, r2
 800410a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800411e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004122:	6113      	str	r3, [r2, #16]
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800412e:	4915      	ldr	r1, [pc, #84]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004130:	4313      	orrs	r3, r2
 8004132:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da08      	bge.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800414a:	4313      	orrs	r3, r2
 800414c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	4906      	ldr	r1, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800416a:	4313      	orrs	r3, r2
 800416c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800416e:	7dbb      	ldrb	r3, [r7, #22]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400

08004188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004196:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d101      	bne.n	80041a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e099      	b.n	80042da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041a6:	4b4f      	ldr	r3, [pc, #316]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4e      	ldr	r2, [pc, #312]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80041ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b2:	f7fc fae9 	bl	8000788 <HAL_GetTick>
 80041b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041b8:	e008      	b.n	80041cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041ba:	f7fc fae5 	bl	8000788 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e086      	b.n	80042da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041cc:	4b45      	ldr	r3, [pc, #276]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041d8:	4b42      	ldr	r3, [pc, #264]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	493f      	ldr	r1, [pc, #252]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	628b      	str	r3, [r1, #40]	; 0x28
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	025b      	lsls	r3, r3, #9
 80041fe:	b29b      	uxth	r3, r3
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	3b01      	subs	r3, #1
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	3b01      	subs	r3, #1
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800421c:	4931      	ldr	r1, [pc, #196]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	492d      	ldr	r1, [pc, #180]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f023 0220 	bic.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	4928      	ldr	r1, [pc, #160]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800424c:	f023 0310 	bic.w	r3, r3, #16
 8004250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <RCCEx_PLL2_Config+0x160>)
 8004258:	4013      	ands	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	69d2      	ldr	r2, [r2, #28]
 800425e:	00d2      	lsls	r2, r2, #3
 8004260:	4920      	ldr	r1, [pc, #128]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004266:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800427e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004284:	e00f      	b.n	80042a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d106      	bne.n	800429a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004298:	e005      	b.n	80042a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b2:	f7fc fa69 	bl	8000788 <HAL_GetTick>
 80042b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042b8:	e008      	b.n	80042cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ba:	f7fc fa65 	bl	8000788 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e006      	b.n	80042da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
 80042e8:	ffff0007 	.word	0xffff0007

080042ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042fa:	4b53      	ldr	r3, [pc, #332]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b03      	cmp	r3, #3
 8004304:	d101      	bne.n	800430a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e099      	b.n	800443e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800430a:	4b4f      	ldr	r3, [pc, #316]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4e      	ldr	r2, [pc, #312]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004316:	f7fc fa37 	bl	8000788 <HAL_GetTick>
 800431a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800431c:	e008      	b.n	8004330 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800431e:	f7fc fa33 	bl	8000788 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e086      	b.n	800443e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004330:	4b45      	ldr	r3, [pc, #276]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800433c:	4b42      	ldr	r3, [pc, #264]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	493f      	ldr	r1, [pc, #252]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	; 0x28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	3b01      	subs	r3, #1
 8004356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	025b      	lsls	r3, r3, #9
 8004362:	b29b      	uxth	r3, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	3b01      	subs	r3, #1
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004380:	4931      	ldr	r1, [pc, #196]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004386:	4b30      	ldr	r3, [pc, #192]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	492d      	ldr	r1, [pc, #180]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004394:	4313      	orrs	r3, r2
 8004396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004398:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4928      	ldr	r1, [pc, #160]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <RCCEx_PLL3_Config+0x160>)
 80043bc:	4013      	ands	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	69d2      	ldr	r2, [r2, #28]
 80043c2:	00d2      	lsls	r2, r2, #3
 80043c4:	4920      	ldr	r1, [pc, #128]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043e8:	e00f      	b.n	800440a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d106      	bne.n	80043fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 80043f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043fc:	e005      	b.n	800440a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004416:	f7fc f9b7 	bl	8000788 <HAL_GetTick>
 800441a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800441c:	e008      	b.n	8004430 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800441e:	f7fc f9b3 	bl	8000788 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <RCCEx_PLL3_Config+0x15c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	58024400 	.word	0x58024400
 800444c:	ffff0007 	.word	0xffff0007

08004450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004450:	b084      	sub	sp, #16
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	f107 001c 	add.w	r0, r7, #28
 800445e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2b01      	cmp	r3, #1
 8004466:	d120      	bne.n	80044aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <USB_CoreInit+0xd4>)
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800448c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f001 fc04 	bl	8005cac <USB_CoreReset>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e01a      	b.n	80044e0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 fbf8 	bl	8005cac <USB_CoreReset>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
 80044d2:	e005      	b.n	80044e0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d116      	bne.n	8004514 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <USB_CoreInit+0xd8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f043 0206 	orr.w	r2, r3, #6
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004520:	b004      	add	sp, #16
 8004522:	4770      	bx	lr
 8004524:	ffbdffbf 	.word	0xffbdffbf
 8004528:	03ee0000 	.word	0x03ee0000

0800452c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d165      	bne.n	800460c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4a41      	ldr	r2, [pc, #260]	; (8004648 <USB_SetTurnaroundTime+0x11c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d906      	bls.n	8004556 <USB_SetTurnaroundTime+0x2a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a40      	ldr	r2, [pc, #256]	; (800464c <USB_SetTurnaroundTime+0x120>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d202      	bcs.n	8004556 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004550:	230f      	movs	r3, #15
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	e062      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4a3c      	ldr	r2, [pc, #240]	; (800464c <USB_SetTurnaroundTime+0x120>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d306      	bcc.n	800456c <USB_SetTurnaroundTime+0x40>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <USB_SetTurnaroundTime+0x124>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d202      	bcs.n	800456c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004566:	230e      	movs	r3, #14
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e057      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4a38      	ldr	r2, [pc, #224]	; (8004650 <USB_SetTurnaroundTime+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d306      	bcc.n	8004582 <USB_SetTurnaroundTime+0x56>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a37      	ldr	r2, [pc, #220]	; (8004654 <USB_SetTurnaroundTime+0x128>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d202      	bcs.n	8004582 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800457c:	230d      	movs	r3, #13
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e04c      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4a33      	ldr	r2, [pc, #204]	; (8004654 <USB_SetTurnaroundTime+0x128>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d306      	bcc.n	8004598 <USB_SetTurnaroundTime+0x6c>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a32      	ldr	r2, [pc, #200]	; (8004658 <USB_SetTurnaroundTime+0x12c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d802      	bhi.n	8004598 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004592:	230c      	movs	r3, #12
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e041      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4a2f      	ldr	r2, [pc, #188]	; (8004658 <USB_SetTurnaroundTime+0x12c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d906      	bls.n	80045ae <USB_SetTurnaroundTime+0x82>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4a2e      	ldr	r2, [pc, #184]	; (800465c <USB_SetTurnaroundTime+0x130>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d802      	bhi.n	80045ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045a8:	230b      	movs	r3, #11
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e036      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	; (800465c <USB_SetTurnaroundTime+0x130>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d906      	bls.n	80045c4 <USB_SetTurnaroundTime+0x98>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <USB_SetTurnaroundTime+0x134>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d802      	bhi.n	80045c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045be:	230a      	movs	r3, #10
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e02b      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a26      	ldr	r2, [pc, #152]	; (8004660 <USB_SetTurnaroundTime+0x134>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d906      	bls.n	80045da <USB_SetTurnaroundTime+0xae>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a25      	ldr	r2, [pc, #148]	; (8004664 <USB_SetTurnaroundTime+0x138>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d202      	bcs.n	80045da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045d4:	2309      	movs	r3, #9
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e020      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <USB_SetTurnaroundTime+0x138>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d306      	bcc.n	80045f0 <USB_SetTurnaroundTime+0xc4>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a20      	ldr	r2, [pc, #128]	; (8004668 <USB_SetTurnaroundTime+0x13c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d802      	bhi.n	80045f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045ea:	2308      	movs	r3, #8
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e015      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <USB_SetTurnaroundTime+0x13c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d906      	bls.n	8004606 <USB_SetTurnaroundTime+0xda>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <USB_SetTurnaroundTime+0x140>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d202      	bcs.n	8004606 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004600:	2307      	movs	r3, #7
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e00a      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004606:	2306      	movs	r3, #6
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e007      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004612:	2309      	movs	r3, #9
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e001      	b.n	800461c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004618:	2309      	movs	r3, #9
 800461a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	00d8acbf 	.word	0x00d8acbf
 800464c:	00e4e1c0 	.word	0x00e4e1c0
 8004650:	00f42400 	.word	0x00f42400
 8004654:	01067380 	.word	0x01067380
 8004658:	011a499f 	.word	0x011a499f
 800465c:	01312cff 	.word	0x01312cff
 8004660:	014ca43f 	.word	0x014ca43f
 8004664:	016e3600 	.word	0x016e3600
 8004668:	01a6ab1f 	.word	0x01a6ab1f
 800466c:	01e84800 	.word	0x01e84800

08004670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d115      	bne.n	8004702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f7fc f85c 	bl	80007a0 <HAL_Delay>
      ms++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f001 fa4b 	bl	8005b8a <USB_GetMode>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d01e      	beq.n	8004738 <USB_SetCurrentMode+0x84>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b31      	cmp	r3, #49	; 0x31
 80046fe:	d9f0      	bls.n	80046e2 <USB_SetCurrentMode+0x2e>
 8004700:	e01a      	b.n	8004738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d115      	bne.n	8004734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004714:	2001      	movs	r0, #1
 8004716:	f7fc f843 	bl	80007a0 <HAL_Delay>
      ms++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fa32 	bl	8005b8a <USB_GetMode>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <USB_SetCurrentMode+0x84>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b31      	cmp	r3, #49	; 0x31
 8004730:	d9f0      	bls.n	8004714 <USB_SetCurrentMode+0x60>
 8004732:	e001      	b.n	8004738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e005      	b.n	8004744 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b32      	cmp	r3, #50	; 0x32
 800473c:	d101      	bne.n	8004742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e009      	b.n	8004780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	2200      	movs	r2, #0
 8004778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3301      	adds	r3, #1
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0e      	cmp	r3, #14
 8004784:	d9f2      	bls.n	800476c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11c      	bne.n	80047c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f043 0302 	orr.w	r3, r3, #2
 800479e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e005      	b.n	80047d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	4619      	mov	r1, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	461a      	mov	r2, r3
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047fe:	2100      	movs	r1, #0
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f965 	bl	8004ad0 <USB_SetDevSpeed>
 8004806:	e008      	b.n	800481a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004808:	2101      	movs	r1, #1
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f960 	bl	8004ad0 <USB_SetDevSpeed>
 8004810:	e003      	b.n	800481a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004812:	2103      	movs	r1, #3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f95b 	bl	8004ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800481a:	2110      	movs	r1, #16
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f8f3 	bl	8004a08 <USB_FlushTxFifo>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f91f 	bl	8004a70 <USB_FlushRxFifo>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	461a      	mov	r2, r3
 8004850:	2300      	movs	r3, #0
 8004852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	e043      	b.n	80048ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487c:	d118      	bne.n	80048b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e013      	b.n	80048c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e008      	b.n	80048c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	461a      	mov	r2, r3
 80048e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3301      	adds	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3b7      	bcc.n	8004866 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e043      	b.n	8004984 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004912:	d118      	bne.n	8004946 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	461a      	mov	r2, r3
 8004928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e013      	b.n	8004958 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e008      	b.n	8004958 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	461a      	mov	r2, r3
 8004966:	2300      	movs	r3, #0
 8004968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	461a      	mov	r2, r3
 8004978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800497c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d3b7      	bcc.n	80048fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 0210 	orr.w	r2, r3, #16
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <USB_DevInit+0x2b4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f043 0208 	orr.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <USB_DevInit+0x2b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fc:	b004      	add	sp, #16
 80049fe:	4770      	bx	lr
 8004a00:	803c3800 	.word	0x803c3800
 8004a04:	40000004 	.word	0x40000004

08004a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <USB_FlushTxFifo+0x64>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e01b      	b.n	8004a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	daf2      	bge.n	8004a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <USB_FlushTxFifo+0x64>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e006      	b.n	8004a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d0f0      	beq.n	8004a40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	00030d40 	.word	0x00030d40

08004a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <USB_FlushRxFifo+0x5c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e018      	b.n	8004ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	daf2      	bge.n	8004a7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <USB_FlushRxFifo+0x5c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e006      	b.n	8004ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	2b10      	cmp	r3, #16
 8004abc:	d0f0      	beq.n	8004aa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	00030d40 	.word	0x00030d40

08004ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b087      	sub	sp, #28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
 8004b26:	e00a      	b.n	8004b3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d002      	beq.n	8004b34 <USB_GetDevSpeed+0x32>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d102      	bne.n	8004b3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b34:	2302      	movs	r3, #2
 8004b36:	75fb      	strb	r3, [r7, #23]
 8004b38:	e001      	b.n	8004b3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b3a:	230f      	movs	r3, #15
 8004b3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d139      	bne.n	8004bdc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	68f9      	ldr	r1, [r7, #12]
 8004b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d153      	bne.n	8004c48 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	791b      	ldrb	r3, [r3, #4]
 8004bba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	059b      	lsls	r3, r3, #22
 8004bc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	0159      	lsls	r1, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	440b      	add	r3, r1
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <USB_ActivateEndpoint+0x10c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
 8004bda:	e035      	b.n	8004c48 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d119      	bne.n	8004c48 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c30:	430b      	orrs	r3, r1
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	4619      	mov	r1, r3
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <USB_ActivateEndpoint+0x10c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	10008000 	.word	0x10008000

08004c5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d161      	bne.n	8004d3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8e:	d11f      	bne.n	8004cd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	2101      	movs	r1, #1
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d14:	4013      	ands	r3, r2
 8004d16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0159      	lsls	r1, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	4619      	mov	r1, r3
 8004d34:	4b35      	ldr	r3, [pc, #212]	; (8004e0c <USB_DeactivateEndpoint+0x1b0>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]
 8004d3a:	e060      	b.n	8004dfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d52:	d11f      	bne.n	8004d94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	43db      	mvns	r3, r3
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db4:	4013      	ands	r3, r2
 8004db6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	2101      	movs	r1, #1
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	0159      	lsls	r1, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	440b      	add	r3, r1
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	4619      	mov	r1, r3
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <USB_DeactivateEndpoint+0x1b4>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	ec337800 	.word	0xec337800
 8004e10:	eff37800 	.word	0xeff37800

08004e14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 8163 	bne.w	80050fc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d132      	bne.n	8004ea4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	0159      	lsls	r1, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	440b      	add	r3, r1
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4ba5      	ldr	r3, [pc, #660]	; (80050f0 <USB_EPStartXfer+0x2dc>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	0159      	lsls	r1, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4b95      	ldr	r3, [pc, #596]	; (80050f4 <USB_EPStartXfer+0x2e0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	610b      	str	r3, [r1, #16]
 8004ea2:	e074      	b.n	8004f8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	0159      	lsls	r1, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	440b      	add	r3, r1
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4b8c      	ldr	r3, [pc, #560]	; (80050f4 <USB_EPStartXfer+0x2e0>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	0159      	lsls	r1, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <USB_EPStartXfer+0x2dc>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	440b      	add	r3, r1
 8004f00:	1e59      	subs	r1, r3, #1
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f0c:	4b7a      	ldr	r3, [pc, #488]	; (80050f8 <USB_EPStartXfer+0x2e4>)
 8004f0e:	400b      	ands	r3, r1
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	0148      	lsls	r0, r1, #5
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	4401      	add	r1, r0
 8004f18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	0148      	lsls	r0, r1, #5
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	4401      	add	r1, r0
 8004f3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	791b      	ldrb	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d11f      	bne.n	8004f8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d14b      	bne.n	800502c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d128      	bne.n	800500a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e00f      	b.n	800500a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005008:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e137      	b.n	800529c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800504a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d015      	beq.n	8005080 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 811f 	beq.w	800529c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	2101      	movs	r1, #1
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	69f9      	ldr	r1, [r7, #28]
 8005076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507a:	4313      	orrs	r3, r2
 800507c:	634b      	str	r3, [r1, #52]	; 0x34
 800507e:	e10d      	b.n	800529c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e00f      	b.n	80050d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6919      	ldr	r1, [r3, #16]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	b298      	uxth	r0, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 faea 	bl	80056c0 <USB_WritePacket>
 80050ec:	e0d6      	b.n	800529c <USB_EPStartXfer+0x488>
 80050ee:	bf00      	nop
 80050f0:	e007ffff 	.word	0xe007ffff
 80050f4:	fff80000 	.word	0xfff80000
 80050f8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	0159      	lsls	r1, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	440b      	add	r3, r1
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	4619      	mov	r1, r3
 8005118:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <USB_EPStartXfer+0x494>)
 800511a:	4013      	ands	r3, r2
 800511c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	0159      	lsls	r1, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	440b      	add	r3, r1
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	4619      	mov	r1, r3
 800513a:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <USB_EPStartXfer+0x498>)
 800513c:	4013      	ands	r3, r2
 800513e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d123      	bne.n	8005190 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515e:	69b9      	ldr	r1, [r7, #24]
 8005160:	0148      	lsls	r0, r1, #5
 8005162:	69f9      	ldr	r1, [r7, #28]
 8005164:	4401      	add	r1, r0
 8005166:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800516a:	4313      	orrs	r3, r2
 800516c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518c:	6113      	str	r3, [r2, #16]
 800518e:	e037      	b.n	8005200 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4413      	add	r3, r2
 800519a:	1e5a      	subs	r2, r3, #1
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	8afa      	ldrh	r2, [r7, #22]
 80051ac:	fb03 f202 	mul.w	r2, r3, r2
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	8afb      	ldrh	r3, [r7, #22]
 80051c4:	04d9      	lsls	r1, r3, #19
 80051c6:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <USB_EPStartXfer+0x49c>)
 80051c8:	400b      	ands	r3, r1
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	0148      	lsls	r0, r1, #5
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	4401      	add	r1, r0
 80051d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051d6:	4313      	orrs	r3, r2
 80051d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f0:	69b9      	ldr	r1, [r7, #24]
 80051f2:	0148      	lsls	r0, r1, #5
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	4401      	add	r1, r0
 80051f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10d      	bne.n	8005222 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	460a      	mov	r2, r1
 8005220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d128      	bne.n	800527c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d110      	bne.n	800525c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e00f      	b.n	800527c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	fff80000 	.word	0xfff80000
 80052ac:	e007ffff 	.word	0xe007ffff
 80052b0:	1ff80000 	.word	0x1ff80000

080052b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	f040 80ce 	bne.w	8005472 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d132      	bne.n	8005344 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	0159      	lsls	r1, r3, #5
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	440b      	add	r3, r1
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	4619      	mov	r1, r3
 80052fa:	4b9a      	ldr	r3, [pc, #616]	; (8005564 <USB_EP0StartXfer+0x2b0>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	440b      	add	r3, r1
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	4619      	mov	r1, r3
 800533c:	4b8a      	ldr	r3, [pc, #552]	; (8005568 <USB_EP0StartXfer+0x2b4>)
 800533e:	4013      	ands	r3, r2
 8005340:	610b      	str	r3, [r1, #16]
 8005342:	e04e      	b.n	80053e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	0159      	lsls	r1, r3, #5
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	440b      	add	r3, r1
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	4619      	mov	r1, r3
 8005360:	4b81      	ldr	r3, [pc, #516]	; (8005568 <USB_EP0StartXfer+0x2b4>)
 8005362:	4013      	ands	r3, r2
 8005364:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	0159      	lsls	r1, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	440b      	add	r3, r1
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	4619      	mov	r1, r3
 8005382:	4b78      	ldr	r3, [pc, #480]	; (8005564 <USB_EP0StartXfer+0x2b0>)
 8005384:	4013      	ands	r3, r2
 8005386:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	0148      	lsls	r0, r1, #5
 80053d6:	6979      	ldr	r1, [r7, #20]
 80053d8:	4401      	add	r1, r0
 80053da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d11e      	bne.n	8005426 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e097      	b.n	8005556 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005444:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8083 	beq.w	8005556 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f303 	lsl.w	r3, r1, r3
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546c:	4313      	orrs	r3, r2
 800546e:	634b      	str	r3, [r1, #52]	; 0x34
 8005470:	e071      	b.n	8005556 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	0159      	lsls	r1, r3, #5
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	440b      	add	r3, r1
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	4619      	mov	r1, r3
 800548e:	4b36      	ldr	r3, [pc, #216]	; (8005568 <USB_EP0StartXfer+0x2b4>)
 8005490:	4013      	ands	r3, r2
 8005492:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	0159      	lsls	r1, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	440b      	add	r3, r1
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	4619      	mov	r1, r3
 80054b0:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <USB_EP0StartXfer+0x2b0>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005504:	6939      	ldr	r1, [r7, #16]
 8005506:	0148      	lsls	r0, r1, #5
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	4401      	add	r1, r0
 800550c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005510:	4313      	orrs	r3, r2
 8005512:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10d      	bne.n	8005536 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6919      	ldr	r1, [r3, #16]
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	460a      	mov	r2, r1
 8005534:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005554:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e007ffff 	.word	0xe007ffff
 8005568:	fff80000 	.word	0xfff80000

0800556c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d14a      	bne.n	8005620 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a2:	f040 8086 	bne.w	80056b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d902      	bls.n	8005604 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	75fb      	strb	r3, [r7, #23]
          break;
 8005602:	e056      	b.n	80056b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d0e7      	beq.n	80055ee <USB_EPStopXfer+0x82>
 800561e:	e048      	b.n	80056b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005638:	d13b      	bne.n	80056b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005658:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800565c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005680:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f242 7210 	movw	r2, #10000	; 0x2710
 800568e:	4293      	cmp	r3, r2
 8005690:	d902      	bls.n	8005698 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
          break;
 8005696:	e00c      	b.n	80056b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b0:	d0e7      	beq.n	8005682 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b089      	sub	sp, #36	; 0x24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	71fb      	strb	r3, [r7, #7]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d123      	bne.n	800572e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056e6:	88bb      	ldrh	r3, [r7, #4]
 80056e8:	3303      	adds	r3, #3
 80056ea:	089b      	lsrs	r3, r3, #2
 80056ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e018      	b.n	8005726 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	031a      	lsls	r2, r3, #12
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005700:	461a      	mov	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3301      	adds	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	3301      	adds	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	3301      	adds	r3, #1
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d3e2      	bcc.n	80056f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3724      	adds	r7, #36	; 0x24
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800573c:	b480      	push	{r7}
 800573e:	b08b      	sub	sp, #44	; 0x2c
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	089b      	lsrs	r3, r3, #2
 8005756:	b29b      	uxth	r3, r3
 8005758:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	e014      	b.n	8005792 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	601a      	str	r2, [r3, #0]
    pDest++;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	3301      	adds	r3, #1
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	3301      	adds	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	3301      	adds	r3, #1
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3e6      	bcc.n	8005768 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800579a:	8bfb      	ldrh	r3, [r7, #30]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01e      	beq.n	80057de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	461a      	mov	r2, r3
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	701a      	strb	r2, [r3, #0]
      i++;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	3301      	adds	r3, #1
 80057ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	3301      	adds	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057d2:	8bfb      	ldrh	r3, [r7, #30]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057d8:	8bfb      	ldrh	r3, [r7, #30]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ea      	bne.n	80057b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	372c      	adds	r7, #44	; 0x2c
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d12c      	bne.n	8005862 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	db12      	blt.n	8005840 <USB_EPSetStall+0x54>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00f      	beq.n	8005840 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800583e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e02b      	b.n	80058ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	db12      	blt.n	800589a <USB_EPSetStall+0xae>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005898:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d128      	bne.n	8005936 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005902:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	791b      	ldrb	r3, [r3, #4]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d003      	beq.n	8005914 <USB_EPClearStall+0x4c>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d138      	bne.n	8005986 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e027      	b.n	8005986 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005954:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	791b      	ldrb	r3, [r3, #4]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d003      	beq.n	8005966 <USB_EPClearStall+0x9e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d10f      	bne.n	8005986 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059c8:	68f9      	ldr	r1, [r7, #12]
 80059ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a0e:	f023 0302 	bic.w	r3, r3, #2
 8005a12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a3c:	f023 0303 	bic.w	r3, r3, #3
 8005a40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0c1b      	lsrs	r3, r3, #16
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	b29b      	uxth	r3, r3
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b20:	68bb      	ldr	r3, [r7, #8]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b087      	sub	sp, #28
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	01db      	lsls	r3, r3, #7
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0301 	and.w	r3, r3, #1
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <USB_ActivateSetup+0x44>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	fffff800 	.word	0xfffff800

08005bf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	333c      	adds	r3, #60	; 0x3c
 8005c06:	3304      	adds	r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <USB_EP0_OutStart+0xb8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d90a      	bls.n	8005c2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c24:	d101      	bne.n	8005c2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e037      	b.n	8005c9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f043 0318 	orr.w	r3, r3, #24
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10f      	bne.n	8005c98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	4f54300a 	.word	0x4f54300a

08005cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <USB_CoreReset+0x64>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e01b      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	daf2      	bge.n	8005cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <USB_CoreReset+0x64>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d0f0      	beq.n	8005ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	00030d40 	.word	0x00030d40

08005d14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d24:	f002 fe5e 	bl	80089e4 <USBD_static_malloc>
 8005d28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	32b0      	adds	r2, #176	; 0xb0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0d4      	b.n	8005eee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d48:	2100      	movs	r1, #0
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f002 feb2 	bl	8008ab4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32b0      	adds	r2, #176	; 0xb0
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	32b0      	adds	r2, #176	; 0xb0
 8005d6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7c1b      	ldrb	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d138      	bne.n	8005dee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d7c:	4b5e      	ldr	r3, [pc, #376]	; (8005ef8 <USBD_CDC_Init+0x1e4>)
 8005d7e:	7819      	ldrb	r1, [r3, #0]
 8005d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d84:	2202      	movs	r2, #2
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f002 fd09 	bl	800879e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d8c:	4b5a      	ldr	r3, [pc, #360]	; (8005ef8 <USBD_CDC_Init+0x1e4>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 020f 	and.w	r2, r3, #15
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	3324      	adds	r3, #36	; 0x24
 8005da2:	2201      	movs	r2, #1
 8005da4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005da6:	4b55      	ldr	r3, [pc, #340]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005da8:	7819      	ldrb	r1, [r3, #0]
 8005daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dae:	2202      	movs	r2, #2
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f002 fcf4 	bl	800879e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005db6:	4b51      	ldr	r3, [pc, #324]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f003 020f 	and.w	r2, r3, #15
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dce:	2201      	movs	r2, #1
 8005dd0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dd2:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <USBD_CDC_Init+0x1ec>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	3326      	adds	r3, #38	; 0x26
 8005de8:	2210      	movs	r2, #16
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e035      	b.n	8005e5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dee:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <USBD_CDC_Init+0x1e4>)
 8005df0:	7819      	ldrb	r1, [r3, #0]
 8005df2:	2340      	movs	r3, #64	; 0x40
 8005df4:	2202      	movs	r2, #2
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 fcd1 	bl	800879e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <USBD_CDC_Init+0x1e4>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 020f 	and.w	r2, r3, #15
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3324      	adds	r3, #36	; 0x24
 8005e12:	2201      	movs	r2, #1
 8005e14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e16:	4b39      	ldr	r3, [pc, #228]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005e18:	7819      	ldrb	r1, [r3, #0]
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 fcbd 	bl	800879e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e24:	4b35      	ldr	r3, [pc, #212]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e40:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <USBD_CDC_Init+0x1ec>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f003 020f 	and.w	r2, r3, #15
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	3326      	adds	r3, #38	; 0x26
 8005e56:	2210      	movs	r2, #16
 8005e58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e5a:	4b29      	ldr	r3, [pc, #164]	; (8005f00 <USBD_CDC_Init+0x1ec>)
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	2308      	movs	r3, #8
 8005e60:	2203      	movs	r2, #3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f002 fc9b 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <USBD_CDC_Init+0x1ec>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3324      	adds	r3, #36	; 0x24
 8005e7e:	2201      	movs	r2, #1
 8005e80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	33b0      	adds	r3, #176	; 0xb0
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e018      	b.n	8005eee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	7c1b      	ldrb	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005ec6:	7819      	ldrb	r1, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fd52 	bl	800897c <USBD_LL_PrepareReceive>
 8005ed8:	e008      	b.n	8005eec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <USBD_CDC_Init+0x1e8>)
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 fd48 	bl	800897c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	24000097 	.word	0x24000097
 8005efc:	24000098 	.word	0x24000098
 8005f00:	24000099 	.word	0x24000099

08005f04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f10:	4b3a      	ldr	r3, [pc, #232]	; (8005ffc <USBD_CDC_DeInit+0xf8>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 fc67 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f1c:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <USBD_CDC_DeInit+0xf8>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f003 020f 	and.w	r2, r3, #15
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	2200      	movs	r2, #0
 8005f34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f36:	4b32      	ldr	r3, [pc, #200]	; (8006000 <USBD_CDC_DeInit+0xfc>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 fc54 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f42:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <USBD_CDC_DeInit+0xfc>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	f003 020f 	and.w	r2, r3, #15
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f5e:	4b29      	ldr	r3, [pc, #164]	; (8006004 <USBD_CDC_DeInit+0x100>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f002 fc40 	bl	80087ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <USBD_CDC_DeInit+0x100>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3324      	adds	r3, #36	; 0x24
 8005f80:	2200      	movs	r2, #0
 8005f82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <USBD_CDC_DeInit+0x100>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3326      	adds	r3, #38	; 0x26
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	32b0      	adds	r2, #176	; 0xb0
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01f      	beq.n	8005ff0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	33b0      	adds	r3, #176	; 0xb0
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32b0      	adds	r2, #176	; 0xb0
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 fd14 	bl	8008a00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32b0      	adds	r2, #176	; 0xb0
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	24000097 	.word	0x24000097
 8006000:	24000098 	.word	0x24000098
 8006004:	24000099 	.word	0x24000099

08006008 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	32b0      	adds	r2, #176	; 0xb0
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006034:	2303      	movs	r3, #3
 8006036:	e0bf      	b.n	80061b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006040:	2b00      	cmp	r3, #0
 8006042:	d050      	beq.n	80060e6 <USBD_CDC_Setup+0xde>
 8006044:	2b20      	cmp	r3, #32
 8006046:	f040 80af 	bne.w	80061a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	88db      	ldrh	r3, [r3, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d03a      	beq.n	80060c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b25b      	sxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	da1b      	bge.n	8006094 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	33b0      	adds	r3, #176	; 0xb0
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006072:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	88d2      	ldrh	r2, [r2, #6]
 8006078:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88db      	ldrh	r3, [r3, #6]
 800607e:	2b07      	cmp	r3, #7
 8006080:	bf28      	it	cs
 8006082:	2307      	movcs	r3, #7
 8006084:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	89fa      	ldrh	r2, [r7, #14]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fd89 	bl	8007ba4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006092:	e090      	b.n	80061b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785a      	ldrb	r2, [r3, #1]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88db      	ldrh	r3, [r3, #6]
 80060a2:	2b3f      	cmp	r3, #63	; 0x3f
 80060a4:	d803      	bhi.n	80060ae <USBD_CDC_Setup+0xa6>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	88db      	ldrh	r3, [r3, #6]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	e000      	b.n	80060b0 <USBD_CDC_Setup+0xa8>
 80060ae:	2240      	movs	r2, #64	; 0x40
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060b6:	6939      	ldr	r1, [r7, #16]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060be:	461a      	mov	r2, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fd9b 	bl	8007bfc <USBD_CtlPrepareRx>
      break;
 80060c6:	e076      	b.n	80061b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	33b0      	adds	r3, #176	; 0xb0
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	7850      	ldrb	r0, [r2, #1]
 80060de:	2200      	movs	r2, #0
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4798      	blx	r3
      break;
 80060e4:	e067      	b.n	80061b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b0b      	cmp	r3, #11
 80060ec:	d851      	bhi.n	8006192 <USBD_CDC_Setup+0x18a>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBD_CDC_Setup+0xec>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006125 	.word	0x08006125
 80060f8:	080061a1 	.word	0x080061a1
 80060fc:	08006193 	.word	0x08006193
 8006100:	08006193 	.word	0x08006193
 8006104:	08006193 	.word	0x08006193
 8006108:	08006193 	.word	0x08006193
 800610c:	08006193 	.word	0x08006193
 8006110:	08006193 	.word	0x08006193
 8006114:	08006193 	.word	0x08006193
 8006118:	08006193 	.word	0x08006193
 800611c:	0800614f 	.word	0x0800614f
 8006120:	08006179 	.word	0x08006179
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b03      	cmp	r3, #3
 800612e:	d107      	bne.n	8006140 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006130:	f107 030a 	add.w	r3, r7, #10
 8006134:	2202      	movs	r2, #2
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fd33 	bl	8007ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800613e:	e032      	b.n	80061a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fcbd 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006148:	2303      	movs	r3, #3
 800614a:	75fb      	strb	r3, [r7, #23]
          break;
 800614c:	e02b      	b.n	80061a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b03      	cmp	r3, #3
 8006158:	d107      	bne.n	800616a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800615a:	f107 030d 	add.w	r3, r7, #13
 800615e:	2201      	movs	r2, #1
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fd1e 	bl	8007ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006168:	e01d      	b.n	80061a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fca8 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006172:	2303      	movs	r3, #3
 8006174:	75fb      	strb	r3, [r7, #23]
          break;
 8006176:	e016      	b.n	80061a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b03      	cmp	r3, #3
 8006182:	d00f      	beq.n	80061a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fc9b 	bl	8007ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800618c:	2303      	movs	r3, #3
 800618e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006190:	e008      	b.n	80061a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fc94 	bl	8007ac2 <USBD_CtlError>
          ret = USBD_FAIL;
 800619a:	2303      	movs	r3, #3
 800619c:	75fb      	strb	r3, [r7, #23]
          break;
 800619e:	e002      	b.n	80061a6 <USBD_CDC_Setup+0x19e>
          break;
 80061a0:	bf00      	nop
 80061a2:	e008      	b.n	80061b6 <USBD_CDC_Setup+0x1ae>
          break;
 80061a4:	bf00      	nop
      }
      break;
 80061a6:	e006      	b.n	80061b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fc89 	bl	8007ac2 <USBD_CtlError>
      ret = USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
      break;
 80061b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32b0      	adds	r2, #176	; 0xb0
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e065      	b.n	80062b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	32b0      	adds	r2, #176	; 0xb0
 80061f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3318      	adds	r3, #24
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02f      	beq.n	8006274 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	3318      	adds	r3, #24
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 010f 	and.w	r1, r3, #15
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	460b      	mov	r3, r1
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4403      	add	r3, r0
 800623c:	3348      	adds	r3, #72	; 0x48
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	fbb2 f1f3 	udiv	r1, r2, r3
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	d112      	bne.n	8006274 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	3318      	adds	r3, #24
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006266:	78f9      	ldrb	r1, [r7, #3]
 8006268:	2300      	movs	r3, #0
 800626a:	2200      	movs	r2, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 fb64 	bl	800893a <USBD_LL_Transmit>
 8006272:	e01f      	b.n	80062b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	33b0      	adds	r3, #176	; 0xb0
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	33b0      	adds	r3, #176	; 0xb0
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	32b0      	adds	r2, #176	; 0xb0
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	; 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e01a      	b.n	8006326 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 fb62 	bl	80089be <USBD_LL_GetRxDataSize>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	33b0      	adds	r3, #176	; 0xb0
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006320:	4611      	mov	r1, r2
 8006322:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32b0      	adds	r2, #176	; 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e025      	b.n	800639c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	33b0      	adds	r3, #176	; 0xb0
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01a      	beq.n	800639a <USBD_CDC_EP0_RxReady+0x6c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800636a:	2bff      	cmp	r3, #255	; 0xff
 800636c:	d015      	beq.n	800639a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	33b0      	adds	r3, #176	; 0xb0
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006386:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800638e:	b292      	uxth	r2, r2
 8006390:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	22ff      	movs	r2, #255	; 0xff
 8006396:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063ac:	2182      	movs	r1, #130	; 0x82
 80063ae:	4818      	ldr	r0, [pc, #96]	; (8006410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063b0:	f000 fd4f 	bl	8006e52 <USBD_GetEpDesc>
 80063b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063b6:	2101      	movs	r1, #1
 80063b8:	4815      	ldr	r0, [pc, #84]	; (8006410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063ba:	f000 fd4a 	bl	8006e52 <USBD_GetEpDesc>
 80063be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063c0:	2181      	movs	r1, #129	; 0x81
 80063c2:	4813      	ldr	r0, [pc, #76]	; (8006410 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063c4:	f000 fd45 	bl	8006e52 <USBD_GetEpDesc>
 80063c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2210      	movs	r2, #16
 80063d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2200      	movs	r2, #0
 80063e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e4:	711a      	strb	r2, [r3, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f8:	711a      	strb	r2, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2243      	movs	r2, #67	; 0x43
 8006402:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	24000054 	.word	0x24000054

08006414 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800641c:	2182      	movs	r1, #130	; 0x82
 800641e:	4818      	ldr	r0, [pc, #96]	; (8006480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006420:	f000 fd17 	bl	8006e52 <USBD_GetEpDesc>
 8006424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006426:	2101      	movs	r1, #1
 8006428:	4815      	ldr	r0, [pc, #84]	; (8006480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800642a:	f000 fd12 	bl	8006e52 <USBD_GetEpDesc>
 800642e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006430:	2181      	movs	r1, #129	; 0x81
 8006432:	4813      	ldr	r0, [pc, #76]	; (8006480 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006434:	f000 fd0d 	bl	8006e52 <USBD_GetEpDesc>
 8006438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2210      	movs	r2, #16
 8006444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2200      	movs	r2, #0
 8006450:	711a      	strb	r2, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f042 0202 	orr.w	r2, r2, #2
 8006458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	711a      	strb	r2, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f042 0202 	orr.w	r2, r2, #2
 800646c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2243      	movs	r2, #67	; 0x43
 8006472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	24000054 	.word	0x24000054

08006484 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800648c:	2182      	movs	r1, #130	; 0x82
 800648e:	4818      	ldr	r0, [pc, #96]	; (80064f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006490:	f000 fcdf 	bl	8006e52 <USBD_GetEpDesc>
 8006494:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006496:	2101      	movs	r1, #1
 8006498:	4815      	ldr	r0, [pc, #84]	; (80064f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800649a:	f000 fcda 	bl	8006e52 <USBD_GetEpDesc>
 800649e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064a0:	2181      	movs	r1, #129	; 0x81
 80064a2:	4813      	ldr	r0, [pc, #76]	; (80064f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064a4:	f000 fcd5 	bl	8006e52 <USBD_GetEpDesc>
 80064a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2210      	movs	r2, #16
 80064b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2200      	movs	r2, #0
 80064c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c4:	711a      	strb	r2, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d8:	711a      	strb	r2, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2243      	movs	r2, #67	; 0x43
 80064e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	24000054 	.word	0x24000054

080064f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	220a      	movs	r2, #10
 8006500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006502:	4b03      	ldr	r3, [pc, #12]	; (8006510 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	24000010 	.word	0x24000010

08006514 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	e009      	b.n	800653c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	33b0      	adds	r3, #176	; 0xb0
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	32b0      	adds	r2, #176	; 0xb0
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800656a:	2303      	movs	r3, #3
 800656c:	e008      	b.n	8006580 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	32b0      	adds	r2, #176	; 0xb0
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e004      	b.n	80065ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	; 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065e0:	2301      	movs	r3, #1
 80065e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e025      	b.n	8006646 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11f      	bne.n	8006644 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2201      	movs	r2, #1
 8006608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800660c:	4b10      	ldr	r3, [pc, #64]	; (8006650 <USBD_CDC_TransmitPacket+0x88>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 020f 	and.w	r2, r3, #15
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4403      	add	r3, r0
 8006626:	3318      	adds	r3, #24
 8006628:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <USBD_CDC_TransmitPacket+0x88>)
 800662c:	7819      	ldrb	r1, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f002 f97d 	bl	800893a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	24000097 	.word	0x24000097

08006654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	32b0      	adds	r2, #176	; 0xb0
 8006666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32b0      	adds	r2, #176	; 0xb0
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e018      	b.n	80066b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7c1b      	ldrb	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <USBD_CDC_ReceivePacket+0x68>)
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 f96f 	bl	800897c <USBD_LL_PrepareReceive>
 800669e:	e008      	b.n	80066b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <USBD_CDC_ReceivePacket+0x68>)
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f002 f965 	bl	800897c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	24000098 	.word	0x24000098

080066c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01f      	b.n	8006718 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	79fa      	ldrb	r2, [r7, #7]
 800670a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f001 ffdb 	bl	80086c8 <USBD_LL_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006734:	2303      	movs	r3, #3
 8006736:	e025      	b.n	8006784 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32ae      	adds	r2, #174	; 0xae
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00f      	beq.n	8006774 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32ae      	adds	r2, #174	; 0xae
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	f107 020e 	add.w	r2, r7, #14
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 ffe7 	bl	8008768 <USBD_LL_Start>
 800679a:	4603      	mov	r3, r0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	4611      	mov	r1, r2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	4611      	mov	r1, r2
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f908 	bl	8007a4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b02      	cmp	r3, #2
 8006860:	d01a      	beq.n	8006898 <USBD_LL_SetupStage+0x72>
 8006862:	2b02      	cmp	r3, #2
 8006864:	d822      	bhi.n	80068ac <USBD_LL_SetupStage+0x86>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <USBD_LL_SetupStage+0x4a>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d00a      	beq.n	8006884 <USBD_LL_SetupStage+0x5e>
 800686e:	e01d      	b.n	80068ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb5f 	bl	8006f3c <USBD_StdDevReq>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e020      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fbc7 	bl	8007020 <USBD_StdItfReq>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
      break;
 8006896:	e016      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc29 	bl	80070f8 <USBD_StdEPReq>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
      break;
 80068aa:	e00c      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 ffb4 	bl	8008828 <USBD_LL_StallEP>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	bf00      	nop
  }

  return ret;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	460b      	mov	r3, r1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d16e      	bne.n	80069c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	f040 8098 	bne.w	8006a2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d913      	bls.n	8006930 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4293      	cmp	r3, r2
 8006920:	bf28      	it	cs
 8006922:	4613      	movcs	r3, r2
 8006924:	461a      	mov	r2, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 f984 	bl	8007c36 <USBD_CtlContinueRx>
 800692e:	e07d      	b.n	8006a2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b02      	cmp	r3, #2
 800693c:	d014      	beq.n	8006968 <USBD_LL_DataOutStage+0x98>
 800693e:	2b02      	cmp	r3, #2
 8006940:	d81d      	bhi.n	800697e <USBD_LL_DataOutStage+0xae>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <USBD_LL_DataOutStage+0x7c>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d003      	beq.n	8006952 <USBD_LL_DataOutStage+0x82>
 800694a:	e018      	b.n	800697e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	75bb      	strb	r3, [r7, #22]
            break;
 8006950:	e018      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa5e 	bl	8006e1e <USBD_CoreFindIF>
 8006962:	4603      	mov	r3, r0
 8006964:	75bb      	strb	r3, [r7, #22]
            break;
 8006966:	e00d      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fa60 	bl	8006e38 <USBD_CoreFindEP>
 8006978:	4603      	mov	r3, r0
 800697a:	75bb      	strb	r3, [r7, #22]
            break;
 800697c:	e002      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	75bb      	strb	r3, [r7, #22]
            break;
 8006982:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006984:	7dbb      	ldrb	r3, [r7, #22]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d119      	bne.n	80069be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b03      	cmp	r3, #3
 8006994:	d113      	bne.n	80069be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006996:	7dba      	ldrb	r2, [r7, #22]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	32ae      	adds	r2, #174	; 0xae
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069a6:	7dba      	ldrb	r2, [r7, #22]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069ae:	7dba      	ldrb	r2, [r7, #22]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	32ae      	adds	r2, #174	; 0xae
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 f94a 	bl	8007c58 <USBD_CtlSendStatus>
 80069c4:	e032      	b.n	8006a2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fa31 	bl	8006e38 <USBD_CoreFindEP>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069da:	7dbb      	ldrb	r3, [r7, #22]
 80069dc:	2bff      	cmp	r3, #255	; 0xff
 80069de:	d025      	beq.n	8006a2c <USBD_LL_DataOutStage+0x15c>
 80069e0:	7dbb      	ldrb	r3, [r7, #22]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d122      	bne.n	8006a2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d117      	bne.n	8006a22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00f      	beq.n	8006a22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a0a:	7dba      	ldrb	r2, [r7, #22]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	32ae      	adds	r2, #174	; 0xae
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	7afa      	ldrb	r2, [r7, #11]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	4798      	blx	r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	e000      	b.n	8006a2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d16f      	bne.n	8006b2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d15a      	bne.n	8006b10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d914      	bls.n	8006a90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 f8ac 	bl	8007bda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f001 ff77 	bl	800897c <USBD_LL_PrepareReceive>
 8006a8e:	e03f      	b.n	8006b10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d11c      	bne.n	8006ad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d316      	bcc.n	8006ad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d20f      	bcs.n	8006ad6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f001 f88d 	bl	8007bda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f001 ff54 	bl	800897c <USBD_LL_PrepareReceive>
 8006ad4:	e01c      	b.n	8006b10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d10f      	bne.n	8006b02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b02:	2180      	movs	r1, #128	; 0x80
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fe8f 	bl	8008828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 f8b7 	bl	8007c7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03a      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fe42 	bl	80067a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b28:	e032      	b.n	8006b90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f97f 	bl	8006e38 <USBD_CoreFindEP>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	2bff      	cmp	r3, #255	; 0xff
 8006b42:	d025      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d122      	bne.n	8006b90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d11c      	bne.n	8006b90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b56:	7dfa      	ldrb	r2, [r7, #23]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	32ae      	adds	r2, #174	; 0xae
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d014      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b66:	7dfa      	ldrb	r2, [r7, #23]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b6e:	7dfa      	ldrb	r2, [r7, #23]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	; 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	7afa      	ldrb	r2, [r7, #11]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	e000      	b.n	8006b92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6852      	ldr	r2, [r2, #4]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fdc9 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fdbb 	bl	800879e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	621a      	str	r2, [r3, #32]

  return ret;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2204      	movs	r2, #4
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d106      	bne.n	8006cac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d110      	bne.n	8006cf0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32ae      	adds	r2, #174	; 0xae
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01c      	b.n	8006d56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d115      	bne.n	8006d54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	4611      	mov	r1, r2
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32ae      	adds	r2, #174	; 0xae
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01c      	b.n	8006dba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d115      	bne.n	8006db8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32ae      	adds	r2, #174	; 0xae
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	; 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6852      	ldr	r2, [r2, #4]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	4611      	mov	r1, r2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d920      	bls.n	8006ebc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e82:	e013      	b.n	8006eac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e84:	f107 030a 	add.w	r3, r7, #10
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f000 f81b 	bl	8006ec6 <USBD_GetNextDesc>
 8006e90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d108      	bne.n	8006eac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	789b      	ldrb	r3, [r3, #2]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d008      	beq.n	8006eba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d8e5      	bhi.n	8006e84 <USBD_GetEpDesc+0x32>
 8006eb8:	e000      	b.n	8006ebc <USBD_GetEpDesc+0x6a>
          break;
 8006eba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ebc:	693b      	ldr	r3, [r7, #16]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	3301      	adds	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f1e:	8a3b      	ldrh	r3, [r7, #16]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	b21a      	sxth	r2, r3
 8006f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d005      	beq.n	8006f62 <USBD_StdDevReq+0x26>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d857      	bhi.n	800700a <USBD_StdDevReq+0xce>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00f      	beq.n	8006f7e <USBD_StdDevReq+0x42>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d153      	bne.n	800700a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32ae      	adds	r2, #174	; 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7c:	e04a      	b.n	8007014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d83b      	bhi.n	8006ffe <USBD_StdDevReq+0xc2>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBD_StdDevReq+0x50>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006fff 	.word	0x08006fff
 8006f98:	08006feb 	.word	0x08006feb
 8006f9c:	08006fff 	.word	0x08006fff
 8006fa0:	08006fbf 	.word	0x08006fbf
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fff 	.word	0x08006fff
 8006fac:	08006fd7 	.word	0x08006fd7
 8006fb0:	08006fc9 	.word	0x08006fc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa3c 	bl	8007434 <USBD_GetDescriptor>
          break;
 8006fbc:	e024      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fba1 	bl	8007708 <USBD_SetAddress>
          break;
 8006fc6:	e01f      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fbe0 	bl	8007790 <USBD_SetConfig>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd4:	e018      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc83 	bl	80078e4 <USBD_GetConfig>
          break;
 8006fde:	e013      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcb4 	bl	8007950 <USBD_GetStatus>
          break;
 8006fe8:	e00e      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fce3 	bl	80079b8 <USBD_SetFeature>
          break;
 8006ff2:	e009      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fd07 	bl	8007a0a <USBD_ClrFeature>
          break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd5e 	bl	8007ac2 <USBD_CtlError>
          break;
 8007006:	bf00      	nop
      }
      break;
 8007008:	e004      	b.n	8007014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd58 	bl	8007ac2 <USBD_CtlError>
      break;
 8007012:	bf00      	nop
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d005      	beq.n	8007046 <USBD_StdItfReq+0x26>
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d852      	bhi.n	80070e4 <USBD_StdItfReq+0xc4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <USBD_StdItfReq+0x26>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d14e      	bne.n	80070e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	2b02      	cmp	r3, #2
 8007052:	d840      	bhi.n	80070d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	889b      	ldrh	r3, [r3, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d836      	bhi.n	80070cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fed9 	bl	8006e1e <USBD_CoreFindIF>
 800706c:	4603      	mov	r3, r0
 800706e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d01d      	beq.n	80070b2 <USBD_StdItfReq+0x92>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11a      	bne.n	80070b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800707c:	7bba      	ldrb	r2, [r7, #14]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	32ae      	adds	r2, #174	; 0xae
 8007082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800708c:	7bba      	ldrb	r2, [r7, #14]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007094:	7bba      	ldrb	r2, [r7, #14]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070b0:	e001      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fdc7 	bl	8007c58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fcf7 	bl	8007ac2 <USBD_CtlError>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fcf2 	bl	8007ac2 <USBD_CtlError>
          break;
 80070de:	e000      	b.n	80070e2 <USBD_StdItfReq+0xc2>
          break;
 80070e0:	bf00      	nop
      }
      break;
 80070e2:	e004      	b.n	80070ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fceb 	bl	8007ac2 <USBD_CtlError>
      break;
 80070ec:	bf00      	nop
  }

  return ret;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	889b      	ldrh	r3, [r3, #4]
 800710a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d007      	beq.n	8007128 <USBD_StdEPReq+0x30>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	f200 817f 	bhi.w	800741c <USBD_StdEPReq+0x324>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <USBD_StdEPReq+0x80>
 8007122:	2b20      	cmp	r3, #32
 8007124:	f040 817a 	bne.w	800741c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fe83 	bl	8006e38 <USBD_CoreFindEP>
 8007132:	4603      	mov	r3, r0
 8007134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007136:	7b7b      	ldrb	r3, [r7, #13]
 8007138:	2bff      	cmp	r3, #255	; 0xff
 800713a:	f000 8174 	beq.w	8007426 <USBD_StdEPReq+0x32e>
 800713e:	7b7b      	ldrb	r3, [r7, #13]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8170 	bne.w	8007426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007146:	7b7a      	ldrb	r2, [r7, #13]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800714e:	7b7a      	ldrb	r2, [r7, #13]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32ae      	adds	r2, #174	; 0xae
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8163 	beq.w	8007426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007160:	7b7a      	ldrb	r2, [r7, #13]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32ae      	adds	r2, #174	; 0xae
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007176:	e156      	b.n	8007426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d008      	beq.n	8007192 <USBD_StdEPReq+0x9a>
 8007180:	2b03      	cmp	r3, #3
 8007182:	f300 8145 	bgt.w	8007410 <USBD_StdEPReq+0x318>
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 809b 	beq.w	80072c2 <USBD_StdEPReq+0x1ca>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d03c      	beq.n	800720a <USBD_StdEPReq+0x112>
 8007190:	e13e      	b.n	8007410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d002      	beq.n	80071a4 <USBD_StdEPReq+0xac>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d016      	beq.n	80071d0 <USBD_StdEPReq+0xd8>
 80071a2:	e02c      	b.n	80071fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_StdEPReq+0xce>
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d00a      	beq.n	80071c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fb37 	bl	8008828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	; 0x80
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fb33 	bl	8008828 <USBD_LL_StallEP>
 80071c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c4:	e020      	b.n	8007208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc7a 	bl	8007ac2 <USBD_CtlError>
              break;
 80071ce:	e01b      	b.n	8007208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10e      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d008      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fb19 	bl	8008828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fd2e 	bl	8007c58 <USBD_CtlSendStatus>

              break;
 80071fc:	e004      	b.n	8007208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc5e 	bl	8007ac2 <USBD_CtlError>
              break;
 8007206:	bf00      	nop
          }
          break;
 8007208:	e107      	b.n	800741a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d002      	beq.n	800721c <USBD_StdEPReq+0x124>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d016      	beq.n	8007248 <USBD_StdEPReq+0x150>
 800721a:	e04b      	b.n	80072b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00d      	beq.n	800723e <USBD_StdEPReq+0x146>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b80      	cmp	r3, #128	; 0x80
 8007226:	d00a      	beq.n	800723e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fafb 	bl	8008828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007232:	2180      	movs	r1, #128	; 0x80
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 faf7 	bl	8008828 <USBD_LL_StallEP>
 800723a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800723c:	e040      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc3e 	bl	8007ac2 <USBD_CtlError>
              break;
 8007246:	e03b      	b.n	80072c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d136      	bne.n	80072be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fb01 	bl	8008866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fcf7 	bl	8007c58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fde2 	bl	8006e38 <USBD_CoreFindEP>
 8007274:	4603      	mov	r3, r0
 8007276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007278:	7b7b      	ldrb	r3, [r7, #13]
 800727a:	2bff      	cmp	r3, #255	; 0xff
 800727c:	d01f      	beq.n	80072be <USBD_StdEPReq+0x1c6>
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11c      	bne.n	80072be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007284:	7b7a      	ldrb	r2, [r7, #13]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800728c:	7b7a      	ldrb	r2, [r7, #13]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	32ae      	adds	r2, #174	; 0xae
 8007292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	; 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072b2:	e004      	b.n	80072be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fc03 	bl	8007ac2 <USBD_CtlError>
              break;
 80072bc:	e000      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e0ab      	b.n	800741a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d002      	beq.n	80072d4 <USBD_StdEPReq+0x1dc>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d032      	beq.n	8007338 <USBD_StdEPReq+0x240>
 80072d2:	e097      	b.n	8007404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d004      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fbed 	bl	8007ac2 <USBD_CtlError>
                break;
 80072e8:	e091      	b.n	800740e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da0b      	bge.n	800730a <USBD_StdEPReq+0x212>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	3310      	adds	r3, #16
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	e00b      	b.n	8007322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2202      	movs	r2, #2
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc37 	bl	8007ba4 <USBD_CtlSendData>
              break;
 8007336:	e06a      	b.n	800740e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da11      	bge.n	8007364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 020f 	and.w	r2, r3, #15
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3324      	adds	r3, #36	; 0x24
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d117      	bne.n	800738a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbb0 	bl	8007ac2 <USBD_CtlError>
                  break;
 8007362:	e054      	b.n	800740e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fb9d 	bl	8007ac2 <USBD_CtlError>
                  break;
 8007388:	e041      	b.n	800740e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da0b      	bge.n	80073aa <USBD_StdEPReq+0x2b2>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	3310      	adds	r3, #16
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	3304      	adds	r3, #4
 80073a8:	e00b      	b.n	80073c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	3304      	adds	r3, #4
 80073c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <USBD_StdEPReq+0x2d8>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d103      	bne.n	80073d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e00e      	b.n	80073f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fa61 	bl	80088a4 <USBD_LL_IsStallEP>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2202      	movs	r2, #2
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fbd1 	bl	8007ba4 <USBD_CtlSendData>
              break;
 8007402:	e004      	b.n	800740e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb5b 	bl	8007ac2 <USBD_CtlError>
              break;
 800740c:	bf00      	nop
          }
          break;
 800740e:	e004      	b.n	800741a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb55 	bl	8007ac2 <USBD_CtlError>
          break;
 8007418:	bf00      	nop
      }
      break;
 800741a:	e005      	b.n	8007428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb4f 	bl	8007ac2 <USBD_CtlError>
      break;
 8007424:	e000      	b.n	8007428 <USBD_StdEPReq+0x330>
      break;
 8007426:	bf00      	nop
  }

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	2b06      	cmp	r3, #6
 8007456:	f200 8128 	bhi.w	80076aa <USBD_GetDescriptor+0x276>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <USBD_GetDescriptor+0x2c>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007495 	.word	0x08007495
 8007468:	080074d5 	.word	0x080074d5
 800746c:	080076ab 	.word	0x080076ab
 8007470:	080076ab 	.word	0x080076ab
 8007474:	0800764b 	.word	0x0800764b
 8007478:	08007677 	.word	0x08007677
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7c12      	ldrb	r2, [r2, #16]
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
      break;
 8007492:	e112      	b.n	80076ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7c1b      	ldrb	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10d      	bne.n	80074b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f107 0208 	add.w	r2, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	2202      	movs	r2, #2
 80074b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074b6:	e100      	b.n	80076ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      break;
 80074d2:	e0f2      	b.n	80076ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b05      	cmp	r3, #5
 80074dc:	f200 80ac 	bhi.w	8007638 <USBD_GetDescriptor+0x204>
 80074e0:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <USBD_GetDescriptor+0xb4>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007501 	.word	0x08007501
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007569 	.word	0x08007569
 80074f4:	0800759d 	.word	0x0800759d
 80074f8:	080075d1 	.word	0x080075d1
 80074fc:	08007605 	.word	0x08007605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007522:	e091      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 facb 	bl	8007ac2 <USBD_CtlError>
            err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
          break;
 8007532:	e089      	b.n	8007648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007556:	e077      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fab1 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
          break;
 8007566:	e06f      	b.n	8007648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e05d      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa97 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e055      	b.n	8007648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e043      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa7d 	bl	8007ac2 <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e03b      	b.n	8007648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e029      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa63 	bl	8007ac2 <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e021      	b.n	8007648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e00f      	b.n	8007648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa49 	bl	8007ac2 <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e007      	b.n	8007648 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa41 	bl	8007ac2 <USBD_CtlError>
          err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007646:	bf00      	nop
      }
      break;
 8007648:	e037      	b.n	80076ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7c1b      	ldrb	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765a:	f107 0208 	add.w	r2, r7, #8
 800765e:	4610      	mov	r0, r2
 8007660:	4798      	blx	r3
 8007662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007664:	e029      	b.n	80076ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa2a 	bl	8007ac2 <USBD_CtlError>
        err++;
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	3301      	adds	r3, #1
 8007672:	72fb      	strb	r3, [r7, #11]
      break;
 8007674:	e021      	b.n	80076ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7c1b      	ldrb	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	f107 0208 	add.w	r2, r7, #8
 800768a:	4610      	mov	r0, r2
 800768c:	4798      	blx	r3
 800768e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	2207      	movs	r2, #7
 8007696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007698:	e00f      	b.n	80076ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fa10 	bl	8007ac2 <USBD_CtlError>
        err++;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	3301      	adds	r3, #1
 80076a6:	72fb      	strb	r3, [r7, #11]
      break;
 80076a8:	e007      	b.n	80076ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa08 	bl	8007ac2 <USBD_CtlError>
      err++;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	3301      	adds	r3, #1
 80076b6:	72fb      	strb	r3, [r7, #11]
      break;
 80076b8:	bf00      	nop
  }

  if (err != 0U)
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d11e      	bne.n	80076fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d016      	beq.n	80076f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076c8:	893b      	ldrh	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88da      	ldrh	r2, [r3, #6]
 80076d2:	893b      	ldrh	r3, [r7, #8]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	bf28      	it	cs
 80076d8:	4613      	movcs	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076de:	893b      	ldrh	r3, [r7, #8]
 80076e0:	461a      	mov	r2, r3
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa5d 	bl	8007ba4 <USBD_CtlSendData>
 80076ea:	e009      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9e7 	bl	8007ac2 <USBD_CtlError>
 80076f4:	e004      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 faae 	bl	8007c58 <USBD_CtlSendStatus>
 80076fc:	e000      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
    return;
 80076fe:	bf00      	nop
  }
}
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	889b      	ldrh	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d131      	bne.n	800777e <USBD_SetAddress+0x76>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	88db      	ldrh	r3, [r3, #6]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d12d      	bne.n	800777e <USBD_SetAddress+0x76>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	2b7f      	cmp	r3, #127	; 0x7f
 8007728:	d829      	bhi.n	800777e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b03      	cmp	r3, #3
 8007740:	d104      	bne.n	800774c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9bc 	bl	8007ac2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774a:	e01d      	b.n	8007788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7bfa      	ldrb	r2, [r7, #15]
 8007750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f8cf 	bl	80088fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa7a 	bl	8007c58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	e009      	b.n	8007788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777c:	e004      	b.n	8007788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f99e 	bl	8007ac2 <USBD_CtlError>
  }
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	4b4e      	ldr	r3, [pc, #312]	; (80078e0 <USBD_SetConfig+0x150>)
 80077a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077a8:	4b4d      	ldr	r3, [pc, #308]	; (80078e0 <USBD_SetConfig+0x150>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d905      	bls.n	80077bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f985 	bl	8007ac2 <USBD_CtlError>
    return USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e08c      	b.n	80078d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d002      	beq.n	80077ce <USBD_SetConfig+0x3e>
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d029      	beq.n	8007820 <USBD_SetConfig+0x90>
 80077cc:	e075      	b.n	80078ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ce:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <USBD_SetConfig+0x150>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d020      	beq.n	8007818 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077d6:	4b42      	ldr	r3, [pc, #264]	; (80078e0 <USBD_SetConfig+0x150>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077e0:	4b3f      	ldr	r3, [pc, #252]	; (80078e0 <USBD_SetConfig+0x150>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fe ffe7 	bl	80067ba <USBD_SetClassConfig>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f962 	bl	8007ac2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007806:	e065      	b.n	80078d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa25 	bl	8007c58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2203      	movs	r2, #3
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007816:	e05d      	b.n	80078d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa1d 	bl	8007c58 <USBD_CtlSendStatus>
      break;
 800781e:	e059      	b.n	80078d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007820:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <USBD_SetConfig+0x150>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d112      	bne.n	800784e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007830:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <USBD_SetConfig+0x150>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800783a:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <USBD_SetConfig+0x150>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe ffd6 	bl	80067f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa06 	bl	8007c58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800784c:	e042      	b.n	80078d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800784e:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <USBD_SetConfig+0x150>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d02a      	beq.n	80078b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fe ffc4 	bl	80067f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800786a:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <USBD_SetConfig+0x150>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007874:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <USBD_SetConfig+0x150>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe ff9d 	bl	80067ba <USBD_SetClassConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f918 	bl	8007ac2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fe ffa9 	bl	80067f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078a8:	e014      	b.n	80078d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9d4 	bl	8007c58 <USBD_CtlSendStatus>
      break;
 80078b0:	e010      	b.n	80078d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9d0 	bl	8007c58 <USBD_CtlSendStatus>
      break;
 80078b8:	e00c      	b.n	80078d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f900 	bl	8007ac2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078c2:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <USBD_SetConfig+0x150>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fe ff92 	bl	80067f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
      break;
 80078d2:	bf00      	nop
  }

  return ret;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	24000574 	.word	0x24000574

080078e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d004      	beq.n	8007900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8e2 	bl	8007ac2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078fe:	e023      	b.n	8007948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	dc02      	bgt.n	8007912 <USBD_GetConfig+0x2e>
 800790c:	2b00      	cmp	r3, #0
 800790e:	dc03      	bgt.n	8007918 <USBD_GetConfig+0x34>
 8007910:	e015      	b.n	800793e <USBD_GetConfig+0x5a>
 8007912:	2b03      	cmp	r3, #3
 8007914:	d00b      	beq.n	800792e <USBD_GetConfig+0x4a>
 8007916:	e012      	b.n	800793e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3308      	adds	r3, #8
 8007922:	2201      	movs	r2, #1
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f93c 	bl	8007ba4 <USBD_CtlSendData>
        break;
 800792c:	e00c      	b.n	8007948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	2201      	movs	r2, #1
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f934 	bl	8007ba4 <USBD_CtlSendData>
        break;
 800793c:	e004      	b.n	8007948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8be 	bl	8007ac2 <USBD_CtlError>
        break;
 8007946:	bf00      	nop
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	2b02      	cmp	r3, #2
 8007966:	d81e      	bhi.n	80079a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d004      	beq.n	800797a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8a5 	bl	8007ac2 <USBD_CtlError>
        break;
 8007978:	e01a      	b.n	80079b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f043 0202 	orr.w	r2, r3, #2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	330c      	adds	r3, #12
 800799a:	2202      	movs	r2, #2
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f900 	bl	8007ba4 <USBD_CtlSendData>
      break;
 80079a4:	e004      	b.n	80079b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f88a 	bl	8007ac2 <USBD_CtlError>
      break;
 80079ae:	bf00      	nop
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f940 	bl	8007c58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079d8:	e013      	b.n	8007a02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d10b      	bne.n	80079fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	889b      	ldrh	r3, [r3, #4]
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f930 	bl	8007c58 <USBD_CtlSendStatus>
}
 80079f8:	e003      	b.n	8007a02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f860 	bl	8007ac2 <USBD_CtlError>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d80b      	bhi.n	8007a3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d10c      	bne.n	8007a44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f910 	bl	8007c58 <USBD_CtlSendStatus>
      }
      break;
 8007a38:	e004      	b.n	8007a44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f840 	bl	8007ac2 <USBD_CtlError>
      break;
 8007a42:	e000      	b.n	8007a46 <USBD_ClrFeature+0x3c>
      break;
 8007a44:	bf00      	nop
  }
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fa41 	bl	8006f00 <SWAPBYTE>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff fa34 	bl	8006f00 <SWAPBYTE>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff fa27 	bl	8006f00 <SWAPBYTE>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	80da      	strh	r2, [r3, #6]
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007acc:	2180      	movs	r1, #128	; 0x80
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 feaa 	bl	8008828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fea6 	bl	8008828 <USBD_LL_StallEP>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d036      	beq.n	8007b68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007afe:	6938      	ldr	r0, [r7, #16]
 8007b00:	f000 f836 	bl	8007b70 <USBD_GetLen>
 8007b04:	4603      	mov	r3, r0
 8007b06:	3301      	adds	r3, #1
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	3301      	adds	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	4413      	add	r3, r2
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	3301      	adds	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b34:	e013      	b.n	8007b5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3301      	adds	r3, #1
 8007b46:	613b      	str	r3, [r7, #16]
    idx++;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	4413      	add	r3, r2
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e7      	bne.n	8007b36 <USBD_GetString+0x52>
 8007b66:	e000      	b.n	8007b6a <USBD_GetString+0x86>
    return;
 8007b68:	bf00      	nop
  }
}
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b80:	e005      	b.n	8007b8e <USBD_GetLen+0x1e>
  {
    len++;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	3301      	adds	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f5      	bne.n	8007b82 <USBD_GetLen+0x12>
  }

  return len;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	2100      	movs	r1, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 feb5 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fea4 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	2100      	movs	r1, #0
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fea8 	bl	800897c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fe97 	bl	800897c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2204      	movs	r2, #4
 8007c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fe63 	bl	800893a <USBD_LL_Transmit>

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2205      	movs	r2, #5
 8007c8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2200      	movs	r2, #0
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fe71 	bl	800897c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <usb_putchar>:

static char hex_tab[]         = "0123456789abcdef";
static char usb_debug_start[] = "[USB_DEBUG]";

static usb_debug_status_e usb_putchar(char character)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
    char *buf = &character;
 8007cae:	1dfb      	adds	r3, r7, #7
 8007cb0:	60fb      	str	r3, [r7, #12]
    while(CDC_Transmit_FS((uint8_t *)buf, sizeof(char)) != USBD_OK){};
 8007cb2:	bf00      	nop
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fa4c 	bl	8008154 <CDC_Transmit_FS>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f8      	bne.n	8007cb4 <usb_putchar+0x10>

	return USB_DEBUG_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <usb_putstring>:

static usb_debug_status_e usb_putstring (const char *str)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 8007cd4:	e006      	b.n	8007ce4 <usb_putstring+0x18>
	{
		usb_putchar(*str++);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff ffe0 	bl	8007ca4 <usb_putchar>
	while (*str != '\0')
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f4      	bne.n	8007cd6 <usb_putstring+0xa>
	}

	return USB_DEBUG_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <usb_putnum>:

static usb_debug_status_e usb_putnum(long val, int base)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
	char buf[MAX_NUMBER_BYTES + sizeof(char)];
    char *buf_p = (char *)(buf + MAX_NUMBER_BYTES);
 8007d02:	f107 0308 	add.w	r3, r7, #8
 8007d06:	3314      	adds	r3, #20
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
    *buf_p = '\0';
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]

    long sign_val = val;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	623b      	str	r3, [r7, #32]
	val = abs(val);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bfb8      	it	lt
 8007d1a:	425b      	neglt	r3, r3
 8007d1c:	607b      	str	r3, [r7, #4]

	do
	{
		buf_p--;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	3b01      	subs	r3, #1
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
		*buf_p = hex_tab[val % base];
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	fb93 f2f2 	sdiv	r2, r3, r2
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	fb01 f202 	mul.w	r2, r1, r2
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	4a11      	ldr	r2, [pc, #68]	; (8007d7c <usb_putnum+0x84>)
 8007d36:	5cd2      	ldrb	r2, [r2, r3]
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	701a      	strb	r2, [r3, #0]
	}
	while (((val /= base) != 0) || (buf_p == (char *)(&buf + sizeof(char))));
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e8      	bne.n	8007d1e <usb_putnum+0x26>
 8007d4c:	f107 0308 	add.w	r3, r7, #8
 8007d50:	3315      	adds	r3, #21
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d0e2      	beq.n	8007d1e <usb_putnum+0x26>
	
	if (sign_val < 0)
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da05      	bge.n	8007d6a <usb_putnum+0x72>
	{
		buf_p--;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	3b01      	subs	r3, #1
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
		*buf_p = '-';
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	222d      	movs	r2, #45	; 0x2d
 8007d68:	701a      	strb	r2, [r3, #0]
	}

	return usb_putstring(buf_p);
 8007d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d6c:	f7ff ffae 	bl	8007ccc <usb_putstring>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3728      	adds	r7, #40	; 0x28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	2400009c 	.word	0x2400009c

08007d80 <usb_debug_handle>:


static usb_debug_status_e usb_debug_handle(const char *format, param_list_p param_list)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	for(; *format != '\0'; format++)
 8007d8a:	e097      	b.n	8007ebc <usb_debug_handle+0x13c>
	{
		if (*format != '%')
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b25      	cmp	r3, #37	; 0x25
 8007d92:	d005      	beq.n	8007da0 <usb_debug_handle+0x20>
        {
			usb_putchar(*format);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff ff83 	bl	8007ca4 <usb_putchar>
			continue;
 8007d9e:	e08a      	b.n	8007eb6 <usb_debug_handle+0x136>
		}

		format++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3301      	adds	r3, #1
 8007da4:	607b      	str	r3, [r7, #4]

		while (*format >= '0' && *format <= '9')
 8007da6:	e002      	b.n	8007dae <usb_debug_handle+0x2e>
        {
			format++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3301      	adds	r3, #1
 8007dac:	607b      	str	r3, [r7, #4]
		while (*format >= '0' && *format <= '9')
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b2f      	cmp	r3, #47	; 0x2f
 8007db4:	d903      	bls.n	8007dbe <usb_debug_handle+0x3e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b39      	cmp	r3, #57	; 0x39
 8007dbc:	d9f4      	bls.n	8007da8 <usb_debug_handle+0x28>
		}
		
		switch (*format)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	3b63      	subs	r3, #99	; 0x63
 8007dc4:	2b15      	cmp	r3, #21
 8007dc6:	d870      	bhi.n	8007eaa <usb_debug_handle+0x12a>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <usb_debug_handle+0x50>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007e81 	.word	0x08007e81
 8007dd4:	08007e3f 	.word	0x08007e3f
 8007dd8:	08007eab 	.word	0x08007eab
 8007ddc:	08007eab 	.word	0x08007eab
 8007de0:	08007eab 	.word	0x08007eab
 8007de4:	08007eab 	.word	0x08007eab
 8007de8:	08007eab 	.word	0x08007eab
 8007dec:	08007eab 	.word	0x08007eab
 8007df0:	08007eab 	.word	0x08007eab
 8007df4:	08007eab 	.word	0x08007eab
 8007df8:	08007eab 	.word	0x08007eab
 8007dfc:	08007eab 	.word	0x08007eab
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08007eab 	.word	0x08007eab
 8007e08:	08007eab 	.word	0x08007eab
 8007e0c:	08007eab 	.word	0x08007eab
 8007e10:	08007e97 	.word	0x08007e97
 8007e14:	08007eab 	.word	0x08007eab
 8007e18:	08007e55 	.word	0x08007e55
 8007e1c:	08007eab 	.word	0x08007eab
 8007e20:	08007eab 	.word	0x08007eab
 8007e24:	08007e6b 	.word	0x08007e6b
        {
		    case USB_OCTAL_SYMBOL:
			    {
			    	usb_putnum(usb_va_arg(param_list, unsigned int), USB_OCTAL);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2108      	movs	r1, #8
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff5e 	bl	8007cf8 <usb_putnum>
				    break;
 8007e3c:	e03b      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }
		    case USB_SIGN_DECIMAL_SYMBOL:
			    {
			    	usb_putnum(usb_va_arg(param_list, int), USB_DECIMAL);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	3304      	adds	r3, #4
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	3b04      	subs	r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	210a      	movs	r1, #10
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff ff53 	bl	8007cf8 <usb_putnum>
				    break;
 8007e52:	e030      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }
		    case USB_UNSIGN_DECIMAL_SYMBOL:
			    {
			    	usb_putnum(usb_va_arg(param_list, unsigned int), USB_DECIMAL);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	3304      	adds	r3, #4
 8007e58:	603b      	str	r3, [r7, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	210a      	movs	r1, #10
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff ff48 	bl	8007cf8 <usb_putnum>
				    break;
 8007e68:	e025      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }
		    case USB_HEX_SYMBOL:
			    {
			    	usb_putnum(usb_va_arg(param_list, unsigned int), USB_HEX);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2110      	movs	r1, #16
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ff3d 	bl	8007cf8 <usb_putnum>
				    break;
 8007e7e:	e01a      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }
		    case USB_CHAR_SYSMBOL:
			    {
				    usb_putchar(usb_va_arg(param_list, int));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	3304      	adds	r3, #4
 8007e84:	603b      	str	r3, [r7, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff08 	bl	8007ca4 <usb_putchar>
				    break;
 8007e94:	e00f      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }
		    case USB_STRING_SYSMBOL:
			    {
				    usb_putstring(usb_va_arg(param_list, char *));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ff12 	bl	8007ccc <usb_putstring>
				    break;
 8007ea8:	e005      	b.n	8007eb6 <usb_debug_handle+0x136>
			    }

		    default:
			    {
				    usb_putchar(*format);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fef8 	bl	8007ca4 <usb_putchar>
			    }
		    break;
 8007eb4:	bf00      	nop
	for(; *format != '\0'; format++)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	607b      	str	r3, [r7, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f47f af63 	bne.w	8007d8c <usb_debug_handle+0xc>
		}
	}
	return USB_DEBUG_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USB_DEBUG>:

usb_debug_status_e USB_DEBUG(const char *format, ...)
{
 8007ed0:	b40f      	push	{r0, r1, r2, r3}
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
    usb_putstring(usb_debug_start);
 8007ed8:	480b      	ldr	r0, [pc, #44]	; (8007f08 <USB_DEBUG+0x38>)
 8007eda:	f7ff fef7 	bl	8007ccc <usb_putstring>
    param_list_p param_list;
	usb_va_start(param_list, format);
 8007ede:	f107 0314 	add.w	r3, r7, #20
 8007ee2:	607b      	str	r3, [r7, #4]
	usb_debug_status_e ret = usb_debug_handle(format, param_list);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff ff49 	bl	8007d80 <usb_debug_handle>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	70fb      	strb	r3, [r7, #3]
	usb_va_end(param_list);
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	607b      	str	r3, [r7, #4]

	return ret;
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f02:	b004      	add	sp, #16
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	240000b0 	.word	0x240000b0

08007f0c <usb_debug_test>:


uint8_t usb_debug_test(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
	USB_DEBUG("USB_DEBUG test\n\r") ;
 8007f10:	4811      	ldr	r0, [pc, #68]	; (8007f58 <usb_debug_test+0x4c>)
 8007f12:	f7ff ffdd 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("test char = %c, %c\n\r", 'Z', 'R');
 8007f16:	2252      	movs	r2, #82	; 0x52
 8007f18:	215a      	movs	r1, #90	; 0x5a
 8007f1a:	4810      	ldr	r0, [pc, #64]	; (8007f5c <usb_debug_test+0x50>)
 8007f1c:	f7ff ffd8 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("test decimal number = %d\n\r", 123456);
 8007f20:	490f      	ldr	r1, [pc, #60]	; (8007f60 <usb_debug_test+0x54>)
 8007f22:	4810      	ldr	r0, [pc, #64]	; (8007f64 <usb_debug_test+0x58>)
 8007f24:	f7ff ffd4 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("test decimal number = %d\n\r", -123456);
 8007f28:	490f      	ldr	r1, [pc, #60]	; (8007f68 <usb_debug_test+0x5c>)
 8007f2a:	480e      	ldr	r0, [pc, #56]	; (8007f64 <usb_debug_test+0x58>)
 8007f2c:	f7ff ffd0 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("test hex number = 0x%x\n\r", 0x55aa55aa);
 8007f30:	490e      	ldr	r1, [pc, #56]	; (8007f6c <usb_debug_test+0x60>)
 8007f32:	480f      	ldr	r0, [pc, #60]	; (8007f70 <usb_debug_test+0x64>)
 8007f34:	f7ff ffcc 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("test string = %s\n\r", "zhangrun_test");
 8007f38:	490e      	ldr	r1, [pc, #56]	; (8007f74 <usb_debug_test+0x68>)
 8007f3a:	480f      	ldr	r0, [pc, #60]	; (8007f78 <usb_debug_test+0x6c>)
 8007f3c:	f7ff ffc8 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("0x1 = %d\n\r", 0x1);
 8007f40:	2101      	movs	r1, #1
 8007f42:	480e      	ldr	r0, [pc, #56]	; (8007f7c <usb_debug_test+0x70>)
 8007f44:	f7ff ffc4 	bl	8007ed0 <USB_DEBUG>
	USB_DEBUG("16 = %x\n\r", 16);
 8007f48:	2110      	movs	r1, #16
 8007f4a:	480d      	ldr	r0, [pc, #52]	; (8007f80 <usb_debug_test+0x74>)
 8007f4c:	f7ff ffc0 	bl	8007ed0 <USB_DEBUG>

	return 0;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	08008bac 	.word	0x08008bac
 8007f5c:	08008bc0 	.word	0x08008bc0
 8007f60:	0001e240 	.word	0x0001e240
 8007f64:	08008bd8 	.word	0x08008bd8
 8007f68:	fffe1dc0 	.word	0xfffe1dc0
 8007f6c:	55aa55aa 	.word	0x55aa55aa
 8007f70:	08008bf4 	.word	0x08008bf4
 8007f74:	08008c10 	.word	0x08008c10
 8007f78:	08008c20 	.word	0x08008c20
 8007f7c:	08008c34 	.word	0x08008c34
 8007f80:	08008c40 	.word	0x08008c40

08007f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4913      	ldr	r1, [pc, #76]	; (8007fd8 <MX_USB_DEVICE_Init+0x54>)
 8007f8c:	4813      	ldr	r0, [pc, #76]	; (8007fdc <MX_USB_DEVICE_Init+0x58>)
 8007f8e:	f7fe fb97 	bl	80066c0 <USBD_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f98:	f7f8 fa6a 	bl	8000470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f9c:	4910      	ldr	r1, [pc, #64]	; (8007fe0 <MX_USB_DEVICE_Init+0x5c>)
 8007f9e:	480f      	ldr	r0, [pc, #60]	; (8007fdc <MX_USB_DEVICE_Init+0x58>)
 8007fa0:	f7fe fbbe 	bl	8006720 <USBD_RegisterClass>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007faa:	f7f8 fa61 	bl	8000470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fae:	490d      	ldr	r1, [pc, #52]	; (8007fe4 <MX_USB_DEVICE_Init+0x60>)
 8007fb0:	480a      	ldr	r0, [pc, #40]	; (8007fdc <MX_USB_DEVICE_Init+0x58>)
 8007fb2:	f7fe faaf 	bl	8006514 <USBD_CDC_RegisterInterface>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fbc:	f7f8 fa58 	bl	8000470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fc0:	4806      	ldr	r0, [pc, #24]	; (8007fdc <MX_USB_DEVICE_Init+0x58>)
 8007fc2:	f7fe fbe3 	bl	800678c <USBD_Start>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fcc:	f7f8 fa50 	bl	8000470 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007fd0:	f7fa f9e6 	bl	80023a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	240000d8 	.word	0x240000d8
 8007fdc:	24000578 	.word	0x24000578
 8007fe0:	2400001c 	.word	0x2400001c
 8007fe4:	240000bc 	.word	0x240000bc

08007fe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fec:	2200      	movs	r2, #0
 8007fee:	4905      	ldr	r1, [pc, #20]	; (8008004 <CDC_Init_FS+0x1c>)
 8007ff0:	4805      	ldr	r0, [pc, #20]	; (8008008 <CDC_Init_FS+0x20>)
 8007ff2:	f7fe faa9 	bl	8006548 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ff6:	4905      	ldr	r1, [pc, #20]	; (800800c <CDC_Init_FS+0x24>)
 8007ff8:	4803      	ldr	r0, [pc, #12]	; (8008008 <CDC_Init_FS+0x20>)
 8007ffa:	f7fe fac7 	bl	800658c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ffe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008000:	4618      	mov	r0, r3
 8008002:	bd80      	pop	{r7, pc}
 8008004:	24001054 	.word	0x24001054
 8008008:	24000578 	.word	0x24000578
 800800c:	24000854 	.word	0x24000854

08008010 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008016:	4618      	mov	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
 800802c:	4613      	mov	r3, r2
 800802e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b23      	cmp	r3, #35	; 0x23
 8008034:	d84a      	bhi.n	80080cc <CDC_Control_FS+0xac>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <CDC_Control_FS+0x1c>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	080080cd 	.word	0x080080cd
 8008040:	080080cd 	.word	0x080080cd
 8008044:	080080cd 	.word	0x080080cd
 8008048:	080080cd 	.word	0x080080cd
 800804c:	080080cd 	.word	0x080080cd
 8008050:	080080cd 	.word	0x080080cd
 8008054:	080080cd 	.word	0x080080cd
 8008058:	080080cd 	.word	0x080080cd
 800805c:	080080cd 	.word	0x080080cd
 8008060:	080080cd 	.word	0x080080cd
 8008064:	080080cd 	.word	0x080080cd
 8008068:	080080cd 	.word	0x080080cd
 800806c:	080080cd 	.word	0x080080cd
 8008070:	080080cd 	.word	0x080080cd
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080cd 	.word	0x080080cd
 800807c:	080080cd 	.word	0x080080cd
 8008080:	080080cd 	.word	0x080080cd
 8008084:	080080cd 	.word	0x080080cd
 8008088:	080080cd 	.word	0x080080cd
 800808c:	080080cd 	.word	0x080080cd
 8008090:	080080cd 	.word	0x080080cd
 8008094:	080080cd 	.word	0x080080cd
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080cd 	.word	0x080080cd
 80080a0:	080080cd 	.word	0x080080cd
 80080a4:	080080cd 	.word	0x080080cd
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	080080cd 	.word	0x080080cd
 80080bc:	080080cd 	.word	0x080080cd
 80080c0:	080080cd 	.word	0x080080cd
 80080c4:	080080cd 	.word	0x080080cd
 80080c8:	080080cd 	.word	0x080080cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080cc:	bf00      	nop
  }

  return (USBD_OK);
 80080ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  static uint32_t buff_len = 0;
  static char buf[] = "\r\n\r\n";
  buff_len += *Len;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <CDC_Receive_FS+0x68>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4413      	add	r3, r2
 80080f0:	4a14      	ldr	r2, [pc, #80]	; (8008144 <CDC_Receive_FS+0x68>)
 80080f2:	6013      	str	r3, [r2, #0]

  if(buff_len > (APP_RX_DATA_SIZE - USB_ONCE_RX_MAX_LEN))
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <CDC_Receive_FS+0x68>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80080fc:	d912      	bls.n	8008124 <CDC_Receive_FS+0x48>
  {
      CDC_Transmit_FS(UserRxBufferFS, buff_len + *Len);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	b29a      	uxth	r2, r3
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <CDC_Receive_FS+0x68>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	4413      	add	r3, r2
 800810c:	b29b      	uxth	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	480d      	ldr	r0, [pc, #52]	; (8008148 <CDC_Receive_FS+0x6c>)
 8008112:	f000 f81f 	bl	8008154 <CDC_Transmit_FS>
      CDC_Transmit_FS(buf, 4);
 8008116:	2104      	movs	r1, #4
 8008118:	480c      	ldr	r0, [pc, #48]	; (800814c <CDC_Receive_FS+0x70>)
 800811a:	f000 f81b 	bl	8008154 <CDC_Transmit_FS>
      buff_len = 0;
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <CDC_Receive_FS+0x68>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[buff_len]);
 8008124:	4b07      	ldr	r3, [pc, #28]	; (8008144 <CDC_Receive_FS+0x68>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	4413      	add	r3, r2
 800812c:	4619      	mov	r1, r3
 800812e:	4808      	ldr	r0, [pc, #32]	; (8008150 <CDC_Receive_FS+0x74>)
 8008130:	f7fe fa2c 	bl	800658c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008134:	4806      	ldr	r0, [pc, #24]	; (8008150 <CDC_Receive_FS+0x74>)
 8008136:	f7fe fa8d 	bl	8006654 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800813a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	24001854 	.word	0x24001854
 8008148:	24000854 	.word	0x24000854
 800814c:	240000d0 	.word	0x240000d0
 8008150:	24000578 	.word	0x24000578

08008154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <CDC_Transmit_FS+0x48>)
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008176:	2301      	movs	r3, #1
 8008178:	e00b      	b.n	8008192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800817a:	887b      	ldrh	r3, [r7, #2]
 800817c:	461a      	mov	r2, r3
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4806      	ldr	r0, [pc, #24]	; (800819c <CDC_Transmit_FS+0x48>)
 8008182:	f7fe f9e1 	bl	8006548 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <CDC_Transmit_FS+0x48>)
 8008188:	f7fe fa1e 	bl	80065c8 <USBD_CDC_TransmitPacket>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	24000578 	.word	0x24000578

080081a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
	...

080081c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2212      	movs	r2, #18
 80081d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	240000f4 	.word	0x240000f4

080081e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2204      	movs	r2, #4
 80081f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	; (8008208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	24000108 	.word	0x24000108

0800820c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4907      	ldr	r1, [pc, #28]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
 8008222:	4808      	ldr	r0, [pc, #32]	; (8008244 <USBD_FS_ProductStrDescriptor+0x38>)
 8008224:	f7ff fc5e 	bl	8007ae4 <USBD_GetString>
 8008228:	e004      	b.n	8008234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <USBD_FS_ProductStrDescriptor+0x38>)
 8008230:	f7ff fc58 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	24001858 	.word	0x24001858
 8008244:	08008c4c 	.word	0x08008c4c

08008248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	6039      	str	r1, [r7, #0]
 8008252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	4904      	ldr	r1, [pc, #16]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008258:	4804      	ldr	r0, [pc, #16]	; (800826c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800825a:	f7ff fc43 	bl	8007ae4 <USBD_GetString>
  return USBD_StrDesc;
 800825e:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	24001858 	.word	0x24001858
 800826c:	08008c64 	.word	0x08008c64

08008270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	221a      	movs	r2, #26
 8008280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008282:	f000 f843 	bl	800830c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008286:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	2400010c 	.word	0x2400010c

08008294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	4907      	ldr	r1, [pc, #28]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082aa:	4808      	ldr	r0, [pc, #32]	; (80082cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082ac:	f7ff fc1a 	bl	8007ae4 <USBD_GetString>
 80082b0:	e004      	b.n	80082bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4904      	ldr	r1, [pc, #16]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082b6:	4805      	ldr	r0, [pc, #20]	; (80082cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b8:	f7ff fc14 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	24001858 	.word	0x24001858
 80082cc:	08008c78 	.word	0x08008c78

080082d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4907      	ldr	r1, [pc, #28]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e6:	4808      	ldr	r0, [pc, #32]	; (8008308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e8:	f7ff fbfc 	bl	8007ae4 <USBD_GetString>
 80082ec:	e004      	b.n	80082f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4904      	ldr	r1, [pc, #16]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f2:	4805      	ldr	r0, [pc, #20]	; (8008308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f4:	f7ff fbf6 	bl	8007ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	24001858 	.word	0x24001858
 8008308:	08008c84 	.word	0x08008c84

0800830c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008312:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <Get_SerialNum+0x44>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <Get_SerialNum+0x48>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800831e:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <Get_SerialNum+0x4c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4413      	add	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008332:	2208      	movs	r2, #8
 8008334:	4909      	ldr	r1, [pc, #36]	; (800835c <Get_SerialNum+0x50>)
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f814 	bl	8008364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800833c:	2204      	movs	r2, #4
 800833e:	4908      	ldr	r1, [pc, #32]	; (8008360 <Get_SerialNum+0x54>)
 8008340:	68b8      	ldr	r0, [r7, #8]
 8008342:	f000 f80f 	bl	8008364 <IntToUnicode>
  }
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	1ff1e800 	.word	0x1ff1e800
 8008354:	1ff1e804 	.word	0x1ff1e804
 8008358:	1ff1e808 	.word	0x1ff1e808
 800835c:	2400010e 	.word	0x2400010e
 8008360:	2400011e 	.word	0x2400011e

08008364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
 800837a:	e027      	b.n	80083cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	0f1b      	lsrs	r3, r3, #28
 8008380:	2b09      	cmp	r3, #9
 8008382:	d80b      	bhi.n	800839c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	0f1b      	lsrs	r3, r3, #28
 8008388:	b2da      	uxtb	r2, r3
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4619      	mov	r1, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	440b      	add	r3, r1
 8008394:	3230      	adds	r2, #48	; 0x30
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e00a      	b.n	80083b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4619      	mov	r1, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	440b      	add	r3, r1
 80083ac:	3237      	adds	r2, #55	; 0x37
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	3301      	adds	r3, #1
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	3301      	adds	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	7dfa      	ldrb	r2, [r7, #23]
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d3d3      	bcc.n	800837c <IntToUnicode+0x18>
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b0b8      	sub	sp, #224	; 0xe0
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	60da      	str	r2, [r3, #12]
 80083fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	22bc      	movs	r2, #188	; 0xbc
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fb55 	bl	8008ab4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_PCD_MspInit+0xf4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d15c      	bne.n	80084ce <HAL_PCD_MspInit+0xea>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008414:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008418:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 800841a:	230a      	movs	r3, #10
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 170;
 800841e:	23aa      	movs	r3, #170	; 0xaa
 8008420:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8008422:	2302      	movs	r3, #2
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8008426:	2304      	movs	r3, #4
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800842a:	2302      	movs	r3, #2
 800842c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800842e:	2300      	movs	r3, #0
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8008436:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800843a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800843e:	f107 0310 	add.w	r3, r7, #16
 8008442:	4618      	mov	r0, r3
 8008444:	f7fa ff5a 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800844e:	f7f8 f80f 	bl	8000470 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008452:	f7f9 ffa5 	bl	80023a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008456:	4b21      	ldr	r3, [pc, #132]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 8008458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800845c:	4a1f      	ldr	r2, [pc, #124]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008466:	4b1d      	ldr	r3, [pc, #116]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 8008468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008474:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847c:	2302      	movs	r3, #2
 800847e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800848e:	230a      	movs	r3, #10
 8008490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008498:	4619      	mov	r1, r3
 800849a:	4811      	ldr	r0, [pc, #68]	; (80084e0 <HAL_PCD_MspInit+0xfc>)
 800849c:	f7f8 fac0 	bl	8000a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084a0:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 80084a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084a6:	4a0d      	ldr	r2, [pc, #52]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 80084a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_PCD_MspInit+0xf8>)
 80084b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	2065      	movs	r0, #101	; 0x65
 80084c4:	f7f8 fa77 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084c8:	2065      	movs	r0, #101	; 0x65
 80084ca:	f7f8 fa8e 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084ce:	bf00      	nop
 80084d0:	37e0      	adds	r7, #224	; 0xe0
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40080000 	.word	0x40080000
 80084dc:	58024400 	.word	0x58024400
 80084e0:	58020000 	.word	0x58020000

080084e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084f8:	4619      	mov	r1, r3
 80084fa:	4610      	mov	r0, r2
 80084fc:	f7fe f993 	bl	8006826 <USBD_LL_SetupStage>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	4619      	mov	r1, r3
 8008532:	f7fe f9cd 	bl	80068d0 <USBD_LL_DataOutStage>
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	4613      	mov	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	334c      	adds	r3, #76	; 0x4c
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	4619      	mov	r1, r3
 8008566:	f7fe fa66 	bl	8006a36 <USBD_LL_DataInStage>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe fb9a 	bl	8006cba <USBD_LL_SOF>
}
 8008586:	bf00      	nop
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008596:	2301      	movs	r3, #1
 8008598:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
 80085a6:	e008      	b.n	80085ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d102      	bne.n	80085b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e001      	b.n	80085ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085b6:	f7f7 ff5b 	bl	8000470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085c0:	7bfa      	ldrb	r2, [r7, #15]
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe fb3a 	bl	8006c3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fae2 	bl	8006b9a <USBD_LL_Reset>
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fb35 	bl	8006c5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <HAL_PCD_SuspendCallback+0x48>)
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	4a03      	ldr	r2, [pc, #12]	; (8008628 <HAL_PCD_SuspendCallback+0x48>)
 800861a:	f043 0306 	orr.w	r3, r3, #6
 800861e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	e000ed00 	.word	0xe000ed00

0800862c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fb25 	bl	8006c8a <USBD_LL_Resume>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fb7d 	bl	8006d5e <USBD_LL_IsoOUTIncomplete>
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fb39 	bl	8006cfa <USBD_LL_IsoINIncomplete>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fb8f 	bl	8006dc2 <USBD_LL_DevConnected>
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fb8c 	bl	8006dd8 <USBD_LL_DevDisconnected>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d13e      	bne.n	8008756 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80086d8:	4a21      	ldr	r2, [pc, #132]	; (8008760 <USBD_LL_Init+0x98>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <USBD_LL_Init+0x98>)
 80086e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <USBD_LL_Init+0x98>)
 80086ea:	4a1e      	ldr	r2, [pc, #120]	; (8008764 <USBD_LL_Init+0x9c>)
 80086ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80086ee:	4b1c      	ldr	r3, [pc, #112]	; (8008760 <USBD_LL_Init+0x98>)
 80086f0:	2209      	movs	r2, #9
 80086f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <USBD_LL_Init+0x98>)
 80086f6:	2202      	movs	r2, #2
 80086f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086fa:	4b19      	ldr	r3, [pc, #100]	; (8008760 <USBD_LL_Init+0x98>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <USBD_LL_Init+0x98>)
 8008702:	2202      	movs	r2, #2
 8008704:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008706:	4b16      	ldr	r3, [pc, #88]	; (8008760 <USBD_LL_Init+0x98>)
 8008708:	2200      	movs	r2, #0
 800870a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800870c:	4b14      	ldr	r3, [pc, #80]	; (8008760 <USBD_LL_Init+0x98>)
 800870e:	2200      	movs	r2, #0
 8008710:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <USBD_LL_Init+0x98>)
 8008714:	2200      	movs	r2, #0
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <USBD_LL_Init+0x98>)
 800871a:	2200      	movs	r2, #0
 800871c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800871e:	4b10      	ldr	r3, [pc, #64]	; (8008760 <USBD_LL_Init+0x98>)
 8008720:	2200      	movs	r2, #0
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008724:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <USBD_LL_Init+0x98>)
 8008726:	2200      	movs	r2, #0
 8008728:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <USBD_LL_Init+0x98>)
 800872c:	f7f8 fb28 	bl	8000d80 <HAL_PCD_Init>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008736:	f7f7 fe9b 	bl	8000470 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800873a:	2180      	movs	r1, #128	; 0x80
 800873c:	4808      	ldr	r0, [pc, #32]	; (8008760 <USBD_LL_Init+0x98>)
 800873e:	f7f9 fdb4 	bl	80022aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008742:	2240      	movs	r2, #64	; 0x40
 8008744:	2100      	movs	r1, #0
 8008746:	4806      	ldr	r0, [pc, #24]	; (8008760 <USBD_LL_Init+0x98>)
 8008748:	f7f9 fd68 	bl	800221c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800874c:	2280      	movs	r2, #128	; 0x80
 800874e:	2101      	movs	r1, #1
 8008750:	4803      	ldr	r0, [pc, #12]	; (8008760 <USBD_LL_Init+0x98>)
 8008752:	f7f9 fd63 	bl	800221c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	24001a58 	.word	0x24001a58
 8008764:	40080000 	.word	0x40080000

08008768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800877e:	4618      	mov	r0, r3
 8008780:	f7f8 fc22 	bl	8000fc8 <HAL_PCD_Start>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f942 	bl	8008a14 <USBD_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008794:	7bbb      	ldrb	r3, [r7, #14]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	4608      	mov	r0, r1
 80087a8:	4611      	mov	r1, r2
 80087aa:	461a      	mov	r2, r3
 80087ac:	4603      	mov	r3, r0
 80087ae:	70fb      	strb	r3, [r7, #3]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70bb      	strb	r3, [r7, #2]
 80087b4:	4613      	mov	r3, r2
 80087b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087c6:	78bb      	ldrb	r3, [r7, #2]
 80087c8:	883a      	ldrh	r2, [r7, #0]
 80087ca:	78f9      	ldrb	r1, [r7, #3]
 80087cc:	f7f9 f920 	bl	8001a10 <HAL_PCD_EP_Open>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f91c 	bl	8008a14 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7f9 f969 	bl	8001ae0 <HAL_PCD_EP_Close>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f8fd 	bl	8008a14 <USBD_Get_USB_Status>
 800881a:	4603      	mov	r3, r0
 800881c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800881e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7f9 fa41 	bl	8001cce <HAL_PCD_EP_SetStall>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f8de 	bl	8008a14 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7f9 fa86 	bl	8001d96 <HAL_PCD_EP_ClrStall>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8bf 	bl	8008a14 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da0b      	bge.n	80088d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	440b      	add	r3, r1
 80088d2:	333e      	adds	r3, #62	; 0x3e
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	e00b      	b.n	80088f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80088ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f7f9 f853 	bl	80019c6 <HAL_PCD_SetAddress>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f874 	bl	8008a14 <USBD_Get_USB_Status>
 800892c:	4603      	mov	r3, r0
 800892e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008930:	7bbb      	ldrb	r3, [r7, #14]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	460b      	mov	r3, r1
 8008948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008958:	7af9      	ldrb	r1, [r7, #11]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	f7f9 f96c 	bl	8001c3a <HAL_PCD_EP_Transmit>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 f853 	bl	8008a14 <USBD_Get_USB_Status>
 800896e:	4603      	mov	r3, r0
 8008970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008972:	7dbb      	ldrb	r3, [r7, #22]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	460b      	mov	r3, r1
 800898a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800899a:	7af9      	ldrb	r1, [r7, #11]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	f7f9 f8e8 	bl	8001b74 <HAL_PCD_EP_Receive>
 80089a4:	4603      	mov	r3, r0
 80089a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f832 	bl	8008a14 <USBD_Get_USB_Status>
 80089b0:	4603      	mov	r3, r0
 80089b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089d0:	78fa      	ldrb	r2, [r7, #3]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7f9 f918 	bl	8001c0a <HAL_PCD_EP_GetRxCount>
 80089da:	4603      	mov	r3, r0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBD_static_malloc+0x18>)
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	24001f64 	.word	0x24001f64

08008a00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d817      	bhi.n	8008a58 <USBD_Get_USB_Status+0x44>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <USBD_Get_USB_Status+0x1c>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a47 	.word	0x08008a47
 8008a38:	08008a4d 	.word	0x08008a4d
 8008a3c:	08008a53 	.word	0x08008a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	e00b      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4a:	e008      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	e005      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a52:	2303      	movs	r3, #3
 8008a54:	73fb      	strb	r3, [r7, #15]
    break;
 8008a56:	e002      	b.n	8008a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	bf00      	nop
  }
  return usb_status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	; (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	; (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	; (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f000 f888 	bl	8008b94 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	08008ca8 	.word	0x08008ca8
 8008aa8:	08008ca8 	.word	0x08008ca8
 8008aac:	08008ca8 	.word	0x08008ca8
 8008ab0:	08008cb0 	.word	0x08008cb0

08008ab4 <memset>:
 8008ab4:	4402      	add	r2, r0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d100      	bne.n	8008abe <memset+0xa>
 8008abc:	4770      	bx	lr
 8008abe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac2:	e7f9      	b.n	8008ab8 <memset+0x4>

08008ac4 <register_fini>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <register_fini+0xc>)
 8008ac6:	b113      	cbz	r3, 8008ace <register_fini+0xa>
 8008ac8:	4802      	ldr	r0, [pc, #8]	; (8008ad4 <register_fini+0x10>)
 8008aca:	f000 b805 	b.w	8008ad8 <atexit>
 8008ace:	4770      	bx	lr
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	08008ae5 	.word	0x08008ae5

08008ad8 <atexit>:
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4601      	mov	r1, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 b816 	b.w	8008b10 <__register_exitproc>

08008ae4 <__libc_fini_array>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <__libc_fini_array+0x20>)
 8008ae8:	4c07      	ldr	r4, [pc, #28]	; (8008b08 <__libc_fini_array+0x24>)
 8008aea:	1b64      	subs	r4, r4, r5
 8008aec:	10a4      	asrs	r4, r4, #2
 8008aee:	b91c      	cbnz	r4, 8008af8 <__libc_fini_array+0x14>
 8008af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af4:	f000 b854 	b.w	8008ba0 <_fini>
 8008af8:	3c01      	subs	r4, #1
 8008afa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008afe:	4798      	blx	r3
 8008b00:	e7f5      	b.n	8008aee <__libc_fini_array+0xa>
 8008b02:	bf00      	nop
 8008b04:	08008cb0 	.word	0x08008cb0
 8008b08:	08008cb4 	.word	0x08008cb4

08008b0c <__retarget_lock_acquire_recursive>:
 8008b0c:	4770      	bx	lr

08008b0e <__retarget_lock_release_recursive>:
 8008b0e:	4770      	bx	lr

08008b10 <__register_exitproc>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008b90 <__register_exitproc+0x80>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	f8da 0000 	ldr.w	r0, [sl]
 8008b1e:	4698      	mov	r8, r3
 8008b20:	460f      	mov	r7, r1
 8008b22:	4691      	mov	r9, r2
 8008b24:	f7ff fff2 	bl	8008b0c <__retarget_lock_acquire_recursive>
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <__register_exitproc+0x7c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8008b30:	b91c      	cbnz	r4, 8008b3a <__register_exitproc+0x2a>
 8008b32:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008b36:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008b3a:	6865      	ldr	r5, [r4, #4]
 8008b3c:	f8da 0000 	ldr.w	r0, [sl]
 8008b40:	2d1f      	cmp	r5, #31
 8008b42:	dd05      	ble.n	8008b50 <__register_exitproc+0x40>
 8008b44:	f7ff ffe3 	bl	8008b0e <__retarget_lock_release_recursive>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b50:	b19e      	cbz	r6, 8008b7a <__register_exitproc+0x6a>
 8008b52:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8008b5c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8008b60:	40aa      	lsls	r2, r5
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008b68:	2e02      	cmp	r6, #2
 8008b6a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008b6e:	bf02      	ittt	eq
 8008b70:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8008b74:	4313      	orreq	r3, r2
 8008b76:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8008b7a:	1c6b      	adds	r3, r5, #1
 8008b7c:	3502      	adds	r5, #2
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8008b84:	f7ff ffc3 	bl	8008b0e <__retarget_lock_release_recursive>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e7df      	b.n	8008b4c <__register_exitproc+0x3c>
 8008b8c:	08008ca4 	.word	0x08008ca4
 8008b90:	24000550 	.word	0x24000550

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
