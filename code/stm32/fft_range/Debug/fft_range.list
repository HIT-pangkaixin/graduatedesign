
fft_range.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  24000000  08007e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b1c  24000184  08007fe4  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00001400  24001ca0  08007fe4  00021ca0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021020  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f21  00000000  00000000  000411d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e50  00000000  00000000  000450f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ce8  00000000  00000000  00045f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003896e  00000000  00000000  00046c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013a92  00000000  00000000  0007f59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015532b  00000000  00000000  00093030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e835b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000038e4  00000000  00000000  001e83b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000184 	.word	0x24000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007dd0 	.word	0x08007dd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000188 	.word	0x24000188
 80002d4:	08007dd0 	.word	0x08007dd0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b19      	ldr	r3, [pc, #100]	; (8000354 <MX_GPIO_Init+0x6c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <MX_GPIO_Init+0x6c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_GPIO_Init+0x6c>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_GPIO_Init+0x6c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a10      	ldr	r2, [pc, #64]	; (8000354 <MX_GPIO_Init+0x6c>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <MX_GPIO_Init+0x6c>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_GPIO_Init+0x6c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <MX_GPIO_Init+0x6c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_GPIO_Init+0x6c>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]

}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	58024400 	.word	0x58024400

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char buff[]="usb virtual com test \r\n";
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <main+0x40>)
 8000360:	463c      	mov	r4, r7
 8000362:	461d      	mov	r5, r3
 8000364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000368:	e895 0003 	ldmia.w	r5, {r0, r1}
 800036c:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 f9a0 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f812 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ffb6 	bl	80002e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800037c:	f006 ffb0 	bl	80072e0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	CDC_Transmit_FS((uint8_t *)buff,(uint16_t)strlen(buff));
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ffa8 	bl	80002d8 <strlen>
 8000388:	4603      	mov	r3, r0
 800038a:	b29a      	uxth	r2, r3
 800038c:	463b      	mov	r3, r7
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f007 f865 	bl	8007460 <CDC_Transmit_FS>
 8000396:	e7f3      	b.n	8000380 <main+0x28>
 8000398:	08007de8 	.word	0x08007de8

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a6:	224c      	movs	r2, #76	; 0x4c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f007 fd08 	bl	8007dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2220      	movs	r2, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f007 fd02 	bl	8007dc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003bc:	2002      	movs	r0, #2
 80003be:	f001 fecb 	bl	8002158 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <SystemClock_Config+0x100>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a34      	ldr	r2, [pc, #208]	; (800049c <SystemClock_Config+0x100>)
 80003cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b32      	ldr	r3, [pc, #200]	; (800049c <SystemClock_Config+0x100>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	4b30      	ldr	r3, [pc, #192]	; (80004a0 <SystemClock_Config+0x104>)
 80003de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e0:	4a2f      	ldr	r2, [pc, #188]	; (80004a0 <SystemClock_Config+0x104>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003e8:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <SystemClock_Config+0x104>)
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f4:	bf00      	nop
 80003f6:	4b29      	ldr	r3, [pc, #164]	; (800049c <SystemClock_Config+0x100>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000402:	d1f8      	bne.n	80003f6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <SystemClock_Config+0x108>)
 8000406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000408:	f023 0303 	bic.w	r3, r3, #3
 800040c:	4a25      	ldr	r2, [pc, #148]	; (80004a4 <SystemClock_Config+0x108>)
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000414:	2301      	movs	r3, #1
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000422:	2302      	movs	r3, #2
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000426:	2301      	movs	r3, #1
 8000428:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 800042a:	2350      	movs	r3, #80	; 0x50
 800042c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800043a:	230c      	movs	r3, #12
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800043e:	2300      	movs	r3, #0
 8000440:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fece 	bl	80021ec <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000456:	f000 f827 	bl	80004a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	233f      	movs	r3, #63	; 0x3f
 800045c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2303      	movs	r3, #3
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000466:	2308      	movs	r3, #8
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2104      	movs	r1, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f002 fadf 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800048c:	f000 f80c 	bl	80004a8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000490:	f002 fc8e 	bl	8002db0 <HAL_RCC_EnableCSS>
}
 8000494:	bf00      	nop
 8000496:	3770      	adds	r7, #112	; 0x70
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	58024800 	.word	0x58024800
 80004a0:	58000400 	.word	0x58000400
 80004a4:	58024400 	.word	0x58024400

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_MspInit+0x30>)
 80004bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <HAL_MspInit+0x30>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_MspInit+0x30>)
 80004cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	58024400 	.word	0x58024400

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f930 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <OTG_FS_IRQHandler+0x10>)
 8000542:	f000 fd90 	bl	8001066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	24001898 	.word	0x24001898

08000550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000554:	4b37      	ldr	r3, [pc, #220]	; (8000634 <SystemInit+0xe4>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a36      	ldr	r2, [pc, #216]	; (8000634 <SystemInit+0xe4>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000564:	4b34      	ldr	r3, [pc, #208]	; (8000638 <SystemInit+0xe8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 030f 	and.w	r3, r3, #15
 800056c:	2b06      	cmp	r3, #6
 800056e:	d807      	bhi.n	8000580 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <SystemInit+0xe8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	4a2f      	ldr	r2, [pc, #188]	; (8000638 <SystemInit+0xe8>)
 800057a:	f043 0307 	orr.w	r3, r3, #7
 800057e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <SystemInit+0xec>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <SystemInit+0xec>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <SystemInit+0xec>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <SystemInit+0xec>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4929      	ldr	r1, [pc, #164]	; (800063c <SystemInit+0xec>)
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <SystemInit+0xf0>)
 800059a:	4013      	ands	r3, r2
 800059c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemInit+0xe8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d007      	beq.n	80005ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemInit+0xe8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f023 030f 	bic.w	r3, r3, #15
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemInit+0xe8>)
 80005b4:	f043 0307 	orr.w	r3, r3, #7
 80005b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <SystemInit+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <SystemInit+0xec>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <SystemInit+0xec>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <SystemInit+0xec>)
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <SystemInit+0xf4>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <SystemInit+0xec>)
 80005d4:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <SystemInit+0xf8>)
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <SystemInit+0xec>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <SystemInit+0xfc>)
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <SystemInit+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <SystemInit+0xec>)
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <SystemInit+0xfc>)
 80005e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <SystemInit+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <SystemInit+0xec>)
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <SystemInit+0xfc>)
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <SystemInit+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <SystemInit+0xec>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <SystemInit+0xec>)
 8000602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000606:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <SystemInit+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <SystemInit+0x100>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <SystemInit+0x104>)
 8000614:	4013      	ands	r3, r2
 8000616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800061a:	d202      	bcs.n	8000622 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <SystemInit+0x108>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <SystemInit+0x10c>)
 8000624:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000628:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	52002000 	.word	0x52002000
 800063c:	58024400 	.word	0x58024400
 8000640:	eaf6ed7f 	.word	0xeaf6ed7f
 8000644:	02020200 	.word	0x02020200
 8000648:	01ff0000 	.word	0x01ff0000
 800064c:	01010280 	.word	0x01010280
 8000650:	5c001000 	.word	0x5c001000
 8000654:	ffff0000 	.word	0xffff0000
 8000658:	51008108 	.word	0x51008108
 800065c:	52004000 	.word	0x52004000

08000660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff ff74 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f007 fb73 	bl	8007d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000692:	f7ff fe61 	bl	8000358 <main>
  bx  lr
 8000696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000698:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800069c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80006a0:	24000184 	.word	0x24000184
  ldr r2, =_sidata
 80006a4:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 80006a8:	24000184 	.word	0x24000184
  ldr r4, =_ebss
 80006ac:	24001ca0 	.word	0x24001ca0

080006b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC3_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f000 f98c 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006c0:	f002 fb86 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_Init+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	4913      	ldr	r1, [pc, #76]	; (8000720 <HAL_Init+0x6c>)
 80006d2:	5ccb      	ldrb	r3, [r1, r3]
 80006d4:	f003 031f 	and.w	r3, r3, #31
 80006d8:	fa22 f303 	lsr.w	r3, r2, r3
 80006dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_Init+0x68>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_Init+0x6c>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	f003 031f 	and.w	r3, r3, #31
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	fa22 f303 	lsr.w	r3, r2, r3
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <HAL_Init+0x70>)
 80006f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_Init+0x74>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fe:	200f      	movs	r0, #15
 8000700:	f000 f814 	bl	800072c <HAL_InitTick>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e002      	b.n	8000714 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800070e:	f7ff fed1 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58024400 	.word	0x58024400
 8000720:	08007e48 	.word	0x08007e48
 8000724:	24000004 	.word	0x24000004
 8000728:	24000000 	.word	0x24000000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_InitTick+0x60>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	e021      	b.n	8000784 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <HAL_InitTick+0x64>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_InitTick+0x60>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f971 	bl	8000a3e <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 f93b 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_InitTick+0x68>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2400000c 	.word	0x2400000c
 8000790:	24000000 	.word	0x24000000
 8000794:	24000008 	.word	0x24000008

08000798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2400000c 	.word	0x2400000c
 80007bc:	240003c4 	.word	0x240003c4

080007c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	240003c4 	.word	0x240003c4

080007d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e0:	f7ff ffee 	bl	80007c0 <HAL_GetTick>
 80007e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d005      	beq.n	80007fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_Delay+0x44>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fe:	bf00      	nop
 8000800:	f7ff ffde 	bl	80007c0 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f7      	bhi.n	8000800 <HAL_Delay+0x28>
  {
  }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2400000c 	.word	0x2400000c

08000820 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetREVID+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	0c1b      	lsrs	r3, r3, #16
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	5c001000 	.word	0x5c001000

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <__NVIC_SetPriorityGrouping+0x40>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	4313      	orrs	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x40>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	05fa0000 	.word	0x05fa0000

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0b      	blt.n	80008c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	4907      	ldr	r1, [pc, #28]	; (80008d4 <__NVIC_EnableIRQ+0x38>)
 80008b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff29 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff40 	bl	8000880 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff33 	bl	800089c <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa4 	bl	8000994 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a66:	4b89      	ldr	r3, [pc, #548]	; (8000c8c <HAL_GPIO_Init+0x234>)
 8000a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a6a:	e194      	b.n	8000d96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8186 	beq.w	8000d90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d005      	beq.n	8000a9c <HAL_GPIO_Init+0x44>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d130      	bne.n	8000afe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	f003 0201 	and.w	r2, r3, #1
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d017      	beq.n	8000b3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d123      	bne.n	8000b8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	69b9      	ldr	r1, [r7, #24]
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0203 	and.w	r2, r3, #3
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80e0 	beq.w	8000d90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <HAL_GPIO_Init+0x238>)
 8000bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd6:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <HAL_GPIO_Init+0x238>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <HAL_GPIO_Init+0x238>)
 8000be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bee:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <HAL_GPIO_Init+0x23c>)
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <HAL_GPIO_Init+0x240>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d052      	beq.n	8000cc0 <HAL_GPIO_Init+0x268>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_GPIO_Init+0x244>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d031      	beq.n	8000c86 <HAL_GPIO_Init+0x22e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_GPIO_Init+0x248>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d02b      	beq.n	8000c82 <HAL_GPIO_Init+0x22a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_GPIO_Init+0x24c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d025      	beq.n	8000c7e <HAL_GPIO_Init+0x226>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_GPIO_Init+0x250>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d01f      	beq.n	8000c7a <HAL_GPIO_Init+0x222>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_GPIO_Init+0x254>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d019      	beq.n	8000c76 <HAL_GPIO_Init+0x21e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HAL_GPIO_Init+0x258>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d013      	beq.n	8000c72 <HAL_GPIO_Init+0x21a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_GPIO_Init+0x25c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d00d      	beq.n	8000c6e <HAL_GPIO_Init+0x216>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_GPIO_Init+0x260>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d007      	beq.n	8000c6a <HAL_GPIO_Init+0x212>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_GPIO_Init+0x264>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <HAL_GPIO_Init+0x20e>
 8000c62:	2309      	movs	r3, #9
 8000c64:	e02d      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c66:	230a      	movs	r3, #10
 8000c68:	e02b      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	e029      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c6e:	2307      	movs	r3, #7
 8000c70:	e027      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c72:	2306      	movs	r3, #6
 8000c74:	e025      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e023      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e021      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e01f      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e01d      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e01b      	b.n	8000cc2 <HAL_GPIO_Init+0x26a>
 8000c8a:	bf00      	nop
 8000c8c:	58000080 	.word	0x58000080
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58000400 	.word	0x58000400
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58020800 	.word	0x58020800
 8000ca4:	58020c00 	.word	0x58020c00
 8000ca8:	58021000 	.word	0x58021000
 8000cac:	58021400 	.word	0x58021400
 8000cb0:	58021800 	.word	0x58021800
 8000cb4:	58021c00 	.word	0x58021c00
 8000cb8:	58022000 	.word	0x58022000
 8000cbc:	58022400 	.word	0x58022400
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cd2:	4938      	ldr	r1, [pc, #224]	; (8000db4 <HAL_GPIO_Init+0x35c>)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	3301      	adds	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f ae63 	bne.w	8000a6c <HAL_GPIO_Init+0x14>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	3724      	adds	r7, #36	; 0x24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58000400 	.word	0x58000400

08000db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	b08f      	sub	sp, #60	; 0x3c
 8000dbc:	af0a      	add	r7, sp, #40	; 0x28
 8000dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e116      	b.n	8000ff8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f006 fc83 	bl	80076f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fb50 	bl	80044ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	687e      	ldr	r6, [r7, #4]
 8000e16:	466d      	mov	r5, sp
 8000e18:	f106 0410 	add.w	r4, r6, #16
 8000e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e2c:	1d33      	adds	r3, r6, #4
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f003 fa1b 	bl	800426c <USB_CoreInit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0d7      	b.n	8000ff8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fb3e 	bl	80044d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e04a      	b.n	8000ef0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	333d      	adds	r3, #61	; 0x3d
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	333c      	adds	r3, #60	; 0x3c
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	b298      	uxth	r0, r3
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3342      	adds	r3, #66	; 0x42
 8000e96:	4602      	mov	r2, r0
 8000e98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	333f      	adds	r3, #63	; 0x3f
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3344      	adds	r3, #68	; 0x44
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3348      	adds	r3, #72	; 0x48
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3350      	adds	r3, #80	; 0x50
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	3301      	adds	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3af      	bcc.n	8000e5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e044      	b.n	8000f8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3b5      	bcc.n	8000f00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	687e      	ldr	r6, [r7, #4]
 8000f9c:	466d      	mov	r5, sp
 8000f9e:	f106 0410 	add.w	r4, r6, #16
 8000fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb2:	1d33      	adds	r3, r6, #4
 8000fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f003 fad6 	bl	8004568 <USB_DevInit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e014      	b.n	8000ff8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f001 f886 	bl	80020f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fb6e 	bl	80056d2 <USB_DevDisconnect>

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_PCD_Start+0x1c>
 8001018:	2302      	movs	r3, #2
 800101a:	e020      	b.n	800105e <HAL_PCD_Start+0x5e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	2b01      	cmp	r3, #1
 800102a:	d109      	bne.n	8001040 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001030:	2b01      	cmp	r3, #1
 8001032:	d005      	beq.n	8001040 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fa21 	bl	800448c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fb1e 	bl	8005690 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b08d      	sub	sp, #52	; 0x34
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fbdc 	bl	800583a <USB_GetMode>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 83be 	bne.w	8001806 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fb40 	bl	8005714 <USB_ReadInterrupts>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 83b4 	beq.w	8001804 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fb37 	bl	8005714 <USB_ReadInterrupts>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d107      	bne.n	80010c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f002 0202 	and.w	r2, r2, #2
 80010be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 fb25 	bl	8005714 <USB_ReadInterrupts>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d161      	bne.n	8001198 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0210 	bic.w	r2, r2, #16
 80010e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	f003 020f 	and.w	r2, r3, #15
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	3304      	adds	r3, #4
 8001102:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	0c5b      	lsrs	r3, r3, #17
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	2b02      	cmp	r3, #2
 800110e:	d124      	bne.n	800115a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d035      	beq.n	8001188 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	6a38      	ldr	r0, [r7, #32]
 8001130:	f004 f95c 	bl	80053ec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001140:	441a      	add	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001152:	441a      	add	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	e016      	b.n	8001188 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	0c5b      	lsrs	r3, r3, #17
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	2b06      	cmp	r3, #6
 8001164:	d110      	bne.n	8001188 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800116c:	2208      	movs	r2, #8
 800116e:	4619      	mov	r1, r3
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f004 f93b 	bl	80053ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001182:	441a      	add	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0210 	orr.w	r2, r2, #16
 8001196:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fab9 	bl	8005714 <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011ac:	d16e      	bne.n	800128c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fabf 	bl	800573a <USB_ReadDevAllOutEpInterrupt>
 80011bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011be:	e062      	b.n	8001286 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d057      	beq.n	800127a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fae4 	bl	80057a2 <USB_ReadDevOutEPInterrupt>
 80011da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00c      	beq.n	8001200 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	015a      	lsls	r2, r3, #5
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f2:	461a      	mov	r2, r3
 80011f4:	2301      	movs	r3, #1
 80011f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fdd2 	bl	8001da4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00c      	beq.n	8001224 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	015a      	lsls	r2, r3, #5
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	4413      	add	r3, r2
 8001212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001216:	461a      	mov	r2, r3
 8001218:	2308      	movs	r3, #8
 800121a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800121c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fecc 	bl	8001fbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	015a      	lsls	r2, r3, #5
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	4413      	add	r3, r2
 8001236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800123a:	461a      	mov	r2, r3
 800123c:	2310      	movs	r3, #16
 800123e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	015a      	lsls	r2, r3, #5
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	4413      	add	r3, r2
 8001252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001256:	461a      	mov	r2, r3
 8001258:	2320      	movs	r3, #32
 800125a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	4413      	add	r3, r2
 800126e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	2b00      	cmp	r3, #0
 800128a:	d199      	bne.n	80011c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fa3f 	bl	8005714 <USB_ReadInterrupts>
 8001296:	4603      	mov	r3, r0
 8001298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012a0:	f040 80c4 	bne.w	800142c <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 fa60 	bl	800576e <USB_ReadDevAllInEpInterrupt>
 80012ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012b4:	e0b6      	b.n	8001424 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80ab 	beq.w	8001418 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fa86 	bl	80057de <USB_ReadDevInEPInterrupt>
 80012d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d057      	beq.n	800138e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2201      	movs	r2, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69f9      	ldr	r1, [r7, #28]
 80012fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012fe:	4013      	ands	r3, r2
 8001300:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800130e:	461a      	mov	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d132      	bne.n	8001382 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3348      	adds	r3, #72	; 0x48
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4403      	add	r3, r0
 800133c:	3344      	adds	r3, #68	; 0x44
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4419      	add	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4403      	add	r3, r0
 8001350:	3348      	adds	r3, #72	; 0x48
 8001352:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	d113      	bne.n	8001382 <HAL_PCD_IRQHandler+0x31c>
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3350      	adds	r3, #80	; 0x50
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d108      	bne.n	8001382 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800137a:	461a      	mov	r2, r3
 800137c:	2101      	movs	r1, #1
 800137e:	f004 fa8f 	bl	80058a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4619      	mov	r1, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f006 fa5e 	bl	800784a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a4:	461a      	mov	r2, r3
 80013a6:	2308      	movs	r3, #8
 80013a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013c0:	461a      	mov	r2, r3
 80013c2:	2310      	movs	r3, #16
 80013c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013dc:	461a      	mov	r2, r3
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00c      	beq.n	8001406 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80013ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ee:	6a38      	ldr	r0, [r7, #32]
 80013f0:	f003 fa18 	bl	8004824 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	015a      	lsls	r2, r3, #5
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001400:	461a      	mov	r2, r3
 8001402:	2302      	movs	r3, #2
 8001404:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fc38 	bl	8001c88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	3301      	adds	r3, #1
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f af45 	bne.w	80012b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f004 f96f 	bl	8005714 <USB_ReadInterrupts>
 8001436:	4603      	mov	r3, r0
 8001438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800143c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001440:	d122      	bne.n	8001488 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800145c:	2b01      	cmp	r3, #1
 800145e:	d108      	bne.n	8001472 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001468:	2100      	movs	r1, #0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fe68 	bl	8002140 <HAL_PCDEx_LPM_Callback>
 8001470:	e002      	b.n	8001478 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f006 fa60 	bl	8007938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f004 f941 	bl	8005714 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800149c:	d112      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f006 fa1c 	bl	80078ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 f923 	bl	8005714 <USB_ReadInterrupts>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014d8:	d121      	bne.n	800151e <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80014e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d111      	bne.n	8001518 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fe15 	bl	8002140 <HAL_PCDEx_LPM_Callback>
 8001516:	e002      	b.n	800151e <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f006 f9e7 	bl	80078ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 f8f6 	bl	8005714 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001532:	f040 80b7 	bne.w	80016a4 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2110      	movs	r1, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f967 	bl	8004824 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155a:	e046      	b.n	80015ea <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001568:	461a      	mov	r2, r3
 800156a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800156e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001580:	0151      	lsls	r1, r2, #5
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	440a      	add	r2, r1
 8001586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800158a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800158e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159c:	461a      	mov	r2, r3
 800159e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b4:	0151      	lsls	r1, r2, #5
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	440a      	add	r2, r1
 80015ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d4:	0151      	lsls	r1, r2, #5
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	440a      	add	r2, r1
 80015da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	3301      	adds	r3, #1
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3b3      	bcc.n	800155c <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001602:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001606:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	2b00      	cmp	r3, #0
 800160e:	d016      	beq.n	800163e <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f043 030b 	orr.w	r3, r3, #11
 8001624:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001636:	f043 030b 	orr.w	r3, r3, #11
 800163a:	6453      	str	r3, [r2, #68]	; 0x44
 800163c:	e015      	b.n	800166a <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164c:	4619      	mov	r1, r3
 800164e:	f242 032b 	movw	r3, #8235	; 0x202b
 8001652:	4313      	orrs	r3, r2
 8001654:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001664:	f043 030b 	orr.w	r3, r3, #11
 8001668:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001678:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800167c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800168e:	461a      	mov	r2, r3
 8001690:	f004 f906 	bl	80058a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 f833 	bl	8005714 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b8:	d124      	bne.n	8001704 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 f8ca 	bl	8005858 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 f924 	bl	8004916 <USB_GetDevSpeed>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	f001 fcf3 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80016de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	4620      	mov	r0, r4
 80016ea:	f002 fe2d 	bl	8004348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f006 f8d3 	bl	800789a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001702:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f803 	bl	8005714 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b08      	cmp	r3, #8
 8001716:	d10a      	bne.n	800172e <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f006 f8b0 	bl	800787e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f002 0208 	and.w	r2, r2, #8
 800172c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 ffee 	bl	8005714 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001742:	d10f      	bne.n	8001764 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f006 f912 	bl	8007978 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 ffd3 	bl	8005714 <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001778:	d10f      	bne.n	800179a <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f006 f8e5 	bl	8007954 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 ffb8 	bl	8005714 <USB_ReadInterrupts>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ae:	d10a      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f006 f8f3 	bl	800799c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 ffa2 	bl	8005714 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d115      	bne.n	8001806 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 f8e3 	bl	80079b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	e000      	b.n	8001806 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8001804:	bf00      	nop
    }
  }
}
 8001806:	3734      	adds	r7, #52	; 0x34
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_PCD_SetAddress+0x1a>
 8001822:	2302      	movs	r3, #2
 8001824:	e013      	b.n	800184e <HAL_PCD_SetAddress+0x42>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 ff00 	bl	8005644 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	4608      	mov	r0, r1
 8001860:	4611      	mov	r1, r2
 8001862:	461a      	mov	r2, r3
 8001864:	4603      	mov	r3, r0
 8001866:	70fb      	strb	r3, [r7, #3]
 8001868:	460b      	mov	r3, r1
 800186a:	803b      	strh	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da0f      	bge.n	800189c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	3338      	adds	r3, #56	; 0x38
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	3304      	adds	r3, #4
 8001892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	705a      	strb	r2, [r3, #1]
 800189a:	e00f      	b.n	80018bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 020f 	and.w	r2, r3, #15
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	3304      	adds	r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018c8:	883a      	ldrh	r2, [r7, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	78ba      	ldrb	r2, [r7, #2]
 80018d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018e6:	78bb      	ldrb	r3, [r7, #2]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d102      	bne.n	80018f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_PCD_EP_Open+0xaa>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e00e      	b.n	800191e <HAL_PCD_EP_Open+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 f826 	bl	8004960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800191c:	7afb      	ldrb	r3, [r7, #11]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001936:	2b00      	cmp	r3, #0
 8001938:	da0f      	bge.n	800195a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 020f 	and.w	r2, r3, #15
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	3338      	adds	r3, #56	; 0x38
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	3304      	adds	r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	705a      	strb	r2, [r3, #1]
 8001958:	e00f      	b.n	800197a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 020f 	and.w	r2, r3, #15
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	b2da      	uxtb	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_PCD_EP_Close+0x6e>
 8001990:	2302      	movs	r3, #2
 8001992:	e00e      	b.n	80019b2 <HAL_PCD_EP_Close+0x8c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f864 	bl	8004a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	460b      	mov	r3, r1
 80019c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	f003 020f 	and.w	r2, r3, #15
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	3304      	adds	r3, #4
 80019e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6979      	ldr	r1, [r7, #20]
 8001a2e:	f003 fb47 	bl	80050c0 <USB_EP0StartXfer>
 8001a32:	e008      	b.n	8001a46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	f003 f8f1 	bl	8004c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	f003 020f 	and.w	r2, r3, #15
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	3338      	adds	r3, #56	; 0x38
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2201      	movs	r2, #1
 8001abe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	6979      	ldr	r1, [r7, #20]
 8001af2:	f003 fae5 	bl	80050c0 <USB_EP0StartXfer>
 8001af6:	e008      	b.n	8001b0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6979      	ldr	r1, [r7, #20]
 8001b06:	f003 f88f 	bl	8004c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d901      	bls.n	8001b32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e050      	b.n	8001bd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da0f      	bge.n	8001b5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	3338      	adds	r3, #56	; 0x38
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	e00d      	b.n	8001b76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_SetStall+0x82>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e01e      	b.n	8001bd4 <HAL_PCD_EP_SetStall+0xc0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fc79 	bl	800549c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f003 fe6b 	bl	80058a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d901      	bls.n	8001bfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e042      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0f      	bge.n	8001c22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3338      	adds	r3, #56	; 0x38
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	3304      	adds	r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
 8001c20:	e00f      	b.n	8001c42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_EP_ClrStall+0x86>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00e      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0xa4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fc81 	bl	8005578 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	3338      	adds	r3, #56	; 0x38
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d901      	bls.n	8001cc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e06c      	b.n	8001d9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d902      	bls.n	8001cdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3303      	adds	r3, #3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ce4:	e02b      	b.n	8001d3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d902      	bls.n	8001d02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3303      	adds	r3, #3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68d9      	ldr	r1, [r3, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6978      	ldr	r0, [r7, #20]
 8001d22:	f003 fb25 	bl	8005370 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	441a      	add	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	441a      	add	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d809      	bhi.n	8001d68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d203      	bcs.n	8001d68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1be      	bne.n	8001ce6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d811      	bhi.n	8001d98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d94:	4013      	ands	r3, r2
 8001d96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	333c      	adds	r3, #60	; 0x3c
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f040 80a0 	bne.w	8001f1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	f240 80dd 	bls.w	8001faa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80d7 	beq.w	8001faa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e0e:	6093      	str	r3, [r2, #8]
 8001e10:	e0cb      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	6093      	str	r3, [r2, #8]
 8001e2e:	e0bc      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 80b7 	bne.w	8001faa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d90f      	bls.n	8001e64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e60:	6093      	str	r3, [r2, #8]
 8001e62:	e0a2      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	0159      	lsls	r1, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4403      	add	r3, r0
 8001e9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4403      	add	r3, r0
 8001ec2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4419      	add	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4403      	add	r3, r0
 8001ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001edc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d114      	bne.n	8001f0e <PCD_EP_OutXfrComplete_int+0x16a>
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f06:	461a      	mov	r2, r3
 8001f08:	2101      	movs	r1, #1
 8001f0a:	f003 fcc9 	bl	80058a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 fc7d 	bl	8007814 <HAL_PCD_DataOutStageCallback>
 8001f1a:	e046      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d124      	bne.n	8001f6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f40:	6093      	str	r3, [r2, #8]
 8001f42:	e032      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f005 fc54 	bl	8007814 <HAL_PCD_DataOutStageCallback>
 8001f6c:	e01d      	b.n	8001faa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d114      	bne.n	8001f9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f96:	461a      	mov	r2, r3
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f003 fc81 	bl	80058a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f005 fc35 	bl	8007814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	4f54300a 	.word	0x4f54300a
 8001fb8:	4f54310a 	.word	0x4f54310a

08001fbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	333c      	adds	r3, #60	; 0x3c
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <PCD_EP_OutSetupPacket_int+0x88>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d90e      	bls.n	8002010 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002008:	461a      	mov	r2, r3
 800200a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f005 fbed 	bl	80077f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <PCD_EP_OutSetupPacket_int+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d90c      	bls.n	8002038 <PCD_EP_OutSetupPacket_int+0x7c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002030:	461a      	mov	r2, r3
 8002032:	2101      	movs	r1, #1
 8002034:	f003 fc34 	bl	80058a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	4f54300a 	.word	0x4f54300a

08002048 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
 8002054:	4613      	mov	r3, r2
 8002056:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002066:	883b      	ldrh	r3, [r7, #0]
 8002068:	0419      	lsls	r1, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	430a      	orrs	r2, r1
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
 8002074:	e028      	b.n	80020c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4413      	add	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e00d      	b.n	80020a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	3340      	adds	r3, #64	; 0x40
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	4413      	add	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3ec      	bcc.n	800208a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020b0:	883b      	ldrh	r3, [r7, #0]
 80020b2:	0418      	lsls	r0, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4302      	orrs	r2, r0
 80020c0:	3340      	adds	r3, #64	; 0x40
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_PCDEx_ActivateLPM+0x44>)
 8002128:	4313      	orrs	r3, r2
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	10000003 	.word	0x10000003

08002140 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00a      	beq.n	8002182 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e01f      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e01d      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	490f      	ldr	r1, [pc, #60]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002192:	f7fe fb15 	bl	80007c0 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002198:	e009      	b.n	80021ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800219a:	f7fe fb11 	bl	80007c0 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	d901      	bls.n	80021ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e007      	b.n	80021be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_PWREx_ConfigSupply+0x70>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	d1ee      	bne.n	800219a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	58024800 	.word	0x58024800

080021cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	58024800 	.word	0x58024800

080021ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 bc1c 	b.w	8002a38 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8087 	beq.w	800231c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220e:	4b9e      	ldr	r3, [pc, #632]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002218:	4b9b      	ldr	r3, [pc, #620]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	2b10      	cmp	r3, #16
 8002222:	d007      	beq.n	8002234 <HAL_RCC_OscConfig+0x48>
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	2b18      	cmp	r3, #24
 8002228:	d110      	bne.n	800224c <HAL_RCC_OscConfig+0x60>
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06c      	beq.n	800231a <HAL_RCC_OscConfig+0x12e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d168      	bne.n	800231a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e3f5      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x78>
 8002256:	4b8c      	ldr	r3, [pc, #560]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a8b      	ldr	r2, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e02e      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x9a>
 800226c:	4b86      	ldr	r3, [pc, #536]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a85      	ldr	r2, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b83      	ldr	r3, [pc, #524]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a82      	ldr	r2, [pc, #520]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e01d      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0xbe>
 8002290:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7c      	ldr	r2, [pc, #496]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b7a      	ldr	r3, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a79      	ldr	r2, [pc, #484]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0xd6>
 80022aa:	4b77      	ldr	r3, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a76      	ldr	r2, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b74      	ldr	r3, [pc, #464]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a73      	ldr	r2, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fa79 	bl	80007c0 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d2:	f7fe fa75 	bl	80007c0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e3a9      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0xe6>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fa65 	bl	80007c0 <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fa:	f7fe fa61 	bl	80007c0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	; 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e395      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x10e>
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80ca 	beq.w	80024be <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002332:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002334:	4b54      	ldr	r3, [pc, #336]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_RCC_OscConfig+0x164>
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	2b18      	cmp	r3, #24
 8002344:	d156      	bne.n	80023f4 <HAL_RCC_OscConfig+0x208>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d151      	bne.n	80023f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x17c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e367      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002368:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0219 	bic.w	r2, r3, #25
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4944      	ldr	r1, [pc, #272]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237a:	f7fe fa21 	bl	80007c0 <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fa1d 	bl	80007c0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e351      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002394:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	f7fe fa3e 	bl	8000820 <HAL_GetREVID>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d817      	bhi.n	80023de <HAL_RCC_OscConfig+0x1f2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1dc>
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023be:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c6:	e07a      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	031b      	lsls	r3, r3, #12
 80023d6:	492c      	ldr	r1, [pc, #176]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e06f      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	4926      	ldr	r1, [pc, #152]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f2:	e064      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d047      	beq.n	800248c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0219 	bic.w	r2, r3, #25
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	491f      	ldr	r1, [pc, #124]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe f9d7 	bl	80007c0 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002416:	f7fe f9d3 	bl	80007c0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e307      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	f7fe f9f4 	bl	8000820 <HAL_GetREVID>
 8002438:	4603      	mov	r3, r0
 800243a:	f241 0203 	movw	r2, #4099	; 0x1003
 800243e:	4293      	cmp	r3, r2
 8002440:	d817      	bhi.n	8002472 <HAL_RCC_OscConfig+0x286>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d108      	bne.n	800245c <HAL_RCC_OscConfig+0x270>
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002452:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	e030      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	4907      	ldr	r1, [pc, #28]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	e025      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	4901      	ldr	r1, [pc, #4]	; (8002488 <HAL_RCC_OscConfig+0x29c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
 8002486:	e01a      	b.n	80024be <HAL_RCC_OscConfig+0x2d2>
 8002488:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248c:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9d      	ldr	r2, [pc, #628]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe f992 	bl	80007c0 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe f98e 	bl	80007c0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e2c2      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b2:	4b95      	ldr	r3, [pc, #596]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80a9 	beq.w	800261e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024cc:	4b8e      	ldr	r3, [pc, #568]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d6:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d007      	beq.n	80024f2 <HAL_RCC_OscConfig+0x306>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b18      	cmp	r3, #24
 80024e6:	d13a      	bne.n	800255e <HAL_RCC_OscConfig+0x372>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d135      	bne.n	800255e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x31e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b80      	cmp	r3, #128	; 0x80
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e296      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250a:	f7fe f989 	bl	8000820 <HAL_GetREVID>
 800250e:	4603      	mov	r3, r0
 8002510:	f241 0203 	movw	r2, #4099	; 0x1003
 8002514:	4293      	cmp	r3, r2
 8002516:	d817      	bhi.n	8002548 <HAL_RCC_OscConfig+0x35c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2b20      	cmp	r3, #32
 800251e:	d108      	bne.n	8002532 <HAL_RCC_OscConfig+0x346>
 8002520:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002528:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800252a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800252e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002530:	e075      	b.n	800261e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002532:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	4971      	ldr	r1, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002546:	e06a      	b.n	800261e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	496c      	ldr	r1, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800255c:	e05f      	b.n	800261e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d042      	beq.n	80025ec <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002566:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe f925 	bl	80007c0 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800257a:	f7fe f921 	bl	80007c0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e255      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002598:	f7fe f942 	bl	8000820 <HAL_GetREVID>
 800259c:	4603      	mov	r3, r0
 800259e:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d817      	bhi.n	80025d6 <HAL_RCC_OscConfig+0x3ea>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3d4>
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025b6:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025bc:	6053      	str	r3, [r2, #4]
 80025be:	e02e      	b.n	800261e <HAL_RCC_OscConfig+0x432>
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	494e      	ldr	r1, [pc, #312]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e023      	b.n	800261e <HAL_RCC_OscConfig+0x432>
 80025d6:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	4948      	ldr	r1, [pc, #288]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a45      	ldr	r2, [pc, #276]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80025f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe f8e2 	bl	80007c0 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002600:	f7fe f8de 	bl	80007c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e212      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe f8bf 	bl	80007c0 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe f8bb 	bl	80007c0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1ef      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x45a>
 8002664:	e018      	b.n	8002698 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002672:	f7fe f8a5 	bl	80007c0 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267a:	f7fe f8a1 	bl	80007c0 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1d5      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d039      	beq.n	8002718 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d019      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80026b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b8:	f7fe f882 	bl	80007c0 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026c0:	f7fe f87e 	bl	80007c0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1b2      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4d4>
 80026de:	e01b      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x51c>)
 80026e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ec:	f7fe f868 	bl	80007c0 <HAL_GetTick>
 80026f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026f4:	f7fe f864 	bl	80007c0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d904      	bls.n	800270c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e198      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
 8002706:	bf00      	nop
 8002708:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800270c:	4ba3      	ldr	r3, [pc, #652]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ed      	bne.n	80026f4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8081 	beq.w	8002828 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002726:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCC_OscConfig+0x7b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a9d      	ldr	r2, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x7b4>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002732:	f7fe f845 	bl	80007c0 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe f841 	bl	80007c0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e175      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800274c:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x7b4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x582>
 8002760:	4b8e      	ldr	r3, [pc, #568]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a8d      	ldr	r2, [pc, #564]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	e02d      	b.n	80027ca <HAL_RCC_OscConfig+0x5de>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x5a4>
 8002776:	4b89      	ldr	r3, [pc, #548]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a88      	ldr	r2, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a85      	ldr	r2, [pc, #532]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e01c      	b.n	80027ca <HAL_RCC_OscConfig+0x5de>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x5c6>
 8002798:	4b80      	ldr	r3, [pc, #512]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a7f      	ldr	r2, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	4b7d      	ldr	r3, [pc, #500]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a7c      	ldr	r2, [pc, #496]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x5de>
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a79      	ldr	r2, [pc, #484]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b77      	ldr	r3, [pc, #476]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a76      	ldr	r2, [pc, #472]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fd fff5 	bl	80007c0 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fd fff1 	bl	80007c0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e123      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCC_OscConfig+0x5ee>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fd ffdf 	bl	80007c0 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fd ffdb 	bl	80007c0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e10d      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800281c:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8102 	beq.w	8002a36 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283a:	2b18      	cmp	r3, #24
 800283c:	f000 80bd 	beq.w	80029ba <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b02      	cmp	r3, #2
 8002846:	f040 8095 	bne.w	8002974 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a53      	ldr	r2, [pc, #332]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fd ffb3 	bl	80007c0 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fd ffaf 	bl	80007c0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0e3      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002870:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287c:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800287e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002880:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_RCC_OscConfig+0x7b8>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	430a      	orrs	r2, r1
 8002890:	4942      	ldr	r1, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	628b      	str	r3, [r1, #40]	; 0x28
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	3b01      	subs	r3, #1
 800289c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	3b01      	subs	r3, #1
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	3b01      	subs	r3, #1
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028c6:	4935      	ldr	r1, [pc, #212]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028d8:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_RCC_OscConfig+0x7bc>)
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e4:	00d2      	lsls	r2, r2, #3
 80028e6:	492d      	ldr	r1, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f023 020c 	bic.w	r2, r3, #12
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	4928      	ldr	r1, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f023 0202 	bic.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800292e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fd ff38 	bl	80007c0 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fd ff34 	bl	80007c0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e068      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x768>
 8002972:	e060      	b.n	8002a36 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_RCC_OscConfig+0x7b0>)
 800297a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fd ff1e 	bl	80007c0 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002986:	e011      	b.n	80029ac <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7fd ff1a 	bl	80007c0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d90a      	bls.n	80029ac <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04e      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
 80029a0:	58024800 	.word	0x58024800
 80029a4:	fffffc0c 	.word	0xfffffc0c
 80029a8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x854>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e7      	bne.n	8002988 <HAL_RCC_OscConfig+0x79c>
 80029b8:	e03d      	b.n	8002a36 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x854>)
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x854>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d031      	beq.n	8002a32 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d12a      	bne.n	8002a32 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d122      	bne.n	8002a32 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d11a      	bne.n	8002a32 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d111      	bne.n	8002a32 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58024400 	.word	0x58024400

08002a44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e19c      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b8a      	ldr	r3, [pc, #552]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b87      	ldr	r3, [pc, #540]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	4985      	ldr	r1, [pc, #532]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b83      	ldr	r3, [pc, #524]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e184      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aa4:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	4975      	ldr	r1, [pc, #468]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	4b70      	ldr	r3, [pc, #448]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d908      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	496a      	ldr	r1, [pc, #424]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d908      	bls.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b00:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	495e      	ldr	r1, [pc, #376]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b2e:	4b56      	ldr	r3, [pc, #344]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4953      	ldr	r1, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d908      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f023 020f 	bic.w	r2, r3, #15
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4947      	ldr	r1, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d055      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4940      	ldr	r1, [pc, #256]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b94:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d121      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0f6      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0ea      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0de      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0d6      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002be4:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4925      	ldr	r1, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fd fde3 	bl	80007c0 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfe:	f7fd fddf 	bl	80007c0 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0be      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c14:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d1eb      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d208      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d214      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 020f 	bic.w	r2, r3, #15
 8002c6a:	4906      	ldr	r1, [pc, #24]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_RCC_ClockConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e086      	b.n	8002d92 <HAL_RCC_ClockConfig+0x34e>
 8002c84:	52002000 	.word	0x52002000
 8002c88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d208      	bcs.n	8002cba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca8:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	4939      	ldr	r1, [pc, #228]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d208      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	492e      	ldr	r1, [pc, #184]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d208      	bcs.n	8002d16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4922      	ldr	r1, [pc, #136]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d208      	bcs.n	8002d44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4917      	ldr	r1, [pc, #92]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d44:	f000 f844 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	4912      	ldr	r1, [pc, #72]	; (8002da0 <HAL_RCC_ClockConfig+0x35c>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_RCC_ClockConfig+0x358>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_RCC_ClockConfig+0x35c>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_RCC_ClockConfig+0x360>)
 8002d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x364>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x368>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fcd0 	bl	800072c <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	08007e48 	.word	0x08007e48
 8002da4:	24000004 	.word	0x24000004
 8002da8:	24000000 	.word	0x24000000
 8002dac:	24000008 	.word	0x24000008

08002db0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_EnableCSS+0x1c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_EnableCSS+0x1c>)
 8002dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	58024400 	.word	0x58024400

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd6:	4bb3      	ldr	r3, [pc, #716]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	f200 8155 	bhi.w	800308e <HAL_RCC_GetSysClockFreq+0x2be>
 8002de4:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002e51 	.word	0x08002e51
 8002df0:	0800308f 	.word	0x0800308f
 8002df4:	0800308f 	.word	0x0800308f
 8002df8:	0800308f 	.word	0x0800308f
 8002dfc:	0800308f 	.word	0x0800308f
 8002e00:	0800308f 	.word	0x0800308f
 8002e04:	0800308f 	.word	0x0800308f
 8002e08:	0800308f 	.word	0x0800308f
 8002e0c:	08002e77 	.word	0x08002e77
 8002e10:	0800308f 	.word	0x0800308f
 8002e14:	0800308f 	.word	0x0800308f
 8002e18:	0800308f 	.word	0x0800308f
 8002e1c:	0800308f 	.word	0x0800308f
 8002e20:	0800308f 	.word	0x0800308f
 8002e24:	0800308f 	.word	0x0800308f
 8002e28:	0800308f 	.word	0x0800308f
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	0800308f 	.word	0x0800308f
 8002e34:	0800308f 	.word	0x0800308f
 8002e38:	0800308f 	.word	0x0800308f
 8002e3c:	0800308f 	.word	0x0800308f
 8002e40:	0800308f 	.word	0x0800308f
 8002e44:	0800308f 	.word	0x0800308f
 8002e48:	0800308f 	.word	0x0800308f
 8002e4c:	08002e83 	.word	0x08002e83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e5c:	4b91      	ldr	r3, [pc, #580]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	4a90      	ldr	r2, [pc, #576]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e6e:	e111      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e70:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e72:	61bb      	str	r3, [r7, #24]
    break;
 8002e74:	e10e      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e78:	61bb      	str	r3, [r7, #24]
    break;
 8002e7a:	e10b      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e7e:	61bb      	str	r3, [r7, #24]
    break;
 8002e80:	e108      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e8c:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e98:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ea2:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	08db      	lsrs	r3, r3, #3
 8002ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80e1 	beq.w	8003088 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	f000 8083 	beq.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x204>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f200 80a1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x248>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x114>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d056      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ee2:	e099      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d02d      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	4a6b      	ldr	r2, [pc, #428]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b62      	ldr	r3, [pc, #392]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f4a:	e087      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f8e:	e065      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd2:	e043      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003016:	e021      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800305a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	0a5b      	lsrs	r3, r3, #9
 8003062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003066:	3301      	adds	r3, #1
 8003068:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003074:	edd7 6a07 	vldr	s13, [r7, #28]
 8003078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003080:	ee17 3a90 	vmov	r3, s15
 8003084:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    break;
 800308c:	e002      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003090:	61bb      	str	r3, [r7, #24]
    break;
 8003092:	bf00      	nop
  }

  return sysclockfreq;
 8003094:	69bb      	ldr	r3, [r7, #24]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	58024400 	.word	0x58024400
 80030a8:	03d09000 	.word	0x03d09000
 80030ac:	003d0900 	.word	0x003d0900
 80030b0:	00b71b00 	.word	0x00b71b00
 80030b4:	46000000 	.word	0x46000000
 80030b8:	4c742400 	.word	0x4c742400
 80030bc:	4a742400 	.word	0x4a742400
 80030c0:	4b371b00 	.word	0x4b371b00

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030ca:	f7ff fe81 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_GetHCLKFreq+0x50>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	490f      	ldr	r1, [pc, #60]	; (8003118 <HAL_RCC_GetHCLKFreq+0x54>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_RCC_GetHCLKFreq+0x50>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_GetHCLKFreq+0x54>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_RCC_GetHCLKFreq+0x58>)
 8003100:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <HAL_RCC_GetHCLKFreq+0x58>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	58024400 	.word	0x58024400
 8003118:	08007e48 	.word	0x08007e48
 800311c:	24000004 	.word	0x24000004
 8003120:	24000000 	.word	0x24000000

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003130:	2300      	movs	r3, #0
 8003132:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003148:	d02a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800314e:	d824      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003154:	d018      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800315a:	d81e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003164:	d007      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003168:	4bab      	ldr	r3, [pc, #684]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4aaa      	ldr	r2, [pc, #680]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ff11 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3324      	adds	r3, #36	; 0x24
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 ffba 	bl	8004108 <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031a8:	4b9b      	ldr	r3, [pc, #620]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b4:	4998      	ldr	r1, [pc, #608]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	650b      	str	r3, [r1, #80]	; 0x50
 80031ba:	e001      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03d      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d826      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	080031f1 	.word	0x080031f1
 80031e0:	080031ff 	.word	0x080031ff
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003229 	.word	0x08003229
 80031ec:	08003229 	.word	0x08003229
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f0:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4a88      	ldr	r2, [pc, #544]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031fc:	e015      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fecd 	bl	8003fa4 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800320e:	e00c      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3324      	adds	r3, #36	; 0x24
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff76 	bl	8004108 <RCCEx_PLL3_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
      break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003230:	4b79      	ldr	r3, [pc, #484]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	f023 0207 	bic.w	r2, r3, #7
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	4976      	ldr	r1, [pc, #472]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	650b      	str	r3, [r1, #80]	; 0x50
 8003242:	e001      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003250:	2b00      	cmp	r3, #0
 8003252:	d042      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325c:	d02b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d825      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003264:	2bc0      	cmp	r3, #192	; 0xc0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003268:	2bc0      	cmp	r3, #192	; 0xc0
 800326a:	d821      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d81d      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d007      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800327c:	e018      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	4a65      	ldr	r2, [pc, #404]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800328a:	e017      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fe86 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800329c:	e00e      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff2f 	bl	8004108 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032ae:	e005      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e002      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	4952      	ldr	r1, [pc, #328]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	650b      	str	r3, [r1, #80]	; 0x50
 80032d4:	e001      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
 80032d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d049      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f0:	d030      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f6:	d82a      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032fc:	d02c      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003302:	d824      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d018      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800330a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330e:	d81e      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003318:	d007      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800331a:	e018      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003328:	e017      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fe37 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800333a:	e00e      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fee0 	bl	8004108 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800334c:	e005      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
      break;
 8003352:	e002      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800336e:	492a      	ldr	r1, [pc, #168]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	658b      	str	r3, [r1, #88]	; 0x58
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003382:	2b00      	cmp	r3, #0
 8003384:	d04c      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003390:	d030      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003396:	d82a      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003398:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800339c:	d02c      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800339e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033a2:	d824      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a8:	d018      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ae:	d81e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033ba:	e018      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c8:	e017      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fde7 	bl	8003fa4 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033da:	e00e      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fe90 	bl	8004108 <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ec:	e005      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800340e:	4902      	ldr	r1, [pc, #8]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	658b      	str	r3, [r1, #88]	; 0x58
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d032      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	2b30      	cmp	r3, #48	; 0x30
 8003432:	d01c      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d817      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d00c      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d813      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003444:	2b10      	cmp	r3, #16
 8003446:	d10f      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003448:	4baf      	ldr	r3, [pc, #700]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	4aae      	ldr	r2, [pc, #696]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800344e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003454:	e00e      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fda1 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003466:	e005      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e002      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800347a:	4ba3      	ldr	r3, [pc, #652]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	49a0      	ldr	r1, [pc, #640]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d047      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a6:	d030      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ac:	d82a      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b2:	d02c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80034b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b8:	d824      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034be:	d018      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c4:	d81e      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d007      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80034d0:	e018      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d2:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4a8c      	ldr	r2, [pc, #560]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034de:	e017      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fd5c 	bl	8003fa4 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034f0:	e00e      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3324      	adds	r3, #36	; 0x24
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe05 	bl	8004108 <RCCEx_PLL3_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003502:	e005      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
      break;
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800350e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003516:	4b7c      	ldr	r3, [pc, #496]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	4979      	ldr	r1, [pc, #484]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	650b      	str	r3, [r1, #80]	; 0x50
 8003528:	e001      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d049      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003542:	d02e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d828      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800354a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354e:	d02a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003554:	d822      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355a:	d026      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 800355c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003560:	d81c      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003566:	d010      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356c:	d816      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01d      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d111      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fd10 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003588:	e012      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3324      	adds	r3, #36	; 0x24
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fdb9 	bl	8004108 <RCCEx_PLL3_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800359a:	e009      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
      break;
 80035a0:	e006      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035a2:	bf00      	nop
 80035a4:	e004      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	4951      	ldr	r1, [pc, #324]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	650b      	str	r3, [r1, #80]	; 0x50
 80035c8:	e001      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04b      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e4:	d02e      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ea:	d828      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d02a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d822      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035fc:	d026      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003602:	d81c      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003608:	d010      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800360a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800360e:	d816      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01d      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003618:	d111      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fcbf 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800362a:	e012      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fd68 	bl	8004108 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800363c:	e009      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
      break;
 8003642:	e006      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003644:	bf00      	nop
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003666:	4928      	ldr	r1, [pc, #160]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	658b      	str	r3, [r1, #88]	; 0x58
 800366c:	e001      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02f      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003686:	d00e      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368c:	d814      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003696:	d10f      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036a4:	e00c      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fc79 	bl	8003fa4 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80036be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	490d      	ldr	r1, [pc, #52]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	650b      	str	r3, [r1, #80]	; 0x50
 80036d8:	e001      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d033      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d81c      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003733 	.word	0x08003733
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371b 	.word	0x0800371b
 8003704:	08003733 	.word	0x08003733
 8003708:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4bb8      	ldr	r3, [pc, #736]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4ab7      	ldr	r2, [pc, #732]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003718:	e00c      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fc3f 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800373a:	4bad      	ldr	r3, [pc, #692]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	49aa      	ldr	r1, [pc, #680]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8086 	beq.w	800386c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4ba4      	ldr	r3, [pc, #656]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4aa3      	ldr	r2, [pc, #652]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376c:	f7fd f828 	bl	80007c0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003772:	e009      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd f824 	bl	80007c0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d902      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	75fb      	strb	r3, [r7, #23]
        break;
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003788:	4b9a      	ldr	r3, [pc, #616]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d166      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800379a:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800379c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a4:	4053      	eors	r3, r2
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ae:	4b90      	ldr	r3, [pc, #576]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b8:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a8c      	ldr	r2, [pc, #560]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c4:	4b8a      	ldr	r3, [pc, #552]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a89      	ldr	r2, [pc, #548]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037d0:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e0:	d115      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7fc ffed 	bl	80007c0 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	e00b      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fc ffe9 	bl	80007c0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d902      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d126      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003822:	d10d      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003824:	4b72      	ldr	r3, [pc, #456]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003832:	0919      	lsrs	r1, r3, #4
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003836:	400b      	ands	r3, r1
 8003838:	496d      	ldr	r1, [pc, #436]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]
 800383e:	e005      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a6a      	ldr	r2, [pc, #424]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003846:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800384a:	6113      	str	r3, [r2, #16]
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800384e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	4965      	ldr	r1, [pc, #404]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	670b      	str	r3, [r1, #112]	; 0x70
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	75bb      	strb	r3, [r7, #22]
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d07e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387c:	2b28      	cmp	r3, #40	; 0x28
 800387e:	d867      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003957 	.word	0x08003957
 800388c:	08003951 	.word	0x08003951
 8003890:	08003951 	.word	0x08003951
 8003894:	08003951 	.word	0x08003951
 8003898:	08003951 	.word	0x08003951
 800389c:	08003951 	.word	0x08003951
 80038a0:	08003951 	.word	0x08003951
 80038a4:	08003951 	.word	0x08003951
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	08003951 	.word	0x08003951
 80038b0:	08003951 	.word	0x08003951
 80038b4:	08003951 	.word	0x08003951
 80038b8:	08003951 	.word	0x08003951
 80038bc:	08003951 	.word	0x08003951
 80038c0:	08003951 	.word	0x08003951
 80038c4:	08003951 	.word	0x08003951
 80038c8:	0800393f 	.word	0x0800393f
 80038cc:	08003951 	.word	0x08003951
 80038d0:	08003951 	.word	0x08003951
 80038d4:	08003951 	.word	0x08003951
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003951 	.word	0x08003951
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003957 	.word	0x08003957
 80038ec:	08003951 	.word	0x08003951
 80038f0:	08003951 	.word	0x08003951
 80038f4:	08003951 	.word	0x08003951
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003951 	.word	0x08003951
 8003900:	08003951 	.word	0x08003951
 8003904:	08003951 	.word	0x08003951
 8003908:	08003957 	.word	0x08003957
 800390c:	08003951 	.word	0x08003951
 8003910:	08003951 	.word	0x08003951
 8003914:	08003951 	.word	0x08003951
 8003918:	08003951 	.word	0x08003951
 800391c:	08003951 	.word	0x08003951
 8003920:	08003951 	.word	0x08003951
 8003924:	08003951 	.word	0x08003951
 8003928:	08003957 	.word	0x08003957
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb36 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800393c:	e00c      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fbdf 	bl	8004108 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800394e:	e003      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	654b      	str	r3, [r1, #84]	; 0x54
 8003970:	e001      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	2b05      	cmp	r3, #5
 8003988:	d820      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039d3 	.word	0x080039d3
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039bb 	.word	0x080039bb
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 faf8 	bl	8003fa4 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039b8:	e00c      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3324      	adds	r3, #36	; 0x24
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fba1 	bl	8004108 <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d110      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e6:	4902      	ldr	r1, [pc, #8]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	654b      	str	r3, [r1, #84]	; 0x54
 80039ec:	e008      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
 80039f4:	58024800 	.word	0x58024800
 80039f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d039      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d820      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a5f 	.word	0x08003a5f
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fab2 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a44:	e00c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fb5b 	bl	8004108 <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	4bb7      	ldr	r3, [pc, #732]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	49b3      	ldr	r1, [pc, #716]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	658b      	str	r3, [r1, #88]	; 0x58
 8003a7a:	e001      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d04b      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d02e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9c:	d828      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d02a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d822      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aae:	d026      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab4:	d81c      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d010      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac0:	d816      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01d      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aca:	d111      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fa66 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003adc:	e012      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3324      	adds	r3, #36	; 0x24
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fb0f 	bl	8004108 <RCCEx_PLL3_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003af6:	bf00      	nop
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003afa:	bf00      	nop
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0a:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b18:	498a      	ldr	r1, [pc, #552]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	654b      	str	r3, [r1, #84]	; 0x54
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d04b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b3a:	d02e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003b3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b40:	d828      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d02a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d822      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b52:	d026      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b58:	d81c      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b64:	d816      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fa14 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b80:	e012      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3324      	adds	r3, #36	; 0x24
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fabd 	bl	8004108 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b92:	e009      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bae:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbc:	4961      	ldr	r1, [pc, #388]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bde:	d02e      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003be0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003be4:	d828      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	d02a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d822      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bf6:	d026      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003bf8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bfc:	d81c      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c02:	d010      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d816      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c12:	d111      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f9c2 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c24:	e012      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3324      	adds	r3, #36	; 0x24
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fa6b 	bl	8004108 <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c36:	e009      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3c:	e006      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e004      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c52:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c60:	4938      	ldr	r1, [pc, #224]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	658b      	str	r3, [r1, #88]	; 0x58
 8003c66:	e001      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fa3c 	bl	8004108 <RCCEx_PLL3_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	4926      	ldr	r1, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d10a      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fa1b 	bl	8004108 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d036      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d06:	d01f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0c:	d817      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003d18:	e011      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f93f 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d2a:	e00e      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3324      	adds	r3, #36	; 0x24
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f9e8 	bl	8004108 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d3c:	e005      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003d44:	58024400 	.word	0x58024400
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d50:	4b93      	ldr	r3, [pc, #588]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d5e:	4990      	ldr	r1, [pc, #576]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	658b      	str	r3, [r1, #88]	; 0x58
 8003d64:	e001      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d033      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d80:	d01c      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d86:	d816      	bhi.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d92:	d007      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d96:	4b82      	ldr	r3, [pc, #520]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a81      	ldr	r2, [pc, #516]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003da2:	e00c      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f9ac 	bl	8004108 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc4:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	4973      	ldr	r1, [pc, #460]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d029      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d007      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003df8:	e00f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a68      	ldr	r2, [pc, #416]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e06:	e00b      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f8c8 	bl	8003fa4 <RCCEx_PLL2_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e26:	4b5e      	ldr	r3, [pc, #376]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	495b      	ldr	r1, [pc, #364]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e38:	e001      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3324      	adds	r3, #36	; 0x24
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f959 	bl	8004108 <RCCEx_PLL3_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d030      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e74:	d017      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7a:	d811      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e80:	d013      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e86:	d80b      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e9e:	e007      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec2:	4937      	ldr	r1, [pc, #220]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8003ec8:	e001      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f06:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	491e      	ldr	r1, [pc, #120]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f4c:	4914      	ldr	r1, [pc, #80]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da08      	bge.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	4906      	ldr	r1, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f8c:	7dbb      	ldrb	r3, [r7, #22]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	58024400 	.word	0x58024400

08003fa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d101      	bne.n	8003fc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e099      	b.n	80040f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4e      	ldr	r2, [pc, #312]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fc fbf7 	bl	80007c0 <HAL_GetTick>
 8003fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fd4:	e008      	b.n	8003fe8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fd6:	f7fc fbf3 	bl	80007c0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e086      	b.n	80040f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fe8:	4b45      	ldr	r3, [pc, #276]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ff4:	4b42      	ldr	r3, [pc, #264]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	493f      	ldr	r1, [pc, #252]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	628b      	str	r3, [r1, #40]	; 0x28
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	3b01      	subs	r3, #1
 800400e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	3b01      	subs	r3, #1
 8004018:	025b      	lsls	r3, r3, #9
 800401a:	b29b      	uxth	r3, r3
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004038:	4931      	ldr	r1, [pc, #196]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800403e:	4b30      	ldr	r3, [pc, #192]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	492d      	ldr	r1, [pc, #180]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f023 0220 	bic.w	r2, r3, #32
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4928      	ldr	r1, [pc, #160]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004068:	f023 0310 	bic.w	r3, r3, #16
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <RCCEx_PLL2_Config+0x160>)
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	69d2      	ldr	r2, [r2, #28]
 800407a:	00d2      	lsls	r2, r2, #3
 800407c:	4920      	ldr	r1, [pc, #128]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 800409a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040a0:	e00f      	b.n	80040c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a14      	ldr	r2, [pc, #80]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040b4:	e005      	b.n	80040c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ce:	f7fc fb77 	bl	80007c0 <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040d6:	f7fc fb73 	bl	80007c0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <RCCEx_PLL2_Config+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	58024400 	.word	0x58024400
 8004104:	ffff0007 	.word	0xffff0007

08004108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d101      	bne.n	8004126 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e099      	b.n	800425a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a4e      	ldr	r2, [pc, #312]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004132:	f7fc fb45 	bl	80007c0 <HAL_GetTick>
 8004136:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004138:	e008      	b.n	800414c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800413a:	f7fc fb41 	bl	80007c0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e086      	b.n	800425a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	051b      	lsls	r3, r3, #20
 8004166:	493f      	ldr	r1, [pc, #252]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	628b      	str	r3, [r1, #40]	; 0x28
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	3b01      	subs	r3, #1
 8004172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	3b01      	subs	r3, #1
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	b29b      	uxth	r3, r3
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	3b01      	subs	r3, #1
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800419c:	4931      	ldr	r1, [pc, #196]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	492d      	ldr	r1, [pc, #180]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	4928      	ldr	r1, [pc, #160]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <RCCEx_PLL3_Config+0x160>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	69d2      	ldr	r2, [r2, #28]
 80041de:	00d2      	lsls	r2, r2, #3
 80041e0:	4920      	ldr	r1, [pc, #128]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004204:	e00f      	b.n	8004226 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004212:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004218:	e005      	b.n	8004226 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004232:	f7fc fac5 	bl	80007c0 <HAL_GetTick>
 8004236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004238:	e008      	b.n	800424c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800423a:	f7fc fac1 	bl	80007c0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <RCCEx_PLL3_Config+0x15c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
 8004268:	ffff0007 	.word	0xffff0007

0800426c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800426c:	b084      	sub	sp, #16
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	f107 001c 	add.w	r0, r7, #28
 800427a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d120      	bne.n	80042c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <USB_CoreInit+0xd4>)
 8004296:	4013      	ands	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fb4e 	bl	800595c <USB_CoreReset>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e01a      	b.n	80042fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fb42 	bl	800595c <USB_CoreReset>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
 80042ee:	e005      	b.n	80042fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d116      	bne.n	8004330 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <USB_CoreInit+0xd8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f043 0206 	orr.w	r2, r3, #6
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800433c:	b004      	add	sp, #16
 800433e:	4770      	bx	lr
 8004340:	ffbdffbf 	.word	0xffbdffbf
 8004344:	03ee0000 	.word	0x03ee0000

08004348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d165      	bne.n	8004428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a41      	ldr	r2, [pc, #260]	; (8004464 <USB_SetTurnaroundTime+0x11c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d906      	bls.n	8004372 <USB_SetTurnaroundTime+0x2a>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4a40      	ldr	r2, [pc, #256]	; (8004468 <USB_SetTurnaroundTime+0x120>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d202      	bcs.n	8004372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800436c:	230f      	movs	r3, #15
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e062      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a3c      	ldr	r2, [pc, #240]	; (8004468 <USB_SetTurnaroundTime+0x120>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d306      	bcc.n	8004388 <USB_SetTurnaroundTime+0x40>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a3b      	ldr	r2, [pc, #236]	; (800446c <USB_SetTurnaroundTime+0x124>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d202      	bcs.n	8004388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004382:	230e      	movs	r3, #14
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e057      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a38      	ldr	r2, [pc, #224]	; (800446c <USB_SetTurnaroundTime+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d306      	bcc.n	800439e <USB_SetTurnaroundTime+0x56>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a37      	ldr	r2, [pc, #220]	; (8004470 <USB_SetTurnaroundTime+0x128>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d202      	bcs.n	800439e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004398:	230d      	movs	r3, #13
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e04c      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a33      	ldr	r2, [pc, #204]	; (8004470 <USB_SetTurnaroundTime+0x128>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d306      	bcc.n	80043b4 <USB_SetTurnaroundTime+0x6c>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a32      	ldr	r2, [pc, #200]	; (8004474 <USB_SetTurnaroundTime+0x12c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d802      	bhi.n	80043b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043ae:	230c      	movs	r3, #12
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e041      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <USB_SetTurnaroundTime+0x12c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d906      	bls.n	80043ca <USB_SetTurnaroundTime+0x82>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a2e      	ldr	r2, [pc, #184]	; (8004478 <USB_SetTurnaroundTime+0x130>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d802      	bhi.n	80043ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043c4:	230b      	movs	r3, #11
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e036      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a2a      	ldr	r2, [pc, #168]	; (8004478 <USB_SetTurnaroundTime+0x130>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d906      	bls.n	80043e0 <USB_SetTurnaroundTime+0x98>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <USB_SetTurnaroundTime+0x134>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d802      	bhi.n	80043e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043da:	230a      	movs	r3, #10
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e02b      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <USB_SetTurnaroundTime+0x134>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d906      	bls.n	80043f6 <USB_SetTurnaroundTime+0xae>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a25      	ldr	r2, [pc, #148]	; (8004480 <USB_SetTurnaroundTime+0x138>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d202      	bcs.n	80043f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043f0:	2309      	movs	r3, #9
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e020      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a21      	ldr	r2, [pc, #132]	; (8004480 <USB_SetTurnaroundTime+0x138>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d306      	bcc.n	800440c <USB_SetTurnaroundTime+0xc4>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <USB_SetTurnaroundTime+0x13c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d802      	bhi.n	800440c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004406:	2308      	movs	r3, #8
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e015      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <USB_SetTurnaroundTime+0x13c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d906      	bls.n	8004422 <USB_SetTurnaroundTime+0xda>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <USB_SetTurnaroundTime+0x140>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d202      	bcs.n	8004422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800441c:	2307      	movs	r3, #7
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e00a      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004422:	2306      	movs	r3, #6
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e007      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800442e:	2309      	movs	r3, #9
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e001      	b.n	8004438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004434:	2309      	movs	r3, #9
 8004436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	00d8acbf 	.word	0x00d8acbf
 8004468:	00e4e1c0 	.word	0x00e4e1c0
 800446c:	00f42400 	.word	0x00f42400
 8004470:	01067380 	.word	0x01067380
 8004474:	011a499f 	.word	0x011a499f
 8004478:	01312cff 	.word	0x01312cff
 800447c:	014ca43f 	.word	0x014ca43f
 8004480:	016e3600 	.word	0x016e3600
 8004484:	01a6ab1f 	.word	0x01a6ab1f
 8004488:	01e84800 	.word	0x01e84800

0800448c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d115      	bne.n	800451e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044fe:	2001      	movs	r0, #1
 8004500:	f7fc f96a 	bl	80007d8 <HAL_Delay>
      ms++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f001 f995 	bl	800583a <USB_GetMode>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d01e      	beq.n	8004554 <USB_SetCurrentMode+0x84>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b31      	cmp	r3, #49	; 0x31
 800451a:	d9f0      	bls.n	80044fe <USB_SetCurrentMode+0x2e>
 800451c:	e01a      	b.n	8004554 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d115      	bne.n	8004550 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004530:	2001      	movs	r0, #1
 8004532:	f7fc f951 	bl	80007d8 <HAL_Delay>
      ms++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f001 f97c 	bl	800583a <USB_GetMode>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <USB_SetCurrentMode+0x84>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b31      	cmp	r3, #49	; 0x31
 800454c:	d9f0      	bls.n	8004530 <USB_SetCurrentMode+0x60>
 800454e:	e001      	b.n	8004554 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e005      	b.n	8004560 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b32      	cmp	r3, #50	; 0x32
 8004558:	d101      	bne.n	800455e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004568:	b084      	sub	sp, #16
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	e009      	b.n	800459c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3340      	adds	r3, #64	; 0x40
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	2200      	movs	r2, #0
 8004594:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3301      	adds	r3, #1
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b0e      	cmp	r3, #14
 80045a0:	d9f2      	bls.n	8004588 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11c      	bne.n	80045e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b6:	f043 0302 	orr.w	r3, r3, #2
 80045ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e005      	b.n	80045ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045f4:	461a      	mov	r2, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	4619      	mov	r1, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	461a      	mov	r2, r3
 800460a:	680b      	ldr	r3, [r1, #0]
 800460c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10c      	bne.n	800462e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800461a:	2100      	movs	r1, #0
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f961 	bl	80048e4 <USB_SetDevSpeed>
 8004622:	e008      	b.n	8004636 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004624:	2101      	movs	r1, #1
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f95c 	bl	80048e4 <USB_SetDevSpeed>
 800462c:	e003      	b.n	8004636 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800462e:	2103      	movs	r1, #3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f957 	bl	80048e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004636:	2110      	movs	r1, #16
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8f3 	bl	8004824 <USB_FlushTxFifo>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f91d 	bl	8004888 <USB_FlushRxFifo>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	e043      	b.n	800470a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004698:	d118      	bne.n	80046cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	461a      	mov	r2, r3
 80046ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e013      	b.n	80046de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e008      	b.n	80046de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	461a      	mov	r2, r3
 80046da:	2300      	movs	r3, #0
 80046dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	461a      	mov	r2, r3
 80046fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	429a      	cmp	r2, r3
 8004710:	d3b7      	bcc.n	8004682 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e043      	b.n	80047a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472e:	d118      	bne.n	8004762 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e013      	b.n	8004774 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e008      	b.n	8004774 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	2300      	movs	r3, #0
 8004772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	461a      	mov	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004792:	461a      	mov	r2, r3
 8004794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3b7      	bcc.n	8004718 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f043 0210 	orr.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <USB_DevInit+0x2b4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f043 0208 	orr.w	r2, r3, #8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699a      	ldr	r2, [r3, #24]
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <USB_DevInit+0x2b8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004818:	b004      	add	sp, #16
 800481a:	4770      	bx	lr
 800481c:	803c3800 	.word	0x803c3800
 8004820:	40000004 	.word	0x40000004

08004824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	4a12      	ldr	r2, [pc, #72]	; (8004884 <USB_FlushTxFifo+0x60>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e01a      	b.n	8004878 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	daf3      	bge.n	8004832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <USB_FlushTxFifo+0x60>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e006      	b.n	8004878 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d0f1      	beq.n	800485a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	00030d40 	.word	0x00030d40

08004888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <USB_FlushRxFifo+0x58>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e017      	b.n	80048d4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	daf3      	bge.n	8004894 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2210      	movs	r2, #16
 80048b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <USB_FlushRxFifo+0x58>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d0f1      	beq.n	80048b6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	00030d40 	.word	0x00030d40

080048e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b087      	sub	sp, #28
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0306 	and.w	r3, r3, #6
 800492e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
 800493a:	e00a      	b.n	8004952 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d002      	beq.n	8004948 <USB_GetDevSpeed+0x32>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d102      	bne.n	800494e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004948:	2302      	movs	r3, #2
 800494a:	75fb      	strb	r3, [r7, #23]
 800494c:	e001      	b.n	8004952 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800494e:	230f      	movs	r3, #15
 8004950:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d139      	bne.n	80049f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800499a:	4313      	orrs	r3, r2
 800499c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d153      	bne.n	8004a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	78db      	ldrb	r3, [r3, #3]
 80049ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	059b      	lsls	r3, r3, #22
 80049d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	440b      	add	r3, r1
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	4619      	mov	r1, r3
 80049e8:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <USB_ActivateEndpoint+0x10c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
 80049ee:	e035      	b.n	8004a5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a44:	430b      	orrs	r3, r1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0159      	lsls	r1, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	440b      	add	r3, r1
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	4619      	mov	r1, r3
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <USB_ActivateEndpoint+0x10c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	10008000 	.word	0x10008000

08004a70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d161      	bne.n	8004b50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa2:	d11f      	bne.n	8004ae4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ac2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b04:	4013      	ands	r3, r2
 8004b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	440b      	add	r3, r1
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	4619      	mov	r1, r3
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <USB_DeactivateEndpoint+0x1b0>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
 8004b4e:	e060      	b.n	8004c12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b66:	d11f      	bne.n	8004ba8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc8:	4013      	ands	r3, r2
 8004bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	43db      	mvns	r3, r3
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bec:	4013      	ands	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	0159      	lsls	r1, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	440b      	add	r3, r1
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <USB_DeactivateEndpoint+0x1b4>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	ec337800 	.word	0xec337800
 8004c24:	eff37800 	.word	0xeff37800

08004c28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 8163 	bne.w	8004f10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d132      	bne.n	8004cb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4ba5      	ldr	r3, [pc, #660]	; (8004f04 <USB_EPStartXfer+0x2dc>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	0159      	lsls	r1, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	440b      	add	r3, r1
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4b95      	ldr	r3, [pc, #596]	; (8004f08 <USB_EPStartXfer+0x2e0>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
 8004cb6:	e074      	b.n	8004da2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4b8c      	ldr	r3, [pc, #560]	; (8004f08 <USB_EPStartXfer+0x2e0>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4b83      	ldr	r3, [pc, #524]	; (8004f04 <USB_EPStartXfer+0x2dc>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6959      	ldr	r1, [r3, #20]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	440b      	add	r3, r1
 8004d14:	1e59      	subs	r1, r3, #1
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d20:	4b7a      	ldr	r3, [pc, #488]	; (8004f0c <USB_EPStartXfer+0x2e4>)
 8004d22:	400b      	ands	r3, r1
 8004d24:	69b9      	ldr	r1, [r7, #24]
 8004d26:	0148      	lsls	r0, r1, #5
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	4401      	add	r1, r0
 8004d2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	0148      	lsls	r0, r1, #5
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	4401      	add	r1, r0
 8004d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	78db      	ldrb	r3, [r3, #3]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d11f      	bne.n	8004da2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004da0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d14b      	bne.n	8004e40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	78db      	ldrb	r3, [r3, #3]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d128      	bne.n	8004e1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d110      	bne.n	8004dfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e00f      	b.n	8004e1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e133      	b.n	80050a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d015      	beq.n	8004e94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 811b 	beq.w	80050a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	634b      	str	r3, [r1, #52]	; 0x34
 8004e92:	e109      	b.n	80050a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e00f      	b.n	8004ee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4603      	mov	r3, r0
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa38 	bl	8005370 <USB_WritePacket>
 8004f00:	e0d2      	b.n	80050a8 <USB_EPStartXfer+0x480>
 8004f02:	bf00      	nop
 8004f04:	e007ffff 	.word	0xe007ffff
 8004f08:	fff80000 	.word	0xfff80000
 8004f0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	0159      	lsls	r1, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	440b      	add	r3, r1
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <USB_EPStartXfer+0x48c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	440b      	add	r3, r1
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <USB_EPStartXfer+0x490>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d123      	bne.n	8004fa4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	0148      	lsls	r0, r1, #5
 8004f76:	69f9      	ldr	r1, [r7, #28]
 8004f78:	4401      	add	r1, r0
 8004f7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa0:	6113      	str	r3, [r2, #16]
 8004fa2:	e033      	b.n	800500c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	04d9      	lsls	r1, r3, #19
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <USB_EPStartXfer+0x494>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	0148      	lsls	r0, r1, #5
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	8af9      	ldrh	r1, [r7, #22]
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	0148      	lsls	r0, r1, #5
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4401      	add	r1, r0
 8005004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10d      	bne.n	800502e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68d9      	ldr	r1, [r3, #12]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	460a      	mov	r2, r1
 800502c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	78db      	ldrb	r3, [r3, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d128      	bne.n	8005088 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d110      	bne.n	8005068 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00f      	b.n	8005088 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	fff80000 	.word	0xfff80000
 80050b8:	e007ffff 	.word	0xe007ffff
 80050bc:	1ff80000 	.word	0x1ff80000

080050c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 80cd 	bne.w	800527c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d132      	bne.n	8005150 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	0159      	lsls	r1, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	440b      	add	r3, r1
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	4619      	mov	r1, r3
 8005106:	4b98      	ldr	r3, [pc, #608]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 8005108:	4013      	ands	r3, r2
 800510a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	0159      	lsls	r1, r3, #5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	440b      	add	r3, r1
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	4619      	mov	r1, r3
 8005148:	4b88      	ldr	r3, [pc, #544]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800514a:	4013      	ands	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
 800514e:	e04e      	b.n	80051ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	0159      	lsls	r1, r3, #5
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	440b      	add	r3, r1
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	4619      	mov	r1, r3
 800516c:	4b7f      	ldr	r3, [pc, #508]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800516e:	4013      	ands	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	440b      	add	r3, r1
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	4619      	mov	r1, r3
 800518e:	4b76      	ldr	r3, [pc, #472]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 8005190:	4013      	ands	r3, r2
 8005192:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d903      	bls.n	80051a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	0148      	lsls	r0, r1, #5
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	4401      	add	r1, r0
 80051e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d11e      	bne.n	8005232 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e092      	b.n	8005358 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005250:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d07e      	beq.n	8005358 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	2101      	movs	r1, #1
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005276:	4313      	orrs	r3, r2
 8005278:	634b      	str	r3, [r1, #52]	; 0x34
 800527a:	e06d      	b.n	8005358 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	0159      	lsls	r1, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	440b      	add	r3, r1
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	4619      	mov	r1, r3
 8005298:	4b34      	ldr	r3, [pc, #208]	; (800536c <USB_EP0StartXfer+0x2ac>)
 800529a:	4013      	ands	r3, r2
 800529c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	0159      	lsls	r1, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	4619      	mov	r1, r3
 80052ba:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <USB_EP0StartXfer+0x2a8>)
 80052bc:	4013      	ands	r3, r2
 80052be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	0148      	lsls	r0, r1, #5
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	4401      	add	r1, r0
 800530e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10d      	bne.n	8005338 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68d9      	ldr	r1, [r3, #12]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	460a      	mov	r2, r1
 8005336:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e007ffff 	.word	0xe007ffff
 800536c:	fff80000 	.word	0xfff80000

08005370 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	460b      	mov	r3, r1
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	4613      	mov	r3, r2
 8005384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800538e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d123      	bne.n	80053de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005396:	88bb      	ldrh	r3, [r7, #4]
 8005398:	3303      	adds	r3, #3
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e018      	b.n	80053d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	031a      	lsls	r2, r3, #12
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b0:	461a      	mov	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3e2      	bcc.n	80053a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3724      	adds	r7, #36	; 0x24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b08b      	sub	sp, #44	; 0x2c
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	b29b      	uxth	r3, r3
 8005408:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	e014      	b.n	8005442 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	601a      	str	r2, [r3, #0]
    pDest++;
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	3301      	adds	r3, #1
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	3301      	adds	r3, #1
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	3301      	adds	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	3301      	adds	r3, #1
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3e6      	bcc.n	8005418 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800544a:	8bfb      	ldrh	r3, [r7, #30]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545a:	461a      	mov	r2, r3
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	b2da      	uxtb	r2, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	701a      	strb	r2, [r3, #0]
      i++;
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	3301      	adds	r3, #1
 800547a:	623b      	str	r3, [r7, #32]
      pDest++;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005482:	8bfb      	ldrh	r3, [r7, #30]
 8005484:	3b01      	subs	r3, #1
 8005486:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1ea      	bne.n	8005464 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005490:	4618      	mov	r0, r3
 8005492:	372c      	adds	r7, #44	; 0x2c
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d12c      	bne.n	8005512 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	db12      	blt.n	80054f0 <USB_EPSetStall+0x54>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e02b      	b.n	800556a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db12      	blt.n	800554a <USB_EPSetStall+0xae>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005548:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005568:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d128      	bne.n	80055e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d003      	beq.n	80055c4 <USB_EPClearStall+0x4c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d138      	bne.n	8005636 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e027      	b.n	8005636 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005604:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	78db      	ldrb	r3, [r3, #3]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d003      	beq.n	8005616 <USB_EPClearStall+0x9e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d10f      	bne.n	8005636 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005662:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005666:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056be:	f023 0302 	bic.w	r3, r3, #2
 80056c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056ec:	f023 0303 	bic.w	r3, r3, #3
 80056f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	0c1b      	lsrs	r3, r3, #16
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	b29b      	uxth	r3, r3
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057d0:	68bb      	ldr	r3, [r7, #8]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	01db      	lsls	r3, r3, #7
 8005810:	b2db      	uxtb	r3, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4013      	ands	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800582c:	68bb      	ldr	r3, [r7, #8]
}
 800582e:	4618      	mov	r0, r3
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	4619      	mov	r1, r3
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <USB_ActivateSetup+0x44>)
 8005876:	4013      	ands	r3, r2
 8005878:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	fffff800 	.word	0xfffff800

080058a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	460b      	mov	r3, r1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	333c      	adds	r3, #60	; 0x3c
 80058b6:	3304      	adds	r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4a26      	ldr	r2, [pc, #152]	; (8005958 <USB_EP0_OutStart+0xb8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d90a      	bls.n	80058da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d4:	d101      	bne.n	80058da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e037      	b.n	800594a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	461a      	mov	r2, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f043 0318 	orr.w	r3, r3, #24
 800590c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005920:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005922:	7afb      	ldrb	r3, [r7, #11]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10f      	bne.n	8005948 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005942:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	4f54300a 	.word	0x4f54300a

0800595c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <USB_CoreReset+0x60>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e01a      	b.n	80059ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	daf3      	bge.n	8005968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f043 0201 	orr.w	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <USB_CoreReset+0x60>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d0f1      	beq.n	8005990 <USB_CoreReset+0x34>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059d0:	f002 f98e 	bl	8007cf0 <USBD_static_malloc>
 80059d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059e4:	2302      	movs	r3, #2
 80059e6:	e066      	b.n	8005ab6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	7c1b      	ldrb	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d119      	bne.n	8005a2c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059fc:	2202      	movs	r2, #2
 80059fe:	2181      	movs	r1, #129	; 0x81
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f002 f852 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a10:	2202      	movs	r2, #2
 8005a12:	2101      	movs	r1, #1
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f002 f848 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a2a:	e016      	b.n	8005a5a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	2202      	movs	r2, #2
 8005a30:	2181      	movs	r1, #129	; 0x81
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f002 f839 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	2202      	movs	r2, #2
 8005a42:	2101      	movs	r1, #1
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f002 f830 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2210      	movs	r2, #16
 8005a56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	2182      	movs	r1, #130	; 0x82
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f002 f822 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7c1b      	ldrb	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f002 f8f3 	bl	8007c88 <USBD_LL_PrepareReceive>
 8005aa2:	e007      	b.n	8005ab4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	2101      	movs	r1, #1
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f002 f8ea 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005aca:	2181      	movs	r1, #129	; 0x81
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f002 f812 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f002 f80b 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ae8:	2182      	movs	r1, #130	; 0x82
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f002 f803 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00e      	beq.n	8005b28 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 f8f6 	bl	8007d0c <USBD_static_free>
    pdev->pClassData = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0af      	b.n	8005cbc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d03f      	beq.n	8005be8 <USBD_CDC_Setup+0xb4>
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	f040 809f 	bne.w	8005cac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	88db      	ldrh	r3, [r3, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02e      	beq.n	8005bd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da16      	bge.n	8005bae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005b8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	88d2      	ldrh	r2, [r2, #6]
 8005b92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	88db      	ldrh	r3, [r3, #6]
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	bf28      	it	cs
 8005b9c:	2307      	movcs	r3, #7
 8005b9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	89fa      	ldrh	r2, [r7, #14]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fb19 	bl	80071de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005bac:	e085      	b.n	8005cba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	785a      	ldrb	r2, [r3, #1]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	88db      	ldrh	r3, [r3, #6]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bc4:	6939      	ldr	r1, [r7, #16]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fb32 	bl	8007236 <USBD_CtlPrepareRx>
      break;
 8005bd2:	e072      	b.n	8005cba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	7850      	ldrb	r0, [r2, #1]
 8005be0:	2200      	movs	r2, #0
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	4798      	blx	r3
      break;
 8005be6:	e068      	b.n	8005cba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b0b      	cmp	r3, #11
 8005bee:	d852      	bhi.n	8005c96 <USBD_CDC_Setup+0x162>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <USBD_CDC_Setup+0xc4>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005ca5 	.word	0x08005ca5
 8005c00:	08005c97 	.word	0x08005c97
 8005c04:	08005c97 	.word	0x08005c97
 8005c08:	08005c97 	.word	0x08005c97
 8005c0c:	08005c97 	.word	0x08005c97
 8005c10:	08005c97 	.word	0x08005c97
 8005c14:	08005c97 	.word	0x08005c97
 8005c18:	08005c97 	.word	0x08005c97
 8005c1c:	08005c97 	.word	0x08005c97
 8005c20:	08005c53 	.word	0x08005c53
 8005c24:	08005c7d 	.word	0x08005c7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d107      	bne.n	8005c44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c34:	f107 030a 	add.w	r3, r7, #10
 8005c38:	2202      	movs	r2, #2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 face 	bl	80071de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c42:	e032      	b.n	8005caa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fa58 	bl	80070fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c50:	e02b      	b.n	8005caa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d107      	bne.n	8005c6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c5e:	f107 030d 	add.w	r3, r7, #13
 8005c62:	2201      	movs	r2, #1
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fab9 	bl	80071de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c6c:	e01d      	b.n	8005caa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fa43 	bl	80070fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c76:	2303      	movs	r3, #3
 8005c78:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7a:	e016      	b.n	8005caa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d00f      	beq.n	8005ca8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fa36 	bl	80070fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c94:	e008      	b.n	8005ca8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fa2f 	bl	80070fc <USBD_CtlError>
          ret = USBD_FAIL;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca2:	e002      	b.n	8005caa <USBD_CDC_Setup+0x176>
          break;
 8005ca4:	bf00      	nop
 8005ca6:	e008      	b.n	8005cba <USBD_CDC_Setup+0x186>
          break;
 8005ca8:	bf00      	nop
      }
      break;
 8005caa:	e006      	b.n	8005cba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fa24 	bl	80070fc <USBD_CtlError>
      ret = USBD_FAIL;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e04f      	b.n	8005d86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d029      	beq.n	8005d58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3318      	adds	r3, #24
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	78f9      	ldrb	r1, [r7, #3]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	1a5b      	subs	r3, r3, r1
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4403      	add	r3, r0
 8005d24:	3344      	adds	r3, #68	; 0x44
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d2c:	fb03 f301 	mul.w	r3, r3, r1
 8005d30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d110      	bne.n	8005d58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3318      	adds	r3, #24
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d4a:	78f9      	ldrb	r1, [r7, #3]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2200      	movs	r2, #0
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 ff78 	bl	8007c46 <USBD_LL_Transmit>
 8005d56:	e015      	b.n	8005d84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e015      	b.n	8005ddc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 ff88 	bl	8007cca <USBD_LL_GetRxDataSize>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e01b      	b.n	8005e36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <USBD_CDC_EP0_RxReady+0x50>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e0e:	2bff      	cmp	r3, #255	; 0xff
 8005e10:	d010      	beq.n	8005e34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2243      	movs	r2, #67	; 0x43
 8005e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	24000098 	.word	0x24000098

08005e60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2243      	movs	r2, #67	; 0x43
 8005e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e6e:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	24000054 	.word	0x24000054

08005e80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2243      	movs	r2, #67	; 0x43
 8005e8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e8e:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	240000dc 	.word	0x240000dc

08005ea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	220a      	movs	r2, #10
 8005eac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005eae:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	24000010 	.word	0x24000010

08005ec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e004      	b.n	8005ede <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e008      	b.n	8005f1a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e004      	b.n	8005f4c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e01a      	b.n	8005fb0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d114      	bne.n	8005fae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fa2:	2181      	movs	r1, #129	; 0x81
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fe4e 	bl	8007c46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e016      	b.n	8006004 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7c1b      	ldrb	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe8:	2101      	movs	r1, #1
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fe4c 	bl	8007c88 <USBD_LL_PrepareReceive>
 8005ff0:	e007      	b.n	8006002 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fe43 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006020:	2303      	movs	r3, #3
 8006022:	e01f      	b.n	8006064 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	79fa      	ldrb	r2, [r7, #7]
 8006056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f001 fcbb 	bl	80079d4 <USBD_LL_Init>
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006080:	2303      	movs	r3, #3
 8006082:	e016      	b.n	80060b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	f107 020e 	add.w	r2, r7, #14
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fcd6 	bl	8007a74 <USBD_LL_Start>
 80060c8:	4603      	mov	r3, r0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	4611      	mov	r1, r2
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	4611      	mov	r1, r2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 ff90 	bl	8007088 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006176:	461a      	mov	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b02      	cmp	r3, #2
 800618a:	d01a      	beq.n	80061c2 <USBD_LL_SetupStage+0x72>
 800618c:	2b02      	cmp	r3, #2
 800618e:	d822      	bhi.n	80061d6 <USBD_LL_SetupStage+0x86>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <USBD_LL_SetupStage+0x4a>
 8006194:	2b01      	cmp	r3, #1
 8006196:	d00a      	beq.n	80061ae <USBD_LL_SetupStage+0x5e>
 8006198:	e01d      	b.n	80061d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa62 	bl	800666c <USBD_StdDevReq>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
      break;
 80061ac:	e020      	b.n	80061f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fac6 	bl	8006748 <USBD_StdItfReq>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
      break;
 80061c0:	e016      	b.n	80061f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fb05 	bl	80067da <USBD_StdEPReq>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
      break;
 80061d4:	e00c      	b.n	80061f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fca5 	bl	8007b34 <USBD_LL_StallEP>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	bf00      	nop
  }

  return ret;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	460b      	mov	r3, r1
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006208:	7afb      	ldrb	r3, [r7, #11]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d138      	bne.n	8006280 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006214:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800621c:	2b03      	cmp	r3, #3
 800621e:	d14a      	bne.n	80062b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d913      	bls.n	8006254 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4293      	cmp	r3, r2
 8006244:	bf28      	it	cs
 8006246:	4613      	movcs	r3, r2
 8006248:	461a      	mov	r2, r3
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f001 f80f 	bl	8007270 <USBD_CtlContinueRx>
 8006252:	e030      	b.n	80062b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d10b      	bne.n	8006278 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 f80a 	bl	8007292 <USBD_CtlSendStatus>
 800627e:	e01a      	b.n	80062b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b03      	cmp	r3, #3
 800628a:	d114      	bne.n	80062b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00e      	beq.n	80062b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	7afa      	ldrb	r2, [r7, #11]
 80062a2:	4611      	mov	r1, r2
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	4798      	blx	r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	e000      	b.n	80062b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	460b      	mov	r3, r1
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062ce:	7afb      	ldrb	r3, [r7, #11]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d16b      	bne.n	80063ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3314      	adds	r3, #20
 80062d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d156      	bne.n	8006392 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d914      	bls.n	800631a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	461a      	mov	r2, r3
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 ff84 	bl	8007214 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800630c:	2300      	movs	r3, #0
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f001 fcb8 	bl	8007c88 <USBD_LL_PrepareReceive>
 8006318:	e03b      	b.n	8006392 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d11c      	bne.n	8006360 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800632e:	429a      	cmp	r2, r3
 8006330:	d316      	bcc.n	8006360 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800633c:	429a      	cmp	r2, r3
 800633e:	d20f      	bcs.n	8006360 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 ff65 	bl	8007214 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f001 fc95 	bl	8007c88 <USBD_LL_PrepareReceive>
 800635e:	e018      	b.n	8006392 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d10b      	bne.n	8006384 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006384:	2180      	movs	r1, #128	; 0x80
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f001 fbd4 	bl	8007b34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 ff93 	bl	80072b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006398:	2b01      	cmp	r3, #1
 800639a:	d122      	bne.n	80063e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fe98 	bl	80060d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063aa:	e01a      	b.n	80063e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d114      	bne.n	80063e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	7afa      	ldrb	r2, [r7, #11]
 80063ce:	4611      	mov	r1, r2
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	e000      	b.n	80063e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800641c:	2303      	movs	r3, #3
 800641e:	e02f      	b.n	8006480 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	4611      	mov	r1, r2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800644a:	2340      	movs	r3, #64	; 0x40
 800644c:	2200      	movs	r2, #0
 800644e:	2100      	movs	r1, #0
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fb2a 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2240      	movs	r2, #64	; 0x40
 8006462:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	2200      	movs	r2, #0
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fb1c 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2204      	movs	r2, #4
 80064c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d106      	bne.n	80064f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006516:	2303      	movs	r3, #3
 8006518:	e012      	b.n	8006540 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d10b      	bne.n	800653e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800655e:	2303      	movs	r3, #3
 8006560:	e014      	b.n	800658c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b03      	cmp	r3, #3
 800656c:	d10d      	bne.n	800658a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	4611      	mov	r1, r2
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e014      	b.n	80065d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d10d      	bne.n	80065d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	4611      	mov	r1, r2
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	4611      	mov	r1, r2
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800662e:	b480      	push	{r7}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800664c:	8a3b      	ldrh	r3, [r7, #16]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	b21a      	sxth	r2, r3
 8006652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006656:	4313      	orrs	r3, r2
 8006658:	b21b      	sxth	r3, r3
 800665a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800665c:	89fb      	ldrh	r3, [r7, #14]
}
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d005      	beq.n	8006692 <USBD_StdDevReq+0x26>
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d853      	bhi.n	8006732 <USBD_StdDevReq+0xc6>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <USBD_StdDevReq+0x3a>
 800668e:	2b20      	cmp	r3, #32
 8006690:	d14f      	bne.n	8006732 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
      break;
 80066a4:	e04a      	b.n	800673c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d83b      	bhi.n	8006726 <USBD_StdDevReq+0xba>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <USBD_StdDevReq+0x48>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	08006709 	.word	0x08006709
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	08006727 	.word	0x08006727
 80066c0:	08006713 	.word	0x08006713
 80066c4:	08006727 	.word	0x08006727
 80066c8:	080066e7 	.word	0x080066e7
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	08006727 	.word	0x08006727
 80066d4:	080066ff 	.word	0x080066ff
 80066d8:	080066f1 	.word	0x080066f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f9de 	bl	8006aa0 <USBD_GetDescriptor>
          break;
 80066e4:	e024      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fb43 	bl	8006d74 <USBD_SetAddress>
          break;
 80066ee:	e01f      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fb82 	bl	8006dfc <USBD_SetConfig>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
          break;
 80066fc:	e018      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fc21 	bl	8006f48 <USBD_GetConfig>
          break;
 8006706:	e013      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fc52 	bl	8006fb4 <USBD_GetStatus>
          break;
 8006710:	e00e      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc81 	bl	800701c <USBD_SetFeature>
          break;
 800671a:	e009      	b.n	8006730 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fc90 	bl	8007044 <USBD_ClrFeature>
          break;
 8006724:	e004      	b.n	8006730 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fce7 	bl	80070fc <USBD_CtlError>
          break;
 800672e:	bf00      	nop
      }
      break;
 8006730:	e004      	b.n	800673c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fce1 	bl	80070fc <USBD_CtlError>
      break;
 800673a:	bf00      	nop
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop

08006748 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d005      	beq.n	800676e <USBD_StdItfReq+0x26>
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d82f      	bhi.n	80067c6 <USBD_StdItfReq+0x7e>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <USBD_StdItfReq+0x26>
 800676a:	2b20      	cmp	r3, #32
 800676c:	d12b      	bne.n	80067c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	2b02      	cmp	r3, #2
 800677a:	d81d      	bhi.n	80067b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	889b      	ldrh	r3, [r3, #4]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d813      	bhi.n	80067ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	88db      	ldrh	r3, [r3, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d110      	bne.n	80067c2 <USBD_StdItfReq+0x7a>
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10d      	bne.n	80067c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fd73 	bl	8007292 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067ac:	e009      	b.n	80067c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fca3 	bl	80070fc <USBD_CtlError>
          break;
 80067b6:	e004      	b.n	80067c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc9e 	bl	80070fc <USBD_CtlError>
          break;
 80067c0:	e000      	b.n	80067c4 <USBD_StdItfReq+0x7c>
          break;
 80067c2:	bf00      	nop
      }
      break;
 80067c4:	e004      	b.n	80067d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fc97 	bl	80070fc <USBD_CtlError>
      break;
 80067ce:	bf00      	nop
  }

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	889b      	ldrh	r3, [r3, #4]
 80067ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d007      	beq.n	800680a <USBD_StdEPReq+0x30>
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	f200 8145 	bhi.w	8006a8a <USBD_StdEPReq+0x2b0>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <USBD_StdEPReq+0x44>
 8006804:	2b20      	cmp	r3, #32
 8006806:	f040 8140 	bne.w	8006a8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
      break;
 800681c:	e13a      	b.n	8006a94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b03      	cmp	r3, #3
 8006824:	d007      	beq.n	8006836 <USBD_StdEPReq+0x5c>
 8006826:	2b03      	cmp	r3, #3
 8006828:	f300 8129 	bgt.w	8006a7e <USBD_StdEPReq+0x2a4>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d07f      	beq.n	8006930 <USBD_StdEPReq+0x156>
 8006830:	2b01      	cmp	r3, #1
 8006832:	d03c      	beq.n	80068ae <USBD_StdEPReq+0xd4>
 8006834:	e123      	b.n	8006a7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d002      	beq.n	8006848 <USBD_StdEPReq+0x6e>
 8006842:	2b03      	cmp	r3, #3
 8006844:	d016      	beq.n	8006874 <USBD_StdEPReq+0x9a>
 8006846:	e02c      	b.n	80068a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <USBD_StdEPReq+0x90>
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	2b80      	cmp	r3, #128	; 0x80
 8006852:	d00a      	beq.n	800686a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 f96b 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800685e:	2180      	movs	r1, #128	; 0x80
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f967 	bl	8007b34 <USBD_LL_StallEP>
 8006866:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006868:	e020      	b.n	80068ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc45 	bl	80070fc <USBD_CtlError>
              break;
 8006872:	e01b      	b.n	80068ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10e      	bne.n	800689a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <USBD_StdEPReq+0xc0>
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d008      	beq.n	800689a <USBD_StdEPReq+0xc0>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 f94d 	bl	8007b34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fcf9 	bl	8007292 <USBD_CtlSendStatus>

              break;
 80068a0:	e004      	b.n	80068ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fc29 	bl	80070fc <USBD_CtlError>
              break;
 80068aa:	bf00      	nop
          }
          break;
 80068ac:	e0ec      	b.n	8006a88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d002      	beq.n	80068c0 <USBD_StdEPReq+0xe6>
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d016      	beq.n	80068ec <USBD_StdEPReq+0x112>
 80068be:	e030      	b.n	8006922 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00d      	beq.n	80068e2 <USBD_StdEPReq+0x108>
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b80      	cmp	r3, #128	; 0x80
 80068ca:	d00a      	beq.n	80068e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f92f 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068d6:	2180      	movs	r1, #128	; 0x80
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 f92b 	bl	8007b34 <USBD_LL_StallEP>
 80068de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068e0:	e025      	b.n	800692e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc09 	bl	80070fc <USBD_CtlError>
              break;
 80068ea:	e020      	b.n	800692e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	885b      	ldrh	r3, [r3, #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11b      	bne.n	800692c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 f935 	bl	8007b72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcc2 	bl	8007292 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006920:	e004      	b.n	800692c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fbe9 	bl	80070fc <USBD_CtlError>
              break;
 800692a:	e000      	b.n	800692e <USBD_StdEPReq+0x154>
              break;
 800692c:	bf00      	nop
          }
          break;
 800692e:	e0ab      	b.n	8006a88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d002      	beq.n	8006942 <USBD_StdEPReq+0x168>
 800693c:	2b03      	cmp	r3, #3
 800693e:	d032      	beq.n	80069a6 <USBD_StdEPReq+0x1cc>
 8006940:	e097      	b.n	8006a72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <USBD_StdEPReq+0x17e>
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b80      	cmp	r3, #128	; 0x80
 800694c:	d004      	beq.n	8006958 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fbd3 	bl	80070fc <USBD_CtlError>
                break;
 8006956:	e091      	b.n	8006a7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0b      	bge.n	8006978 <USBD_StdEPReq+0x19e>
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3310      	adds	r3, #16
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	e00b      	b.n	8006990 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2202      	movs	r2, #2
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc1d 	bl	80071de <USBD_CtlSendData>
              break;
 80069a4:	e06a      	b.n	8006a7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da11      	bge.n	80069d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3324      	adds	r3, #36	; 0x24
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d117      	bne.n	80069f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fb96 	bl	80070fc <USBD_CtlError>
                  break;
 80069d0:	e054      	b.n	8006a7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fb83 	bl	80070fc <USBD_CtlError>
                  break;
 80069f6:	e041      	b.n	8006a7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0b      	bge.n	8006a18 <USBD_StdEPReq+0x23e>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	3310      	adds	r3, #16
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	e00b      	b.n	8006a30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3304      	adds	r3, #4
 8006a30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <USBD_StdEPReq+0x264>
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d103      	bne.n	8006a46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e00e      	b.n	8006a64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f8b0 	bl	8007bb0 <USBD_LL_IsStallEP>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e002      	b.n	8006a64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2202      	movs	r2, #2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fbb7 	bl	80071de <USBD_CtlSendData>
              break;
 8006a70:	e004      	b.n	8006a7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb41 	bl	80070fc <USBD_CtlError>
              break;
 8006a7a:	bf00      	nop
          }
          break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb3b 	bl	80070fc <USBD_CtlError>
          break;
 8006a86:	bf00      	nop
      }
      break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb35 	bl	80070fc <USBD_CtlError>
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	f200 8128 	bhi.w	8006d16 <USBD_GetDescriptor+0x276>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_GetDescriptor+0x2c>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006d17 	.word	0x08006d17
 8006adc:	08006d17 	.word	0x08006d17
 8006ae0:	08006cb7 	.word	0x08006cb7
 8006ae4:	08006ce3 	.word	0x08006ce3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
      break;
 8006afe:	e112      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f107 0208 	add.w	r2, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	2202      	movs	r2, #2
 8006b20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b22:	e100      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e0f2      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	f200 80ac 	bhi.w	8006ca4 <USBD_GetDescriptor+0x204>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_GetDescriptor+0xb4>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b6d 	.word	0x08006b6d
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c3d 	.word	0x08006c3d
 8006b68:	08006c71 	.word	0x08006c71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 0108 	add.w	r1, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8e:	e091      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fab2 	bl	80070fc <USBD_CtlError>
            err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9e:	e089      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7c12      	ldrb	r2, [r2, #16]
 8006bb8:	f107 0108 	add.w	r1, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bc2:	e077      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa98 	bl	80070fc <USBD_CtlError>
            err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bd2:	e06f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf6:	e05d      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa7e 	bl	80070fc <USBD_CtlError>
            err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
          break;
 8006c06:	e055      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2a:	e043      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa64 	bl	80070fc <USBD_CtlError>
            err++;
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	3301      	adds	r3, #1
 8006c38:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3a:	e03b      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	7c12      	ldrb	r2, [r2, #16]
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5e:	e029      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa4a 	bl	80070fc <USBD_CtlError>
            err++;
 8006c68:	7afb      	ldrb	r3, [r7, #11]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6e:	e021      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7c12      	ldrb	r2, [r2, #16]
 8006c88:	f107 0108 	add.w	r1, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c92:	e00f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa30 	bl	80070fc <USBD_CtlError>
            err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca2:	e007      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa28 	bl	80070fc <USBD_CtlError>
          err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cb2:	bf00      	nop
      }
      break;
 8006cb4:	e037      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c1b      	ldrb	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	f107 0208 	add.w	r2, r7, #8
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
 8006cce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cd0:	e029      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa11 	bl	80070fc <USBD_CtlError>
        err++;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	72fb      	strb	r3, [r7, #11]
      break;
 8006ce0:	e021      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7c1b      	ldrb	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f107 0208 	add.w	r2, r7, #8
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4798      	blx	r3
 8006cfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	2207      	movs	r2, #7
 8006d02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d04:	e00f      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f9f7 	bl	80070fc <USBD_CtlError>
        err++;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	3301      	adds	r3, #1
 8006d12:	72fb      	strb	r3, [r7, #11]
      break;
 8006d14:	e007      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9ef 	bl	80070fc <USBD_CtlError>
      err++;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	3301      	adds	r3, #1
 8006d22:	72fb      	strb	r3, [r7, #11]
      break;
 8006d24:	bf00      	nop
  }

  if (err != 0U)
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11e      	bne.n	8006d6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	88db      	ldrh	r3, [r3, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d016      	beq.n	8006d62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	88da      	ldrh	r2, [r3, #6]
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf28      	it	cs
 8006d44:	4613      	movcs	r3, r2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa44 	bl	80071de <USBD_CtlSendData>
 8006d56:	e009      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9ce 	bl	80070fc <USBD_CtlError>
 8006d60:	e004      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa95 	bl	8007292 <USBD_CtlSendStatus>
 8006d68:	e000      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    return;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d131      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d12d      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	2b7f      	cmp	r3, #127	; 0x7f
 8006d94:	d829      	bhi.n	8006dea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d104      	bne.n	8006db8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9a3 	bl	80070fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db6:	e01d      	b.n	8006df4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff1f 	bl	8007c08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa61 	bl	8007292 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	e009      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	e004      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f985 	bl	80070fc <USBD_CtlError>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	4b4c      	ldr	r3, [pc, #304]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e14:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d905      	bls.n	8006e28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f96c 	bl	80070fc <USBD_CtlError>
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e088      	b.n	8006f3a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d002      	beq.n	8006e3a <USBD_SetConfig+0x3e>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d025      	beq.n	8006e84 <USBD_SetConfig+0x88>
 8006e38:	e071      	b.n	8006f1e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e3a:	4b42      	ldr	r3, [pc, #264]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01c      	beq.n	8006e7c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e42:	4b40      	ldr	r3, [pc, #256]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e4c:	4b3d      	ldr	r3, [pc, #244]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff f948 	bl	80060e8 <USBD_SetClassConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f949 	bl	80070fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e6a:	e065      	b.n	8006f38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa10 	bl	8007292 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2203      	movs	r2, #3
 8006e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e7a:	e05d      	b.n	8006f38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa08 	bl	8007292 <USBD_CtlSendStatus>
      break;
 8006e82:	e059      	b.n	8006f38 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e84:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d112      	bne.n	8006eb2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e94:	4b2b      	ldr	r3, [pc, #172]	; (8006f44 <USBD_SetConfig+0x148>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <USBD_SetConfig+0x148>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff f93b 	bl	8006120 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9f1 	bl	8007292 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eb0:	e042      	b.n	8006f38 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006eb2:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <USBD_SetConfig+0x148>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d02a      	beq.n	8006f16 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff f929 	bl	8006120 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ece:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <USBD_SetConfig+0x148>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <USBD_SetConfig+0x148>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff f902 	bl	80060e8 <USBD_SetClassConfig>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00f      	beq.n	8006f0e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f903 	bl	80070fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff f90e 	bl	8006120 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f0c:	e014      	b.n	8006f38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9bf 	bl	8007292 <USBD_CtlSendStatus>
      break;
 8006f14:	e010      	b.n	8006f38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9bb 	bl	8007292 <USBD_CtlSendStatus>
      break;
 8006f1c:	e00c      	b.n	8006f38 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8eb 	bl	80070fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <USBD_SetConfig+0x148>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff f8f7 	bl	8006120 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f32:	2303      	movs	r3, #3
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	bf00      	nop
  }

  return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	240001a0 	.word	0x240001a0

08006f48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	88db      	ldrh	r3, [r3, #6]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d004      	beq.n	8006f64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8cd 	bl	80070fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f62:	e023      	b.n	8006fac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	dc02      	bgt.n	8006f76 <USBD_GetConfig+0x2e>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dc03      	bgt.n	8006f7c <USBD_GetConfig+0x34>
 8006f74:	e015      	b.n	8006fa2 <USBD_GetConfig+0x5a>
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d00b      	beq.n	8006f92 <USBD_GetConfig+0x4a>
 8006f7a:	e012      	b.n	8006fa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3308      	adds	r3, #8
 8006f86:	2201      	movs	r2, #1
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f927 	bl	80071de <USBD_CtlSendData>
        break;
 8006f90:	e00c      	b.n	8006fac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3304      	adds	r3, #4
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f91f 	bl	80071de <USBD_CtlSendData>
        break;
 8006fa0:	e004      	b.n	8006fac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f8a9 	bl	80070fc <USBD_CtlError>
        break;
 8006faa:	bf00      	nop
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d81e      	bhi.n	800700a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	88db      	ldrh	r3, [r3, #6]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d004      	beq.n	8006fde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f890 	bl	80070fc <USBD_CtlError>
        break;
 8006fdc:	e01a      	b.n	8007014 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f043 0202 	orr.w	r2, r3, #2
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	2202      	movs	r2, #2
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8eb 	bl	80071de <USBD_CtlSendData>
      break;
 8007008:	e004      	b.n	8007014 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f875 	bl	80070fc <USBD_CtlError>
      break;
 8007012:	bf00      	nop
  }
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d106      	bne.n	800703c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f92b 	bl	8007292 <USBD_CtlSendStatus>
  }
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	b2db      	uxtb	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	2b02      	cmp	r3, #2
 800705a:	d80b      	bhi.n	8007074 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	885b      	ldrh	r3, [r3, #2]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d10c      	bne.n	800707e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f910 	bl	8007292 <USBD_CtlSendStatus>
      }
      break;
 8007072:	e004      	b.n	800707e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f840 	bl	80070fc <USBD_CtlError>
      break;
 800707c:	e000      	b.n	8007080 <USBD_ClrFeature+0x3c>
      break;
 800707e:	bf00      	nop
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fabb 	bl	800662e <SWAPBYTE>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff faae 	bl	800662e <SWAPBYTE>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff faa1 	bl	800662e <SWAPBYTE>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	80da      	strh	r2, [r3, #6]
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fd13 	bl	8007b34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800710e:	2100      	movs	r1, #0
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fd0f 	bl	8007b34 <USBD_LL_StallEP>
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b086      	sub	sp, #24
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d036      	beq.n	80071a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007138:	6938      	ldr	r0, [r7, #16]
 800713a:	f000 f836 	bl	80071aa <USBD_GetLen>
 800713e:	4603      	mov	r3, r0
 8007140:	3301      	adds	r3, #1
 8007142:	b29b      	uxth	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
  idx++;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	3301      	adds	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4413      	add	r3, r2
 8007164:	2203      	movs	r2, #3
 8007166:	701a      	strb	r2, [r3, #0]
  idx++;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	3301      	adds	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800716e:	e013      	b.n	8007198 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4413      	add	r3, r2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3301      	adds	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
    idx++;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	3301      	adds	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	4413      	add	r3, r2
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
    idx++;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	3301      	adds	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e7      	bne.n	8007170 <USBD_GetString+0x52>
 80071a0:	e000      	b.n	80071a4 <USBD_GetString+0x86>
    return;
 80071a2:	bf00      	nop
  }
}
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071ba:	e005      	b.n	80071c8 <USBD_GetLen+0x1e>
  {
    len++;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	3301      	adds	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f5      	bne.n	80071bc <USBD_GetLen+0x12>
  }

  return len;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	2100      	movs	r1, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fd1e 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fd0d 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2203      	movs	r2, #3
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	2100      	movs	r1, #0
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fd11 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	2100      	movs	r1, #0
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fd00 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072a2:	2300      	movs	r3, #0
 80072a4:	2200      	movs	r2, #0
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fccc 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2205      	movs	r2, #5
 80072c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c8:	2300      	movs	r3, #0
 80072ca:	2200      	movs	r2, #0
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fcda 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072e4:	2200      	movs	r2, #0
 80072e6:	4913      	ldr	r1, [pc, #76]	; (8007334 <MX_USB_DEVICE_Init+0x54>)
 80072e8:	4813      	ldr	r0, [pc, #76]	; (8007338 <MX_USB_DEVICE_Init+0x58>)
 80072ea:	f7fe fe8f 	bl	800600c <USBD_Init>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072f4:	f7f9 f8d8 	bl	80004a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072f8:	4910      	ldr	r1, [pc, #64]	; (800733c <MX_USB_DEVICE_Init+0x5c>)
 80072fa:	480f      	ldr	r0, [pc, #60]	; (8007338 <MX_USB_DEVICE_Init+0x58>)
 80072fc:	f7fe feb6 	bl	800606c <USBD_RegisterClass>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007306:	f7f9 f8cf 	bl	80004a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800730a:	490d      	ldr	r1, [pc, #52]	; (8007340 <MX_USB_DEVICE_Init+0x60>)
 800730c:	480a      	ldr	r0, [pc, #40]	; (8007338 <MX_USB_DEVICE_Init+0x58>)
 800730e:	f7fe fdd7 	bl	8005ec0 <USBD_CDC_RegisterInterface>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007318:	f7f9 f8c6 	bl	80004a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800731c:	4806      	ldr	r0, [pc, #24]	; (8007338 <MX_USB_DEVICE_Init+0x58>)
 800731e:	f7fe fecc 	bl	80060ba <USBD_Start>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007328:	f7f9 f8be 	bl	80004a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800732c:	f7fa ff4e 	bl	80021cc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}
 8007334:	24000134 	.word	0x24000134
 8007338:	240003c8 	.word	0x240003c8
 800733c:	2400001c 	.word	0x2400001c
 8007340:	24000120 	.word	0x24000120

08007344 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007348:	2200      	movs	r2, #0
 800734a:	4905      	ldr	r1, [pc, #20]	; (8007360 <CDC_Init_FS+0x1c>)
 800734c:	4805      	ldr	r0, [pc, #20]	; (8007364 <CDC_Init_FS+0x20>)
 800734e:	f7fe fdcc 	bl	8005eea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007352:	4905      	ldr	r1, [pc, #20]	; (8007368 <CDC_Init_FS+0x24>)
 8007354:	4803      	ldr	r0, [pc, #12]	; (8007364 <CDC_Init_FS+0x20>)
 8007356:	f7fe fde6 	bl	8005f26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800735a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	24000e98 	.word	0x24000e98
 8007364:	240003c8 	.word	0x240003c8
 8007368:	24000698 	.word	0x24000698

0800736c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007370:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007372:	4618      	mov	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
 8007388:	4613      	mov	r3, r2
 800738a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b23      	cmp	r3, #35	; 0x23
 8007390:	d84a      	bhi.n	8007428 <CDC_Control_FS+0xac>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <CDC_Control_FS+0x1c>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	08007429 	.word	0x08007429
 800739c:	08007429 	.word	0x08007429
 80073a0:	08007429 	.word	0x08007429
 80073a4:	08007429 	.word	0x08007429
 80073a8:	08007429 	.word	0x08007429
 80073ac:	08007429 	.word	0x08007429
 80073b0:	08007429 	.word	0x08007429
 80073b4:	08007429 	.word	0x08007429
 80073b8:	08007429 	.word	0x08007429
 80073bc:	08007429 	.word	0x08007429
 80073c0:	08007429 	.word	0x08007429
 80073c4:	08007429 	.word	0x08007429
 80073c8:	08007429 	.word	0x08007429
 80073cc:	08007429 	.word	0x08007429
 80073d0:	08007429 	.word	0x08007429
 80073d4:	08007429 	.word	0x08007429
 80073d8:	08007429 	.word	0x08007429
 80073dc:	08007429 	.word	0x08007429
 80073e0:	08007429 	.word	0x08007429
 80073e4:	08007429 	.word	0x08007429
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007429 	.word	0x08007429
 80073f0:	08007429 	.word	0x08007429
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007429 	.word	0x08007429
 8007400:	08007429 	.word	0x08007429
 8007404:	08007429 	.word	0x08007429
 8007408:	08007429 	.word	0x08007429
 800740c:	08007429 	.word	0x08007429
 8007410:	08007429 	.word	0x08007429
 8007414:	08007429 	.word	0x08007429
 8007418:	08007429 	.word	0x08007429
 800741c:	08007429 	.word	0x08007429
 8007420:	08007429 	.word	0x08007429
 8007424:	08007429 	.word	0x08007429
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007428:	bf00      	nop
  }

  return (USBD_OK);
 800742a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4805      	ldr	r0, [pc, #20]	; (800745c <CDC_Receive_FS+0x24>)
 8007446:	f7fe fd6e 	bl	8005f26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800744a:	4804      	ldr	r0, [pc, #16]	; (800745c <CDC_Receive_FS+0x24>)
 800744c:	f7fe fdb4 	bl	8005fb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007450:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	240003c8 	.word	0x240003c8

08007460 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007470:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <CDC_Transmit_FS+0x48>)
 8007472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007476:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007482:	2301      	movs	r3, #1
 8007484:	e00b      	b.n	800749e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007486:	887b      	ldrh	r3, [r7, #2]
 8007488:	461a      	mov	r2, r3
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4806      	ldr	r0, [pc, #24]	; (80074a8 <CDC_Transmit_FS+0x48>)
 800748e:	f7fe fd2c 	bl	8005eea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <CDC_Transmit_FS+0x48>)
 8007494:	f7fe fd60 	bl	8005f58 <USBD_CDC_TransmitPacket>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	240003c8 	.word	0x240003c8

080074ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2212      	movs	r2, #18
 80074e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074e2:	4b03      	ldr	r3, [pc, #12]	; (80074f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	24000150 	.word	0x24000150

080074f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2204      	movs	r2, #4
 8007504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007506:	4b03      	ldr	r3, [pc, #12]	; (8007514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	24000164 	.word	0x24000164

08007518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	4907      	ldr	r1, [pc, #28]	; (800754c <USBD_FS_ProductStrDescriptor+0x34>)
 800752e:	4808      	ldr	r0, [pc, #32]	; (8007550 <USBD_FS_ProductStrDescriptor+0x38>)
 8007530:	f7ff fdf5 	bl	800711e <USBD_GetString>
 8007534:	e004      	b.n	8007540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	4904      	ldr	r1, [pc, #16]	; (800754c <USBD_FS_ProductStrDescriptor+0x34>)
 800753a:	4805      	ldr	r0, [pc, #20]	; (8007550 <USBD_FS_ProductStrDescriptor+0x38>)
 800753c:	f7ff fdef 	bl	800711e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007540:	4b02      	ldr	r3, [pc, #8]	; (800754c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	24001698 	.word	0x24001698
 8007550:	08007e00 	.word	0x08007e00

08007554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	4904      	ldr	r1, [pc, #16]	; (8007574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007564:	4804      	ldr	r0, [pc, #16]	; (8007578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007566:	f7ff fdda 	bl	800711e <USBD_GetString>
  return USBD_StrDesc;
 800756a:	4b02      	ldr	r3, [pc, #8]	; (8007574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	24001698 	.word	0x24001698
 8007578:	08007e18 	.word	0x08007e18

0800757c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	221a      	movs	r2, #26
 800758c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800758e:	f000 f843 	bl	8007618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007592:	4b02      	ldr	r3, [pc, #8]	; (800759c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	24000168 	.word	0x24000168

080075a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4907      	ldr	r1, [pc, #28]	; (80075d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075b6:	4808      	ldr	r0, [pc, #32]	; (80075d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075b8:	f7ff fdb1 	bl	800711e <USBD_GetString>
 80075bc:	e004      	b.n	80075c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	4904      	ldr	r1, [pc, #16]	; (80075d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075c4:	f7ff fdab 	bl	800711e <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	24001698 	.word	0x24001698
 80075d8:	08007e2c 	.word	0x08007e2c

080075dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4907      	ldr	r1, [pc, #28]	; (8007610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075f2:	4808      	ldr	r0, [pc, #32]	; (8007614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075f4:	f7ff fd93 	bl	800711e <USBD_GetString>
 80075f8:	e004      	b.n	8007604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4904      	ldr	r1, [pc, #16]	; (8007610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075fe:	4805      	ldr	r0, [pc, #20]	; (8007614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007600:	f7ff fd8d 	bl	800711e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	24001698 	.word	0x24001698
 8007614:	08007e38 	.word	0x08007e38

08007618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <Get_SerialNum+0x44>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007624:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <Get_SerialNum+0x48>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800762a:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <Get_SerialNum+0x4c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800763e:	2208      	movs	r2, #8
 8007640:	4909      	ldr	r1, [pc, #36]	; (8007668 <Get_SerialNum+0x50>)
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f814 	bl	8007670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007648:	2204      	movs	r2, #4
 800764a:	4908      	ldr	r1, [pc, #32]	; (800766c <Get_SerialNum+0x54>)
 800764c:	68b8      	ldr	r0, [r7, #8]
 800764e:	f000 f80f 	bl	8007670 <IntToUnicode>
  }
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	1ff1e800 	.word	0x1ff1e800
 8007660:	1ff1e804 	.word	0x1ff1e804
 8007664:	1ff1e808 	.word	0x1ff1e808
 8007668:	2400016a 	.word	0x2400016a
 800766c:	2400017a 	.word	0x2400017a

08007670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]
 8007686:	e027      	b.n	80076d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	0f1b      	lsrs	r3, r3, #28
 800768c:	2b09      	cmp	r3, #9
 800768e:	d80b      	bhi.n	80076a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	b2da      	uxtb	r2, r3
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	4619      	mov	r1, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	440b      	add	r3, r1
 80076a0:	3230      	adds	r2, #48	; 0x30
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]
 80076a6:	e00a      	b.n	80076be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0f1b      	lsrs	r3, r3, #28
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4619      	mov	r1, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	440b      	add	r3, r1
 80076b8:	3237      	adds	r2, #55	; 0x37
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	3301      	adds	r3, #1
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	3301      	adds	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
 80076d8:	7dfa      	ldrb	r2, [r7, #23]
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3d3      	bcc.n	8007688 <IntToUnicode+0x18>
  }
}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b0b8      	sub	sp, #224	; 0xe0
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	60da      	str	r2, [r3, #12]
 8007706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007708:	f107 0310 	add.w	r3, r7, #16
 800770c:	22bc      	movs	r2, #188	; 0xbc
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fb55 	bl	8007dc0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a32      	ldr	r2, [pc, #200]	; (80077e4 <HAL_PCD_MspInit+0xf4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d15c      	bne.n	80077da <HAL_PCD_MspInit+0xea>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007720:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007724:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8007726:	230a      	movs	r3, #10
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 170;
 800772a:	23aa      	movs	r3, #170	; 0xaa
 800772c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800772e:	2302      	movs	r3, #2
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8007732:	2304      	movs	r3, #4
 8007734:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007736:	2302      	movs	r3, #2
 8007738:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800773a:	2300      	movs	r3, #0
 800773c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8007742:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800774a:	f107 0310 	add.w	r3, r7, #16
 800774e:	4618      	mov	r0, r3
 8007750:	f7fb fce8 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800775a:	f7f8 fea5 	bl	80004a8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800775e:	f7fa fd35 	bl	80021cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007762:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 8007764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007768:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 8007774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007788:	2302      	movs	r3, #2
 800778a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778e:	2300      	movs	r3, #0
 8007790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007794:	2300      	movs	r3, #0
 8007796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800779a:	230a      	movs	r3, #10
 800779c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80077a4:	4619      	mov	r1, r3
 80077a6:	4811      	ldr	r0, [pc, #68]	; (80077ec <HAL_PCD_MspInit+0xfc>)
 80077a8:	f7f9 f956 	bl	8000a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 80077ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077b2:	4a0d      	ldr	r2, [pc, #52]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 80077b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <HAL_PCD_MspInit+0xf8>)
 80077be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	2065      	movs	r0, #101	; 0x65
 80077d0:	f7f9 f90d 	bl	80009ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d4:	2065      	movs	r0, #101	; 0x65
 80077d6:	f7f9 f924 	bl	8000a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077da:	bf00      	nop
 80077dc:	37e0      	adds	r7, #224	; 0xe0
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40080000 	.word	0x40080000
 80077e8:	58024400 	.word	0x58024400
 80077ec:	58020000 	.word	0x58020000

080077f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe fca2 	bl	8006150 <USBD_LL_SetupStage>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	4619      	mov	r1, r3
 800783e:	f7fe fcdc 	bl	80061fa <USBD_LL_DataOutStage>
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	3348      	adds	r3, #72	; 0x48
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	4619      	mov	r1, r3
 8007872:	f7fe fd25 	bl	80062c0 <USBD_LL_DataInStage>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fe39 	bl	8006504 <USBD_LL_SOF>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
 80078b2:	e008      	b.n	80078c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d102      	bne.n	80078c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e001      	b.n	80078c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078c2:	f7f8 fdf1 	bl	80004a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078cc:	7bfa      	ldrb	r2, [r7, #15]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fdd9 	bl	8006488 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fd85 	bl	80063ec <USBD_LL_Reset>
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fdd4 	bl	80064a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <HAL_PCD_SuspendCallback+0x48>)
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	4a03      	ldr	r2, [pc, #12]	; (8007934 <HAL_PCD_SuspendCallback+0x48>)
 8007926:	f043 0306 	orr.w	r3, r3, #6
 800792a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	e000ed00 	.word	0xe000ed00

08007938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fdc4 	bl	80064d4 <USBD_LL_Resume>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fe12 	bl	8006594 <USBD_LL_IsoOUTIncomplete>
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fdda 	bl	8006548 <USBD_LL_IsoINIncomplete>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fe18 	bl	80065e0 <USBD_LL_DevConnected>
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fe15 	bl	80065f6 <USBD_LL_DevDisconnected>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d13e      	bne.n	8007a62 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079e4:	4a21      	ldr	r2, [pc, #132]	; (8007a6c <USBD_LL_Init+0x98>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <USBD_LL_Init+0x98>)
 80079f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079f4:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <USBD_LL_Init+0x98>)
 80079f6:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <USBD_LL_Init+0x9c>)
 80079f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80079fa:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <USBD_LL_Init+0x98>)
 80079fc:	2209      	movs	r2, #9
 80079fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a02:	2202      	movs	r2, #2
 8007a04:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a0c:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a0e:	2202      	movs	r2, #2
 8007a10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a12:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a38:	f7f9 f9be 	bl	8000db8 <HAL_PCD_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8007a42:	f7f8 fd31 	bl	80004a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a4a:	f7fa fb44 	bl	80020d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	2100      	movs	r1, #0
 8007a52:	4806      	ldr	r0, [pc, #24]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a54:	f7fa faf8 	bl	8002048 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a58:	2280      	movs	r2, #128	; 0x80
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <USBD_LL_Init+0x98>)
 8007a5e:	f7fa faf3 	bl	8002048 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	24001898 	.word	0x24001898
 8007a70:	40080000 	.word	0x40080000

08007a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f9 fab8 	bl	8001000 <HAL_PCD_Start>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f942 	bl	8007d20 <USBD_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	70fb      	strb	r3, [r7, #3]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70bb      	strb	r3, [r7, #2]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ad2:	78bb      	ldrb	r3, [r7, #2]
 8007ad4:	883a      	ldrh	r2, [r7, #0]
 8007ad6:	78f9      	ldrb	r1, [r7, #3]
 8007ad8:	f7f9 febd 	bl	8001856 <HAL_PCD_EP_Open>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f91c 	bl	8007d20 <USBD_Get_USB_Status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7f9 ff06 	bl	8001926 <HAL_PCD_EP_Close>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f8fd 	bl	8007d20 <USBD_Get_USB_Status>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 ffde 	bl	8001b14 <HAL_PCD_EP_SetStall>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f8de 	bl	8007d20 <USBD_Get_USB_Status>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fa f823 	bl	8001bdc <HAL_PCD_EP_ClrStall>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f8bf 	bl	8007d20 <USBD_Get_USB_Status>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da0b      	bge.n	8007be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	333e      	adds	r3, #62	; 0x3e
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	e00b      	b.n	8007bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f9 fdf0 	bl	800180c <HAL_PCD_SetAddress>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 f874 	bl	8007d20 <USBD_Get_USB_Status>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	460b      	mov	r3, r1
 8007c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c64:	7af9      	ldrb	r1, [r7, #11]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	f7f9 ff09 	bl	8001a80 <HAL_PCD_EP_Transmit>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f853 	bl	8007d20 <USBD_Get_USB_Status>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	460b      	mov	r3, r1
 8007c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ca6:	7af9      	ldrb	r1, [r7, #11]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f7f9 fe85 	bl	80019ba <HAL_PCD_EP_Receive>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f832 	bl	8007d20 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7f9 feb5 	bl	8001a50 <HAL_PCD_EP_GetRxCount>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <USBD_static_malloc+0x18>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	240001a4 	.word	0x240001a4

08007d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d817      	bhi.n	8007d64 <USBD_Get_USB_Status+0x44>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBD_Get_USB_Status+0x1c>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d53 	.word	0x08007d53
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d5f 	.word	0x08007d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	e00b      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	73fb      	strb	r3, [r7, #15]
    break;
 8007d56:	e008      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e005      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	73fb      	strb	r3, [r7, #15]
    break;
 8007d62:	e002      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
    break;
 8007d68:	bf00      	nop
  }
  return usb_status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <__libc_init_array>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	4d0d      	ldr	r5, [pc, #52]	; (8007db0 <__libc_init_array+0x38>)
 8007d7c:	4c0d      	ldr	r4, [pc, #52]	; (8007db4 <__libc_init_array+0x3c>)
 8007d7e:	1b64      	subs	r4, r4, r5
 8007d80:	10a4      	asrs	r4, r4, #2
 8007d82:	2600      	movs	r6, #0
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	d109      	bne.n	8007d9c <__libc_init_array+0x24>
 8007d88:	4d0b      	ldr	r5, [pc, #44]	; (8007db8 <__libc_init_array+0x40>)
 8007d8a:	4c0c      	ldr	r4, [pc, #48]	; (8007dbc <__libc_init_array+0x44>)
 8007d8c:	f000 f820 	bl	8007dd0 <_init>
 8007d90:	1b64      	subs	r4, r4, r5
 8007d92:	10a4      	asrs	r4, r4, #2
 8007d94:	2600      	movs	r6, #0
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	d105      	bne.n	8007da6 <__libc_init_array+0x2e>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da0:	4798      	blx	r3
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7ee      	b.n	8007d84 <__libc_init_array+0xc>
 8007da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007daa:	4798      	blx	r3
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f2      	b.n	8007d96 <__libc_init_array+0x1e>
 8007db0:	08007e58 	.word	0x08007e58
 8007db4:	08007e58 	.word	0x08007e58
 8007db8:	08007e58 	.word	0x08007e58
 8007dbc:	08007e5c 	.word	0x08007e5c

08007dc0 <memset>:
 8007dc0:	4402      	add	r2, r0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d100      	bne.n	8007dca <memset+0xa>
 8007dc8:	4770      	bx	lr
 8007dca:	f803 1b01 	strb.w	r1, [r3], #1
 8007dce:	e7f9      	b.n	8007dc4 <memset+0x4>

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
